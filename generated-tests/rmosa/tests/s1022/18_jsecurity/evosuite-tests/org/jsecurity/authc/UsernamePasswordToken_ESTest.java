/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 15:18:06 GMT 2018
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'A';
      charArray0[1] = ']';
      charArray0[2] = '`';
      charArray0[3] = 'c';
      charArray0[4] = 'y';
      charArray0[5] = '9';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("L6_0Z1)^(|j$i$gkN", "L6_0Z1)^(|j$i$gkN", true);
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.getUsername();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = true;
      InetAddress inetAddress0 = MockInetAddress.getByName("=K^2");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("*F3^/inpXo0K~yvS))!", "*F3^/inpXo0K~yvS))!", true, inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getInetAddress();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [0, 0, 4]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "0@&|@k1", true);
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.getPassword();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "GMj0eb;]lecWp", true);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getPrincipal();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)0;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [0, 1, 86, 27, 1, 0]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("_R]T<#2)", "_R]T<#2)", inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - _R]T<#2), rememberMe=false (/192.168.1.42)", string0);
      
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setUsername("");
      char[] charArray0 = new char[5];
      charArray0[0] = '.';
      charArray0[1] = 'q';
      charArray0[2] = 'W';
      charArray0[3] = '/';
      charArray0[4] = '{';
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = null;
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      boolean boolean0 = false;
      char[] charArray0 = new char[8];
      usernamePasswordToken0.setPassword(charArray0);
      charArray0[0] = 'n';
      usernamePasswordToken0.setPassword(charArray0);
      charArray0[1] = '!';
      char char0 = 'j';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)0;
      try { 
        MockInetAddress.getByAddress("", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-102, 0]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "8X^7LbuAlt\"XP");
      usernamePasswordToken0.setRememberMe(true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'm';
      charArray0[2] = 'Z';
      charArray0[3] = 'P';
      charArray0[4] = '$';
      charArray0[5] = 'm';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.setUsername("8X^7LbuAlt\"XP");
      usernamePasswordToken0.setUsername((String) null);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.setUsername("j%(6");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-23);
      byteArray0[8] = (byte) (-1);
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [1, -33, 0, 0, 39, 1, -1, -23, -1]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'v';
      charArray0[2] = 'm';
      charArray0[3] = 'j';
      charArray0[4] = '5';
      charArray0[5] = 'o';
      charArray0[6] = '0';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false, inetAddress0);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.isRememberMe();
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "(@AKd<+gI#";
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("(@AKd<+gI#", (String) null, false);
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '\'';
      usernamePasswordToken0.toString();
      charArray0[2] = 'c';
      charArray0[3] = 'f';
      usernamePasswordToken0.setPassword(charArray0);
      charArray0[4] = '$';
      charArray0[5] = '0';
      charArray0[6] = 'r';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.clear();
      byte[] byteArray0 = new byte[0];
      usernamePasswordToken0.setUsername("(@AKd<+gI#");
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: []
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("g%T=%Ts)a2H;Fk");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("g%T=%Ts)a2H;Fk", "", inetAddress0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '*';
      usernamePasswordToken0.clear();
      charArray0[2] = '0';
      charArray0[3] = '=';
      charArray0[4] = '|';
      charArray0[5] = 'X';
      charArray0[6] = '&';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setRememberMe(true);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("5B-JoVR[V`wcf}|FL", (char[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)91;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte)1;
      try { 
        MockInetAddress.getByAddress("5B-JoVR[V`wcf}|FL", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [0, 0, 28, 91, -74, 1]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = '0';
      charArray0[2] = '/';
      charArray0[3] = 'O';
      charArray0[4] = 'x';
      charArray0[5] = 'M';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("%H`_", charArray0, inetAddress0);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setUsername("K}mt]jE6//HLWR2- ");
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
