/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 15:23:05 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject.quote("lF\n");
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote("zFjG2\"aW;/");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("\"zFjG2\"a\\W;/\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"zFjG2\\\"a\\\\W;/\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      try { 
        jSONObject0.put((String) null, (Object) boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.551888093566232
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JSONArray[", (Map) null);
      jSONObject0.optInt("[", (-4487));
      try { 
        jSONObject0.getJSONArray("I.>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"I.>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = JSONObject.quote("]\n");
      assertEquals("\"]\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(25, (-1763));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.575390560312862
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optInt("\n");
      Integer integer0 = new Integer(15);
      jSONObject0.append("\n", integer0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONObject.quote(")F[2 aip<;/");
      Double double0 = new Double(0.0);
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject.quote("]]\n");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("\"]]\n\"", (Map) null);
      jSONObject0.toString(1, 13);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.301273572363032
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JSONObject.quote("zF[2 apW;/");
      assertEquals("\"zF[2 apW;/\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "zF[2 apW;/");
      jSONObject0.toString(29, 88);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0, 13, 13);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JSONObject.quote("zFjG2\"aW;/");
      assertEquals("\"zFjG2\\\"aW;/\"", string0);
      
      String string1 = JSONObject.valueToString("zFjG2\"aW;/", 114, 114);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5140966973399506
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject.quote("zFjG2\"aW;/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("for");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of for
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject.quote("zF[2 apW;/");
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONException");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONException
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.quote("wpk<)_hy{z");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("' and instead saw '", 3349.555676);
      jSONObject0.optJSONObject("J");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6869338270191137
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      Double double1 = new Double(0.0F);
      Double.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(double1);
      jSONObject0.put("] not found.", (double) 0.0F);
      try { 
        jSONObject0.getBoolean("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("] is not a JSONArray.", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long((-2951L));
      String[] stringArray0 = new String[4];
      stringArray0[1] = "xk&AuY";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      boolean boolean0 = jSONObject0.has(stringArray0[3]);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = JSONObject.quote("r|^/dW cirTmmlp!");
      assertEquals("\"r|^/dW cirTmmlp!\"", string0);
      
      String string1 = JSONObject.doubleToString(1861.70933446);
      assertEquals("1861.70933446", string1);
      
      Object object0 = JSONObject.NULL;
      String string2 = JSONObject.valueToString(object0);
      assertEquals("null", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JSONObject.quote("wpk<)_y{z");
      assertEquals("\"wpk<)_y{z\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("wpk<)_y{z");
      assertFalse(boolean0);
      
      String string1 = jSONObject0.toString((-703), (-703));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject.quote("d>l,\n");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"d>l,\n\"";
      stringArray0[1] = "d>l,\n";
      stringArray0[2] = "d>l,\n";
      stringArray0[3] = "\"d>l,\n\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Byte byte0 = new Byte((byte)39);
      Byte.toUnsignedInt((byte)59);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optString("a2H;Fk;)R703/.", "] is not a JSONArray.");
      Byte.compare((byte)97, (byte)39);
      jSONObject0.isNull("] is not a JSONArray.");
      String string0 = JSONObject.quote(stringArray0[0]);
      JSONObject.quote("");
      JSONObject.doubleToString((byte)97);
      JSONObject.valueToString("\"\"", (byte)97, (byte) (-126));
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = JSONObject.quote("wpk<)_hy{z");
      assertEquals("\"wpk<)_hy{z\"", string0);
      
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("wpk<)_hy{z", 1340L);
      assertEquals(1340L, long0);
      
      jSONObject0.optJSONObject("J");
      String string1 = JSONObject.doubleToString(1340L);
      assertEquals("1340", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = JSONObject.quote("wfk)Ky{z");
      assertEquals("\"wfk)Ky{z\"", string0);
      
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"wfk)Ky{\\z\"";
      stringArray0[1] = "\"wfk)Ky{\\z\"";
      stringArray0[2] = "\"wfk)Ky{\\z\"";
      stringArray0[3] = "wfk)Ky{z";
      stringArray0[4] = "\"wfk)Ky{\\z\"";
      stringArray0[5] = "\"wfk)Ky{\\z\"";
      stringArray0[6] = "\"wfk)Ky{\\z\"";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      long long0 = jSONObject0.optLong("\"wfk)Ky{\\z\"");
      assertEquals(0L, long0);
      
      String string1 = jSONObject0.toString(4, (-1023));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(130);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Z4 ");
      assertEquals("", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "{.");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = JSONObject.quote(")F[2 aipW;/");
      Long long0 = new Long((-3168L));
      Long long1 = Long.getLong("", long0);
      String string1 = JSONObject.valueToString(long1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = JSONObject.quote("+l1\n");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("]\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = JSONObject.quote("zF[G2\"apW;/");
      assertEquals("\"zF[G2\\\"apW;/\"", string0);
      
      String string1 = JSONObject.valueToString("\"zF[G2\"a\\pW;/\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("is", hashMap0);
      Float float0 = new Float((float) 1560);
      boolean boolean0 = Double.isFinite(1560);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      Long long0 = new Long((-1884L));
      hashMap0.put(long0, jSONArray0);
      Short short0 = new Short((short)92);
      Long long1 = new Long(0L);
      hashMap0.put(long1, jSONArray0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "II.1rt{#||.wqPZg");
      jSONObject0.toString();
      jSONObject0.toString(0, 0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject.quote("wpk<)_hy{z");
      JSONObject jSONObject0 = new JSONObject((Object) "wpk<)_hy{z");
      jSONObject0.append("wpk<)_hy{z", "wpk<)_hy{z");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-355), (-355));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-4201.287F));
      assertEquals("-4201.287109375", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      Double double1 = new Double(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      Float float1 = new Float((double) (-1.0F));
      Float.sum((-1.0F), (-1.0F));
      jSONObject0.accumulate("'", float1);
      jSONObject0.accumulate("'", float1);
      JSONObject.testValidity(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "] is not a JSONArray.";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("] is not a JSONArray.", stringArray0);
      jSONObject0.put("] is not a JSONArray.", (Object) null);
      try { 
        jSONObject0.getJSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject.quote("a;$GAx");
      JSONTokener jSONTokener0 = new JSONTokener("{X A<?nV?5aj=+=>+");
      jSONTokener0.skipTo('$');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 15 of {X A<?nV?5aj=+=>+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9088496775833377
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("\n", true);
      jSONObject0.keys();
      jSONObject0.toString();
      Integer.remainderUnsigned(3, 125);
      StringWriter stringWriter0 = new StringWriter(53);
      jSONObject0.write(stringWriter0);
      jSONObject1.optJSONArray("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003}");
      jSONObject0.optJSONArray("5rM3hG");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.021715010316706
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 1560;
      int int1 = 39;
      hashMap0.clone();
      jSONObject0.toString(1560, 39);
      JSONObject jSONObject1 = jSONObject0.putOpt(";.:'QB`*fz", hashMap0);
      Float float0 = new Float((float) 1560);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("{}", (Collection) linkedList0);
      Integer integer0 = new Integer(1560);
      Predicate.isEqual((Object) integer0);
      try { 
        jSONObject1.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6443416151367973
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Float float0 = new Float(1.0974181F);
      Double double0 = new Double(1.0974181F);
      Double double1 = new Double(1.0974181F);
      Double.isFinite(1.0974181F);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "V=s'/Z0>6t:";
      JSONObject jSONObject1 = jSONObject0.accumulate("V=s'/Z0>6t:", "V=s'/Z0>6t:");
      try { 
        jSONObject1.getInt("V=s'/Z0>6t:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V=s'/Z0>6t:\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = JSONObject.quote("d:l,\n");
      assertEquals("\"d:l,\\n\"", string0);
      
      String string1 = JSONObject.doubleToString(3617.76);
      assertEquals("3617.76", string1);
      
      Object object0 = JSONObject.NULL;
      String string2 = JSONObject.valueToString(object0, (-1493), (-1493));
      assertEquals("null", string2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = JSONObject.quote("lF\n");
      assertEquals("\"lF\\n\"", string0);
      
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0, (-3840), (-3840));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = 2516;
      jSONObject0.optDouble("bn@&N>", (double) 10);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 10, 2516);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject.quote("wpk<)_hy{z");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\"wpk<)_hy{\\z\"", 496);
      jSONObject0.optJSONObject("J");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.toJSONArray(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject.quote("wpk<)_hy{z");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("J");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7605130469380341
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      Short short0 = new Short((short)92);
      linkedList0.addFirst(short0);
      Long long0 = new Long(0L);
      hashMap0.put(long0, jSONArray0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject0.put(" C_[81{_jQ/urL`", (Collection) linkedList1);
      jSONObject0.toString(39, 39);
      jSONObject0.toString(39, (-744));
      try { 
        Long.valueOf(" C_[81{_jQ/urL`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" C_[81{_jQ/urL`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Double double0 = new Double(0.0F);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.removeLastOccurrence(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.putOpt((String) null, jSONArray1);
      String string0 = "[]";
      try { 
        Integer.decode("[]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3900037420583047
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject.quote("zFjG2\"aW;/");
      JSONObject jSONObject0 = new JSONObject((Object) "\"zFjG2\"a\\W;/\"");
      double double0 = jSONObject0.optDouble("\"zFjG2\"a\\W;/\"");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("zFjG2\"aW;/");
      assertEquals("\"zFjG2\\\"aW;/\"", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("5rM3hG");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Float float0 = new Float((-327.5252F));
      StringWriter stringWriter0 = new StringWriter(4249);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{}", (double) 3740);
      assertEquals(1, jSONObject0.length());
      
      long long0 = jSONObject1.getLong("{}");
      assertEquals(3740L, long0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8065071652616693
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Float float0 = new Float(0.0F);
      Float.min((-4201.287F), (-274.56128F));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("B7?2Pdng", 3310.97139);
      jSONObject1.optDouble("B7?2Pdng", 0.0);
      Float.min((-3152.5466F), 0.0F);
      Long long0 = new Long(1803L);
      Object object0 = new Object();
      try { 
        jSONObject0.append("B7?2Pdng", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[B7?2Pdng] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("J3kb", true);
      jSONObject0.keys();
      String string0 = JSONObject.quote("J3kb");
      assertEquals("\"J3kb\"", string0);
      
      JSONObject jSONObject2 = new JSONObject((Object) "J3kb");
      assertEquals(3, jSONObject2.length());
      
      jSONObject1.optString("J3kb");
      String string1 = JSONObject.valueToString("J3kb");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(2498.930091658);
      jSONObject0.put("N6", (Object) float0);
      JSONObject.getNames(jSONObject0);
      Short short0 = new Short((short)377);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7793778057291478
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("B7?2Pdng", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (double) (byte)39);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject2);
      Long long0 = new Long((byte)39);
      try { 
        jSONObject1.getJSONArray("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{}", (-4341.470228365656));
      jSONObject0.getDouble("{}");
      JSONObject jSONObject1 = jSONObject0.append("cs", "{}");
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject.getNames((Object) null);
      String string0 = null;
      int int0 = (-1408);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int1 = 1901;
      // Undeclared exception!
      try { 
        linkedList0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Float float0 = new Float(0.0F);
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(object0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("] is not a JSONArray.", stringArray0);
      jSONObject0.put("] is not a JSONArray.", (Object) jSONObject0);
      jSONObject0.getJSONObject("] is not a JSONArray.");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Double double0 = new Double(0.0F);
      Double double1 = new Double(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("'", (double) (-1.0F));
      Float float0 = new Float((double) (-1.0F));
      Float.sum((-1.0F), (-1.0F));
      jSONObject1.accumulate("'", float0);
      jSONObject0.accumulate("'", float0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("iscompare", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONObject.quote("\n");
      try { 
        Short.valueOf("iscompare");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"iscompare\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Double.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (double) 0.0F);
      jSONObject1.optInt("] not found.", 44);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Short short0 = new Short((short) (-1870));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString();
      JSONObject.doubleToString(1);
      Long long0 = new Long(2);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("ulYL@ sy_", object0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("ulYL@ sy_");
      JSONTokener jSONTokener0 = new JSONTokener("ulYL@ sy_");
      JSONObject.testValidity(jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{-vV<:Nod5Z");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {-vV<:Nod5Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{L-vV=<S;A5Z");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of {L-vV=<S;A5Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{-vg=od&5Z");
      jSONTokener0.nextTo("{-vg=od&5Z");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {-vg=od&5Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0282757957692676
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      Double.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(double0);
      Float.sum(0.0F, (-456.30988F));
      jSONObject0.toString((-12473307), (-12473307));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      String string0 = JSONObject.quote("getintValue");
      String string1 = JSONObject.valueToString(float0, (-1408), (-1408));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.quote((String) null);
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"");
      String string0 = jSONObject0.toString(16, 16);
      Float float0 = new Float((float) 16);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.965194182591483
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.clone();
      String string0 = jSONObject0.toString(1560, 39);
      assertEquals("{}", string0);
      
      JSONObject jSONObject1 = jSONObject0.putOpt(";.:'QB`*fz", hashMap0);
      Float float0 = new Float((float) 1560);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject2 = jSONObject0.put("{}", (Collection) linkedList0);
      jSONObject2.getJSONArray("{}");
      Integer integer0 = new Integer(1560);
      Predicate.isEqual((Object) integer0);
      String string1 = JSONObject.valueToString(jSONObject1, (-18627781), 1560);
      String string2 = jSONObject1.toString(1560, 2490);
      String string3 = jSONObject0.toString((-805), (-4463));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = jSONObject1.toString(39, 87);
      assertFalse(string4.equals((Object)string2));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      Long long0 = new Long(0L);
      hashMap0.put(long0, jSONArray0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(" C_[81{_jQ/urL`", (Collection) linkedList1);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.append(" C_[81{_jQ/urL`", object0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-12473322));
      assertEquals("-1.2473322E7", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Predicate<Byte> predicate0 = Predicate.isEqual(object0);
      Byte byte0 = new Byte((byte)91);
      predicate0.test(byte0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      String string0 = "XK^'UZNh:PPi [LE";
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7549937916237854
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      Double double1 = new Double(0.0F);
      Double.min(0.0, 0.0F);
      Double.isFinite(0.0F);
      Double.max(1283.089644807, 143.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (double) 0.0F);
      jSONObject1.put("] not found.", true);
      boolean boolean0 = jSONObject0.getBoolean("] not found.");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Double double0 = new Double(0.0F);
      Double double1 = new Double(0.0F);
      Double.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("a ot founL.", (double) 0.0F);
      jSONObject1.put("a ot founL.", false);
      boolean boolean0 = jSONObject0.getBoolean("a ot founL.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("iscompare", (Map) hashMap0);
      JSONObject.quote("\n");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("iscompare");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7978354151610616
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Double double0 = new Double(1.0974181F);
      Double double1 = new Double(1.0974181F);
      Double.isFinite(1.0974181F);
      JSONObject jSONObject0 = new JSONObject();
      Double.min(1.0974181F, 1.0974181F);
      jSONObject0.optInt("A JSONObject text must end with '}'");
      jSONObject0.accumulate("V=s'/Z0>6t:", "V=s'/Z0>6t:");
      JSONObject.valueToString(jSONObject0);
      try { 
        jSONObject0.getBoolean("V=s'/Z0>6t:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"V=s'/Z0>6t:\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String string0 = JSONObject.quote("BSIo.m1Gi[4</sU(]");
      assertEquals("\"BSIo.m1Gi[4<\\/sU(]\"", string0);
  }
}
