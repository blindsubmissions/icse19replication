/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 15:42:00 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.engine.Session;
import org.h2.jdbc.JdbcClob;
import org.h2.jdbc.JdbcConnection;
import org.h2.tools.Csv;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueTimestamp;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("execute");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertFalse(simpleResultSet0.isClosed());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.normalize("m+6<Wj]#^~,M(az,", false);
      assertEquals("m + 6 < Wj ] # ^ ~, M (az,", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|`MI\"Wu/0jGVaV@x{", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("T=%Ts)a2H");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T=%Ts)a2H", dBSchema0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "T=%Ts)a2H", false, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      Session session0 = new Session();
      JdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new JdbcConnection(session0, "CONSTRAINT T=%Ts)a2H ", "CONSTRAINT T=%Ts)a2H ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.engine.Session", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.777209681786442
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SQLUtil.normalize(".1|y0<w>}4tl", true);
      assertEquals(".1 | y0 < w > } 4tl", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(".1 | y0 < w > } 4tl", true, ".1|y0<w>}4tl", "split ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \".1 | y0 < w > } 4tl\" CHECK split ", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "Id2Q(jamOc49Eux2";
      stringArray0[4] = "Id2Q(jamOc49Eux2";
      stringArray0[2] = "Id2Q(jamOc49Eux2";
      stringArray0[4] = "Id2Q(jamOc49Eux2";
      String string0 = SQLUtil.innerJoin("Id2Q(jamOc49Eux2", stringArray0, stringArray0[3], "Id2Q(jamOc49Eux2", stringArray0);
      assertEquals("null as Id2Q(jamOc49Eux2 on Id2Q(jamOc49Eux2.null = Id2Q(jamOc49Eux2.null and Id2Q(jamOc49Eux2.null = Id2Q(jamOc49Eux2.null and Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 = Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 and Id2Q(jamOc49Eux2.null = Id2Q(jamOc49Eux2.null and Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 = Id2Q(jamOc49Eux2.Id2Q(jamOc49Eux2 and Id2Q(jamOc49Eux2.null = Id2Q(jamOc49Eux2.null", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ugnv0<B");
      DataStore dataStore0 = new DataStore("ugnv0<B");
      VirtualFile virtualFile0 = new VirtualFile("Routine Privilege on ", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      mockPrintWriter0.append('Y');
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      String string0 = SQLUtil.normalize("9!8%BsU8p{x&>Mt", true);
      assertEquals("9 ! 8 % BsU8p { x & > Mt ", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("9 ! 8 % BsU8p { x & > Mt ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.isDML("alter session");
      DBCatalog dBCatalog0 = new DBCatalog("alter session");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("alter session");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.2987580581893401
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog("~omS.2?");
      SQLUtil.normalize("B#-;jq2jYD%.:v7L|", true);
      SQLUtil.isQuery("B#-;jq2jYD%.:v7L|");
      SQLUtil.normalize("", false);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("CN$+qPbL9 !", true, "~omS.2?", "B # - ; jq2jYD  %.: v  7L |");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7031315809655685
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop materialized view", true);
      assertEquals("drop materialized view", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9735584326028659
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = dataDictionaryImpl0.dataDescriptorGenerator;
      SQLUtil.normalize("M9.({G>$D&i_c", true);
      String string0 = SQLUtil.normalize("M9.({G>$D&i_c", true);
      assertEquals("M9.({ G > $ D & i_c", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update[ %{szqja$s46p_h&=");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.normalize("+-<JT>", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("+ - < JT >");
      assertNull(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[0] = "5DhmjWORSfIvCrJ";
      SQLUtil.join("@_?>$-L'6;E>C?U", "5DhmjWORSfIvCrJ", stringArray0, "_|3(S4N1}H", "5DhmjWORSfIvCrJ", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("alter materialized view");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Object[] objectArray0 = new Object[9];
      objectArray0[4] = (Object) null;
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("'W", "'W", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("'W", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("'W", dBCatalog0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DBPackage dBPackage0 = new DBPackage("'W", dBSchema0);
      SQLUtil.ownerDotComponent(dBPackage0);
      Vector<VersionNumberComponent> vector0 = new Vector<VersionNumberComponent>();
      assertEquals(10, vector0.capacity());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("+-<JT>", true);
      assertEquals("+ - < JT >", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      Csv.getInstance();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.substituteMarkers("java.lang.Object@9628ee6", "java.lang.Object@9628ee6", object0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      String string0 = "org.apache.derby.impl.store.raw.xact.BeginXact";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("java.lang.Object@9628ee6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K2nkJ:'xnF<OVem[";
      stringArray0[1] = "K2nkJ:'xnF<OVem[";
      String string0 = SQLUtil.renderColumnListWithTableName("K2nkJ:'xnF<OVem[", stringArray0);
      assertEquals("K2nkJ:'xnF<OVem[.K2nkJ:'xnF<OVem[, K2nkJ:'xnF<OVem[.K2nkJ:'xnF<OVem[", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      StringBuilder stringBuilder0 = new StringBuilder("select");
      SQLUtil.addRequiredCondition("se;ect", stringBuilder0);
      assertEquals("select and se;ect", stringBuilder0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.7772096817864421
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.normalize("create unique indexs+^~u>eybie}2,$gdt", false);
      assertEquals("create unique indexs + ^ ~ u > eybie } 2, $ gdt", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexs+^~u>eybie}2,$gdt");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "create unique indexs+^~u>eybie}2,$gdt";
      stringArray0[1] = "create unique indexs + ^ ~ u > eybie } 2, $ gdt";
      stringArray0[2] = ":~VPJO]>ZgyW&C";
      stringArray0[3] = "insert6vz";
      stringArray0[4] = "Xp\"A`q\"k%IV=f5!";
      stringArray0[5] = ":~VPJO]>ZgyW&C";
      stringArray0[6] = "Xp\"A`q\"k%IV=f5!";
      stringArray0[7] = "Xp\"A`q\"k%IV=f5!";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "insert6vz", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Xp\"A`q\"k%IV=f5!", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(":~VPJO]>ZgyW&C", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (create unique indexs+^~u>eybie}2,$gdt, create unique indexs + ^ ~ u > eybie } 2, $ gdt, :~VPJO]>ZgyW&C, insert6vz, Xp\"A`q\"k%IV=f5!, :~VPJO]>ZgyW&C, Xp\"A`q\"k%IV=f5!, Xp\"A`q\"k%IV=f5!) REFERENCES create unique indexs+^~u>eybie}2,$gdt(create unique indexs+^~u>eybie}2,$gdt, create unique indexs + ^ ~ u > eybie } 2, $ gdt, :~VPJO]>ZgyW&C, insert6vz, Xp\"A`q\"k%IV=f5!, :~VPJO]>ZgyW&C, Xp\"A`q\"k%IV=f5!, Xp\"A`q\"k%IV=f5!)", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.renderValue("T=%Ts)a2H");
      assertEquals("'T=%Ts)a2H'", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("DATE");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog DATE", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[13];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 90019;
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(90019);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 90019, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.isDDL("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-_`[DA$`{?-E", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "r[name";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("r[name");
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("r[name", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " ON ROLLBACK RETAIN CURSORS ON ROLLBACK RETAIN LOCKS", true, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("<%Ts).H", (String[]) null, " ON ROLLBACK RETAIN CURSORS ON ROLLBACK RETAIN LOCKS", " ON ROLLBACK RETAIN CURSORS ON ROLLBACK RETAIN LOCKS", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "k>5");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k>5", defaultDBTable0, dBDataType0, integer1, integer1);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("K>5(1,1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("C,]");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(46, "java.awt.Desktop");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C,]", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("JAVA.AWT.DESKTOP(1)", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " ON ROLLBACK RETAIN CURSORS ON ROLLBACK RETAIN LOCKS", true, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        ValueTimestamp.getNoCopy((Timestamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.value.ValueTimestamp", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(311);
      stringBuilder0.append(311);
      stringBuilder0.chars();
      SQLUtil.addOptionalCondition("alter index9", stringBuilder0);
      assertEquals("311 or alter index9", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("T=%Ts)g2a", false);
      assertEquals("T = % Ts) g2a", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("", stringBuilder0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      assertFalse(simpleResultSet0.wasNull());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "]z`4";
      VersionNumber.valueOf("E");
      DBSchema dBSchema0 = new DBSchema("E");
      SQLUtil.ownerDotComponent(dBSchema0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]z`4");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(1147);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1147, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("M9.({G>$D&i_c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: M9.({G>$D&i_c
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      defaultDatabase0.getTable("", false);
      DBDataType dBDataType0 = DBDataType.getInstance(1076, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("  NULL", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.7013901080800322
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.normalize("3aC*xgcNh%Ppf.'", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("3aC * xgcNh % Ppf.''");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3aC*xgcNh%Ppf.'";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "money", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      Random.setNextRandom(1007);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DataStore dataStore0 = new DataStore("");
      VirtualFile virtualFile0 = new VirtualFile("dup can't be called for a token stream.", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, true);
      virtualFile0.delete();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.io.vfmem.BlockedByteArray", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "A{mYp~dn");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.ABORT;
      DBDataType.getInstance((-669), "A{mYp~dn");
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("A{mYp~dn", defaultDBTable0, dBDataType0, integer1, integer1);
      defaultDBColumn0.setNullable(false);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("A{MYP~DN(1,1)", stringBuilder0.toString());
      
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("A{mYp~dn A{MYP~DN(1,1) NOT NULL", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("create unique index", defaultDBTable0);
      tableContainer0.getSchema();
      defaultDBTable0.setSchema((DBSchema) null);
      String string0 = "TM";
      DBDataType dBDataType0 = DBDataType.getInstance(387, "TM");
      Integer integer1 = RawTransaction.ABORT;
      Integer.remainderUnsigned(387, 1032);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DTK:rwZ(fka", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[7];
      stringArray0[2] = "DTK:rwZ(fka";
      stringArray0[1] = "DTK:rwZ(fka TM(1) NULL";
      PipedReader pipedReader0 = new PipedReader(387);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.8185324656572723
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.normalize("W1/?P*yXWRSZ(RoV+", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "W1/?P*yXWRSZ(RoV+";
      stringArray0[1] = "E|9lPrK#|";
      stringArray0[2] = "W1 / ? P * yXWRSZ (RoV +";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "m.fM6-u", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("E|9lPrK#|", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "W1/?P*yXWRSZ(RoV+", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Random.setNextRandom(2075);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("m+f<Wj]#^~$(az,", true);
      assertEquals("m + f < Wj ] # ^ ~ $ (az,", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode");
      assertFalse(boolean0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" u\"ICN");
      String string0 = SQLUtil.normalize("insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode", false);
      assertEquals("insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[4] = " <= ";
      stringArray0[2] = "insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode";
      stringArray0[3] = " u\"ICN";
      stringArray0[4] = "insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode";
      stringArray0[5] = "insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode";
      String string1 = SQLUtil.join((String) null, (String) null, stringArray0, " u\"ICN", " u\"ICN", stringArray0);
      assertEquals(" u\"ICN as  u\"ICN on null.null =  u\"ICN.null and null.null =  u\"ICN.null and null.insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode =  u\"ICN.insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode and null. u\"ICN =  u\"ICN. u\"ICN and null.insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode =  u\"ICN.insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode and null.insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode =  u\"ICN.insertorg.apache.derby.impl.sql.compile.unarylogicaloperatornode", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[3] = "";
      DataStore dataStore0 = new DataStore("");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fZUlDNlEY%62", defaultDBTable0, (DBDataType) null, integer1, integer1);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("fZUlDNlEY%62, fZUlDNlEY%62", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("create unique indexs+^~u>eybie}2,$gdt", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexs+^~u>eybie}2,$gdt");
      String[] stringArray0 = new String[19];
      stringArray0[0] = "create unique indexs+^~u>eybie}2,$gdt";
      stringArray0[1] = "create unique indexs + ^ ~ u > eybie } 2, $ gdt";
      stringArray0[2] = ":~VPJO]>ZgyW&C";
      stringArray0[3] = "insert6vz";
      stringArray0[4] = "Xp\"A`q\"k%IV=f5!";
      stringArray0[5] = ":~VPJO]>ZgyW&C";
      stringArray0[6] = "Xp\"A`q\"k%IV=f5!";
      stringArray0[7] = "Xp\"A`q\"k%IV=f5!";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "insert6vz", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Xp\"A`q\"k%IV=f5!", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(":~VPJO]>ZgyW&C", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName("alter table");
      ((DefaultDBTable) dBTable0).getComponents();
      Character character0 = Character.valueOf('r');
      org.hsqldb.Session session0 = mock(org.hsqldb.Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        dBTable0.queryByPK(character0, jdbcConnection0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize(".0q\"Y", false);
      assertEquals(".0q \"Y\"", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("T=%Ts)a2H");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T=%Ts)a2H", dBSchema0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.addReferrer(defaultDBTable1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "T=%Ts)a2H", false, (String[]) null);
      dBPrimaryKeyConstraint0.setName((String) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      Random.setNextRandom(21);
      // Undeclared exception!
      try { 
        ValueTimestamp.getNoCopy((Timestamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.value.ValueTimestamp", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter index");
      tableContainer0.getTable("alter index");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("alter index", (DBTable) null, (-2), "pf^.f<e(L)#c9[v>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = SQLUtil.normalize("\n/* group sorted */", false);
      assertEquals("/* group sorted */", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rFutiempr\"v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 3123.2572;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("3123.2572", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")(c9:m+0]IjULZ~,:";
      stringArray0[1] = ")(c9:m+0]IjULZ~,:";
      stringArray0[2] = ")(c9:m+0]IjULZ~,:";
      stringArray0[3] = "(B-Vi";
      stringArray0[4] = ")(c9:m+0]IjULZ~,:";
      stringArray0[5] = ")(c9:m+0]IjULZ~,:";
      stringArray0[6] = ")(c9:m+0]IjULZ~,:";
      stringArray0[7] = ")(c9:m+0]IjULZ~,:";
      stringArray0[8] = "+ - < ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")(c9:m+0]IjULZ~,:", false, stringArray0);
      defaultDBTable1.setPrimaryKey(dBPrimaryKeyConstraint0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = ")(c9:m+0]IjULZ~,:";
      stringArray1[0] = ")(c9:m+0]IjULZ~,:";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable1, ")(c9:m+0]IjULZ~,:", false, stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append('7');
      stringBuilder1.append(false);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("pstkb)t$ic");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint2 = defaultDBTable1.getPrimaryKeyConstraint();
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, stringBuilder0);
      dBPrimaryKeyConstraint2.addColumnName((String) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable0, "update");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("7falseCONSTRAINT )(c9:m+0]IjULZ~,: ", stringBuilder0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "A{mYp~dn");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.command.dml.Explain", defaultDBTable0, dBDataType0, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("insertalter");
      mockPrintWriter0.println("/Uh{HpSs?XU2Wrk/F");
      mockPrintWriter0.append('\'');
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.h2.command.dml.Explain A{MYP~DN(1) NULL", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("`f%W1a:&QOEm/K");
      mockPrintWriter0.println("`f%W1a:&QOEm/K");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("`f%W1a:&QOEm/K");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "`f%W1a:&QOEm/K", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("select", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("select");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'select' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("create unique index", defaultDBTable0);
      tableContainer0.getSchema();
      String string0 = "alter materialized view)(c9:m+0]ijulz~,:";
      DBDataType dBDataType0 = DBDataType.getInstance((-310713956), "renamealter materialized viewroutinemprivilege n");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view)(c9:m+0]ijulz~,:", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter materialized view)(c9:m+0]ijulz~,: RENAMEALTER MATERIALIZED VIEWROUTINEMPRIVILEGE N(3) NULL");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"c9:m+0]ijulz~\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "A{mYp~dn");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.command.dml.Explain", defaultDBTable0, dBDataType0, integer0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("insertalter");
      mockPrintWriter0.println("org.h2.command.dml.Explain");
      defaultDBColumn0.setDefaultValue("eucoU%^TJ {6sh+");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.h2.command.dml.Explain A{MYP~DN(1) DEFAULT eucoU%^TJ {6sh+ NULL", string0);
      
      System.setCurrentTimeMillis((-1));
      String string1 = SQLUtil.normalize("org.h2.command.dml.Explain", true);
      assertEquals("org.h2.command.dml.Explain", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "create unique index";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create unique index", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)113;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte) (-30);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dynamicByteArrayOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "FOREIGN KEY (create unique index) REFERENCES null(create unique index)");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, printWriter0);
      assertEquals(196, dynamicByteArrayOutputStream1.getPosition());
      assertEquals(196, dynamicByteArrayOutputStream1.getUsed());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-191.3873705550414);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- 191.3873705550414");
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "- 191.3873705550414";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      try { 
        pipedReader0.connect(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "/*";
      SQLUtil.normalize("/*", false);
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null NCLOB NULL", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-543409519), "S{{KdK4[6x5MMkS");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("S{{KdK4[6x5MMkS", defaultDBTable0, dBDataType0);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) defaultDBColumn0);
      columnDescriptorList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
      assertEquals("S{{KdK4[6x5MMkS, S{{KdK4[6x5MMkS", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = SQLUtil.removeComments("alter session");
      System.setCurrentTimeMillis((-394L));
      Boolean boolean0 = new Boolean("alter session");
      SQLUtil.mutatesDataOrStructure("alter session");
      String string1 = SQLUtil.removeComments(" from shutdown hook");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[1] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("hQdz,rNG^Z7", true, "updateBinaryStream(int, InputStream, long)", "updateBinaryStream(int, InputStream, long)");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      DBDataType.getInstance((-1), "alter session6vz");
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance((-2040417330), "alter session6vz");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.firebirdsql.jca.FBLocalTransaction", defaultDBTable0, dBDataType0, integer1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter session6vz");
      mockPrintWriter0.println("=fYun>\"f|<ptXH");
      mockPrintWriter0.append('\'');
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.firebirdsql.jca.FBLocalTransaction ALTER SESSION6VZ(2) NULL", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      SQLUtil.mutatesDataOrStructure("6Vz");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("SELECT * FROM ");
      tableContainer0.getSchema();
      String string0 = ")";
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBDataType dBDataType0 = DBDataType.getInstance((-266), "smQf1Fox<f$:E,z");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")", defaultDBTable0, dBDataType0, integer0);
      DataStore dataStore0 = new DataStore("insertalter");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("truncate", defaultDBTable0, dBDataType0, integer1, integer0);
      defaultDBColumn0.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileWriter mockFileWriter0 = new MockFileWriter("\u0001%\u000B\uFFFF\n%\u0007\uFFFF\b%\u0001\u00E6\t%\u0001\u00E5\u0007%\u0004\uFFFF\u0001%\u0001\uFFFF\u001A%");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.append('-');
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-266));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(286);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) 286;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("286", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("execute.1|y0<w>}4fl0o`");
      SQLUtil.removeComments("/**/");
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SQLUtil.normalize("#e,\" Z(@4.$9`R1KI&", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(1, "`0\"e)qZ;{6q3X3");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#e,\" Z(@4.$9`R1KI&", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBTable0.removeForeignKeyConstraint((DBForeignKeyConstraint) null);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "select", false, "#e,\" Z(@4.$9`R1KI&");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("#e,\" Z(@4.$9`R1KI& NOT NULL", string0);
  }
}
