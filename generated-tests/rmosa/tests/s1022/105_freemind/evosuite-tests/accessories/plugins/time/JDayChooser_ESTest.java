/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 15:34:32 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.modes.MindIcon;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMapModel;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.ImageCapabilities;
import java.awt.Panel;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Rectangle2D;
import java.awt.image.ImageObserver;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.ByteArrayOutputStream;
import java.io.FileDescriptor;
import java.io.ObjectOutputStream;
import java.io.UnsupportedEncodingException;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalUnit;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import javax.swing.Box;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JTextField;
import javax.swing.JTree;
import javax.swing.JWindow;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.table.JTableHeader;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Document;
import javax.swing.text.StyleContext;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFStream;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseConnectionHook;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MindIcon.factory("day");
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        MockLocalDateTime.of(0, 4, (-1), 312, (-271), 312, 0);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for DayOfMonth (valid values 1 - 28/31): -1
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      jDayChooser0.getDayPanel();
      Color color0 = Color.darkGray;
      jDayChooser0.setForeground(color0);
      HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AWTKeyStroke>();
      Font font0 = new Font(hashMap0);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.701765291241601
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2230), false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      focusEvent0.paramString();
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(0);
      String string0 = "j";
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, "j");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.692610179636628
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.invalidate();
      Box.Filler box_Filler0 = (Box.Filler)Box.createVerticalGlue();
      box_Filler0.getTransferHandler();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 26, false, jDayChooser0);
      KeyEvent keyEvent0 = new KeyEvent(box_Filler0, 26, (-30), (-905), 38, 'H');
      keyEvent0.setKeyCode(20);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInputMethodListeners();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[1];
      // Undeclared exception!
      try { 
        color0.getColorComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.setYear(140);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      // Undeclared exception!
      try { 
        MockInstant.minusSeconds((Instant) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.time.MockInstant", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.756912034566746
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAutoscrolls();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte) (-86);
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-87);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, 'g', 34, 'g');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = true;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.drawWeeks();
      jDayChooser0.init();
      int int0 = (-980);
      Panel panel0 = new Panel();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setEnabled(true);
      jDayChooser1.setFocus();
      jDayChooser1.doLayout();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      boolean boolean1 = true;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.755639177784437
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      jDayChooser0.setSundayForeground((Color) null);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      Box.Filler box_Filler0 = (Box.Filler)Box.createVerticalGlue();
      box_Filler0.getTransferHandler();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 26, false, jDayChooser0);
      KeyEvent keyEvent0 = new KeyEvent(box_Filler0, 26, (-30), (-905), 38, 'H');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(266);
      jDayChooser0.setDay((-35));
      jDayChooser0.updateUI();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = ImageObserver.PROPERTIES;
      jDayChooser0.setMaxDayCharacters((-1035));
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      // Undeclared exception!
      try { 
        databaseConnectionHook0.shutdownMapHook();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.collaboration.database.DatabaseConnectionHook", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(17);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7376047233857554
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JTextField jTextField0 = new JTextField((Document) null, "*-,odOX+\"''g)YS~k>R", 6);
      jTextField0.createVolatileImage(43, 391, (ImageCapabilities) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.grabFocus();
      jDayChooser_DecoratorButton1.paint((Graphics) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.defaultMaxSelectableDate = date0;
      SchemeMode schemeMode0 = new SchemeMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.init();
      jDayChooser0.setEnabled(true);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAutoscrolls();
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.getMinSelectableDate();
      int int0 = 16;
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds(34, 34, 16);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 34 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputContext();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDayPanel();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(228);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, byteArrayOutputStream0, 228, 228);
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.create();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7385791605222836
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2230), false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      focusEvent0.paramString();
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      jDayChooser0.initialized = false;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextField jTextField0 = new JTextField(defaultStyledDocument0, "aSfXA=lAR_", 867);
      jDayChooser0.getY();
      KeyEvent keyEvent0 = new KeyEvent(jTextField0, (-1), (-2941L), 14, 35, '[');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.setFocus();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2230), false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      focusEvent0.paramString();
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, "j");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 29, 0, 23, (-1), ':', 0);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals((-16754012), color0.getRGB());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = ImageObserver.PROPERTIES;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.getLocale();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JTextField jTextField0 = new JTextField((Document) null, "*-,odOX+\"''g)YS~k>R", 6);
      jTextField0.createVolatileImage(43, 428, (ImageCapabilities) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2202), 1048573, 6);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setDay(428);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = SwingConstants.NORTH_EAST;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getActionForKeyStroke((KeyStroke) null);
      jDayChooser1.setEnabled(true);
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      try { 
        jDayChooser2.getMousePosition(true);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.init();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 30, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(30);
      StyleContext.getDefaultStyleContext();
      jDayChooser0.setMonth(7);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1);
      Color color0 = new Color(1);
      jDayChooser0.setWeekdayForeground(color0);
      int int0 = SwingConstants.PREVIOUS;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 0L, 1, 13, '%');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setDay(582);
      jDayChooser0.drawDays();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      jDayChooser0.maxDayCharacters = 45;
      jDayChooser0.getClientProperty(date0);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.getComponentPopupMenu();
      jDayChooser0.init();
      jDayChooser0.setYear(45);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8449235164896933
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getVerticalTextPosition();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setEnabled(true);
      Color color0 = Color.blue;
      jDayChooser0.setDecorationBackgroundColor(color0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.getBounds();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser_DecoratorButton0.setRequestFocusEnabled(true);
      rectangle2D_Double0.setFrame((double) 0, (double) 0, 0.0, (double) 0);
      jDayChooser0.setDayBordersVisible(true);
      Hashtable<String, AttributedCharacterIterator.Attribute> hashtable0 = new Hashtable<String, AttributedCharacterIterator.Attribute>();
      JTree jTree0 = new JTree();
      Dimension dimension0 = jTree0.getPreferredScrollableViewportSize();
      jTree0.getPreferredSize();
      Box.Filler box_Filler0 = new Box.Filler(dimension0, dimension0, dimension0);
      box_Filler0.setPreferredSize(dimension0);
      box_Filler0.getTransferHandler();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 360, 29116800000L, 25, 38, 'x');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getSundayForeground();
      jDayChooser0.drawDays();
      jDayChooser0.setDay(0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "freemind.modes.schememode.SchemeMode");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(1941);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay((-1798));
      jDayChooser0.setDay(1941);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = SwingConstants.NORTH_EAST;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setEnabled(false);
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setFocus();
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      System.setCurrentTimeMillis(0L);
      Timestamp timestamp0 = new Timestamp((-3330L));
      jDayChooser0.setMinSelectableDate(timestamp0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, (-1437625606), 14, 36, 'k');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 900, 1188, 14, (-63), 'l');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphicsConfiguration();
      JWindow jWindow0 = null;
      try {
        jWindow0 = new JWindow((GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.maxDayCharacters;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2230), false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      focusEvent0.paramString();
      AWTEventMulticaster.remove((FocusListener) aWTEventMulticaster0, (FocusListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyListener) aWTEventMulticaster0, (HierarchyListener) aWTEventMulticaster0);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(0);
      StyleContext.getDefaultStyleContext();
      jDayChooser0.initialized = false;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      jDayChooser0.setDay(417);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.719340049507385
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "freemind.modes.schememode.SchemeMode");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(1941);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(28, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1798));
      jDayChooser0.setDay((-1798));
      System.setCurrentTimeMillis(1L);
      jDayChooser0.setEnabled(false);
      Locale locale0 = Locale.FRENCH;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2230), false);
      focusEvent0.paramString();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      focusEvent0.paramString();
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(14);
      StyleContext styleContext0 = new StyleContext();
      jDayChooser0.initialized = false;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Locale locale0 = Locale.ROOT;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.733603922073186
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAutoscrolls();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextField jTextField0 = new JTextField(defaultStyledDocument0, "day", 63726);
      jDayChooser0.getY();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 63726, 1L, (-2650), 40, 'z');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawDays();
      jDayChooser0.setFocus();
      assertEquals(21, jDayChooser0.getDay());
      
      System.setCurrentTimeMillis(0L);
      Timestamp timestamp0 = new Timestamp(0L);
      jDayChooser1.setSelectableDateRange(timestamp0, timestamp0);
      jDayChooser0.setDay((-788));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1941);
      Instant instant0 = MockInstant.ofEpochMilli(1941);
      java.util.Date date1 = java.util.Date.from(instant0);
      jDayChooser0.setSelectableDateRange(date0, date1);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = true;
      Component component0 = Box.createVerticalGlue();
      KeyEvent keyEvent0 = new KeyEvent(component0, 38, 32L, 26, 33, 'H');
      keyEvent0.getExtendedKeyCode();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JColorChooser jColorChooser0 = new JColorChooser((Color) null);
      KeyEvent keyEvent0 = new KeyEvent(jColorChooser0, 37, (byte)28, 32, 37, 's');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.firePropertyChange("25", (byte)58, (byte) (-27));
      jDayChooser0.setLocation((int) (byte)58, (int) (byte)58);
      jDayChooser0.drawDays();
      JButton jButton0 = new JButton("");
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setDay((-337));
      System.setCurrentTimeMillis((byte) (-27));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAlignmentY();
      jDayChooser0.setSize(1158, 46);
      jDayChooser0.setAlwaysFireDayProperty(true);
      byte[] byteArray0 = new byte[4];
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)59;
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("zaZD[$FNRDH4)lm8T", vetoableChangeListener0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy0);
      SystemColor systemColor0 = SystemColor.controlHighlight;
      jDayChooser0.setWeekdayForeground(systemColor0);
      byteArray0[3] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setFocusable(true);
      jDayChooser0.setDay((byte)108);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((byte)3);
      jDayChooser0.setDayBordersVisible(false);
      System.setCurrentTimeMillis((byte)108);
      jDayChooser0.updateUI();
      jDayChooser0.updateUI();
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getPressedIcon();
      JButton jButton0 = new JButton((Icon) null);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setDay(1941);
      jDayChooser_DecoratorButton0.isRolloverEnabled();
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(1941);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-537), 1941, 1, 39, '[', 1);
      jDayChooser0.keyPressed(keyEvent0);
  }
}
