/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 15:13:26 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.List;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(stringArray0[1], stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(13, (long) 13);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 13
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5924028775138872
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.normalize("selectfwx.wrsyj>:+f-&9", false);
      assertEquals("selectfwx.wrsyj > : + f - & 9", string0);
      
      Random.setNextRandom(39);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop index");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.2987580581893401
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      String string0 = SQLUtil.normalize(" Y*-X>Nz.q@~K^o8Z]v", false);
      assertEquals("Y * - X > Nz.q @ ~ K ^ o8Z ] v", string0);
      
      boolean boolean0 = SQLUtil.isQuery("fwX.WrSyJ>:+F-&9");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9509891646214447
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.normalize("selectfwx.wrsyj>:+f-&9", true);
      SQLUtil.mutatesDataOrStructure("5_1H$x6");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materi");
      assertNull(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = SQLUtil.normalize("b}v&-;$$:Hw1:", false);
      assertEquals("b } v & - ; $ $ : Hw1 :", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SQLUtil.normalize(" Y*-X>Nz.q@~K^o8Z]v", true);
      assertEquals("Y * - X > Nz.q @ ~ K ^ o8Z ] v", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.normalize("T/ayt.^*^>$)r", false);
      assertEquals("T / ayt.^ * ^ > $) r", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize(dBColumnArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "select");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select", defaultDBTable0, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder("truncate");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("truncateSELECT(1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.leftJoin("cxecute", stringArray0, "cxecute", "cxecute", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("cxecute");
      DBSchema dBSchema0 = new DBSchema("");
      // Undeclared exception!
      try { 
        dBSchema0.getDatabase();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBSchema", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "tPS:ImD,DPD";
      SQLUtil.join("tPS:ImD,DPD", stringArray0[6], stringArray0, "drop i", "drop i", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(425);
      stringBuilder0.append("drop i");
      int int0 = (-1047);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-1047));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1047
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.normalize("selectfwx.wrsyj>:+f-&9", false);
      assertEquals("selectfwx.wrsyj > : + f - & 9", string0);
      
      Random.setNextRandom(818);
      Random.setNextRandom(818);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(818, " NULL");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}qis;", defaultDBTable0, dBDataType0, integer0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("}qis;  NULL(3,3) NULL", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("CONTAINER ~-1T&NQX{&OP~@", (String[]) null, "CONTAINER ~-1T&NQX{&OP~@", "CONTAINER ~-1T&NQX{&OP~@", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[8] = "tPS:ImD,DPD";
      SQLUtil.join("inner", stringArray0[6], stringArray0, "drop i", "drop i", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("tPS:ImD,DPD");
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-1047);
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-1047));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1047
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize(";AS5U5EP/!f", true);
      assertEquals("; AS5U5EP / ! f", string0);
      
      System.setCurrentTimeMillis((-1L));
      String[] stringArray0 = new String[7];
      stringArray0[0] = ";AS5U5EP/!f";
      stringArray0[1] = ";AS5U5EP/!f";
      stringArray0[2] = ";AS5U5EP/!f";
      stringArray0[3] = ";AS5U5EP/!f";
      stringArray0[4] = ";AS5U5EP/!f";
      stringArray0[5] = ";AS5U5EP/!f";
      stringArray0[6] = ";AS5U5EP/!f";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(";AS5U5EP/!f", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f) REFERENCES null(;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f, ;AS5U5EP/!f)", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      String string0 = SQLUtil.substituteMarkers("create materialized view", "create materialized view", integer0);
      assertEquals("3", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      DBCatalog dBCatalog0 = new DBCatalog("^rU-C!&");
      DBSchema dBSchema0 = new DBSchema("getFloat(String)", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" Y*-X>Nz.q@~K^o8Z]v", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("getFloat(String)", true, defaultDBTable0, "getFloat(String)");
      defaultDBTable0.getReferrers();
      dBCheckConstraint0.setDoc("rename(r@f");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "getFloat(String)");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("d_Nj^xUc,jo(V.cG^9", dBSchema0);
      dBCheckConstraint0.setDoc("^d8LPB5bQv<N6");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rename(r@f";
      dBCheckConstraint0.setName(" NULL");
      stringArray0[1] = "rename(r@f";
      stringArray0[2] = " Y*-X>Nz.q@~K^o8Z]v";
      stringArray0[3] = " NULL";
      stringArray0[4] = "^rU-C!&";
      stringArray0[5] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      stringArray0[6] = "^rU-C!&";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, " NULL", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT \" NULL\" ", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop table,", false, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wrong ch";
      stringArray0[4] = "wrong ch";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wrong ch", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(533, (CharSequence) "wrong ch");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 533
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter sessionv)y/b{p(k{:tw", false);
      assertEquals("alter sessionv) y / b { p (k { : tw", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("aA+ ");
      char[] charArray0 = new char[0];
      SQLUtil.addOptionalCondition("aA+ ", stringBuilder0);
      int int0 = (-2448);
      StringBuffer stringBuffer0 = new StringBuffer();
      char[] charArray1 = new char[0];
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2448), charArray1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2448
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
      
      TableContainer tableContainer0 = new TableContainer("null", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("create materialized view");
      DBDataType dBDataType0 = DBDataType.getInstance(1463, "null");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create materialized view", (DBTable) null, dBDataType0, integer1, integer1);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("create materialized view, create materialized view, create materialized view", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringBuilder stringBuilder0 = new StringBuilder(6);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("select(", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(6, (Object) pipedReader0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(6, 'N');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder3);
      try { 
        pipedReader0.read(charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 2997.043981265;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      streamTokenizer0.whitespaceChars((-4305), 4228);
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.ownerDotComponent(dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("null", true);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.880524555284045
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize(";AS5U5EP/!f", true);
      assertEquals("; AS5U5EP / ! f", string0);
      
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      String[] stringArray0 = new String[6];
      stringArray0[0] = ":curCharPos=";
      stringArray0[1] = ":curCharPos=";
      stringArray0[2] = "; AS5U5EP / ! f";
      stringArray0[3] = ":curCharPos=";
      stringArray0[4] = ":curCharPos=";
      stringArray0[5] = ":curCharPos=";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ":curCharPos=", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT :curCharPos= PRIMARY KEY (:curCharPos=, :curCharPos=, ; AS5U5EP / ! f, :curCharPos=, :curCharPos=, :curCharPos=)", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "+1MIm}!B_/+";
      SQLUtil.normalize("+1MIm}!B_/+", true);
      String string1 = "call,";
      SQLUtil.mutatesDataOrStructure("call,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = "update";
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("update");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'update' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog(" Y*-X>Nz.q@~K^o8Z]v");
      DBSchema dBSchema0 = new DBSchema("getFloat(String)", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" Y*-X>Nz.q@~K^o8Z]v", dBSchema0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("getFloat(String)", true);
      defaultDBTable0.getIndex(" Y*-X>Nz.q@~K^o8Z]v");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("getFloat(String)");
      defaultDBTable0.getIndex("getFloat(String)");
      defaultDBTable0.getCatalog();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("getFloat(String). Y*-X>Nz.q@~K^o8Z]v", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("^rU-C!&", true);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(1.0);
      SQLUtil.addRequiredCondition("^rU-C!&", stringBuilder1);
      assertEquals("1.0 and ^rU-C!&", stringBuilder1.toString());
      assertEquals("1.0 and ^rU-C!&", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "X%8");
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK X%8", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- 0");
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "- 0";
      stringArray0[2] = "- 0";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "c?O|:7x7,>^Zs";
      stringArray0[6] = "- 0";
      stringArray0[7] = null;
      stringArray0[8] = null;
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM - 0 WHERE null = null AND - 0 = '- 0' AND - 0 = '- 0' AND null = null AND null = null AND c?O|:7x7,>^Zs = 'c?O|:7x7,>^Zs' AND - 0 = '- 0' AND null = null AND null = null", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "create maDterialized";
      String string0 = SQLUtil.renderColumnListWithTableName("create maDterialized", stringArray0);
      assertEquals("create maDterialized.null, create maDterialized.create maDterialized", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" R[~rnsGR(#-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  R[~rnsGR(#-
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("rename(r@f");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("rename(r@f");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = null;
      Character character0 = new Character('G');
      SQLUtil.renderValue(character0);
      String string1 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string2 = "7,;h@u(x3;.o)$2Y+";
      DBCatalog dBCatalog0 = new DBCatalog("'G'");
      String string3 = "XSDAB.S";
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("XSDAB.S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'XSDAB.S'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 744.4583836715912;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-45));
      String string1 = SQLUtil.normalize("744.4583836715912", false);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" WHERE ");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table  WHERE ", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("z'sD:aOZZhMnh", false);
      assertEquals("z 'sD:aOZZhMnh'", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("updat,ObjWct(", false);
      assertEquals("updat, ObjWct (", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("S\"oRi-d%o", false);
      assertEquals("S \"oRi-d%o\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "org.apache.derby.impl.sql.compile.WindowDefinitionNode";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.WindowDefinitionNode";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.WindowDefinitionNode";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.WindowDefinitionNode";
      stringArray0[4] = "exec";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.apache.derby.impl.sql.compile.WindowDefinitionNode", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("org.apache.derby.impl.sql.compile.WindowDefinitionNode");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("drop index", stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer("s.rZ.SH+8swcw");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'i';
      charArray0[1] = 'A';
      charArray0[2] = 'f';
      charArray0[3] = '\"';
      charArray0[5] = '|';
      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuilder stringBuilder4 = stringBuilder3.append("exec");
      StringBuilder stringBuilder5 = stringBuilder4.insert(11, 'e');
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder5);
      assertEquals("org.apache.ederby.impl.sql.compile.WindowDefinitionNode or drop indexs.rZ.SH+8swcwiAf\"\u0000|execCONSTRAINT org.apache.derby.impl.sql.compile.WindowDefinitionNode ", stringBuilder2.toString());
      assertEquals("org.apache.ederby.impl.sql.compile.WindowDefinitionNode or drop indexs.rZ.SH+8swcwiAf\"\u0000|execCONSTRAINT org.apache.derby.impl.sql.compile.WindowDefinitionNode ", stringBuilder3.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z}yVJPxVp_";
      stringArray0[0] = "z}yVJPxVp_";
      stringArray0[2] = "z}yVJPxVp_";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "z}yVJPxVp_", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (z}yVJPxVp_, , z}yVJPxVp_, )", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("z}yVJPxVp_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      mockPrintWriter0.print(false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectwp.pr");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader();
      Boolean boolean0 = Boolean.FALSE;
      SQLUtil.isQuery("selectntowrong c|ck");
      Boolean.valueOf(true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectntowrong c|ck");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("^h=wZ>:9%}Pj6(#%M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, "- 0");
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((-2812.6353F));
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("-2812.6353", stringBuilder0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize(";AS5U5EP/!f", true);
      System.setCurrentTimeMillis(2989L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "; AS5U5EP / ! f";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(";AS5U5EP/!f", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      Random.setNextRandom(223);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VKT,^OP");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("^rU-C!&");
      DBSchema dBSchema0 = new DBSchema("getFloat(String)", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" Y*-X>Nz.q@~K^o8Z]v", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("getFloat(String)", true, defaultDBTable0, "getFloat(String)");
      defaultDBTable0.getReferrers();
      dBCheckConstraint0.setDoc("rename(r@f");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "getFloat(String)");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("rename(r@f", dBSchema0);
      dBCheckConstraint0.setDoc("getFloat(String)");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rename(r@f";
      stringArray0[2] = " Y*-X>Nz.q@~K^o8Z]v";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      PrintWriter printWriter0 = mockPrintWriter0.format("rename(r@f", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals(99, charArrayWriter0.size());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d*REA^ZGOc/_v");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d*REA^ZGOc/_v";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.7595473914748635
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1, "call");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringWriter stringWriter0 = new StringWriter(1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "call";
      mockPrintWriter0.println();
      defaultDBColumn0.setDefaultValue("");
      objectArray0[1] = (Object) "call";
      objectArray0[2] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.format(" CALL NULL", objectArray0);
      printWriter0.checkError();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-640), "call");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "f4o\"i(#[GP/ea_FG4E", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("call", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", dBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, 1, "select");
      SQLUtil.renderColumn(defaultDBColumn1);
      StringWriter stringWriter0 = new StringWriter(46);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      mockPrintWriter0.println();
      PrintWriter printWriter0 = mockPrintWriter0.format("5lUY", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      assertEquals("\n5lUYcreate table call (\n\tcall CALL NULL,\n\tnull SELECT NULL,\n\tUNIQUE ()\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("LOB");
      DBSchema dBSchema0 = new DBSchema("getFloat(String)", dBCatalog0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "getFloat(String)");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d_Nj^xUc,jo(V.cG^9", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rename(r@f";
      stringArray0[2] = " Y*-X>Nz.q@~K^o8Z]v";
      stringArray0[3] = "rename(r@f";
      stringArray0[4] = "LOB";
      stringArray0[5] = "org.apache.derby.iapi.sql.execute.ExecutionFactory";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "getFloat(String)", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = MockFile.createTempFile("rename(r@f", "getFloat(String)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("d_Nj^xUc,jo(V.cG^9", defaultDBTable0.getName());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = SQLUtil.normalize(")]*/f/f2Nx{fI.* ", false);
      assertEquals(") ] */ f / f2Nx { fI.*", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("wrong^chfcksum", (DBTable) null, (-1877), "wrong^chfcksum");
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      constraintDescriptorList0.add((Object) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
      assertEquals("wrong^chfcksum, wrong^chfcksum", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("G4^{5XtQ94G", dBCatalog0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getFloat(String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      System.setCurrentTimeMillis((-27L));
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(" Y*-X>Nz.q@~K^o8Z]v", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" Y*-X>Nz.q@~K^o8Z]v", dBSchema0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getObjectImpl(int,Map)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 752.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("752", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.h2.index.PageBtreeLeaf";
      stringArray0[1] = "org.h2.index.PageBtreeLeaf";
      stringArray0[2] = "org.h2.index.PageBtreeLeaf";
      stringArray0[4] = "org.h2.index.PageBtreeLeaf";
      stringArray0[5] = "org.h2.index.PageBtreeLeaf";
      stringArray0[6] = "org.h2.index.PageBtreeLeaf";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.h2.index.PageBtreeLeaf", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.h2.index.PageBtreeLeaf");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = SQLUtil.normalize("selectfwx.wrsyj>:+f-&9", false);
      Random.setNextRandom(818);
      Random.setNextRandom(818);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(818, "selectfwx.wrsyj > : + f - & 9");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}qis;", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.removeComments("DATE");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "NULL", false, "}qis;");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)18;
      Boolean boolean0 = Boolean.TRUE;
      byteArray0[2] = (byte) (-15);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)31;
      byteArray0[6] = (byte)123;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("XD`iuWl-P)z~qUO|]P");
      tableContainer0.getTable("XD`iuWl-P)z~qUO|]P");
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("CLOB CLOB NULL", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)41;
      byteArray0[4] = (byte)47;
      byteArray0[6] = (byte) (-88);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = SQLUtil.normalize("alter session", false);
      assertEquals("alter session", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("/*n9mv+", false);
      assertEquals("/* n9mv +", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 713.6331870209585;
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("lhXRl", true);
      Random.setNextRandom((-4));
      String string0 = null;
      DBSchema dBSchema0 = new DBSchema((String) null);
      SQLUtil.typeAndName(dBSchema0);
      String string1 = "%~-1t&Ncqx{&'OP~@";
      TableContainer tableContainer0 = new TableContainer("^jnE");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%~-1t&Ncqx{&'OP~@", (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "713.6331870209585";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((-1717986917), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-2200.896);
      SQLUtil.renderNumber(streamTokenizer0);
      DBCatalog dBCatalog0 = new DBCatalog("TVsUO&^)F[AT_z+%R#");
      assertNull(dBCatalog0.getDoc());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SQLUtil.normalize("selectfwx.wrsyj>:+f-&9", false);
      Random.setNextRandom(818);
      Random.setNextRandom(818);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(818, " NULL");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}qis;", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      System.setCurrentTimeMillis(818);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TableContainer tableContainer0 = new TableContainer("-KwE,kZ");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType.getInstance((-1717986917), "%~-1t&Ncqx{&'OP~@");
      tableContainer0.getSchema();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.removeComments("/**/");
      System.setCurrentTimeMillis(1722L);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }
}
