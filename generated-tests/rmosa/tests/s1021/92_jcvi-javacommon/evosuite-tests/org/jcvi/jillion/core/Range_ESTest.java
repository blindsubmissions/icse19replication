/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:59:34 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange(" R~mSrIvSKFAW8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  R~mSrIvSKFAW8 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.858006239667225
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = (-128L);
      long long1 = (-32768L);
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("#\";ES", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse #\";ES into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = 237L;
      Range.Builder range_Builder0 = new Range.Builder(237L);
      range_Builder0.contractBegin(237L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(237L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8647385121905686
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("*qcw/Sh#;?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.*qcw/Sh#;?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.694153703984459
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(range_Builder0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(255L, (-9223372036854775800L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 255, -9223372036854775800 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483647L, (-2123L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(1L, (-1401L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-9L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-376L);
      range_Builder0.expandEnd((-376L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2521L);
      range_Builder0.shift((-128L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-791L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6821862116695345
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(255L);
      Range range1 = range_Builder0.build();
      Range range2 = Range.of(255L);
      assertFalse(range2.isEmpty());
      
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range0.equals(range1);
      Object object0 = new Object();
      range1.equals(object0);
      range0.equals("xP>RoP7YPW");
      Range.CoordinateSystem.values();
      boolean boolean1 = range1.equals("xP>RoP7YPW");
      assertNotSame(range1, range2);
      assertFalse(range1.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.781044241131932
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of(82834976L);
      Range range1 = Range.of(2147483647L);
      range0.endsBefore(range1);
      range1.equals(range0);
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8351341733487985
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(2189L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getEnd();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2190 .. 2190 ]/RB", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.623491171373418
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(4L);
      Range range1 = range_Builder0.build();
      Long long0 = new Long(4L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(4L, long1);
      
      Long.getLong((String) null, 4L);
      Long.min(1406L, 9223372036854775807L);
      range0.equals(long0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6821862116695345
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(4L);
      Range range1 = range_Builder0.build();
      Long long0 = new Long(4L);
      List<Range> list0 = range0.split(2178L);
      assertTrue(list0.contains(range0));
      
      Long.min(1406L, 9223372036854775807L);
      range0.equals(long0);
      range0.equals(range1);
      assertTrue(range1.isEmpty());
      
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      long long1 = range0.getEnd();
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.738169943201965
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(4L);
      Range range1 = range_Builder0.build();
      Long long0 = new Long(4L);
      Long.min(1406L, 9223372036854775807L);
      range0.equals(long0);
      boolean boolean0 = range0.equals(range1);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
      
      range1.complement(range0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      Range range2 = range0.intersection(range1);
      // Undeclared exception!
      try { 
        range2.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6821862116695345
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range_Builder0.shift(255L);
      range1.split(9223372036854773893L);
      Range range2 = range_Builder0.build();
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      range2.equals(object0);
      range1.equals("xP>RoP7YPW");
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      
      Range.CoordinateSystem.values();
      boolean boolean1 = range2.equals("xP>RoP7YPW");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775796L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.split(9223372036854775796L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -25 would make range [9223372036854775796 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483645L);
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      range0.split(2147483645L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.293954745286931
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range_Builder0.shift(255L);
      Range range2 = range_Builder0.build();
      Long long0 = new Long(4294967295L);
      range1.equals(range2);
      Range range3 = Range.ofLength(4712L);
      List<Range> list0 = range2.complement(range3);
      assertEquals(0, list0.size());
      
      Object object0 = new Object();
      range2.equals(object0);
      range1.equals("xP>RoP7YPW");
      assertSame(range1, range0);
      
      Range.CoordinateSystem.values();
      range2.equals("xP>RoP7YPW");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range3.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 4711 ]/0B", string0);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range0 = range_Builder0.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range_Builder0.shift(2147483647L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("(d+)s*,s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.(d+)s*,s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9689526668537134
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483622L);
      Range.Builder range_Builder1 = range_Builder0.shift(2147483622L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      List<Range> list0 = range0.split(2147483622L);
      List<Range> list1 = range0.complementFrom(list0);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.Builder range_Builder2 = range_Builder1.shift((-375L));
      Range range2 = range_Builder2.build();
      range2.equals(range1);
      Object object0 = new Object();
      Range.Comparators.values();
      List<Range> list2 = range0.complement(range1);
      assertFalse(range1.equals((Object)range2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483622L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Vit$*ZZ\"I0sfZY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Vit$*ZZ\"I0sfZY
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.681994177722638
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-992L));
      Range range0 = range_Builder0.build();
      range_Builder0.shift(4L);
      Range range1 = range_Builder0.build();
      Long long0 = new Long(4L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-987L), long1);
      
      range0.equals(long0);
      boolean boolean0 = range0.equals(range1);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      boolean boolean1 = range1.equals(range_Builder0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(430L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 431 .. 430 ]/RB", string0);
      
      Range range1 = Range.ofLength(430L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      long long0 = 237L;
      Range.Builder range_Builder0 = new Range.Builder(237L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(843L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0016491857229184
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-113L), 2147483647L);
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("fE?JTzqG{vv>#7mrE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.fE?JTzqG{vv>#7mrE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.908318357393279
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("yYf<Smp}B8{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.yYf<Smp}B8{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6821862116695345
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range_Builder0.shift(255L);
      Range range2 = range_Builder0.build();
      Long long0 = new Long(4294967295L);
      range1.equals(range2);
      Object object0 = new Object();
      range2.equals(object0);
      range1.equals("xP>RoP7YPW");
      boolean boolean0 = range2.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem.values();
      boolean boolean1 = range2.equals("xP>RoP7YPW");
      assertTrue(boolean1 == boolean0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.984342963462259
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range_Builder0.shift(255L);
      Range range2 = range_Builder0.build();
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range1.equals(range2);
      Object object0 = new Object();
      range2.equals(object0);
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
      
      range1.equals("xP>RoP7YPW");
      Range.CoordinateSystem.values();
      boolean boolean1 = range2.equals("xP>RoP7YPW");
      assertFalse(range2.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.shift((-91L));
      Range range1 = range_Builder1.build();
      range1.startsBefore(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = Range.ofLength(250L);
      Range range1 = Range.ofLength(956L);
      range1.equals(range_Builder0);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 250 ]/RB", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8492350266891995
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("e\u0004h0SzI@!5I", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse e\u0004h0SzI@!5I into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7916629309316447
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(249L);
      boolean boolean0 = range0.endsBefore(range1);
      Range range2 = range_Builder0.build();
      range_Builder0.shift(255L);
      Range range3 = range_Builder0.build();
      Long long0 = new Long(4294967295L);
      boolean boolean1 = range2.equals(range3);
      assertFalse(boolean1);
      
      Object object0 = new Object();
      range3.equals(object0);
      boolean boolean2 = range2.isSubRangeOf(range0);
      assertFalse(boolean2 == boolean0);
      
      range2.equals("xP>RoP7YPW");
      assertSame(range2, range1);
      
      Range.CoordinateSystem.values();
      boolean boolean3 = range3.equals("xP>RoP7YPW");
      assertTrue(boolean3 == boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(966L);
      Range.Builder range_Builder1 = range_Builder0.shift((-292L));
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder1);
      Object object0 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.of((-2147483674L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967301L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.966943486189354
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("*qcw/Sh#;?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.*qcw/Sh#;?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.738169943201965
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(4L);
      Range range1 = range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Long long0 = new Long(4L);
      Long.min(1406L, 9223372036854775807L);
      range0.equals(long0);
      range0.equals(range1);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("x;y~>Y9-6", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.735769290759362
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967301L);
      Range range0 = range_Builder1.build();
      range_Builder1.shift(255L);
      Range range1 = range_Builder1.build();
      Long long0 = new Long(4294967295L);
      range0.equals((Object) null);
      range0.equals(range1);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range_Builder1.expandEnd(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6795438589689793
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      range_Builder0.contractBegin(249L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(255L);
      Range range1 = range_Builder0.build();
      range0.equals(range1);
      Object object0 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(452L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.038990465153796
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of((-101L), 2147488778L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Long long0 = new Long((-101L));
      range0.equals(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("(d+)s*,s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.(d+)s*,s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6821862116695345
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.623491171373418
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(4L);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range0.endsBefore(range1);
      Long long0 = new Long(4L);
      Long.min(1406L, 9223372036854775807L);
      range0.equals(long0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1);
      
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      boolean boolean2 = range0.equals(object0);
      assertFalse(boolean2 == boolean0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6821862116695345
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(3L);
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.endsBefore(range0);
      assertFalse(boolean0);
      
      range_Builder0.expandBegin(1406L);
      Long.min(1406L, 9223372036854775807L);
      boolean boolean1 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1);
      
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      range0.equals(object0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift(1915L);
      Range range0 = range_Builder0.build();
      range_Builder1.shift(1L);
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder0.build();
      range1.equals(range2);
      range0.equals(range_Builder1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      String string0 = "UguU@N";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("UguU@N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.UguU@N
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9606885123462443
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(1878L, 9223372036849566401L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8917136024766323
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3994L));
      Range range0 = range_Builder0.build();
      range_Builder1.shift((-3994L));
      range_Builder1.shift((-1158L));
      Range range1 = range_Builder0.build();
      range1.iterator();
      Range range2 = range_Builder1.build();
      range1.equals(range_CoordinateSystem0);
      range0.equals(range2);
      range2.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("o$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.o$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.746178061239087
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.shift((-122L));
      Range range1 = range_Builder1.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      range0.equals(object0);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      boolean boolean1 = range1.equals(object0);
      assertFalse(boolean1);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(range0.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.823416998397392
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder0.build();
      boolean boolean0 = range1.equals(range2);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range2.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 249 ]/RB", string0);
      
      boolean boolean1 = range0.equals(range_Builder0);
      assertSame(range0, range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range_Builder0.shift(255L);
      Range range2 = range_Builder0.build();
      Long long0 = new Long(4294967314L);
      boolean boolean0 = range0.intersects(range2);
      Object object0 = new Object();
      range2.equals(object0);
      range1.equals("xP>RoP7YPW");
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      boolean boolean1 = range2.equals(object1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Long long0 = new Long((-2147483648L));
      Range range0 = Range.of((-1222L), (-1222L));
      range0.equals(long0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(462L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 463 .. 2147483648 ]/RB", string0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.823416998397392
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854770605L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854770606L, long0);
      
      Range.Comparators.values();
      Object object0 = new Object();
      Long long1 = new Long(9223372036854770605L);
      range0.equals(long1);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.226706483248847
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      range0.toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = range0.toString();
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Long.min((-1L), 2737L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list1.size());
      assertFalse(list1.equals((Object)list0));
      
      range0.equals(range1);
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8188800115145765
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      String string0 = "7}Jr|1.$eQEu-'";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("7}Jr|1.$eQEu-'", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 7}Jr|1.$eQEu-' into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.shift((-128L));
      Range range1 = range_Builder1.build();
      Long long0 = new Long(255L);
      Object object0 = new Object();
      range1.isSubRangeOf(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long(1923L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range range0 = range_Builder0.build();
      Long long1 = new Long(1967L);
      Object object1 = new Object();
      range0.equals((Object) null);
      range0.equals(range_Builder0);
      Range.CoordinateSystem.values();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("{K>{A4cCwq6`nni");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.{K>{A4cCwq6`nni
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483645L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483645L, long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      range_Builder0.expandBegin(249L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = range_Builder0.build();
      range1.equals(range2);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem0);
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -248 .. 249 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -248 .. 249 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.659577250253732
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range0 = range_Builder0.build();
      long long0 = (-91L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      range_Builder0.shift(255L);
      Range range1 = range_Builder0.build();
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("yYf<Smp}B8{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.yYf<Smp}B8{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-128L));
      String string0 = range0.toString();
      assertEquals("[ -128 .. -128 ]/0B", string0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.942734887715744
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(1915L, 1915L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1915L, 1915L);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(258L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967301L);
      range_Builder1.shift(4294967301L);
      Range range0 = range_Builder1.build();
      range_Builder1.shift(255L);
      Range range1 = range_Builder1.build();
      Long long0 = new Long(4294967295L);
      range0.equals((Object) null);
      range0.equals(range1);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range_Builder1.expandEnd(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("?", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483645L);
      Range.Builder range_Builder1 = range_Builder0.shift((-2147483653L));
      Range range0 = range_Builder1.build();
      range0.equals(range_Builder0);
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2147483653 .. -8 ]/SB", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.954002719889012
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-3138L), (-3138L));
      Range range1 = Range.of((-32764L), (-3138L));
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Long long0 = new Long((-2013L));
      Range range1 = Range.of((-2013L));
      Object object0 = new Object();
      range1.equals(range0);
      long long1 = range0.getEnd();
      assertEquals((-32768L), long1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range2 = range_Builder2.build();
      range1.intersects(range0);
      assertSame(range0, range2);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483647 .. 2147483648 ]/SB", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.786706244690782
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(9223372034707292161L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift(4L);
      Range range1 = range_Builder0.build();
      Long long0 = new Long(4L);
      range0.equals(long0);
      range0.equals(range1);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7023125084006607
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(430L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(429L, long0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(1915L);
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.9482560524834778
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals((Object) null);
      range0.toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.toString();
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 9223372036854775806 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 9223372036854775806 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long(1923L);
      Range range0 = Range.of(2147483647L, 9223372036854775807L);
      long long1 = range0.getBegin();
      assertEquals(2147483647L, long1);
      
      Object object1 = new Object();
      Long long2 = new Long(2147483647L);
      Long.max(2147483647L, (-152L));
      Long.min(1923L, 1923L);
      range0.equals(long2);
      long long3 = range0.getEnd();
      assertEquals(9223372036854775807L, long3);
      
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(1878L, 9223372036849566401L);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-735L));
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -735 .. -735 ]/SB", string0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      range0.getEnd();
      long long0 = range0.getBegin();
      assertEquals((-735L), long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(1915L, 1915L);
      Range range1 = Range.of(571L, 1915L);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372034707292289L);
      range_Builder0.expandEnd(4294967301L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.9888752824463305
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range1);
      Long long0 = new Long((-1L));
      range1.equals(long0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("o$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.o$
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.112610896214252
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), 2147483647L);
      Range range1 = Range.of((-2147483648L), 2147483645L);
      range1.equals(range0);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long.min(335L, (-32768L));
      range0.equals(range_CoordinateSystem0);
      range1.getEnd();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange("start offset can not be less than 0", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse start offset can not be less than 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3111L));
      range0.equals(range0);
      range0.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.0829126413850383
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(82834976L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      range0.endsBefore(range1);
      range1.equals(range0);
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(2147483645L);
      range0.equals((Object) null);
      range0.toString();
      range0.toString();
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(430L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(2147483638L);
      Object object0 = new Object();
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(237L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(237L);
      range_Builder1.build();
      range_Builder0.build();
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Range range1 = Range.ofLength(237L);
      range1.equals(range_Builder1);
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      range2.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(1923L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2147483645L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.0371540476957106
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(9223372036854775807L);
      range0.equals((Object) null);
      range0.toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.toString();
      Long.min((-1L), 2737L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B", range_CoordinateSystem0);
      range0.equals(range1);
      range0.getEnd();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("+2?`\"&Y/u^n-)kD0Ikv", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse +2?`\"&Y/u^n-)kD0Ikv into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.362378688079748
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(9223372036854770606L, 9223372036854770606L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(9223372036854770606L);
      List<Range> list1 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483622L);
      range_Builder0.shift(2147483622L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range0.equals(range1);
      range1.equals(range_Builder0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift((-91L));
      Range range1 = range_Builder0.build();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem.values();
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.shift((-9223372036854775808L));
      Range range0 = range_Builder1.build();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder1.shift(511L);
      range_Builder2.build();
      range1.equals(range0);
      Object object0 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(29670L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.9888752824463305
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(255L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(1404L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 255L, 4294967295L);
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.shift((-91L));
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.786706244690782
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(249L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967301L);
      Range range0 = range_Builder1.build();
      range_Builder1.shift(255L);
      range_Builder1.expandBegin(254L);
      Range range1 = range_Builder1.build();
      Long long0 = new Long(4294967295L);
      range0.equals((Object) null);
      range0.equals(range1);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range_Builder1.expandEnd(255L);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(274L);
      range_Builder0.contractBegin(274L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range0.equals(range1);
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("qi6}H!{rLg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.qi6}H!{rLg
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(4L);
      range_Builder0.build();
      Long long0 = new Long(4L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 4L, 4L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.0046103094784424
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(1915L, 4294967295L);
      Long long0 = new Long(1404L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 1916 .. 4294967296 ]/RB", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 1915L, 4294967295L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      range0.getLength();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 1916 .. 4294967296 ]/RB", range_CoordinateSystem2);
      Range range2 = Range.of(range_CoordinateSystem0, 1915L, 4294965381L);
      boolean boolean1 = range1.equals(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of((-3138L), (-3138L));
      Range.of((-32760L));
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(9223372036854775553L);
      Range range0 = range_Builder0.build();
      range_Builder1.shift((-1445L));
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder0.build();
      range1.isSubRangeOf(range2);
      range2.equals(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("AhF=y7%@4_-m");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.AhF=y7%@4_-m
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.1186263967339265
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-2147483667L), 2147483667L);
      Range range1 = Range.of((-113L), 2147483667L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-157L), (-113L));
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.055431116835965
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4698L, 9223372036854775807L);
      Range range2 = Range.of(4698L, 9223372036854775807L);
      boolean boolean0 = range2.equals(range1);
      long long0 = range2.getEnd();
      assertEquals(9223372036854775807L, long0);
      
      boolean boolean1 = range2.equals(range0);
      assertTrue(boolean1 == boolean0);
      
      long long1 = range0.getEnd();
      assertEquals(9223372036854775806L, long1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4692L, 9223372036854775807L);
      Range range1 = Range.of(4692L, 9223372036854775807L);
      range1.equals(range0);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3994L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(2147483647L, 2147483647L);
      Range.Builder range_Builder3 = range_Builder1.shift((-1158L));
      range_Builder1.expandEnd(859L);
      Range range1 = range_Builder3.build();
      range0.iterator();
      Range range2 = range_Builder1.build();
      range1.equals(range_CoordinateSystem0);
      range0.equals(range2);
      range1.intersects(range2);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
