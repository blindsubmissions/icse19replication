/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 15:23:05 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject.quote("<6gd\"% ypi}Y3/HY#");
      JSONTokener jSONTokener0 = new JSONTokener("<6gd\"% ypi}Y3/HY#");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of <6gd\"% ypi}Y3/HY#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 111;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(111);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("gNx20`}}3I|5Q");
      try { 
        jSONObject0.getBoolean("(EJpC%Qo*;/#08U@[@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(EJpC%Qo*;/#08U@[@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject.quote("[\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("/IhlJ0[gAo`7RUE", (-583));
      try { 
        jSONObject0.getBoolean("\"[\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"[\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject.quote("[\n");
      JSONObject.valueToString("[\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("\"[\n\"");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("{");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject.quote("[\n");
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONObject((String) null);
      String string0 = JSONObject.quote("\"[\n\"");
      assertEquals("\"\\\"[\\n\\\"\"", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("0 *K&c}qr");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JSONObject.quote("B\n");
      JSONObject jSONObject0 = new JSONObject((Object) "B\n");
      jSONObject0.put("B\n", 100);
      assertEquals(4, jSONObject0.length());
      
      String string1 = JSONObject.valueToString("\"B\n\"", 3637, 3637);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2852930241200995
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap0.put("0", jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7096472805499008
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject.quote("Su");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"Su\"", (Object) "\"Su\"");
      jSONObject1.optLong("\"Su\"");
      try { 
        jSONObject1.getBoolean("\"Su\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"Su\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject.quote("[\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "[\n";
      stringArray0[1] = "[\n";
      stringArray0[2] = "\"[\n\"";
      stringArray0[3] = "\"[\n\"";
      stringArray0[4] = "\"[\n\"";
      stringArray0[5] = "[\n";
      stringArray0[6] = "[\n";
      stringArray0[7] = "[\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0488126818826367
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JSONObject.quote("<6gd\"% ypi}3/HY#");
      assertEquals("\"<6gd\\\"% ypi}3/HY#\"", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<6gd\"% ypi}3/HY#";
      JSONObject jSONObject0 = new JSONObject("\"<6gd\"% \\ypi}3/HY#\"", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = jSONObject1.toString(839, 839);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject.quote("[\n");
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)1294);
      jSONObject0.putOpt("\"[\n\"", short0);
      jSONObject0.optJSONObject("");
      try { 
        jSONObject0.getBoolean("getparseDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getparseDouble\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7990591844756406
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject.quote("<6gd\"% ypi}3/HY#");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject0.optJSONObject("5LAPKFFwL");
      String string0 = JSONObject.quote("\"<6gd\"% \\ypi}3/HY#\"");
      assertEquals("\"\\\"<6gd\\\"% \\\\ypi}3/HY#\\\"\"", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.474108380099098
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = JSONObject.quote("[\n");
      assertEquals("\"[\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "[\n");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject.valueToString(jSONObject0, (-933), (-933));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject.quote("[\n");
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean((String) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("[\n", boolean0);
      jSONObject0.optJSONObject("[\n");
      JSONObject.doubleToString(0.0);
      try { 
        jSONObject1.getBoolean("\"[\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"[\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("DH1g> aXk:", "DH1g> aXk:");
      assertEquals("DH1g> aXk:", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = JSONObject.quote("<igd\"%cypi}3/HY#");
      assertEquals("\"<igd\\\"%cypi}3/HY#\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5140966973399506
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "<6gd\"% \\ypm}3/HY#";
      JSONObject.quote("<6gd\"% ypm}3/HY#");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"<6gd\"% \\ypm}3/HY#\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"<6gd\"% \\ypm}3/HY#\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.7990591844756406
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject.quote("<6gd\"% ypi}3/HY#");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("uLSvXj9OpJiW;U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"uLSvXj9OpJiW;U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject.quote("[13]\n");
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{";
      stringArray0[1] = "\"[13]\n\"";
      stringArray0[2] = "[13]\n";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      try { 
        jSONArray0.getLong((-1636));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1636] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = JSONObject.quote("[\n");
      assertEquals("\"[\\n\"", string0);
      
      JSONObject.valueToString("[\n", 600, 600);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("\"[\n\"", "\"java.lang.String@0000000001\"");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(600, 600);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9278749699972224
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = JSONObject.quote("<6gd\"% ]ypi}3/HY#");
      assertEquals("\"<6gd\\\"% ]ypi}3/HY#\"", string0);
      
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = JSONObject.valueToString(jSONObject1, (-3079), (-3079));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1894736293243366
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject.quote("\n");
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("iscompare", "\n");
      jSONObject0.optJSONObject("e+OQV");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("Fki!7l`JezcmQ");
      assertEquals("\"Fki!7l`JezcmQ\"", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "[\n";
      JSONObject.quote("[\n");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("\"[\n\"", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2852930241200995
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      stringArray0[2] = "1";
      stringArray0[3] = "1";
      stringArray0[4] = "1";
      stringArray0[5] = "1";
      jSONObject0.toString((-397));
      stringArray0[6] = "1";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      String string1 = jSONObject1.toString(13, (-314));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-2052));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-2052));
      linkedList0.add(integer1);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      linkedList0.spliterator();
      String string0 = JSONObject.valueToString(linkedList1, 642, (-2052));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(1390);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject.quote("<6gd\"% ypi}3/HY#");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("isdoubleToRawLongBits");
      jSONObject0.optJSONObject("5LAPKFFwL");
      String string0 = JSONObject.quote("\"<6gd\"% \\ypi}3/HY#\"");
      assertEquals("\"\\\"<6gd\\\"% \\\\ypi}3/HY#\\\"\"", string0);
      
      jSONObject0.optJSONObject(",\n");
      String string1 = JSONObject.quote("rIJjY]W7(4W");
      assertEquals("\"rIJjY]W7(4W\"", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("o.Xm#WZQzQ$((`w&S");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5140966973399506
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = JSONObject.quote("<6g@\"% ypi}3/HY#");
      Integer integer0 = new Integer(59);
      String string1 = JSONObject.valueToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = JSONObject.quote("<6gd\"% ypi}Y3/HY#");
      Double double0 = new Double((-4041.2));
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject.quote("[\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("[\n");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = JSONObject.quote("<6gd\"% ypi}3/HY#");
      assertEquals("\"<6gd\\\"% ypi}3/HY#\"", string0);
      
      String string1 = JSONObject.valueToString("\"<6gd\"% \\ypi}3/HY#\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 64;
      int int1 = (-724);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1626416509453747
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = JSONObject.quote("<6gd\"% ypi}3/HY#");
      assertEquals("\"<6gd\\\"% ypi}3/HY#\"", string0);
      
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString(jSONObject0, 47, 2);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.quote("{\n                                                 \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                 \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                 \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n  }");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.5140966973399506
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = JSONObject.quote("<6gd\"% ypi}3/HY#");
      Float float0 = new Float(2708.384);
      String string1 = JSONObject.valueToString(float0, 83, 102);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("+&?O9>P_]lHAv");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = JSONObject.quote("[\n");
      assertEquals("\"[\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("d;*_@s{w)");
      assertFalse(boolean0);
      
      jSONObject0.optJSONObject("[\n");
      String string1 = JSONObject.doubleToString(2096.5329210662);
      assertEquals("2096.5329210662", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1063911301690834
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 111;
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(111);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("\r");
      try { 
        jSONObject0.getBoolean("(EJpC%Qo*;/#08U@[@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(EJpC%Qo*;/#08U@[@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(69);
      StringWriter stringWriter1 = stringWriter0.append('3');
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONArray0.write(writer0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject.quote("<6gd\"% ypi}3/HY#");
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(3451.412843378616);
      Double.min((-1372.8), 3451.412843378616);
      hashMap0.put("\"<6gd\"% \\ypi}3/HY#\"", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("\"<6gd\"% \\ypi}3/HY#\"", 0L);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("^Jrt/%j=a(;e[QVaB|");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3715687789305695
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject.quote("<6gd\"% ypi}3/HY#");
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getBoolean("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject.quote("[\n");
      JSONObject jSONObject0 = new JSONObject((Object) "[\n");
      // Undeclared exception!
      jSONObject0.toString(3367, 3367);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("R0M{WeRV#Ca%4=M5SF");
      jSONTokener0.next();
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 18 of R0M{WeRV#Ca%4=M5SF
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(2499, 2499);
      jSONArray0.optBoolean(9);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 32, 32);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject.quote("[\n");
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((Object) "[\n");
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("[\n");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("", jSONArray0);
      assertEquals(1, jSONObject0.length());
      
      JSONArray jSONArray1 = jSONObject1.getJSONArray("");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(111);
      Integer integer0 = new Integer((-480));
      hashMap0.put("va", integer0);
      hashMap0.put("false", (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      HashMap<Byte, Double> hashMap1 = new HashMap<Byte, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap2);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Byte, String> hashMap3 = new HashMap<Byte, String>();
      Byte byte0 = new Byte((byte) (-106));
      hashMap3.putIfAbsent(byte0, "");
      JSONObject jSONObject2 = new JSONObject((Map) hashMap3);
      Byte byte1 = new Byte((byte) (-106));
      String string0 = jSONObject2.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("<6gd\"% ypi}3/HY#", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "XDi_{lZ^ko_~{}";
      JSONObject.quote("XDi_{lZ^ko_~{}");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"XDi_{lZ^ko_~{}\"", (Object) "\"XDi_{lZ^ko_~{}\"");
      try { 
        jSONObject1.getJSONArray("\"XDi_{lZ^ko_~{}\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"XDi_{lZ^ko_~{}\\\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      String string0 = jSONObject1.optString("wheel.json.JSONArray", "g.ttoHexString");
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.syntaxError(",\n");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.jsn.JSONObjet$1", 0.0);
      jSONObject1.getInt("wheel.jsn.JSONObjet$1");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = new JSONObject();
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      jSONObject0.toJSONArray((JSONArray) null);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      Integer integer0 = Integer.valueOf((-7));
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "kn}A";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("kn}A", (Object) "kn}A");
      Float float0 = new Float(0.0F);
      try { 
        jSONObject0.append("kn}A", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[kn}A] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("getgetClass", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("O_\"D", (Collection) linkedList0);
      jSONObject2.append("O_\"D", linkedList0);
      JSONObject jSONObject3 = new JSONObject((Object) "getgetClass");
      assertEquals(3, jSONObject3.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7657658438007613
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "kn}A";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("kn}A", (Object) "kn}A");
      int int0 = 830;
      try { 
        jSONObject0.getInt("kn}A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kn}A\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.5140966973399506
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = JSONObject.quote("<igd\"%cypi}3/HY#");
      assertEquals("\"<igd\\\"%cypi}3/HY#\"", string0);
      
      JSONObject.valueToString("\"<igd\"%c\\ypi}3/HY#\"");
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 45, 45);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = JSONObject.quote("[\n");
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(123);
      Writer writer0 = jSONObject1.write(stringWriter0);
      jSONObject0.write(writer0);
      JSONObject jSONObject2 = new JSONObject((Map) null);
      String string1 = JSONObject.valueToString(jSONObject2);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Double double0 = new Double((-1266.5234022504233));
      Double.isFinite((-1266.5234022504233));
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("f", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('U');
      jSONObject0.write(stringWriter1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{", (-1.0));
      Double double0 = new Double((-1.0));
      JSONObject jSONObject2 = jSONObject1.accumulate("{", double0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("1.00", 0.0);
      double double0 = jSONObject0.getDouble("1.00");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Double double0 = new Double((-1266.5234022504233));
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "wheel.json.JSONArray";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      String string1 = "kPkbA8";
      jSONObject1.remove("kPkbA8");
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.spliterator();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.optJSONArray("wheel.json.JSONArray");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject.quote("<6gd\"% yp3i}3/HY#");
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(3451.412843378616);
      hashMap0.put("\"<6gd\"% \\yp3i}3/HY#\"", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double1 = new Double(3451.412843378616);
      Double.max(3451.412843378616, 3451.412843378616);
      Double.isFinite(0.0);
      hashMap0.put("<6gd\"% yp3i}3/HY#", double1);
      jSONObject0.optDouble("\"<6gd\"% \\yp3i}3/HY#\"", 0.0);
      try { 
        jSONObject0.getBoolean("[|2yGjlRTH=r aam");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[|2yGjlRTH=r aam\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<Boolean> linkedList1 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("BQ|GP4%?C3w>F", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("O_\"D", (Collection) linkedList0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      jSONObject2.accumulate("O_\"D", jSONObject3);
      assertEquals(1, jSONObject3.length());
      
      String string0 = JSONObject.quote("BQ|GP4%?C3w>F");
      assertEquals("\"BQ|GP4%?C3w>F\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("YaKt", (Map) null);
      StringWriter stringWriter0 = new StringWriter(23);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{G<-Es:lgZ]MAXq");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {G<-Es:lgZ]MAXq
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1553894577805064
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Object object0 = new Object();
      Double double0 = new Double((-1266.5234022504233));
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer integer0 = new Integer((-2052));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-2052));
      linkedList0.add(integer1);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      linkedList0.addAll((Collection<? extends Integer>) linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.spliterator();
      String[] stringArray0 = new String[0];
      jSONArray0.put(0, 0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Long long0 = new Long((-834L));
      JSONObject jSONObject2 = new JSONObject(linkedList1, stringArray0);
      jSONArray0.toJSONObject(jSONArray0);
      String string0 = jSONObject0.toString(0, 0);
      double double1 = jSONObject0.optDouble("wheel.json.JSONObject$Null", 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, jSONObject0.length());
      
      JSONObject jSONObject3 = new JSONObject("{\n\"java.lang.String@0000000008\": java.lang.Boolean@0000000009,\n\"java.lang.String@0000000010\": java.lang.Boolean@0000000011,\n\"java.lang.String@0000000012\": \"java.lang.Class@0000000013\"\n}");
      String string1 = JSONObject.valueToString(jSONObject3, (-3849), (-3849));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.0688846458275627
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      jSONObject0.toString();
      jSONObject0.optJSONObject("1");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("3nF", object0);
      boolean boolean0 = jSONObject2.isNull("3nF");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0, 1, 1);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.776053131855733
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Double double0 = new Double((-1266.5234022504233));
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (Collection) linkedList0);
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      jSONObject1.put("wheel.json.JSONArray", (Map) hashMap0);
      String string0 = "kPkbA8";
      jSONObject1.remove("kPkbA8");
      JSONObject jSONObject2 = jSONObject0.getJSONObject("wheel.json.JSONArray");
      try { 
        jSONObject2.get("wheel.json.JSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      Integer integer0 = new Integer(2055);
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ".";
      JSONObject jSONObject1 = jSONObject0.put(".", (Object) boolean0);
      jSONObject1.getBoolean(".");
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = JSONObject.quote("</<6gd\"% ypi}3/HY#");
      assertEquals("\"<\\/<6gd\\\"% ypi}3/HY#\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.2176219181899883
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Object object0 = new Object();
      Double double0 = new Double((-1266.5234022504233));
      JSONObject jSONObject0 = new JSONObject(double0);
      Integer integer0 = new Integer((-2052));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-2052));
      linkedList0.add(integer1);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      linkedList0.spliterator();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Long long0 = new Long((-834L));
      JSONObject jSONObject2 = new JSONObject(linkedList1, stringArray0);
      jSONObject0.toString(0, 0);
      JSONObject.numberToString(long0);
      JSONObject.quote("java.lang.Long@000000001");
      Object object1 = new Object();
      jSONObject1.accumulate("java.lang.Long@000000001", object1);
      try { 
        jSONObject1.getBoolean("eG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"eG\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      Boolean.compare(true, true);
      JSONObject jSONObject1 = jSONObject0.put("0C72?/AjXWa?K>", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("0C72?/AjXWa?K>");
      assertFalse(boolean1);
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.doubleToString(642);
      assertEquals("642", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-124622330));
      assertEquals("-1.2462233E8", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) "false");
      boolean boolean0 = jSONObject1.getBoolean("false");
      assertFalse(boolean0);
      
      String string0 = JSONObject.valueToString((Object) null, 1571, 642);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONObject.quote("Expect=d '");
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Object object0 = new Object();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Expect=d '";
      stringArray1[1] = ");|7m*ZCgm;gB$";
      stringArray1[2] = "getmax";
      stringArray1[3] = "\"Expect=d '\"";
      stringArray1[4] = "Expect=d '";
      stringArray1[6] = "\"Expect=d '\"";
      stringArray1[7] = "] not found.";
      stringArray1[8] = "Expect=d '";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      assertEquals(8, jSONObject0.length());
      
      String string0 = JSONObject.quote("Expect=d '");
      assertEquals("\"Expect=d '\"", string0);
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
      
      String string2 = JSONObject.doubleToString((-2737.75227));
      assertEquals("-2737.75227", string2);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      jSONObject0.put("1", (Map) hashMap0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.optJSONObject("1");
      assertEquals(4, jSONObject0.length());
  }
}
