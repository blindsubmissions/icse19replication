/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 15:00:12 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-k{<lx`c ");
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterNTags((-1));
      outputFormat0.isTrimText();
      outputFormat0.setTrimText(false);
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals((-1), outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setTrimText(false);
      stringArray0[0] = "4lJ:QVZf!";
      stringArray0[1] = "+^yB&8_BM";
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setOmitEncoding(false);
      stringArray0[2] = "c^rU-C!";
      outputFormat0.setIndentSize((-1448399508));
      stringArray0[3] = "-suppressDeclaration";
      stringArray0[4] = "zEM#1r5?_{\"rqG";
      stringArray0[5] = "[Kn+s#9 Rp";
      stringArray0[6] = "-xhtml+5nvxHbg\"";
      outputFormat0.parseOptions(stringArray0, 451);
      outputFormat0.parseOptions(stringArray0, 451);
      int int0 = outputFormat0.parseOptions(stringArray0, 451);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(451, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "/=Cl2Ni?G6'<Y4A>");
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getLineSeparator();
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setNewLineAfterNTags(619);
      assertEquals(619, outputFormat1.getNewLineAfterNTags());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "-expandEmpty-newlines";
      boolean boolean0 = true;
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-newlines", true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-expandEmpty-newlines";
      outputFormat0.setIndent("-expandEmpty-newlines");
      stringArray0[1] = "-expandEmpty-newlines";
      outputFormat0.setOmitEncoding(true);
      stringArray0[2] = "-expandEmpty-newlines";
      stringArray0[3] = "-expandEmpty-newlines";
      stringArray0[4] = "-expandEmpty-newlines";
      stringArray0[5] = "-expandEmpty-newlines";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1847796358));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1847796358
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.getEncoding();
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "org.dom4j.io.OutputFormat";
      boolean boolean0 = false;
      OutputFormat outputFormat0 = new OutputFormat("org.dom4j.io.OutputFormat", false, "");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setLineSeparator("org.dom4j.io.OutputFormat");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('G');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (G)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "HZ");
      outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("[gxOr(D ", false, "");
      String[] stringArray0 = new String[3];
      outputFormat0.setIndentSize(1);
      int int0 = outputFormat0.parseOptions(stringArray0, 40);
      assertEquals(" ", outputFormat0.getIndent());
      assertEquals(40, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals('\"', char0);
      
      String string0 = outputFormat0.getIndent();
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertNull(string0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("f$hUEI{iaSYl,h&2", false, "'C3!=^\"?qVcNiZkX?X");
      outputFormat0.setIndentSize(369);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'C3!=^\"?qVcNiZkX?X";
      stringArray0[1] = "f$hUEI{iaSYl,h&2";
      stringArray0[2] = "'C3!=^\"?qVcNiZkX?X";
      stringArray0[3] = "'C3!=^\"?qVcNiZkX?X";
      stringArray0[4] = "'C3!=^\"?qVcNiZkX?X";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                 ", outputFormat0.getIndent());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Jej-&1=l.*As.Yeit:%";
      stringArray0[3] = "";
      stringArray0[4] = "py";
      String[] stringArray1 = new String[9];
      stringArray1[0] = "";
      stringArray1[1] = "Jej-&1=l.*As.Yeit:%";
      outputFormat0.setIndent(true);
      stringArray0[1] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "";
      outputFormat0.setOmitEncoding(true);
      stringArray1[7] = "";
      stringArray1[8] = "";
      outputFormat0.parseOptions(stringArray1, 10);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('7');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (7)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setNewlines(true);
      outputFormat0.isPadText();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('+');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (+)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setXHTML(true);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('0');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (0)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      assertEquals("", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      boolean boolean0 = outputFormat0.isNewlines();
      outputFormat0.setIndent("");
      outputFormat0.setPadText(false);
      outputFormat0.setIndentSize(1068);
      boolean boolean1 = outputFormat0.isOmitEncoding();
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(boolean1 == boolean0);
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      assertTrue(outputFormat0.isNewlines());
      
      outputFormat0.setNewlines(false);
      outputFormat0.isXHTML();
      assertFalse(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setIndent((String) null);
      outputFormat0.setTrimText(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setEncoding("");
      outputFormat0.setIndent("@S_t");
      String[] stringArray0 = null;
      outputFormat0.setPadText(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 374);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("[gxOr(D ", false, "");
      String[] stringArray0 = new String[3];
      outputFormat0.setIndentSize(1);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(" ", outputFormat0.getIndent());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "UITlN;]?ku4ir";
      stringArray0[2] = "+^yB&8_BM";
      outputFormat0.setExpandEmptyElements(true);
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setLineSeparator("c-dap2Y@Toad");
      outputFormat1.setLineSeparator("");
      outputFormat1.setExpandEmptyElements(true);
      OutputFormat outputFormat2 = new OutputFormat((String) null, false);
      outputFormat2.setExpandEmptyElements(true);
      outputFormat2.isSuppressDeclaration();
      outputFormat1.isTrimText();
      outputFormat1.setEncoding(stringArray0[0]);
      // Undeclared exception!
      try { 
        outputFormat2.setAttributeQuoteCharacter('$');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ($)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      OutputFormat outputFormat1 = new OutputFormat("8[jRS");
      OutputFormat outputFormat2 = new OutputFormat("+5nvxHbg\"", false);
      outputFormat2.setEncoding("-xhtml");
      outputFormat1.setPadText(false);
      outputFormat1.setSuppressDeclaration(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-padText";
      stringArray0[1] = "-xhtml";
      stringArray0[2] = "-expandEmpty+5nvxHbg\"";
      stringArray0[3] = "-xhtml";
      stringArray0[4] = "-xhtml";
      outputFormat2.parseOptions(stringArray0, 0);
      outputFormat2.getLineSeparator();
      assertEquals("-xhtml", outputFormat2.getEncoding());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = new OutputFormat("+5nvxHbg\"");
      outputFormat1.setEncoding("-suppressDeclaration");
      outputFormat1.setPadText(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat1.setSuppressDeclaration(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-suppressDeclaration";
      stringArray0[2] = "-suppressDeclaration";
      stringArray0[3] = "-suppressDeclaration";
      stringArray0[4] = "+5nvxHbg\"";
      stringArray0[5] = "~'vp}u";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.getLineSeparator();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setPadText(true);
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat(" (N`AdJXS3OxKi h[");
      outputFormat0.setEncoding(" (N`AdJXS3OxKi h[");
      outputFormat0.setPadText(false);
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat1.setSuppressDeclaration(true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "~'vp}u";
      stringArray0[3] = "#h<z:x";
      stringArray0[4] = "-newlines";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~'vp}u\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(" ", true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.getEncoding();
      outputFormat0.setXHTML(true);
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat1.setTrimText(false);
      outputFormat1.setExpandEmptyElements(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(':');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (:)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setEncoding("");
      outputFormat1.getAttributeQuoteCharacter();
      outputFormat0.setExpandEmptyElements(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-expandEmpty  ";
      stringArray0[3] = "";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat1.setAttributeQuoteCharacter('\"');
      assertEquals("", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "N|km*]h";
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setTrimText(true);
      stringArray0[2] = "-lineSeparator";
      stringArray0[3] = "xH\"9.LOm3T:&&";
      stringArray0[4] = "-indent";
      outputFormat0.setExpandEmptyElements(true);
      stringArray0[5] = "z^K-u/gVaHKJ";
      stringArray0[6] = "-xhtml9|VS=ya|Nao&c/#Qb";
      outputFormat1.setXHTML(true);
      outputFormat0.setNewlines(false);
      stringArray0[7] = "+^yB&8";
      outputFormat0.parseOptions(stringArray0, 2);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "xH\"9.LOm3T:&&";
      stringArray1[1] = "xH\"9.LOm3T:&&";
      outputFormat0.parseOptions(stringArray1, 360);
      outputFormat0.parseOptions(stringArray1, 2);
      outputFormat0.parseOptions(stringArray1, 2);
      int int0 = outputFormat1.parseOptions(stringArray0, 360);
      assertTrue(outputFormat1.isXHTML());
      assertEquals(360, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      OutputFormat outputFormat1 = new OutputFormat("-omitEncoding");
      outputFormat0.setPadText(true);
      outputFormat0.setEncoding("+5nvxHbg\"");
      outputFormat1.setPadText(true);
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat1.setSuppressDeclaration(true);
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "+5nvxHbg\"";
      stringArray0[2] = "+5nvxHbg\"";
      stringArray0[3] = "-omitEncoding";
      stringArray0[4] = "-omitEncoding";
      stringArray0[5] = "-omitEncoding";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.isSuppressDeclaration();
      assertTrue(outputFormat1.isPadText());
      
      OutputFormat outputFormat2 = new OutputFormat("-omitEncoding", true);
      assertFalse(outputFormat2.isXHTML());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize((-1));
      outputFormat0.setExpandEmptyElements(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[5] = "5";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("0 /!t4y$#~.V[-h[2");
      OutputFormat outputFormat1 = new OutputFormat("  ");
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat3 = new OutputFormat("-trimText", false, "qw");
      outputFormat3.setExpandEmptyElements(true);
      outputFormat2.setTrimText(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat2.setNewlines(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-trimText";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat2.setExpandEmptyElements(false);
      outputFormat0.parseOptions(stringArray0, 13);
      outputFormat3.isSuppressDeclaration();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "-encoding";
      outputFormat1.parseOptions(stringArray1, 13);
      assertEquals("-trimText", outputFormat1.getEncoding());
      
      outputFormat0.parseOptions(stringArray0, 2);
      assertEquals("\n", outputFormat0.getLineSeparator());
  }
}
