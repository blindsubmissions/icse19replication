/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:03:33 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("4pZk$u3U|{-0Q");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientIdentifier(">J5oDP03Kh(J.");
      advancedSettings0.setPerformancePreferencesBandwidth((-2536));
      assertEquals((-2536), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(65536);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientSocketTrafficClass("xw");
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      assertEquals(65536, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setSocketLinger(1141);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setMaxThreadsForNioWrite(2278);
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 0;
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setQSObjectPoolMaker("</performance-preferences-latency>\n");
      advancedSettings0.setQSObjectPoolMaker("</performance-preferences-latency>\n");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-tcp-no-delay>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-tcp-no-delay>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setSocketLinger(15);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertEquals(15, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth((-460));
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("!D-");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setByteBufferSize(1988);
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getByteBufferSize();
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(1988, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(542);
      advancedSettings0.setPerformancePreferencesLatency((-160));
      advancedSettings0.setClientSocketTrafficClass("p5f7~fu{V9g]0-!.#");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTrafficClass("!=yKiP");
      advancedSettings0.setMaxThreadsForNioWrite((-4088));
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-4088), advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1477));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog(1496);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setMaxThreadsForNioWrite(1496);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setMaxThreadsForNioWrite(1496);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setQSObjectPoolMaker("3;Lg!o~l`nk");
      advancedSettings0.setSocketLinger(416);
      advancedSettings0.setBacklog(1496);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getBacklog();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesConnectionTime(416);
      advancedSettings0.setQSObjectPoolMaker("</backlog>\n");
      advancedSettings0.setClientSocketReceiveBufferSize((-2415));
      advancedSettings0.setMaxThreadsForNioWrite((-2415));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setSocketLinger((-1079));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setQSObjectPoolMaker("");
      assertEquals((-2415), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.net.server.impl.OptimisticClientIdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.net.server.impl.OptimisticClientIdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("</byte-buffer-size>\n");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setMaxThreadsForNioWrite((-198));
      advancedSettings0.setPerformancePreferencesLatency((-198));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTrafficClass("<E");
      advancedSettings0.setPerformancePreferencesLatency((-198));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime((-198));
      advancedSettings0.setBacklog((-1072));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getUseDirectByteBuffer();
      int int0 = advancedSettings0.getBacklog();
      assertEquals((-198), advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("'");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("'");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // '
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency((-658));
      advancedSettings0.setClientIdentifier("R<");
      advancedSettings0.setClientSocketTrafficClass("\t<max-threads-for-nio-write>");
      advancedSettings0.toXML("yxF}oJ-X[s$.HRWf?");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTrafficClass("\t<max-threads-for-nio-write>");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getBacklog();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setUseDirectByteBuffer(true);
      assertEquals("R<", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1448);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketSendBufferSize((-3324));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      String string0 = "";
      advancedSettings0.setCharset("");
      String string1 = "";
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("918PuyyrV\"%6ld");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 918PuyyrV\"%6ld
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 0;
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      int int1 = (-694);
      advancedSettings0.setPerformancePreferencesBandwidth((-694));
      advancedSettings0.setBacklog((-694));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("rf zZ{Cxj");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // rf zZ{Cxj
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1732));
      String string0 = "";
      advancedSettings0.setByteBufferSize((-1732));
      advancedSettings0.setClientSocketTrafficClass("");
      String string1 = "h!O";
      advancedSettings0.setQSObjectPoolMaker("h!O");
      advancedSettings0.getQSObjectPoolMaker();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("h!O");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // h!O
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(802);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth((-1431));
      advancedSettings0.setBacklog(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketSendBufferSize((-873));
      advancedSettings0.setMaxThreadsForNioWrite((-873));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setBacklog((-1431));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass(",D1$OImJM86Cs{l'LL");
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime((-873));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth((-873));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth((-1431));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      assertEquals((-873), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.toXML((String) null);
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
      
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(65536);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite(65536);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize((-4111));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setMaxThreadsForNioWrite(65536);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(287);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass("?!71\"+'2^f,y7");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(287);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("4tEp`M^E<[6$l}f|N");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.toXML("4tEp`M^E<[6$l}f|N");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings0.setDebugNonBlockingMode(false);
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(287, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(2786);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      assertEquals(2786, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("1I5@3HAl/7%d9aTCd>6");
      advancedSettings0.setPerformancePreferencesBandwidth((-3879));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth(2507);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset((String) null);
      assertEquals(2507, advancedSettings0.getPerformancePreferencesBandwidth());
  }
}
