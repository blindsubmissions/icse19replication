/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:18:50 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8253047184434539
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("mit");
      assertEquals("mis", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("^LsgH");
      String string1 = lovinsStemmer0.stem("^lsgh");
      assertEquals("^lsgh", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8606014951996964
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("ination");
      assertEquals("inat", string1);
      
      lovinsStemmer0.stem("idiIne");
      String string2 = lovinsStemmer0.stem("idi");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8625607747693367
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("idine");
      lovinsStemmer0.stem("|vEGA(oAp");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("idine");
      assertEquals("id", string1);
      
      String string2 = lovinsStemmer0.stem("id");
      assertTrue(string2.equals((Object)string1));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8654806939670101
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerdex");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("misend");
      lovinsStemmer0.stem("misens");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8296412350881615
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("iedy");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8787823722080881
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("F:CFh88]P5h.T\"");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstFmmedex");
      lovinsStemmer0.stemString("send");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("send");
      lovinsStemmer0.stem("send");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9757674911398136
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("used for axphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.et");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Czn";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("Czn");
      assertEquals("czn", string0);
      
      String string1 = lovinsStemmer1.stemString("used for axphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.et");
      assertEquals("us for axphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.et", string1);
      
      String string2 = lovinsStemmer1.stemString("us for axphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.et");
      assertEquals("us for axphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.et", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9042448340582876
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stem("idiIne");
      String string2 = lovinsStemmer0.stem("idi");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0220425388820982
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("-i\".#lW~&.Qe<:(");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "RBFCGd3l%4'zqPFq%%8";
      stringArray0[1] = "-i\".#lw~&.qe<:(";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("o39rcisyt");
      String string0 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string0);
      
      String string1 = lovinsStemmer0.stem("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("the www universal resource locator that points to the item being referenced. this often is used for technical reports to point to the ftp site where the postscript source of the report is located.", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9042448340582876
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("ation");
      assertEquals("ation", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.103898666230715
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("EDITOR");
      assertEquals("edit", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("8034");
      assertTrue(string3.equals((Object)string1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8654806939670101
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("3R@zwjS/;s%h@S`{.");
      lovinsStemmer0.stem("=o`\u0006ues%(k~4?tyz");
      lovinsStemmer0.stem("misend");
      lovinsStemmer0.stem("misens");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9497313690611725
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("rud");
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the informaton entirely. For small publishers, on the other hand, you can help the readr by giving the complete address.");
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the informaton entirely. For small publishers, on the other hand, you can help the readr by giving the complete address.");
      String[] stringArray0 = new String[5];
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the informaton entirely. For small publishers, on the other hand, you can help the readr by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th informat entir. for smal publishes, on th other hand, you can help th readr by giv th comples addres.", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0220425388820982
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("lovinsstemmerex");
      lovinsStemmer0.stem("-i\".#lW~&.Qe<:(");
      String string0 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string0);
      
      String string1 = lovinsStemmer0.stem("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("the www universal resource locator that points to the item being referenced. this often is used for technical reports to point to the ftp site where the postscript source of the report is located.", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.027512002879112
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("idpex");
      String string0 = lovinsStemmer0.stem("BUl");
      assertEquals("bl", string0);
      
      String string1 = lovinsStemmer0.stemString("iousness");
      assertEquals("ious", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9834315556898767
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string0);
      
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[mK,X-UI39<_r@S7e";
      stringArray0[1] = "[mK,X-UI39<_r@S7e";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stem("; @5L8NS-#x=K'tUm");
      assertEquals("; @5l8ns-#x=k'tum", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9884037515178937
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("erid");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("-i\".#lW~&.Qe<:(");
      String string0 = lovinsStemmer0.stemString("-i\".#lw~&.qe<:(");
      assertEquals("-i\".#lw~&.qe<:(", string0);
      
      String string1 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string1);
      
      String string2 = lovinsStemmer0.stem("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("the www universal resource locator that points to the item being referenced. this often is used for technical reports to point to the ftp site where the postscript source of the report is located.", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0248144376947763
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The work's title, typed as explained in the LaTeX book.");
      assertEquals("th work titl, typ as explain in th latic book.", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("The alernating decision tree le!ning algorithm");
      assertEquals("th alern decis tre le!ning algorithm", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9884037515178937
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("-i\".#lW~&.Qe<:(");
      lovinsStemmer0.stem("c9z'l}bz\"z@c&ez-vad");
      String string0 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string0);
      
      String string1 = lovinsStemmer0.stem("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("the www universal resource locator that points to the item being referenced. this often is used for technical reports to point to the ftp site where the postscript source of the report is located.", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9864885932036829
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rud");
      assertEquals("rus", string0);
      
      String string1 = lovinsStemmer0.stemString("'");
      assertEquals("'", string1);
      
      String string2 = lovinsStemmer0.stemString("vwmert");
      assertEquals("vwmers", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0248144376947763
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("bex");
      assertEquals("bic", string1);
      
      String string2 = lovinsStemmer0.stemString("The alernating decision tree le!ning algorithm");
      assertEquals("th alern decis tre le!ning algorithm", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9811160035892524
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the informaton entirely. For small publishers, on the other hand, you can help the readr by giving the complete address.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the informaton entirely. For small publishers, on the other hand, you can help the readr by giving the complete address.");
      lovinsStemmer0.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th informat entir. for smal publishes, on th other hand, you can help th readr by giv th comples addres.");
      String[] stringArray0 = new String[5];
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the informaton entirely. For small publishers, on the other hand, you can help the readr by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th informat entir. for smal publishes, on th other hand, you can help th readr by giv th comples addres.", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0367878406327178
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem(" <classname>\n");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("oa3ax");
      lovinsStemmer0.stem("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitlized, as shown here; the standard styles convert to lower case when necessary.");
      String string1 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitlized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capitl, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      String string2 = lovinsStemmer0.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capitl, as shown hes; th standard styl convers to lower cas when neces.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capitl, as shown he; th standard styl conver to lower ca when nec.", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8625607747693367
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("end");
      assertEquals("ens", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
      
      String string3 = lovinsStemmer0.stem("id");
      assertTrue(string3.equals((Object)string2));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0272498857938808
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = " <classname>\n";
      stringArray0[1] = "The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitlized, as shown here; the standard styles convert to lower case when necessary.";
      stringArray0[2] = "The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitlized, as shown here; the standard styles convert to lower case when necessary.";
      stringArray0[3] = " <classname>\n";
      stringArray0[4] = "The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitlized, as shown here; the standard styles convert to lower case when necessary.";
      stringArray0[5] = " <classname>\n";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ond");
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("workix");
      assertEquals("workic", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Warning, unable to load properties file(s) from system resource (Utils.java): ");
      assertEquals("warn, un to load propers fil(s) from system resourc (util.jav): ", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1199322748673473
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8034lud");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Get opti o: ");
      assertEquals("ges opt o: ", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.028055120471463
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("uad");
      assertEquals("uas", string1);
      
      lovinsStemmer0.stem("er");
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsste6merher");
      assertEquals("wek.cor.stemmer.lovinsste6merhes", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9042448340582876
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A($O>(";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("lid");
      assertEquals("lis", string1);
      
      String string2 = lovinsStemmer0.stem("idiIne");
      assertEquals("idi", string2);
      
      String string3 = lovinsStemmer0.stem("idi");
      assertEquals("id", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("used for axphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.et");
      assertEquals("us for axphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.et", string0);
      
      String string1 = lovinsStemmer0.stemString("RH>A`hPP\"nDU");
      assertEquals("rh>a`hp\"ndu", string1);
      
      String string2 = lovinsStemmer0.stem("ond");
      assertEquals("ons", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("tBbs',1&5i.?j/Ey0");
      assertEquals("tb,1&5i.?j/ey0", string0);
      
      String string1 = lovinsStemmer0.stem("8034");
      assertEquals("8034", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9503621868350776
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("eful");
      assertEquals("efl", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem(" dBIne");
      assertEquals(" db", string2);
      
      String string3 = lovinsStemmer0.stem(" db");
      assertEquals(" db", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0220425388820982
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("7t>ls6{cid");
      assertEquals("7t>ls6{cis", string0);
      
      lovinsStemmer0.stem("-i\".#lW~&.Qe<:(");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7t>ls6{cid";
      stringArray0[1] = "7t>ls6{cid";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string1);
      
      String string2 = lovinsStemmer0.stem("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("the www universal resource locator that points to the item being referenced. this often is used for technical reports to point to the ftp site where the postscript source of the report is located.", string2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.969125406536672
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("otide");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.8683517028465704
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`1zpand";
      stringArray0[1] = "`1zbex";
      stringArray0[2] = "8034";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("#QaR");
      assertEquals("#qar", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitlized, as shown here; the standard styles convert to lower case when necessary.";
      lovinsStemmer0.stem("lovinsstemmerax");
      lovinsStemmer0.stem("uct");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("acies");
      assertEquals("aci", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0180634119686076
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Can't add object to itself!");
      assertEquals("can't ad object to itself!", string0);
      
      String string1 = lovinsStemmer0.stemString("An article from a jounal or magazine.");
      assertEquals("an articl from a joun or magaz.", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      assertEquals("a work that is print and bound, but without a nam publishes or sponsor institut.", string0);
      
      String string1 = lovinsStemmer0.stemString("a work that is print and bound, but without a nam publishes or sponsor institut.");
      assertEquals("a work that is print and bound, but without a nam publish or spons institut.", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("learnpand");
      assertEquals("learnpans", string0);
      
      String string1 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.905786118041287
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[mK,X-UI39<_r@S7e";
      stringArray0[1] = "ished";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("idine");
      assertEquals("id", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("; @5L8NS-#x=K'kUm");
      assertEquals("; @5l8ns-#x=k'kum", string2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.101496521844435
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("[h?=;R");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("aical");
      assertEquals("aic", string0);
      
      lovinsStemmer0.stem("er");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsste6merher");
      assertEquals("wek.cor.stemmer.lovinsste6merhes", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      String string0 = lovinsStemmer0.stemString("o%0VaNu/Ol2\"hRr");
      assertEquals("o%0vanu/ol2\"hr", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("L,~|+,x;17tp,");
      lovinsStemmer0.stem("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitlized, as shown here; the standard styles convert to lower case when necessary.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("l/E5");
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("S");
      lovinsStemmer2.stemString("8034");
      lovinsStemmer1.stem("ement");
      lovinsStemmer1.stem("l/E5");
      lovinsStemmer0.stem("F:CFh88]P5h.T\"");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      assertFalse(lovinsStemmer3.equals((Object)lovinsStemmer2));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("used for axphabetizing, cross referencing, and creating a labelwhen the ``author'' information is missing. this field shoul not be confusedwith the key that appears in the cite command and ax the beginning of the database entry.et");
      assertEquals("us for axphabes, cros refer, and creat a labelwh th ``author'' inform is mis. th field shoul not be confusedwith th key that appear in th cit command and ax th begin of th databas entr.et", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the informaton entirely. For small publishers, on the other hand, you can help the readr by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th informat entir. for smal publishes, on th other hand, you can help th readr by giv th comples addres.", string0);
      
      lovinsStemmer0.stemString("bl0>Pmt*Us+");
      String string1 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("INPROCEEDINGS");
      assertEquals("inproceed", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1259411128049128
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("uaond");
      assertEquals("uaons", string0);
      
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "uaond";
      stringArray0[1] = "uaons";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "uaons";
      stringArray0[5] = "uaons";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("Fatal error.");
      assertEquals("fat error.", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("cznet");
      assertEquals("cznet", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("D@sgg :v#1J");
      assertEquals("d@sg :v#1j", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem(">tx#W?b9D,4E~.*");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("+.uli=jF");
      lovinsStemmer0.stemString("edully");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("a");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.107512128900409
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("#)_ QiuX*/SqjOAr/O");
      String string0 = lovinsStemmer0.stemString("#)_ QiuX*/SqjOAr/O");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("VOLUME");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "used for axphabetizing, cross referencing, and,creating a label when the ``author'' informamion is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.et";
      stringArray0[1] = "Vv>}'F{L?/fptiS";
      stringArray0[2] = "used for axphabetizing, cross referencing, and,creating a label when the ``author'' informamion is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.et";
      stringArray0[3] = "used for axphabetizing, cross referencing, and,creating a label when the ``author'' informamion is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.et";
      stringArray0[4] = "VOLUME";
      stringArray0[5] = "VOLUME";
      stringArray0[6] = "volum";
      stringArray0[7] = "volum";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer1.stemString("VOLUME");
      assertEquals("volum", string0);
      
      String string1 = lovinsStemmer1.stemString("volum");
      assertEquals("vol", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Czn";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("Czn");
      assertEquals("czn", string0);
      
      String string1 = lovinsStemmer1.stemString("_xGRW%+aUL^{dV");
      assertEquals("_xgrw%+aul^{dv", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(",");
      assertEquals(",", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",";
      stringArray0[1] = ",";
      String string1 = lovinsStemmer0.stem("zLn>rUm");
      assertEquals("zln>r", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("8034pex");
      assertEquals("8034pic", string2);
      
      String string3 = lovinsStemmer0.stem("zln>r");
      assertEquals("zln>r", string3);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1139795535003996
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("8034");
      assertEquals("8034", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8034";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("fk.yrON\"#");
      assertEquals("fk.yron\"#", string1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("{Y+DDS%^-X)9Ne");
      assertEquals("{y+dds%^-x)9n", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("mwpher");
      assertEquals("mwpher", string2);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("#)_ QiuX*/SqjLAr/O");
      lovinsStemmer0.stemString("#)_ QiuX*/SqjLAr/O");
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }
}
