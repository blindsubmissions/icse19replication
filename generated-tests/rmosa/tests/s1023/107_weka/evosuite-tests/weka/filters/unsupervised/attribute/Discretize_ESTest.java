/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 15:57:31 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = 0.0;
      doubleArray0[2] = (-1203.9936047);
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      
      String string1 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string1);
      
      String string2 = discretize0.getRevision();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("8964", string2);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9978527044124283
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(298);
      double[][] doubleArray0 = new double[9][2];
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getBinRangesString(5);
      assertEquals(298, discretize0.getBins());
      
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 5;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(-inf-0],(0-0],(0-inf)";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize(")=G");
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5065950881316383
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize();
      int int0 = 637;
      discretize0.m_ClassIndex = 637;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 637);
      Attribute attribute0 = new Attribute("Can only set values for nominal or string attributes!");
      arrayList0.add(attribute0);
      instances0.containsAll(arrayList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setInputFormat(instances0);
      SystemInUtil.addInputLine("SB@");
      int int1 = 51;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("A", arrayList1, 637);
      arrayList0.add(attribute1);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useEqualFrequencyTipText();
      int int0 = 119;
      MultiFilter multiFilter0 = new MultiFilter();
      try { 
        Filter.makeCopies(discretize0, (-21));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.03195622385697
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_UseBinNumbers = true;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getMakeBinary());
      
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-M";
      stringArray0[1] = "8Y*w?)u`*As V}U$";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("-B");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-B";
      stringArray0[1] = "-B";
      stringArray0[2] = "-B";
      stringArray0[3] = "-B";
      stringArray0[4] = "-B";
      stringArray0[5] = "-B";
      stringArray0[6] = "-B";
      stringArray0[7] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-B\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2420052954825502
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(298);
      double[][] doubleArray0 = new double[9][2];
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "1271,7,-2411,-862,-1879048188,-1842,-1431655762,-361,215";
      stringArray0[2] = "-S5Rr";
      stringArray0[3] = "values[i] = format.attribute(i).indexOfValue((String) obj[i]);";
      stringArray0[4] = "AOqa4%Y";
      stringArray0[5] = ")=G";
      stringArray0[6] = "-R";
      stringArray0[7] = "first-last";
      stringArray0[8] = "fMaez{FQY)ua";
      Discretize.main(stringArray0);
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getBinRangesString(5);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 5;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(298);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[14][2];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2359.5965754;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = 2359.5965754;
      doubleArray3[1] = 2359.5965754;
      doubleArray3[2] = (-649.679518);
      double[] doubleArray4 = new double[5];
      doubleArray4[1] = 2359.5965754;
      doubleArray2[1] = 0.0;
      doubleArray4[3] = (-649.679518);
      doubleArray4[4] = 2359.5965754;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray0[4] = doubleArray5;
      doubleArray0[5] = doubleArray0[1];
      double[] doubleArray6 = new double[6];
      doubleArray6[2] = 2359.5965754;
      doubleArray6[3] = 2621.499;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 2621.499;
      doubleArray0[13] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-1748));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1748
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.setIgnoreClass(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2275247137250096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 637);
      Attribute attribute0 = new Attribute("Can only set values for nominal or string attributes!");
      arrayList0.add(attribute0);
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      instances0.containsAll(arrayList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setInputFormat(instances0);
      attribute0.setStringValue(".arff");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1154);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = 637;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 637);
      Attribute attribute0 = new Attribute("Can only set values for nominal or string attributes!");
      arrayList0.add(attribute0);
      instances0.containsAll(arrayList0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setInputFormat(instances0);
      SystemInUtil.addInputLine("SB@");
      discretize0.getBinRangesString(448);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.setOptions((String[]) null);
      discretize0.setOptions((String[]) null);
      System.setCurrentTimeMillis(448);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9852314110718627
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(10010);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 10010);
      Attribute attribute0 = new Attribute((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "";
      arrayList0.toArray(objectArray0);
      Attribute attribute1 = new Attribute("A\"kh#@,U7i%|Lx-HwN4");
      arrayList0.add(attribute1);
      boolean boolean0 = discretize0.m_UseBinNumbers;
      discretize0.setInputFormat(instances0);
      Attribute attribute2 = new Attribute("date", (List<String>) null);
      arrayList0.add(attribute1);
      arrayList0.add(attribute2);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'A\"kh#@,U7i%|Lx-HwN4' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 637);
      Attribute attribute0 = new Attribute(".arff");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      attribute0.setStringValue(".bsi");
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      discretize0.setOutputFormat();
      String string0 = discretize0.getBinRangesString(0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("All", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6612067799368373
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize();
      discretize0.setBins(2129);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2129);
      Attribute attribute0 = new Attribute(".arff");
      arrayList0.add(attribute0);
      discretize0.getMakeBinary();
      discretize0.setInputFormat(instances0);
      discretize0.getBinRangesString((-428));
      discretize0.batchFinished();
      attribute0.setStringValue("HRJP=zCUXpFu^<w;");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(245);
      discretize0.input(binarySparseInstance0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1902);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1902
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-213936));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 37);
      Attribute attribute0 = new Attribute("@data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Max     ", arrayList0, 283);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Attribute attribute0 = new Attribute(".bsi");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute1 = new Attribute("integer", arrayList1);
      arrayList0.add(attribute1);
      discretize0.setInputFormat(instances0);
      attribute1.setStringValue("integer");
      instances0.compactify();
      boolean boolean0 = discretize0.batchFinished();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(2069.80082566076, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      discretize0.convertInstance(denseInstance0);
      assertTrue(discretize0.isNewBatch());
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertTrue(boolean1 == boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 86);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Attribute attribute0 = new Attribute(",'KPz$oo,sVu! R");
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile1);
      Attribute attribute1 = new Attribute("");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: ','KPz$oo,sVu! R' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 86);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Attribute attribute0 = new Attribute(",'KPz$oo,sVu! R");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      attribute0.setStringValue("Can only set values for nominal or string attributes!");
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 86;
      doubleArray0[1] = (-0.038461538461538464);
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (-0.038461538461538464);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance((-0.038461538461538464), doubleArray0);
      discretize0.convertInstance(denseInstance0);
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(boolean0);
      
      discretize0.setOutputFormat();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.497200696923035
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 86);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Attribute attribute0 = new Attribute(",'KPz$oo,sVu! R");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      attribute0.setStringValue("Can only set values for nominal or string attributes!");
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 86;
      doubleArray0[1] = (-0.038461538461538464);
      doubleArray0[2] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance((-937.212), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      doubleArray0[3] = (-0.038461538461538464);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance((-0.038461538461538464), doubleArray0);
      denseInstance0.setMissing(0);
      discretize0.convertInstance(denseInstance0);
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = 637;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 637);
      Attribute attribute0 = new Attribute("Can only set values for nominal or string attributes!");
      arrayList0.add(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setInputFormat(instances0);
      discretize0.getBinRangesString(4);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      attribute0.equalsMsg((Object) null);
      intArray0[1] = 637;
      intArray0[2] = 637;
      intArray0[4] = 4;
      intArray0[6] = (-1357);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.7, intArray0, 350);
      discretize0.batchFinished();
      discretize0.input(binarySparseInstance0);
      discretize0.convertInstance(binarySparseInstance0);
      discretize0.input(binarySparseInstance0);
      boolean boolean0 = discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("iBVH7)eO7#F~Lt6", arrayList0, 9);
      Attribute attribute0 = new Attribute("Only multi-Instance data");
      attribute0.addRelation(instances0);
      arrayList0.add(attribute0);
      instances0.containsAll(arrayList0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 2.0;
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 86);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      discretize0.setUseEqualFrequency(true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      Attribute attribute0 = new Attribute(",'KPz$oo,sVu! R");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      attribute0.setStringValue(".arff");
      discretize0.batchFinished();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Attribute attribute1 = new Attribute("@end", 0);
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("K~HMxIu(qb,y!-s", arrayList0, 86);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      discretize0.getInvertSelection();
      FileSystemHandling.createFolder(evoSuiteFile0);
      discretize0.m_FindNumBins = true;
      Attribute attribute0 = new Attribute(".arff");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      attribute0.setStringValue(".arff");
      discretize0.batchFinished();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-0.038461538461538464);
      DenseInstance denseInstance0 = new DenseInstance(5856.601554162, doubleArray0);
      discretize0.setInvertSelection(true);
      discretize0.convertInstance(denseInstance0);
      discretize0.setInputFormat(instances0);
      attribute0.setWeight(0.0);
      discretize0.setOutputFormat();
      instances0.add((Instance) denseInstance0);
      discretize0.m_DefaultCols = "string";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("*dGxuW#79Q%o'#5rF*", arrayList0, 113);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      discretize0.m_UseEqualFrequency = true;
      discretize0.m_FindNumBins = true;
      Attribute attribute0 = new Attribute("*dGxuW#79Q%o'#5rF*", 113);
      arrayList0.add(attribute0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
