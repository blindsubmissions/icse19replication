/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 15:57:17 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.quote("~_:F('w+#+< I");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("isdoubleToLongBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdoubleToLongBits\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.quote("@2 x1'q Lz/");
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("\"@2 x1'q Lz/\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"@2 x1'q Lz/\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3396091171567721
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject.quote("r^:jrZ:i7xD*/i%.~=/");
      JSONObject jSONObject0 = new JSONObject((Object) "\"r^:jrZ:i7xD*/i%.~=/\"");
      Byte byte0 = new Byte((byte) (-98));
      try { 
        jSONObject0.accumulate((String) null, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject.quote("r^:jrZ:i7xD*/.~=/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("r^:jrZ:i7xD*/.~=/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of r^:jrZ:i7xD*_/.~=/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.quote("r^:jrZ:i7xD*/i%.~=/");
      JSONTokener jSONTokener0 = new JSONTokener("r^:jrZ:i7xD*/i%.~=/");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of r^:jrZ:i7xD*_/i%.~=/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "Z87j2");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.quote("~_NN:f('w++< ZI");
      JSONObject jSONObject0 = new JSONObject((Object) "~_NN:f('w++< ZI");
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", false);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = "1\n";
      JSONObject.quote("1\n");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1\n";
      stringArray0[1] = "\"1\n\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject.quote("~e_:Fs('w+#+< I");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "~e_:Fs('w+#+< I";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getLong("D C&*yY$S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D C&*yY$S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = JSONObject.quote("B)\n");
      assertEquals("\"B)\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optBoolean("N86X_x`yk84$cY8h96*", true);
      String string0 = "bGg~;Wo";
      JSONTokener jSONTokener0 = new JSONTokener("mi");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of mi
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6528213268992737
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject.quote("2 Vu [GzNI");
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("V6AIe^B");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = JSONObject.quote("\f");
      assertEquals("\"\\f\"", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject.quote("_~3\n");
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      try { 
        jSONObject0.getBoolean("\"_~3\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"_~3\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject.quote("_\n");
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.names();
      jSONObject0.put("\"_\n\"", 152.4326796);
      assertEquals(4, jSONObject0.length());
      
      JSONObject.numberToString(float0);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.quote("A3\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("A3\n", (-1462L));
      jSONObject0.remove("\"A3\n\"");
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 2089L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = JSONObject.quote("r^:jrZ:i7xD*/i%.~=/");
      Float float0 = new Float(2679.6628);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JSONObject.quote("@2 x1'q Lz/");
      Integer integer0 = new Integer((-1));
      Integer.sum((-1), (-1));
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote("@2 x1'q Lz/");
      Long long0 = new Long(0L);
      String string1 = JSONObject.valueToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = JSONObject.quote("B)\n");
      Short short0 = new Short((short) (-2459));
      String string1 = JSONObject.valueToString(short0, (short) (-2459), (short) (-2459));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Float float0 = new Float(0.0F);
      jSONObject0.optString("null");
      Integer integer0 = new Integer(1936);
      assertEquals(1936, (int)integer0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2281);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.686280439492315
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "_aR{f";
      jSONObject0.accumulate("_aR{f", "_aR{f");
      jSONObject0.optInt("8/b!}[IiEG14Q}", 47);
      try { 
        jSONObject0.getBoolean("_aR{f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_aR{f\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8840633284714166
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      jSONObject0.optInt("] not found.");
      JSONObject jSONObject1 = jSONObject0.accumulate("CaWrf", "CaWrf");
      try { 
        jSONObject1.getBoolean("CaWrf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"CaWrf\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Az%2bBR", 0);
      Integer integer0 = new Integer(0);
      JSONObject.quote("Az%2bBR");
      jSONObject0.optString((String) null);
      String string0 = ",:]}/\\\"[{;=#";
      jSONObject0.optString("Az%2bBR", ",:]}/\"[{;=#");
      String string1 = "\\f";
      JSONTokener jSONTokener0 = new JSONTokener("\f");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \f
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = JSONObject.quote("o+nK#s (Vf");
      assertEquals("\"o+nK#s (Vf\"", string0);
      
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>(1685, 1685);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("o+nK#s (Vf");
      assertEquals(0L, long0);
      
      String string1 = jSONObject0.toString(1685, 1685);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = JSONObject.quote("r^:jrZ:i7xD*/i%.~=/");
      assertEquals("\"r^:jrZ:i7xD*/i%.~=/\"", string0);
      
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString(2460, 2592);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JSONObject.quote("_\n");
      assertEquals("\"_\\n\"", string0);
      
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(56);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.quote("null");
      assertEquals("\"null\"", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = JSONObject.quote("1\n");
      assertEquals("\"1\\n\"", string0);
      
      Byte byte0 = new Byte((byte)83);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString(223, 10);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JSONObject.quote("_\n");
      assertEquals("\"_\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0, 96, (-157));
      assertEquals("{}", string1);
      
      String string2 = jSONObject0.toString(96, 92);
      assertEquals("{}", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("gettoUnsignedLong");
      try { 
        jSONObject0.getJSONObject("%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSONObject.quote("2 'q LPGz/");
      assertEquals("\"2 'q LPGz/\"", string0);
      
      String string1 = JSONObject.valueToString("2 'q LPGz/", 10, 10);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote("r^:jrZ:i7xD*/i%.~=/");
      assertEquals("\"r^:jrZ:i7xD*/i%.~=/\"", string0);
      
      String string1 = JSONObject.valueToString("\"r^:jrZ:i7xD*/i%.~=/\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = " of ";
      jSONObject0.accumulate(" of ", " of ");
      jSONObject0.accumulate(",EO", ",EO");
      try { 
        jSONObject0.getBoolean(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("_aR{f", 90);
      jSONObject0.accumulate("_aR{f", "_aR{f");
      try { 
        jSONObject0.getBoolean("_aR{f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_aR{f\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject.quote("1\n");
      Object object0 = JSONObject.NULL;
      int int0 = 3;
      JSONObject.valueToString(object0, 3, 1503);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isintBitsToFloat");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isintBitsToFloat
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6698932216137069
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject.quote("1\n");
      int int0 = 34;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(2161, (Collection) linkedList0);
      try { 
        jSONArray1.getBoolean(1348);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1348] is not a Boolean.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      JSONObject jSONObject1 = jSONObject0.put("Expected '", 88);
      jSONObject1.getInt("Expected '");
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Az#2bBR", 0);
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      long long0 = jSONObject0.optLong("Az#2bBR", (long) 0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = JSONObject.NULL;
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt((String) null, hashMap0);
      JSONObject.valueToString((Object) null, (-1992), (-1992));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = JSONObject.quote("B)A3\n");
      assertEquals("\"B)A3\\n\"", string0);
      
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString((-941), (-941));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = JSONObject.quote("_\n");
      assertEquals("\"_\\n\"", string0);
      
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(2103, 9);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject.quote("Expected '");
      JSONObject jSONObject0 = new JSONObject((Object) "\"Expected '\"");
      // Undeclared exception!
      jSONObject0.toString(8448, 342);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-1.0));
      JSONObject jSONObject1 = jSONObject0.put("is", (Object) null);
      assertEquals(0, jSONObject1.length());
      
      String string0 = JSONObject.doubleToString(1903.1532);
      assertEquals("1903.1532", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "{+`;";
      JSONTokener jSONTokener0 = new JSONTokener("{+`;");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {+`;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      JSONObject jSONObject1 = jSONObject0.put("Expected '", (-1065));
      jSONObject1.getDouble("Expected '");
      try { 
        jSONObject0.getJSONObject("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject.quote("B)Ar\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\"B)Ar\n\"", (Object) null);
      jSONObject0.toString(3076, 55);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      jSONArray0.put((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONArray0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject.quote("v u{ +GC &II");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "v u{ +GC &II";
      stringArray0[1] = "isparseDouble";
      stringArray0[2] = "\"v u{ +GC &II\"";
      stringArray0[3] = "v u{ +GC &II";
      stringArray0[4] = "\"v u{ +GC &II\"";
      stringArray0[5] = "\"v u{ +GC &II\"";
      stringArray0[6] = "v u{ +GC &II";
      stringArray0[7] = "v u{ +GC &II";
      JSONObject jSONObject0 = new JSONObject("\"v u{ +GC &II\"", stringArray0);
      jSONObject0.optDouble("bQ", 3615.66818518);
      try { 
        jSONObject0.getBoolean("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, (-2490), (-2490));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray(": ");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7520813091334682
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Az#2bBR", 730);
      Byte byte0 = new Byte((byte)123);
      jSONObject1.put("Az#2bBR", (Object) byte0);
      StringWriter stringWriter0 = new StringWriter(93);
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Double double0 = new Double((-2355.83));
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter(2761);
      jSONObject0.write(stringWriter0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("NXC@OZ");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      Object object0 = new Object();
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      float float2 = (-1.0F);
      Float.sum((-1.0F), 1182.68F);
      hashMap0.put(object0, float1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "par";
      Float.sum((-1.0F), (-1.0F));
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject.quote("_\n");
      Double double0 = new Double(1487.9841933121);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.getNames(jSONObject0);
      // Undeclared exception!
      jSONObject0.toString(1710, 1710);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3613233274651777
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("BLx@O, ),0", (Collection) linkedList0);
      jSONObject0.optBoolean("Substring bounds error");
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", 1398L);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      JSONObject jSONObject2 = jSONObject1.putOpt("Substring bounds error", linkedList0);
      jSONObject2.put("Substring bounds error", (Collection) linkedList0);
      jSONObject1.toString((-1992), (-1992));
      JSONObject.testValidity(jSONObject0);
      String string0 = JSONObject.valueToString(jSONObject0);
      Byte byte0 = new Byte((byte)120);
      String string1 = JSONObject.valueToString(byte0, (-551), (-903));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("(3L>hcqa", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "re";
      jSONObject0.put("re", (Object) "re");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.getLong("re");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"re\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1120.1));
      assertEquals("-1120.1", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer((-2747));
      jSONArray0.put(false);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(jSONArray0);
      assertNotSame(jSONArray0, jSONArray1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5171534199663772
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = JSONObject.quote("_\n");
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      Integer integer0 = new Integer(92);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject0.put("re", (Object) "re");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.append("re", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[re] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected '", (-1065));
      double double0 = jSONObject0.optDouble("Expected '", 0.0);
      assertEquals(1, jSONObject0.length());
      assertEquals((-1065.0), double0, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("BLx@O, ),0", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getJSONArray("BLx@O, ),0");
      String string0 = JSONObject.valueToString(linkedList0, 297, 62);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate(" askw", " askw");
      try { 
        jSONObject1.getJSONArray(" askw");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" askw\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "_aR{f";
      JSONObject jSONObject1 = jSONObject0.accumulate("_aR{f", "_aR{f");
      try { 
        jSONObject1.getInt("_aR{f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_aR{f\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 730;
      jSONObject0.put(".jnmLxW6@+/", (Object) jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "{TL$3%:=v+j";
      JSONTokener jSONTokener0 = new JSONTokener("{TL$3%:=v+j");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 7 of {TL$3%:=v+j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      jSONObject0.put("{}", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("{}");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("Fj*vbE6q*kL@,", jSONObject0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("Fj*vbE6q*kL@,", object0);
      Object object1 = new Object();
      JSONArray jSONArray0 = jSONObject1.optJSONArray("Fj*vbE6q*kL@,");
      assertEquals(1, jSONObject0.length());
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.8872422356445006
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "{Uz .08=(;Y:v";
      JSONTokener jSONTokener0 = new JSONTokener("{Uz .08=(;Y:v");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {Uz .08=(;Y:v
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "Km>>L";
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.accumulate("h&;qt+V?", boolean0);
      jSONObject0.getBoolean("h&;qt+V?");
      try { 
        jSONObject1.getBoolean("h&;qt+V?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"h&;qt+V?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double((-2355.83));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("true", "true");
      jSONObject0.getBoolean("true");
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = (-3664);
      jSONObject0.toString((-3664), (-5402));
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      try { 
        jSONObject1.get("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": \\\"java.lang.Class@0000000003\\\"}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("BLx@O, ),0", (Collection) linkedList0);
      jSONObject1.accumulate("BLx@O, ),0", jSONObject0);
      JSONTokener jSONTokener0 = new JSONTokener("@ifR84]");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of @ifR84]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.toString();
      try { 
        jSONObject0.getBoolean("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.885157620879215
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float((-3543.1615094232698));
      Float.sum((-2354.7F), (-2354.7F));
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.append("JSONArray[", float0);
      jSONObject0.toString(1612, 64);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.accumulate("%cz", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("%cz");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "BLx@O, ),0";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("BLx@O, ),0", (Collection) linkedList0);
      Float float0 = new Float((double) 1398L);
      Integer integer0 = new Integer(57);
      jSONObject0.append("BLx@O, ),0", integer0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
      
      JSONObject.numberToString(double0);
      String string0 = JSONObject.doubleToString(10);
      assertEquals("10", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = " askw";
      JSONObject jSONObject1 = jSONObject0.accumulate(" askw", " askw");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = new JSONObject((Map) null);
      jSONObject1.putOpt(" askw", jSONObject2);
      jSONObject1.getJSONObject(" askw");
      JSONObject jSONObject3 = new JSONObject();
      try { 
        jSONArray0.getJSONArray(20);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[20] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-64574692));
      assertEquals("-6.4574692E7", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = JSONObject.quote("mtf_PKe~</DEG\"");
      assertEquals("\"mtf_PKe~<\\/DEG\\\"\"", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "{czaU.08==\":v";
      JSONTokener jSONTokener0 = new JSONTokener("{czaU.08==\":v");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 9 of {czaU.08==\":v
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Float float0 = new Float((-3543.1615094232698));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getLong("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{cza!U.08=>/6:v");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 11 of {cza!U.08=>/6:v
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("BLx@O, ),0", (Collection) linkedList0);
      jSONObject0.optBoolean("Substring bounds error");
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", 1398L);
      jSONObject1.putOpt("Substring bounds error", linkedList0);
      jSONObject1.toString((-1992), (-1992));
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000006\": []\n}");
      JSONObject jSONObject3 = new JSONObject(jSONTokener0);
      try { 
        jSONObject3.getBoolean("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
