/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:15:46 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.nio.CharBuffer;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.services.cache.CacheManager;
import org.apache.derby.iapi.services.cache.Cacheable;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.jca.FBLocalTransaction;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.jdbcx.JdbcConnectionPool;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("40[VuA>");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "40[VuA>";
      stringArray0[3] = "40[VuA>";
      SQLUtil.leftJoin("*", stringArray0, "40[VuA>", " arg1=[", stringArray0);
      DBDataType.getInstance(127, " arg1=[");
      System.setCurrentTimeMillis(127);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin((String) null, (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.30682915344097056
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("kh3r-[5-X_)c", false);
      assertEquals("kh3r - [ 5 - X_) c", string0);
      
      String string1 = SQLUtil.normalize("//", false);
      assertEquals("/ /", string1);
      
      StringBuilder stringBuilder0 = new StringBuilder("/ /");
      System.setCurrentTimeMillis((-1799L));
      boolean boolean0 = SQLUtil.isQuery("kh3r  - [ 5 - X_) c");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9434390759671093
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "}2)i/KW";
      SQLUtil.mutatesStructure("}2)i/KW");
      SQLUtil.normalize("}2)i/KW", false);
      int int0 = (-299105218);
      Random.setNextRandom((-299105218));
      Boolean boolean0 = Boolean.TRUE;
      System.setCurrentTimeMillis((-299105218));
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "}2)i/KW");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-299105218), 0.0F);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -299105218
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6081583698769648
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.normalize("aD4pC.<JkO:,", true);
      assertEquals("aD  4pC.< JkO : ,", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("41dN, {ayn]cu-HedL8", false, (String) null, "left");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK left", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.7990591844756405
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.normalize("{`[SwFbbjN6w", true);
      assertEquals("{ ` [  SwFbbjN6w", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{ ` [  Sw  FbbjN6w";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "LN#Xtk5 8VR", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("M", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "update", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ({ ` [  Sw  FbbjN6w)", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[6];
      String string0 = "";
      stringArray0[1] = "";
      stringArray0[2] = "qbzvINHnVTsm]";
      String string1 = " NOT NULL";
      stringArray0[3] = " NOT NULL";
      stringArray0[5] = "uw\" ";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "VzOfh.";
      stringArray0[4] = "VzOfh.";
      stringArray0[5] = "VzOfh.";
      SQLUtil.renderColumnListWithTableName("VzOfh.", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , VzOfh., , VzOfh., VzOfh.)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SQLUtil.normalize("MT(7\"2-,[D", true);
      assertEquals("MT (7 \"2-,[D\"", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "MT(7\"2-,[D";
      stringArray0[1] = "MT (7 \"2-,[D\"";
      stringArray0[2] = "MT (7 \"2-,[D\"";
      stringArray0[3] = "MT (7 \"2-,[D\"";
      stringArray0[4] = "MT (7 \"2-,[D\"";
      stringArray0[5] = "MT(7\"2-,[D";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("MT (7 \"2-,[D\"", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (MT(7\"2-,[D, MT (7 \"2-,[D\", MT (7 \"2-,[D\", MT (7 \"2-,[D\", MT (7 \"2-,[D\", MT(7\"2-,[D) REFERENCES null(MT(7\"2-,[D, MT (7 \"2-,[D\", MT (7 \"2-,[D\", MT (7 \"2-,[D\", MT (7 \"2-,[D\", MT(7\"2-,[D)", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.normalize("2FZ6#sLX(uKpG", false);
      assertEquals(" 2FZ  6 # sLX (uKpG", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SQLUtil.mutatesDataOrStructure("alter index");
      FromVTI fromVTI0 = new FromVTI();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      fromVTI0.getContextManager();
      genericLanguageConnectionFactory0.getStatementCache();
      Cacheable cacheable0 = genericLanguageConnectionFactory0.newCacheable((CacheManager) null);
      assertFalse(cacheable0.isDirty());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5444172040217983
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SQLUtil.normalize("0s5[q|<W(ZMB4j,{(BE", false);
      SQLUtil.mutatesDataOrStructure("callgetmaterializedresultset");
      SQLUtil.mutatesDataOrStructure("0s5[q|<W(ZMB4j,{(BE");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("MVCC");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("fM_oK8\"IW=", "fM_oK8\"IW=", "fM_oK8\"IW=");
      assertEquals("'fM_oK8\"IW='", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(335544463);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("create unique index#3=4rn-+8fsu5}tj", stringBuilder0);
      int int0 = 720;
      String string0 = "ISO_YEAR";
      // Undeclared exception!
      try { 
        stringBuilder1.insert(720, "ISO_YEAR");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 720
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "insert";
      stringArray0[1] = "insert";
      stringArray0[2] = "insert";
      stringArray0[3] = "exec";
      stringArray0[4] = "insert";
      stringArray0[5] = "insert";
      stringArray0[6] = "insert";
      stringArray0[7] = "-";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "insert", false, stringArray0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = " or ";
      String[] stringArray0 = new String[1];
      stringArray0[0] = " or ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" or ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      stringBuilder1.append(charArray0);
      int int0 = (-104359991);
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-104359991), (-289528186));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -104359991
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, stringArray0, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.normalize("alter session0s5[q|<w(zmb4j,{(be", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter session0s5[q|<w(zmb4j,{(be");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter session0s5[q|<w(zmb4j,{(be";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter session0s5[q|<w(zmb4j,{(be", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      Random.setNextRandom(19);
      Random.setNextRandom(19);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" A~/8@");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table  A~/8@", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "W`9OQ:Z<To-*";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W`9OQ:Z<To-*";
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBDataType.getInstance((-3277), " oin ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" oin ");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " oin ");
      stringBuilder0.appendCodePoint(18);
      StringBuilder stringBuilder1 = stringBuilder0.append((double) (-32));
      stringBuilder1.append((float) (-32));
      SQLUtil.addOptionalCondition("CLOB", stringBuilder1);
      assertEquals(" oin \u0012-32.0-32.0 or CLOB", stringBuilder1.toString());
      assertEquals(" oin \u0012-32.0-32.0 or CLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.32450838693107065
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = false;
      SQLUtil.normalize("kh3r-[5-X_)c", false);
      StringBuilder stringBuilder0 = new StringBuilder("kh3r-[5-X_)c");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.commentChar(1045);
      SQLUtil.renderNumber(streamTokenizer0);
      try { 
        pipedReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize("a![|FF\"N3CCc+>t", false);
      assertEquals("a ! [ | FF \"N3CCc+>t\"", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema(" WHERE ");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(" WHERE ", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(40, (float) 40);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 40
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "DJ=9IP86.iLnn)eH", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT DJ=9IP86.iLnn)eH ", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Character character0 = Character.valueOf('(');
      SQLUtil.renderValue(character0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      Character.isSurrogate('(');
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9278749699972223
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("#0vDZCR!", false);
      assertEquals("# 0vDZCR !", string0);
      
      SQLUtil.removeComments("#0vDZCR!");
      SQLUtil.normalize(",z", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("#0vDZCR!");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ", z";
      stringArray0[1] = null;
      stringArray0[2] = ",z";
      stringArray0[3] = "#0vDZCR!";
      stringArray0[4] = "# 0vDZCR !";
      stringArray0[5] = ", z";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, z, , ,z, #0vDZCR!, # 0vDZCR !, , z)", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index0s5[q|<w(zmb4j,{(be");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop index0s5[q|<w(zmb4j,{(be";
      stringArray0[1] = "drop index0s5[q|<w(zmb4j,{(be";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop index0s5[q|<w(zmb4j,{(be", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      StringBuilder stringBuilder0 = new StringBuilder("(4F8LF$HL");
      SQLUtil.addRequiredCondition("alter materialized view", stringBuilder0);
      char[] charArray0 = new char[1];
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("updatemg4axs=a#bidyaflo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumnNames();
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("Bzb?47RfN,d)KJ");
      assertFalse(boolean0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "DJ=9IP86.iLnn)eH";
      stringArray0[2] = stringArray0[0];
      stringArray0[3] = null;
      stringArray0[2] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) pGConnectionPoolDataSource0);
      jdbcConnectionPool0.getLogWriter();
      DBSchema dBSchema0 = new DBSchema("create tablemvcc");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create tablemvcc", dBSchema0);
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create tablemvcc", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      Random.setNextRandom(46);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter materialized view0s5[q|<w(zmb4j,{(be", true);
      assertEquals("alter materialized view0s5 [ q | < w (zmb4j, { (be", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("$Lx/,{>u!D:kjY");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema1 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema1);
      String string0 = SQLUtil.ownerDotComponent(dBSchema1);
      assertEquals("null.", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("<Jj(r0$]h)7Q%}oj", false);
      assertEquals("< Jj (r0 $ ] h) 7Q % } oj", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("j#/6%vYS/VXSbW", false);
      assertEquals("j # / 6 % vYS / V  XSbW", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("c/");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("GV", compositeDBObject0);
      tableContainer0.getTable("9tXt");
      DBDataType dBDataType0 = DBDataType.getInstance((-1120594862), "GV");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c/", (DBTable) null, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("c/", (DBTable) null, 2605, "${-?UNgs,");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("drop table", (DBTable) null, dBDataType0, integer1, integer2);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("CLOB", (DBTable) null, dBDataType0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DBDataType dBDataType1 = DBDataType.getInstance((-1758), "c/");
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType1, integer1, integer3);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("c/, c/, drop table, CLOB, null", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize("SELECT * FROM ", false);
      assertEquals("SELECT * FROM", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/*");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/*";
      stringArray0[3] = "/*";
      stringArray0[4] = "/*";
      stringArray0[6] = "/*";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder1);
      try { 
        pipedReader0.read(charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/*");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("============= end nested exception, level (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ============= end nested exception, level (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "alter session";
      SQLUtil.mutatesDataOrStructure("alter session");
      String string1 = "<Q<";
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("<Q<", true, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.ANTLRStringStream", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CHECK ");
      DBSchema dBSchema0 = new DBSchema("CHECK ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CHECK ", dBSchema0);
      dBSchema0.getTable("CHECK ");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CHECK ";
      stringArray0[1] = "CHECK ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "CHECK ";
      stringArray0[5] = "";
      stringArray0[6] = "CHECK ";
      stringArray0[7] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CHECK ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertSame(dBTable0, defaultDBTable0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = SQLUtil.normalize("b']>hd", true);
      assertEquals("b ']>hd'", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)45;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "insert";
      String[] stringArray0 = new String[13];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = null;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      String string1 = " join ";
      int int0 = 22;
      // Undeclared exception!
      try { 
        DBDataType.getInstance(22, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2312121227815662
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("\u0001\u0210");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|C1W");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "\u0001\u0210";
      stringArray0[1] = "\u0001\u0210";
      stringArray0[2] = "/*";
      stringArray0[3] = "\u0001\u0210";
      stringArray0[4] = "|C1W";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "|C1W", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("|C1W", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.normalize("|C1W", true);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8909223086305287
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("tuncate");
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getContextManager();
      SQLUtil.normalize("select", true);
      SQLUtil.mutatesDataOrStructure("tuncate");
      SQLUtil.mutatesDataOrStructure("select");
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(731, "DATE");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" join ");
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" join ", defaultDBTable0, dBDataType0, integer1);
      StringBuilder stringBuilder0 = new StringBuilder(97);
      StringBuilder stringBuilder1 = stringBuilder0.append((float) 731);
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(731);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      assertEquals("731.0\u02DBDATE", stringBuilder2.toString());
      assertEquals("731.0\u02DBDATE", stringBuilder0.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("\"a<=w(t)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"t\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("/*");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBDataType dBDataType0 = DBDataType.getInstance(1708, "/*");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-1908874352));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(58, "k(c^Z2QI+jC");
      TableContainer tableContainer0 = new TableContainer("XSAJH.U", defaultDBTable0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("CHECK ", (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("10.1", defaultDBTable1, dBDataType0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("k(c^Z2QI+jC", defaultDBTable1, dBDataType0, integer0);
      defaultDBTable1.addColumn(defaultDBColumn1);
      defaultDBTable0.getCheckConstraints();
      DBDataType.getInstance((-773), "insertselect");
      Integer integer1 = RawTransaction.ABORT;
      Integer.max(58, 58);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("10.1");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      Random.setNextRandom(22);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      System.setCurrentTimeMillis(819L);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "select";
      stringArray0[4] = "select";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1292, "CHECK ");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.max(1292, 1292);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("!i}RqPZL4 \"+ZiB4UR");
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(225, ">j9*2{E[kMAOu3JcO ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer(225);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("creae table", defaultDBTable0, dBDataType0, integer0, integer1);
      arrayList0.add((DBColumn) defaultDBColumn0);
      Integer integer2 = RawTransaction.ABORT;
      arrayList0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(">j9*2{E[kMAOu3JcO ", defaultDBTable0, dBDataType0, integer2, (Integer) null);
      arrayList0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      Random.setNextRandom(225);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4709001279172663
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-2064.1615450326926);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.removeComments("- 2064.1615450326926");
      System.setCurrentTimeMillis((-4));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.normalize("- 2064.1615450326926", false);
      System.setCurrentTimeMillis(1947L);
      String string1 = SQLUtil.removeComments("Object");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select");
      VersionNumber.valueOf("select");
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.7499625679061093
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = SQLUtil.normalize("kh3r-[5-X_)c", false);
      assertEquals("kh3r - [ 5 - X_) c", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(335544495, "kh3r-[5-X_)c");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.divideUnsigned((-573), (-573));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kh3r-[5-X_)c", defaultDBTable0, dBDataType0, integer0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("kh3r-[5-X_)c KH3R-[5-X_)C(2,2) NULL", string1);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("kh3r-[5-X_)c KH3R-[5-X_)C(2,2) NULL");
      assertEquals(3, objectArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 2475.0020281337906;
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        pipedReader0.skip((-4));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // skip value is negative
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3, "callge");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("callge", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("callge CALLGE(1,2) NOT NULL", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" = ");
      mockPrintWriter0.printf("", (Object[]) stringArray0);
      mockPrintWriter0.println((-83.62673415));
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.normalize(" = ", false);
      assertEquals("=", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.parseNumbers();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, "SYS_GUID");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PQ2}Vtq3/");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("kh3r-[5-X_)c");
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) 1045;
      streamTokenizer0.parseNumbers();
      streamTokenizer0.commentChar(1045);
      SQLUtil.renderNumber(streamTokenizer0);
      try { 
        pipedReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }
}
