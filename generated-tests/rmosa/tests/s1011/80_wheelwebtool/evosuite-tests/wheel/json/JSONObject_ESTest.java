/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:50:16 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 13;
      try { 
        jSONObject0.getString("isreplaceAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplaceAll\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.600996312869327
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote("\n");
      Float float0 = new Float(1.0);
      Float.min(2711.7551F, 2711.7551F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("\n", 0L);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6484893275935664
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = JSONObject.quote("$pw {=_X?uh|X>/");
      assertEquals("\"$pw {=_X?uh|X>/\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "$pw {=_X?uh|X>/");
      long long0 = jSONObject0.optLong("$pw {=_X?uh|X>/");
      assertEquals(0L, long0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "AQ~&G^ePGCuF*tOh";
      stringArray0[1] = "\",\n\"";
      stringArray0[2] = "\",\n\"";
      stringArray0[3] = ",\n";
      stringArray0[4] = ",\n";
      stringArray0[5] = ",\n";
      JSONObject jSONObject0 = new JSONObject("\",\n\"", stringArray0);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject.quote("~<\n");
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("y~X'x2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y~X'x2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Double double0 = new Double((-174.35360943868));
      String[] stringArray0 = new String[7];
      stringArray0[1] = "[";
      stringArray0[2] = "XOt6,P0#EU";
      boolean boolean0 = Double.isFinite((-174.35360943868));
      Double.isFinite(0.0);
      stringArray0[4] = "";
      stringArray0[5] = "i|eK)W[lO/GuM59h`L";
      stringArray0[6] = "_^(}[CN'G_Z";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      boolean boolean1 = jSONObject0.has("i|eK)W[lO/GuM59h`L");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6308318613496597
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("NM2Zon^~bG>/RN7M");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "] is not a JSONObject.";
      stringArray0[2] = "NM2Zon^~bG>/RN7M";
      JSONObject jSONObject1 = new JSONObject("] is not a JSONObject.", stringArray0);
      JSONArray jSONArray0 = jSONObject1.names();
      assertNull(jSONArray0);
      
      String string0 = JSONObject.doubleToString(1070.43328618);
      assertEquals("1070.43328618", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JSONObject.quote("=/~A={_Y194wP");
      assertEquals("\"=/~A={_Y194wP\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"=/~A={_Y194wP\"");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.48509409130221154
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject.quote("\n");
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\n";
      stringArray0[1] = "\"\n\"";
      stringArray0[2] = "\"\n\"";
      stringArray0[3] = "\n";
      stringArray0[4] = "H5!O|Ur*gdX*qtj)'";
      stringArray0[5] = "\n";
      stringArray0[6] = "\"\n\"";
      stringArray0[7] = "\"\n\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "&\"ur\"";
      jSONObject0.putOpt("&\"ur\"", (Object) null);
      String string1 = "wheel.json.JSONArray";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("\",\n\"", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      String string1 = jSONObject0.toString(52, (-1705));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject.quote("R1(Ta u\";/");
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject.quote("R1(Ta u\";/");
      JSONTokener jSONTokener0 = new JSONTokener("R1(Ta u\";/");
      jSONTokener0.nextClean();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of R1(Ta u\";/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = JSONObject.quote("$pw {=_X?uh|X>/");
      assertEquals("\"$pw {=_X?uh|X>/\"", string0);
      
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString(955, 955);
      assertEquals("{}", string1);
      
      String string2 = JSONObject.quote("{}");
      assertEquals("\"{}\"", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1747);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JSONObject.quote("\"+\u0005oTUB d|p,lG8y");
      assertEquals("\"\\\"+\\u0005oTUB d|p,lG8y\"", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = JSONObject.quote("R1(Ta u\";/");
      Double double0 = new Double(1881.9);
      Double.isFinite(4988.8);
      Double.max(1881.9, 1881.9);
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = JSONObject.quote("R1(T u\"</");
      Short short0 = new Short((short) (-411));
      Short.toUnsignedLong((short) (-411));
      String string1 = JSONObject.valueToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = JSONObject.quote("?)diljJw:H/,L~");
      Float float0 = new Float((-222.60576F));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.quote("$pw {=_X?uh|X>/");
      Double double0 = new Double((-5804.221169313002));
      JSONObject jSONObject0 = new JSONObject(double0);
      int int0 = 1715;
      // Undeclared exception!
      jSONObject0.toString(1715, 1715);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Byte byte0 = new Byte((byte)13);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString((-190), 22);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0, (-253), (-253));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = JSONObject.quote("=/~A={_Y194wP");
      assertEquals("\"=/~A={_Y194wP\"", string0);
      
      String string1 = JSONObject.valueToString("=/~A={_Y194wP", 662, 662);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 919.3274370217833);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.toString(192, 804);
      jSONObject0.toString(804, (-29));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6484893275935664
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject.quote("$pw {=_X?uh|X>/");
      JSONObject jSONObject0 = new JSONObject((Object) "$pw {=_X?uh|X>/");
      jSONObject0.optInt("$pw {=_X?uh|X>/");
      try { 
        jSONObject0.getBoolean("~$=6p]6@ap_e^[}1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~$=6p]6@ap_e^[}1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject.quote("Null pointer");
      JSONObject jSONObject0 = new JSONObject((Object) "\"Null pointer\"");
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.putOpt("", boolean0);
      try { 
        jSONObject0.getBoolean("Null pointer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Null pointer\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7024556366042058
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "\"+\u0005oTUB d|p,lG8y";
      stringArray0[2] = "i31P5y]2t=TThR~KF?";
      JSONObject jSONObject0 = new JSONObject("i31P5y]2t=TThR~KF?", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", 0L);
      JSONObject.getNames(jSONObject1);
      String string0 = "^Q<$=/o:r";
      try { 
        jSONObject0.getInt("^Q<$=/o:r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^Q<$=/o:r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6661022550876021
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = JSONObject.doubleToString(7.896495);
      assertEquals("7.896495", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "7.896495");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3961001489141087
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is nzt a JSONObject.";
      jSONObject0.put("] is nzt a JSONObject.", 0.0);
      try { 
        jSONObject0.getJSONObject("] is nzt a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is nzt a JSONObject.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 823);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5161819323144374
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject.quote("\n");
      Float float0 = new Float(1.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Byte byte0 = new Byte((byte) (-96));
      jSONObject0.append("kd^GS35mg", byte0);
      assertEquals(4, jSONObject0.length());
      
      JSONObject.quote("\n");
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("^ne");
      assertEquals("", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Long long0 = new Long(305L);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(3603L);
      jSONObject0.putOpt((String) null, long0);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("HY2wbgh w.PMO}4FR");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3396091171567721
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject.quote("$pw {=_X?uh|X>/");
      JSONObject jSONObject0 = new JSONObject((Object) "$pw {=_X?uh|X>/");
      jSONObject0.accumulate("\"$pw {=_X?uh|X>/\"", "\"$pw {=_X?uh|X>/\"");
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("GCvSs'vAp");
      assertEquals("\"GCvSs'vAp\"", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5088198909642436
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Float float0 = new Float((-1399.57));
      Float.min((-1188.557F), 0.0F);
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter(8);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", (Collection) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("is");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Float float0 = new Float(1.0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[2] = "YNlO";
      stringArray0[5] = "";
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        Short.decode("\"T");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"T\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Float float0 = new Float((-1399.57));
      Float.min((-1188.557F), 0.0F);
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      StringWriter stringWriter0 = new StringWriter(16);
      StringWriter stringWriter1 = new StringWriter();
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-793), (-793));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, 27, 27);
      String string1 = JSONObject.valueToString("{}");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoHexString", (-1L));
      long long0 = jSONObject1.getLong("istoHexString");
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "is";
      Collection<Double> collection0 = null;
      Short short0 = new Short((short)116);
      jSONObject0.put("is", (Object) short0);
      Float float0 = new Float((-534.6));
      try { 
        jSONObject0.append("is", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[is] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1875550832758
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("Pk>Ri", "Pk>Ri");
      jSONObject0.accumulate("YL}NCLid/,*i", "Pk>Ri");
      jSONObject0.optLong("YL}NCLid/,*i");
      jSONObject1.put("JD#.pBY]/iv_Gt", 3765L);
      boolean boolean0 = jSONObject0.optBoolean("Pk>Ri", true);
      assertEquals(3, jSONObject0.length());
      
      JSONObject.quote("qS`V[6~|L#");
      Boolean boolean1 = Boolean.FALSE;
      JSONObject.valueToString(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7502240195160246
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("U\"k>", "U\"k>");
      jSONObject1.optInt("U\"k>", (-2600));
      try { 
        jSONObject0.getBoolean("U\"k>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"U\\\"k>\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("xD-=li_E-~Cgyf");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("pu", "pu");
      jSONObject0.put("wheel.json.JSONArray", 2895.9188510942427);
      jSONObject0.isNull("wheel.json.JSONArray");
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      jSONArray0.put((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONArray0, 141, 141);
      assertEquals("[{}]", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, (-1275), (-1765));
      assertEquals("null", string1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = JSONObject.quote("=/~A={_Y194wP");
      assertEquals("\"=/~A={_Y194wP\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "h=\\AB;0Dm#";
      jSONObject0.put("h=AB;0Dm#", (Object) null);
      try { 
        Byte.decode("7ZGG/r+vt$C:]`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"7ZGG/r+vt$C:]`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = JSONObject.doubleToString(913.113043);
      assertEquals("913.113043", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.500315532981063
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is nzt a JSONObject.";
      jSONObject0.put("] is nzt a JSONObject.", 0.0);
      try { 
        jSONObject0.getJSONArray("] is nzt a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is nzt a JSONObject.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[2] = stringArray0[1];
      JSONObject.getNames(jSONObject0);
      String string0 = JSONObject.quote("");
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("", (double) (-1326));
      String string1 = jSONObject1.optString("", (String) null);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is nzt a JSONObject.";
      JSONObject jSONObject1 = jSONObject0.put("] is nzt a JSONObject.", 0.0);
      jSONObject1.accumulate("] is nzt a JSONObject.", "] is nzt a JSONObject.");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "] is nzt a JSONObject.", 119, 119);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "is";
      jSONObject0.append("is", jSONObject0);
      String string1 = "2";
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Double.isFinite(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)55);
      JSONObject jSONObject1 = jSONObject0.append("getisNaN", byte0);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject1.append("getisNaN", boolean0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("getisNaN", (Collection) linkedList0);
      Boolean boolean1 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean1, (byte)55, 128);
      assertNotNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0.0);
      jSONObject1.put("] is not a JSONObject.", true);
      jSONObject0.getBoolean("] is not a JSONObject.");
      Long long0 = new Long(1L);
      assertEquals(1L, (long)long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject.quote("\n");
      JSONObject.quote("Expected a ',' or ']'");
      Float float0 = new Float(853.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("\"Expected a ',' or ']'\"", 0.0);
      jSONObject0.toString();
      String string0 = JSONObject.numberToString(float0);
      String string1 = JSONObject.numberToString(float0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0.0);
      jSONObject1.getInt("] is not a JSONObject.");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("] is not a JSONObject.");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "000";
      JSONObject jSONObject1 = jSONObject0.put("000", 3141);
      jSONObject1.optDouble("000");
      try { 
        jSONObject1.put((String) null, (double) 3141);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      double double0 = 1.0;
      Float float0 = new Float(1.0);
      String[] stringArray0 = new String[7];
      stringArray0[4] = stringArray0[3];
      stringArray0[5] = "' and instead saw '";
      Float.isFinite((-1.0F));
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      jSONObject0.toJSONArray(jSONArray0);
      // Undeclared exception!
      try { 
        Short.decode(stringArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONObject.";
      jSONObject0.keys();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0.0);
      jSONObject1.getDouble("] is not a JSONObject.");
      try { 
        jSONObject0.getBoolean("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "{>O=2:nj|`W=GHO4aX";
      JSONTokener jSONTokener0 = new JSONTokener("{>O=2:nj|`W=GHO4aX");
      jSONTokener0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 6 of {>O=2:nj|`W=GHO4aX
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{>OM:n8,jF,GHO[\"-4aX");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {>OM:n8,jF,GHO[\"-4aX
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.054170386800661
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Double.isFinite(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)55);
      JSONObject jSONObject1 = jSONObject0.append("getisNaN", byte0);
      Byte.toUnsignedInt((byte)10);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject0.put("!&nGX`4<a*_Zn~", (Collection) linkedList1);
      jSONObject1.toString();
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000004\":wheel.json.JSONArray@0000000002,\"java.lang.String@0000000005\":wheel.json.JSONArray@0000000003}");
      Boolean boolean0 = new Boolean((String) null);
      jSONObject2.optJSONArray("JSONArray initial value should be a string or collection or array.");
      jSONObject3.optJSONObject("isvalueOf");
      assertEquals(2, jSONObject3.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "is";
      JSONObject jSONObject1 = jSONObject0.append("is", jSONObject0);
      String string1 = "HBtyi";
      jSONObject1.accumulate("is", "HBtyi");
      JSONTokener jSONTokener0 = new JSONTokener("is");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of is
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Double.isFinite(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("getisNaN", (Collection) linkedList1);
      Boolean boolean0 = new Boolean((String) null);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("getisNaN");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5758323603845725
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = JSONObject.quote("$pw {=_X?uh|X>/");
      JSONObject jSONObject0 = new JSONObject((Object) "$pw {=_X?uh|X>/");
      jSONObject0.toString();
      Float float0 = new Float(3161.78);
      String string1 = JSONObject.valueToString(float0, 10, 10);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "\"+\u0005oTUB d|p,lG8y";
      stringArray0[2] = "i31P5y]2t=TThR~KF?";
      JSONObject jSONObject0 = new JSONObject("i31P5y]2t=TThR~KF?", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put(",\n", 0L);
      Byte byte0 = new Byte((byte)25);
      JSONObject.testValidity(byte0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalXor(false, false);
      hashMap0.put(boolean0, jSONObject1);
      jSONObject1.put("CVN2{Wos#F6_d", (Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Object) "i31P5y]2t=TThR~KF?");
      StringWriter stringWriter0 = new StringWriter((byte)25);
      // Undeclared exception!
      jSONObject1.write(stringWriter0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is nzt a JSONObject.", 0.0);
      jSONObject1.putOpt("] is nzt a JSONObject.", jSONObject0);
      jSONObject1.optJSONObject("] is nzt a JSONObject.");
      jSONObject0.getJSONObject("] is nzt a JSONObject.");
      JSONObject.doubleToString(0.0);
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] is nzt a JSONObject.", jSONObject0);
      jSONObject0.optJSONObject("] is nzt a JSONObject.");
      Float float0 = new Float(0.0);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject.doubleToString((-3166.3666087406));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("-3166.3666087406", false);
      jSONObject0.getBoolean("-3166.3666087406");
      JSONObject.testValidity(linkedList0);
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", "true");
      boolean boolean0 = jSONObject1.getBoolean("true");
      assertTrue(boolean0);
      
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject2.length());
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-54582748));
      assertEquals("-5.4582748E7", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("}L'e~>", object0);
      jSONObject1.isNull("}L'e~>");
      Object object1 = new Object();
      Float float0 = new Float(2986.919F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{>O=<;nj|`W=GHO4aX");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{>O=<;nj|`W=GHO4aX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 18 of {>O=<;nj|`W=GHO4aX
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
