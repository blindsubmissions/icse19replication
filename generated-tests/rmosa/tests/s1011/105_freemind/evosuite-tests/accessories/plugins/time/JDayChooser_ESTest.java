/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:11:42 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.FocusTraversalPolicy;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.PrintStream;
import java.sql.Time;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.Box;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.JWindow;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GlyphView;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.PlainDocument;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledEditorKit;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemText;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      jDayChooser0.firePropertyChange("", false, true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setHideActionText(false);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getDayPanel();
      DefaultEditorKit.PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit.PasteAction();
      ActionEvent actionEvent0 = new ActionEvent(defaultEditorKit_PasteAction0, Integer.MAX_VALUE, "org.apache.batik.dom.svg.SVGOMAltGlyphDefElement");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.text.DefaultEditorKit$PasteAction cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getFocusTraversalPolicy();
      jDayChooser_DecoratorButton0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser1.setEnabled(true);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.703473344669273
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      PlainDocument plainDocument0 = new PlainDocument();
      Element element0 = plainDocument0.getDefaultRootElement();
      GlyphView glyphView0 = new GlyphView(element0);
      glyphView0.getBackground();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemText elemText0 = new ElemText();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemText0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getTransferHandler();
      MindMapMode mindMapMode0 = new MindMapMode();
      jDayChooser0.setDay((-400));
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        mindMapMode0.init((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.MindMapMode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.640304616117018
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(443);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.updateUI();
      Locale locale0 = new Locale("21", "E9{^b0wpw", "21");
      JComponent.setDefaultLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jMonthChooser0, (-295), (-895L), 4, 9, '(');
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser0.setLocation(443, 14);
      jDayChooser0.setMonth((-258));
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setFocus();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(164, color0.getBlue());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate(0, 0, 142, (-1271), 0);
      mockDate0.toInstant();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMaxDayCharacters(142);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.drawWeeks();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.889061945947689
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(5);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMaxDayCharacters((-53));
      jDayChooser0.updateUI();
      jDayChooser0.firePropertyChange("T2k", true, false);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      char char0 = 'a';
      KeyEvent keyEvent0 = new KeyEvent(jMonthChooser0, 5, (-1863L), (-1251), 33, 'c');
      keyEvent0.getExtendedKeyCode();
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton(3138);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist 3138
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      System.setCurrentTimeMillis(28);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7302978718780415
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(443);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.firePropertyChange("?'FKS_:tSZWP^aO!b/", false, true);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, 394, 394, 39, 39, 'M');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.init();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = stringArray0[1];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Component component0 = Box.createVerticalGlue();
      int int0 = 199;
      FocusEvent focusEvent0 = new FocusEvent(component0, 199, true);
      focusEvent0.setSource(component0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setDecorationBordersVisible(true);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getStyle("day");
      // Undeclared exception!
      try { 
        styleContext0.getBackground((AttributeSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.StyleConstants", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.746209545491266
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(2133);
      jDayChooser0.getTopLevelAncestor();
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 21, 1617, 37, '(');
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      pDFDocumentGraphics2D0.getFontInfo();
      pDFDocumentGraphics2D0.getPDFDocument();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      Locale locale0 = Locale.GERMAN;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setFocus();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      jDayChooser0.setDay(7);
      jDayChooser0.setEnabled(false);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.640304616117018
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(443);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, (-295), (-895L), 4, 9, '(');
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("MYkA2W%o&AX<>8~dB");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(false, printStream0, 10130, 5);
      pDFDocumentGraphics2D1.getFontInfo();
      pDFDocumentGraphics2D1.getPDFDocument();
      jDayChooser0.getGraphicsConfiguration();
      JWindow jWindow0 = null;
      try {
        jWindow0 = new JWindow((GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.698555534979564
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(443);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.firePropertyChange("?'FKS_:tSZWP^aO!b/", false, true);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, 394, 394, 39, 39, 'M');
      keyEvent0.setKeyCode((-2404));
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      jDayChooser0.setDay((-1358));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setLocation(7, 7);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 7;
      floatArray0[1] = (float) 7;
      // Undeclared exception!
      try { 
        color0.getComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StyleContext styleContext0 = new StyleContext();
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      MutableAttributeSet mutableAttributeSet0 = styledEditorKit0.getInputAttributes();
      Color color0 = styleContext0.getBackground(mutableAttributeSet0);
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-912));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.updateUI();
      char char0 = '(';
      int int0 = (-295);
      Locale locale0 = null;
      try {
        locale0 = new Locale("21", "E9{^b0wpw", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange("", false, true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyStroke.getKeyStroke("");
      jDayChooser0.getClientProperty("14");
      TimeZone timeZone0 = TimeZone.getTimeZone("day");
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, (-1741), true, jDayChooser_DecoratorButton0);
      jDayChooser1.focusGained(focusEvent0);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFocusTraversalPolicy();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.firePropertyChange("", (byte)35, (byte)4);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setFocusable(false);
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      jDayChooser0.firePropertyChange("", false, true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      SystemColor systemColor0 = SystemColor.textHighlight;
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = 428.44977F;
      floatArray0[4] = (-456.34F);
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setOpaque(true);
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      jDayChooser0.setDay(7);
      jDayChooser0.setDay(9827);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      SystemColor systemColor0 = SystemColor.menu;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JPanel jPanel0 = jDayChooser0.weekPanel;
      jDayChooser0.firePropertyChange("day", false, true);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, 22, 22, 39, 39, 'M');
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Time time0 = new Time((-409L));
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.KOREA;
      locale0.getDisplayCountry(locale1);
      jDayChooser0.setLocale(locale1);
      time0.getTime();
      time0.toLocalTime();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      ParsePosition parsePosition0 = new ParsePosition(39);
      mockSimpleDateFormat0.parse(" 5?+:", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.isRequestFocusEnabled();
      java.sql.Date date0 = new java.sql.Date((-1L));
      jDayChooser0.setSelectableDateRange(date0, (Date) null);
      jDayChooser0.firePropertyChange("", (byte)35, (byte)4);
      jDayChooser0.setFocusable(false);
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.firePropertyChange("day", (short) (byte)4, (short) (byte)35);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setLocation(7, (-258));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-258), 7, (-258), 2013265919, 'b');
      KeyEvent.getExtendedKeyCodeForChar((-258));
      keyEvent0.setKeyCode(37);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.updateUI();
      Date date0 = jDayChooser1.maxSelectableDate;
      int int0 = 387;
      FlowLayout flowLayout0 = new FlowLayout(387);
      jDayChooser0.setLayout(flowLayout0);
      jDayChooser0.setMinSelectableDate(date0);
      boolean boolean0 = false;
      jDayChooser0.setDayBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Time time0 = new Time(4871L);
      Locale locale0 = Locale.CHINA;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      locale0.getDisplayName();
      locale1.getDisplayCountry(locale0);
      jDayChooser0.setLocale(locale1);
      time0.toLocalTime();
      jDayChooser0.setSelectableDateRange((Date) null, time0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setYear(2576);
      int int0 = SwingConstants.NEXT;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.drawWeeks();
      jDayChooser0.setMaxSelectableDate(time0);
      jDayChooser1.updateUI();
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth(28);
      jDayChooser0.setDay(7);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.grabFocus();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.setFocus();
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getClientProperty((Object) null);
      jDayChooser0.putClientProperty((Object) null, (Object) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.setMaxSelectableDate((Date) null);
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setLocation(7, 7);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      jDayChooser0.firePropertyChange("", false, true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setHideActionText(false);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getDayPanel();
      DefaultEditorKit.PasteAction defaultEditorKit_PasteAction0 = new DefaultEditorKit.PasteAction();
      String string0 = "org.apache.batik.dom.svg.SVGOMAltGlyphDefElement";
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.getClientProperty(calendar0);
      jDayChooser0.setDay(Integer.MAX_VALUE);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, Integer.MAX_VALUE, "org.apache.batik.dom.svg.SVGOMAltGlyphDefElement");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      jDayChooser0.firePropertyChange("", false, true);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1640), (-2557L), 11, (-1640), 'X');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setEnabled(true);
      jDayChooser1.initialized = true;
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, Integer.MAX_VALUE, Integer.MAX_VALUE, 2176, 36, 'R');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7655142198118963
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTopLevelAncestor();
      int int0 = 2;
      jDayChooser0.setMaxDayCharacters(2);
      long long0 = 65535L;
      int int1 = 33;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 20, 65535L, 2, 33, 'z');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.782923076457604
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(3);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.setDoubleBuffered(false);
      jDayChooser0.setMaxDayCharacters(4);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      KeyEvent keyEvent0 = new KeyEvent(jPanel0, 1, 2176, 3, 38, 'n');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7621807560165585
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(443);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.updateUI();
      jDayChooser0.firePropertyChange("pobK(v},uWFd\"}|", false, true);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 15L, 34, 34, 'a');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 'M', 'M', 40, 40, 'M');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.initialized = false;
      jDayChooser0.firePropertyChange("31", (short)22, (short)11);
      jDayChooser0.setLocation(7, (-258));
      jDayChooser0.setMonth((short)11);
      Locale locale0 = Locale.KOREAN;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.filter((List<Locale.LanguageRange>) canvasGraphicsNode0, (Collection<Locale>) canvasGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = null;
      try {
        menuKeyEvent0 = new MenuKeyEvent((Component) null, 7, 1048576L, 0, 29, 'X', menuElementArray0, (MenuSelectionManager) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledSelectedIcon();
      JButton jButton0 = new JButton("day", (Icon) null);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setLocation(7, (-258));
      jButton0.isFocusOwner();
      jDayChooser0.setMonth(28);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 47, 687, 47, '9');
      keyEvent0.consume();
      KeyEvent.getKeyModifiersText(47);
      jDayChooser0.maxDayCharacters = 47;
      keyEvent0.setSource("day");
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(true);
      KeyEvent.getKeyModifiersText(49);
      jDayChooser0.getInheritsPopupMenu();
      keyEvent0.consume();
      keyEvent0.consume();
      jDayChooser0.getAlignmentY();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      jDayChooser0.drawDays();
      jDayChooser0.setDay(943);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.setFocus();
      jDayChooser0.setDay(687);
  }
}
