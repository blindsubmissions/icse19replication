/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:14:36 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileNotFoundException;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(333);
      Player player0 = new Player();
      player0.setZ(333);
      assertEquals(333.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-69));
      Player player1 = new Player(333);
      player1.setMoney(0.0F);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertTrue(player1.isConnected());
      assertEquals(0, player1.getPictureId());
      assertEquals(1, player1.getStrength());
      assertFalse(boolean0);
      assertEquals("Player333", player1.toString());
      assertEquals(0.0F, player1.getMoney(), 0.01F);
      assertEquals("0.0.0.0", player1.getIP());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-305);
      Player player0 = new Player((-305));
      player0.type();
      player0.getY();
      byte byte0 = (byte)7;
      byte byte1 = (byte)5;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      MockFile mockFile0 = new MockFile("#A+1b");
      MockFile mockFile1 = new MockFile(mockFile0, "t6l6oZ%B&%h.}");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile1);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead();
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      String string0 = player1.getName();
      assertEquals("Player-1", string0);
      
      Player player2 = new Player(2147);
      String string1 = player2.getIP();
      assertEquals("0.0.0.0", string1);
      
      Player player3 = new Player((short)4919);
      player3.isJoinOK(player1, true);
      System.setCurrentTimeMillis(2147);
      boolean boolean0 = player2.isJoinOK(player1, false);
      assertTrue(player2.isConnected());
      assertEquals(0, player2.getPictureId());
      assertFalse(boolean0);
      assertEquals(1, player2.getStrength());
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertFalse(player2.isDead());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      assertFalse(player0.isConnected());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      player0.next = (Party) player0;
      player0.getZ();
      player0.prev = null;
      player0.getY();
      long long0 = (-2284L);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(6403, "$ aV?qE&q@`Z", 6403);
      Party party0 = new Party();
      player0.remove(party0);
      player0.setY(0.0F);
      player0.setZ(0.0F);
      player0.getMoney();
      System.setCurrentTimeMillis(6403);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 5;
      Player player0 = new Player(5, (String) null, 1602);
      player0.isConnected();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(2766);
      byte[] byteArray0 = new byte[6];
      player0.unpack(byteArray0);
      byteArray0[4] = (byte) (-68);
      byteArray0[1] = (byte) (-68);
      player0.unpack(byteArray0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player2766", player0.toString());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(10, "", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 3, 3);
      player0.reset(false);
      int int0 = player0.getPictureId();
      int int1 = player0.getStrength();
      assertEquals("", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertTrue(int1 == int0);
      assertEquals(3, int1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(4524, "", 4524);
      player0.getX();
      String string0 = "";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)55;
      byteArray0[1] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(5);
      Player player1 = null;
      boolean boolean0 = true;
      player0.reset(true);
      player0.add((Party) null);
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((-637));
      player0.pack();
      Player player1 = new Player((-1), (String) null, (short)4919);
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(4919, player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertFalse(boolean0);
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals("Player-637", player0.toString());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      System.setCurrentTimeMillis((-458L));
      Player player0 = new Player(0);
      Player player1 = new Player(0);
      player1.setX(0);
      player0.prev = (Party) player1;
      player0.isJoinOK(player1, true);
      player0.isJoinOK(player1, true);
      System.setCurrentTimeMillis((-458L));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((-1505));
      player0.setDead((-4112L));
      player0.gangStrength();
      int int0 = 964;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte) (-109);
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 5);
      MockFile mockFile0 = new MockFile("");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(5);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.setDead((long) 5, false);
      Player player1 = new Player((short)4919);
      System.setCurrentTimeMillis(0L);
      player0.prev = (Party) player1;
      player0.isDead();
      player0.getName();
      player0.getTimeOfDeath();
      player0.remove(player1);
      player0.gangStrength();
      player0.getPictureId();
      player0.toString();
      player0.getX();
      player0.toString();
      player0.getIP();
      assertEquals(5L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(187);
      player0.setJoinOK(player0, false);
      long long0 = player0.getTimeOfDeath();
      assertEquals(0L, long0);
      
      Player player1 = new Player((short)4919);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertFalse(player1.isDead());
      assertTrue(player1.isConnected());
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals("Player4919", player1.toString());
      assertEquals(0, player1.getPictureId());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(1212);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-37);
      Party party0 = player0.boss;
      player0.next = null;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("3@h`!\"r<", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      player0.pack(dataOutputStream0);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream("3@h`!\"r<");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, mockFileInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(187);
      player0.setJoinOK(player0, false);
      boolean boolean0 = player0.isJoinOK(player0, false);
      System.setCurrentTimeMillis(333);
      Player player1 = new Player((-637));
      boolean boolean1 = player0.isJoinOK(player1, false);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(player1.isConnected());
      assertEquals("Player-637", player1.toString());
      assertEquals(0, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(1, player1.getStrength());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player((-69));
      Player player1 = new Player(333);
      player0.setJoinOK(player1, false);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0, player1.getPictureId());
      assertTrue(player1.isConnected());
      assertEquals(1, player1.getStrength());
      assertFalse(player1.isDead());
      assertEquals("Player333", player1.toString());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
  }
}
