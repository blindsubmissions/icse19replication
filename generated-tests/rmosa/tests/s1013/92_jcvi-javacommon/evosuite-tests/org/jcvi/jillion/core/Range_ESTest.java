/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:10:52 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("];");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.];
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 641L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(641L, (-2030L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2471L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2471 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(9223372032559809017L, (-1330L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 1L;
      long long1 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-9223372036854775801L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 4294967295, -9223372036854775801 are not valid Residue Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder0.shift(0L);
      range_Builder0.expandBegin(0L);
      String string0 = "l@:jx2zl<3\"%rv:sf:U";
      // Undeclared exception!
      try { 
        Range.parseRange("l@:jx2zl<3\"%rv:sf:U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse l@:jx2zl<3\"%rv:sf:U into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getEnd();
      range0.isEmpty();
      Long long0 = new Long(9223372036854775806L);
      long long1 = range0.getEnd();
      assertEquals(9223372036854775806L, long1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(3790L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(947L);
      Object object1 = new Object();
      range0.equals(object1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(1728L);
      range0.intersects(range0);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(1944L);
      Long.remainderUnsigned(0L, 2931L);
      Long.remainderUnsigned(0L, (-1868L));
      Long.divideUnsigned(1366L, 2931L);
      Range range1 = Range.of((-32768L));
      range1.intersects(range0);
      range0.equals(long0);
      Long long1 = new Long((-32768L));
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(1944L);
      Long.compareUnsigned(255L, 1944L);
      Long.min(2486L, 127L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(9223372036854775806L, long1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.811419498301341
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(1944L);
      range0.split(1944L);
      Long.remainderUnsigned(0L, 2931L);
      Long.divideUnsigned(1366L, (-2204L));
      Long.min(2931L, 1944L);
      range0.equals(long0);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.getEnd();
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.844487261460169
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1893L, 1893L);
      range0.getEnd();
      Range range1 = Range.of(range_CoordinateSystem0, 1892L, 1892L);
      range1.getBegin();
      range1.equals(range0);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("unable to mkdir for ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.unable to mkdir for 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(1L);
      range0.intersection(range1);
      long long0 = (-9223372036854774706L);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854774706L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      Range range1 = Range.of(255L);
      range0.intersection(range1);
      Range range2 = Range.ofLength(3580L);
      // Undeclared exception!
      try { 
        range2.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 2147483647L, 2147483647L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("&l<UHAqqT8o", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse &l<UHAqqT8o into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.contractBegin(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("b7o", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse b7o into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.850790265580613
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2491L), (-2491L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem1);
      range0.spliterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-3069L), (-3069L));
      range1.getBegin();
      range0.equals(range1);
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ -3068 .. -3069 ]/RB", string0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "d\\0 2C9,5Vnp$-k2";
      // Undeclared exception!
      try { 
        Range.parseRange("d\u0000 2C9,5Vnp$-k2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("[ 65535 .. 65534 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(1944L);
      Long.remainderUnsigned(0L, 2931L);
      Long.divideUnsigned(1366L, (-2204L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(0L);
      range0.complement(range1);
      range1.complement(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.954002719889012
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = new Long((-994L));
      Range range0 = Range.of((-2875L), (long) long0);
      Range range1 = Range.of((long) long0, (-994L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      boolean boolean1 = range1.equals("p.<%QBs1$]l");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1579L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.asRange();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7722984534427955
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(1L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Range range2 = Range.of(1L);
      range1.equals(range2);
      Long long1 = new Long(1L);
      long long2 = range0.getBegin();
      assertSame(range0, range1);
      assertEquals(0L, long2);
      
      Object object1 = new Object();
      boolean boolean0 = range2.equals(object1);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.823416998397392
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators.values();
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-9223372036854775808L), long0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long.compareUnsigned(0L, 1932L);
      Long long0 = new Long(1932L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2014635257563473
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854775807 .. -9223372036854775808 ]/SB", string0);
      
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2075320840017025
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      long long0 = range0.getBegin();
      assertEquals((-128L), long0);
      
      Range range1 = Range.of((-128L), (-128L));
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
      
      long long1 = range0.getBegin();
      assertEquals((-128L), long1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      Range.Comparators.values();
      Range range0 = Range.ofLength(2962L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(0L);
      String string0 = range1.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.ofLength(0L);
      Long long0 = new Long(0L);
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Object object0 = new Object();
      long long1 = (-32768L);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8253753384664115
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(1L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range1.endsBefore(range0);
      Range range2 = Range.of(1L);
      boolean boolean1 = range1.equals(range2);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range1));
      assertTrue(boolean1 == boolean0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(21L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(21L);
      long long0 = range1.getLength();
      assertEquals(21L, long0);
      
      Range range2 = Range.of(21L);
      boolean boolean0 = range0.intersects(range2);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
      
      Long long1 = new Long(21L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9714497055990803
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Range range1 = Range.ofLength(1L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Range range2 = Range.of(1L);
      boolean boolean0 = range1.equals(range2);
      assertSame(range1, range0);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
      
      Long long1 = new Long(1L);
      assertTrue(long1.equals((Object)long0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8698508096094857
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Object object1 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1893L, 1893L);
      range0.getEnd();
      Range range1 = Range.of(range_CoordinateSystem0, 1892L, 1892L);
      range1.getBegin();
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.io.IOUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.io.IOUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.940142702686837
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 639L);
      Long long0 = new Long(639L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8244886549779107
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long(0L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      Long.compareUnsigned(0L, 0L);
      long long1 = 4294967295L;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.of(1L);
      Range range1 = Range.ofLength(1L);
      range0.intersects(range1);
      long long1 = (-2171L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2171L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(1944L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add((Range) null);
      Range range0 = Range.of(32767L);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9025538185947704
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(1728L, 9223372036854775807L);
      Range range1 = Range.of(547L, 9223372036854775807L);
      range0.equals(range1);
      Long long0 = new Long(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.972845711672121
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(1728L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals("4}-a\"v1{$a-1}AU{|lxH");
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1728L, long0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9559804761473534
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.startsBefore(range0);
      range0.toString();
      Long long0 = new Long((-32768L));
      Long.min((-32768L), 2486L);
      range0.equals(long0);
      range0.getBegin();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2491L), 9223372034707292161L);
      long long0 = 1L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-29L), 65535L);
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(65534L, long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(255L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.8712202522291133
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2491L), (-2491L));
      Range range1 = Range.of(range_CoordinateSystem0, (-3033L), (-3033L));
      range0.intersection(range1);
      range1.getBegin();
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-9223372036854774706L));
      Object object0 = new Object();
      range0.isEmpty();
      Range.Comparators.values();
      range0.equals((Object) null);
      Range.Comparators.values();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("<WWK{u/'y0M)5B>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.<WWK{u/'y0M)5B>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Comparators.values();
      Range range1 = Range.of((-32768L));
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8253753384664115
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.getEnd();
      Object object0 = new Object();
      Range range1 = Range.ofLength(1L);
      range1.getLength();
      Range range2 = Range.of(1L);
      range1.isSubRangeOf(range2);
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.isEmpty());
      
      Long long0 = new Long(1L);
      long long1 = range1.getEnd();
      assertEquals(0L, long1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(1L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Range range2 = Range.of(1L);
      boolean boolean0 = range2.isSubRangeOf(range0);
      assertFalse(boolean0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(9223372034707292161L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.976544516702745
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      String string0 = ".{`4sFK%]DU0WMS4:";
      // Undeclared exception!
      try { 
        Range.parseRange(".{`4sFK%]DU0WMS4:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse .{`4sFK%]DU0WMS4: into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.154877108159423
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      List<Range> list0 = range0.split(2147483647L);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      range0.getEnd();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(2568L);
      range0.equals((Object) null);
      Long long0 = new Long(2568L);
      assertEquals(2568L, (long)long0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(4294967296L, long0);
      
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0683779707249124
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-956L), (-956L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-956L), (-956L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Long long0 = new Long((-491L));
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -956 .. -956 ]/0B", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.8147041867002995
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2196L, 2196L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      long long1 = 1944L;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(1944L);
      Long.getLong("");
      range0.equals((Object) null);
      Range.Comparators.values();
      range0.equals("");
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8925266766348736
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(4602L, 4294967295L);
      Long long0 = new Long(9223372036854775804L);
      Range range1 = Range.of(4602L, 2147483665L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      range0.equals(range1);
      range1.getBegin();
      range1.equals("[ 4602 .. 2147483665 ]/0B");
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.Comparators.values();
      range0.equals("P~xY");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -128 .. -127 ]/SB", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.309495422872505
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-9223372036854774706L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372036854774706L), (-9223372036854774706L));
      range0.getEnd(range_CoordinateSystem0);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-9223372036854774705L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem2);
      assertEquals("[ -9223372036854774706 .. -9223372036854774707 ]/0B", string0);
      
      range1.getBegin();
      Range.CoordinateSystem.values();
      range0.complement(range1);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(2609L);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(2147483648L);
      Range range1 = Range.of(2147483648L);
      Range.of(2147483648L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.startsBefore(range0);
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. -2147483648 ]/0B", string0);
      
      Object object0 = new Object();
      range0.equals((Object) null);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(65535L);
      range0.equals(range1);
      Long long0 = new Long(65535L);
      assertEquals(65535L, (long)long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals((Object) null);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals(9223372036854775807L, long0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.0185534367366826
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854775807L);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long(1L);
      Long long1 = new Long(1L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(9223372036854775169L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complement(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("];");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.];
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Comparators.values();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(1944L);
      Long.compareUnsigned(255L, 1944L);
      long long1 = 127L;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 65535 .. 65535 ]/SB", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.9093644808816874
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range range1 = Range.of(32767L, 32767L);
      range0.equals(range1);
      Range.Comparators.values();
      range1.equals(object0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("<WWK{u/'y0M)5B>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.<WWK{u/'y0M)5B>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.8244886549779107
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
      
      Long.getLong("C4yf4MQ");
      Long.getLong(")G;:~dlmhB!zM", (Long) null);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.7598774510573802
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2196L, 2196L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(164L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder2.expandEnd((-122L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.of(4294967301L, 9223372036854775796L);
      Long long0 = new Long((-487L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775804L, (-487L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -487 would make range [9223372036854775804 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(4602L, 4294967295L);
      Long long0 = new Long(9223372036854775804L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8244886549779107
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
      
      Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(2147483647L);
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2656L, 4294967295L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators.values();
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0539064307234254
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range1.equals(range0);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range range2 = Range.of(range_CoordinateSystem1, (-2147483648L), (-32768L));
      String string0 = range2.toString(range_CoordinateSystem0);
      assertEquals("[ -2147483647 .. -32768 ]/RB", string0);
      
      boolean boolean1 = range1.equals(range2);
      assertFalse(range2.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(range2.equals((Object)range1));
      
      long long0 = range1.getBegin();
      assertEquals((-32769L), long0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854775807L);
      range0.equals((Object) null);
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.1717507481165406
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Long long0 = new Long(9223372036854775804L);
      Range range0 = Range.of(4294967295L, 9223372036854775804L);
      range0.toString();
      range0.iterator();
      Range range1 = Range.parseRange("[ 4294967295 .. 9223372036854775804 ]/0B");
      range1.getLength();
      range1.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.parseRange("[ 4294967295 .. 9223372036854775804 ]/0B", range_CoordinateSystem0);
      range0.equals(range2);
      range0.getEnd();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 4294967295 .. 9223372036854775804 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 4294967295 .. 9223372036854775804 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = (-2471L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2471L), (-2471L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long1 = 2110L;
      range0.split(2110L);
      // Undeclared exception!
      try { 
        Range.parseRange("3-0t,a", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.96714289431304
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 4294967295L);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(2147483647L, 2147483647L);
      Long.divideUnsigned((-1598L), (-2204L));
      Long.min((-1718L), (-1718L));
      range1.equals(range0);
      long long0 = range1.getBegin();
      assertEquals(2147483648L, long0);
      
      Long long1 = new Long(2147483647L);
      range0.equals(long1);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range0.getEnd();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.0134123047825123
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range1.getEnd(range_CoordinateSystem0);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -9223372036854775808 .. -9223372036854775808 ]/RB", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.89465783299428
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals(65535L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.equals((Object) null);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Object object0 = new Object();
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-32810L));
      Range.Comparators.values();
      Range range1 = Range.of((-32810L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2471L), (-2471L));
      long long0 = new Long((-2471L));
      Object object0 = new Object();
      range0.equals(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      Range.Comparators.values();
      Range range1 = Range.of((-1L), (-1L));
      range0.toString();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range1.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of(1728L, 1728L);
      Range range1 = Range.of(547L, 1301L);
      range0.equals(range1);
      Long long0 = new Long(1L);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2196L, 2196L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.0991720701520418
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483649L), 872L);
      Range range1 = Range.of((-2147483649L), (-1L));
      range0.equals(range1);
      Range.Comparators.values();
      range1.intersects(range0);
      Long long0 = new Long(3728L);
      range1.equals(long0);
      String string0 = "<WWK{u/'y0M)5B>";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("<WWK{u/'y0M)5B>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.<WWK{u/'y0M)5B>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = Long.remainderUnsigned(0L, 2931L);
      Long.divideUnsigned(0L, (-2204L));
      Long.min(2931L, 1944L);
      Range range1 = Range.ofLength(0L);
      range1.equals(range0);
      Long long1 = new Long(9223372036854774080L);
      assertFalse(long1.equals((Object)long0));
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854773612L);
      Long long0 = new Long(9223372036854773612L);
      Range range1 = Range.of(2147483665L, 9223372036854773612L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483665 .. 9223372036854773612 ]/0B", string0);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      long long1 = range1.getBegin();
      assertEquals(2147483665L, long1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offer((Range) null);
      linkedList0.add((Range) null);
      Range range0 = Range.of(32767L);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.0562195663672114
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range2 = Range.of(2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(range1.equals((Object)range2));
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long long0 = new Long(9223372036854775804L);
      Range range0 = Range.of(4294967295L, 9223372036854775804L);
      range0.toString();
      range0.iterator();
      Range range1 = Range.parseRange("[ 4294967295 .. 9223372036854775804 ]/0B");
      range1.getLength();
      range1.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 4294967295 .. 9223372036854775804 ]/0B", range_CoordinateSystem0);
      range0.equals(range2);
      range0.getEnd();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 4294967295 .. 9223372036854775804 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 4294967295 .. 9223372036854775804 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(97L, 4294967295L);
      Long long0 = new Long(9223372036854775804L);
      Range range1 = Range.of(97L, 2147483665L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      range1.equals(object0);
      range1.intersects(range0);
      range0.equals(range1);
      range1.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.9227182066088235
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(1728L, 9223372036854775805L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1728L, 9223372036854775805L);
      Object object0 = new Object();
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Long.valueOf(4294967301L);
      Range range0 = Range.ofLength(9223372036854775796L);
      range0.toString();
      Range range1 = Range.ofLength(4294967301L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1893L, 1893L);
      long long0 = range0.getEnd();
      assertEquals(1892L, long0);
      
      long long1 = range0.getBegin();
      assertEquals(1893L, long1);
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(1728L, 9223372036854775805L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getLength();
      assertEquals(9223372036854774078L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 1728L, 9223372036854775805L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Range.Comparators.values();
      boolean boolean1 = range1.equals((Object) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.7916629309316447
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      Long.remainderUnsigned(0L, 2931L);
      Long.divideUnsigned((-856L), (-2204L));
      Long.min(2931L, 0L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range1.equals(range0);
      range0.getBegin();
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.097486414195155
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Long.valueOf(4294967301L);
      Range range0 = Range.ofLength(9223372036854775796L);
      range0.toString();
      Range.parseRange("[ 0 .. 9223372036854775795 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775795 ]/0B", range_CoordinateSystem0);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }
}
