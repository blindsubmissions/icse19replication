/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:55:10 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.engine.SessionRemote;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.value.Value;
import org.h2.value.ValueArray;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "v7";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("v7");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v7");
      defaultDBTable0.getComponents();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("v7", (String[]) null, "v7", "v7", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.join((String) null, (String) null, stringArray0, stringArray0[0], "WS", stringArray0);
      assertEquals("null as WS on null.null = WS.null and null.null = WS.null and null.null = WS.null", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8381196037849845
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("I/%Y-m]", true);
      assertEquals("I / % Y - m ]", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "I/%Y-m]", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT I/%Y-m] UNIQUE ()", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JdbcConnectionPool.create("drop indexg{]r5(oxn[}hc{", "selet into", "74AVDXb-#");
      SQLUtil.normalize("74AVDXb-#", false);
      Random.setNextRandom((-2479));
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("74AVDXb-#", "selet into", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("d]TIX#bWQff|U<;=%Th", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema("selet into", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selet into", dBSchema0);
      int int0 = 280;
      DBDataType dBDataType0 = DBDataType.getInstance(280, "74AVDXb-#");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selet into", defaultDBTable0, dBDataType0, integer0);
      String string0 = "Nft.57j?|v-";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "#E}awsvTfAtWA9N1+b";
      stringArray0[1] = "selet into";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create tablealter materialized viewg{]r5(oxn[}hc{", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create tablealter materialized viewg{]r5(oxn[}hc{", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("d]TIX#bWQff|U<;=%Th", dBTable0, 280, "&L~+uv4Py");
      defaultDBColumn1.getNotNullConstraint();
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      stringArray0[2] = "74AVDXb - #";
      stringArray0[3] = "d]TIX#bWQff|U<;=%Th";
      stringArray0[4] = "selet into";
      stringArray0[5] = "drop indexg{]r5(oxn[}hc{";
      stringArray0[6] = "alter mater";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&L~+uv4Py", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "alter mater", (-2479), 90120);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -2479, end 90120, s.length() 11
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = SQLUtil.isQuery("select intoconsidering join strategy");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      JdbcConnectionPool.create("drop indexg{]r5(oxn[}hc{", "selet into", "74AVDXb-#");
      SQLUtil.normalize("74AVDXb-#", false);
      Integer integer2 = RawTransaction.COMMIT;
      SQLUtil.mutatesDataOrStructure("drop indexg{]r5(oxn[}hc{");
      String string0 = SQLUtil.removeComments("selet ");
      assertEquals("selet ", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8381196037849845
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.normalize("SELECT *- FRKj ", false);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.mutatesDataOrStructure("SELECT *- FRKj ");
      Random.setNextRandom(3646);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      JdbcConnectionPool.create("74AVDXb-#", "Prepare called before end", "74AVDXb-#");
      SQLUtil.normalize("74AVDXb-#", false);
      Random.setNextRandom(890);
      System.setCurrentTimeMillis((-1556L));
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Prepare called before end");
      assertNull(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
      assertEquals("catalog null", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(5, "select intoconsidering ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intoconsidering ", defaultDBTable0, dBDataType0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select intoconsidering ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "select intoconsidering ";
      stringArray0[1] = "select intoconsidering ";
      stringArray0[2] = "select intoconsidering ";
      stringArray0[3] = "select intoconsidering ";
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.setAutoCommit(true);
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[11];
      String string0 = SQLUtil.renderColumnListWithTableName("Mwf^-P", stringArray0);
      assertEquals("Mwf^-P.null, Mwf^-P.null, Mwf^-P.null, Mwf^-P.null, Mwf^-P.null, Mwf^-P.null, Mwf^-P.null, Mwf^-P.null, Mwf^-P.null, Mwf^-P.null, Mwf^-P.null", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("G{]R5OXn[}hC{");
      DBDataType dBDataType0 = DBDataType.getInstance(42, "");
      Integer integer0 = RawTransaction.COMMIT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      Integer.sum(42, 42);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("I[0", defaultDBTable0, dBDataType0, integer1, integer2);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("drop indexg{]r5(oxn[}hc{", "select into", "74AVDXb-#");
      assertEquals(10, jdbcConnectionPool0.getMaxConnections());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("Jz@/f", compositeDBObject0);
      tableContainer0.getSequences(true);
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container Jz@/f", string0);
      
      VersionNumber versionNumber0 = VersionNumber.valueOf("Jz@/f");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("container Jz@/f", "container Jz@/f", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("container Jz@/f", defaultDatabase0);
      dBCatalog0.getSchema("6T_l+W)4`V3");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("container Jz@/f", (DBSchema) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Jz@/f";
      stringArray0[1] = "^4>_Nh)ZEhphC#h:";
      stringArray0[2] = "Jz@/f";
      stringArray0[3] = "Jz@/f";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Jz@/f", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Jz@/f", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*/", defaultDBTable0, (DBDataType) null, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("^4>_Nh)ZEhphC#h:", dBTable0, (-2187), "Jz@/f");
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("7u|)eOAyq#Y0f", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("7u|)eOAyq#Y0f, */, ^4>_Nh)ZEhphC#h:, */, */", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "v7";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("v7");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v7");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("v7", (String[]) null, "v7", "v7", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("ALTER TABLE ");
      stringBuilder0.append('\u0087');
      SQLUtil.addOptionalCondition("yzz747J%#/;", stringBuilder0);
      assertEquals("ALTER TABLE \u0087 or yzz747J%#/;", stringBuilder0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      StringBuilder stringBuilder0 = new StringBuilder("Failed to create object for: {0}.");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Failed to create object for: {0}.");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("CHECK ", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(101);
      System.setCurrentTimeMillis(3839L);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) stringArray0[7], 101, 101);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 101, end 101, s.length() 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("FORAEIGN ; ", "", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog(">V+e;bEK>AMcK", defaultDatabase0);
      DBSchema dBSchema0 = new DBSchema(">V+e;bEK>AMcK", dBCatalog0);
      dBCatalog0.addSchema(dBSchema0);
      dBCatalog0.addSchema(dBSchema0);
      DBPackage dBPackage0 = new DBPackage("FORAEIGN ; ", dBSchema0);
      SQLUtil.ownerDotComponent(dBPackage0);
      DBDataType.getInstance(20, "mHc->SW4EE(");
      StringBuffer stringBuffer0 = new StringBuffer(20);
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.656670935140681
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      defaultDBTable0.getComponents();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[1] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[0] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      stringArray0[3] = "org.apache.derby.impl.sql.compile.CreateSchemaNode";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.apache.derby.impl.sql.compile.CreateSchemaNode", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      FKChangeRule fKChangeRule1 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      TableContainer tableContainer0 = new TableContainer("create materialized view", defaultDBTable0);
      tableContainer0.getSchema();
      tableContainer0.getComponents();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("0SQ9R,^5_x$f", (DBSchema) null);
      defaultDBTable1.equals((Object) null);
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.slashSlashComments(true);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("create materialized view", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable2.requiresProvider(46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(5742L);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      String string0 = SQLUtil.substituteMarkers("", "Z", jMXPrincipal0);
      assertEquals("", string0);
      
      String string1 = jMXPrincipal0.getName();
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("creae unique inexdrop indexg{]5(ox[}hc{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: creae unique inexdrop indexg{]5(ox[}hc{
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("aAbe) ndex", false);
      assertEquals("aAbe) ndex", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select *- f");
      String[] stringArray0 = new String[20];
      stringArray0[0] = "select *- f";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("select *- f", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "create unique index";
      String[] stringArray0 = new String[9];
      stringArray0[1] = "create unique index";
      stringArray0[2] = "create unique index";
      stringArray0[3] = "create unique index";
      stringArray0[4] = "create unique index";
      stringArray0[5] = "create unique index";
      stringArray0[7] = "create unique index";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("CHECK ", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(108);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) "create unique index", 108, (-769));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 108, end -769, s.length() 19
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = SQLUtil.normalize("43X72.U", true);
      assertEquals("43X72.U", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.normalize("Error converting to object.", false);
      assertEquals("Error converting to object.", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "executeg{]r5(oxn[}hc{");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop tablenull");
      defaultDBTable0.getComponents();
      TableContainer tableContainer0 = new TableContainer("~~S!", defaultDBTable0);
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.mutatesDataOrStructure("delete");
      String string0 = "";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("alter sessionalter materialized viewg{]r5(oxn[}hc{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.7990591844756405
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize("create materialized view0dc&wvqt", true);
      assertEquals("create materialized view0dc & wvqt", string0);
      
      String string1 = SQLUtil.normalize("!MY*/YF", false);
      assertEquals("! MY */ YF", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "! MY */ YF";
      stringArray0[1] = "create materialized view0dc&wvqt";
      stringArray0[2] = "+KPLSs6/qMJ29";
      stringArray0[3] = "create materialized view0dc&wvqt";
      stringArray0[4] = "!MY*/YF";
      stringArray0[5] = "+KPLSs6/qMJ29";
      stringArray0[6] = "!MY*/YF";
      stringArray0[7] = "+KPLSs6/qMJ29";
      stringArray0[8] = "create materialized view0dc&wvqt";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "+KPLSs6/qMJ29", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (! MY */ YF, create materialized view0dc&wvqt, +KPLSs6/qMJ29, create materialized view0dc&wvqt, !MY*/YF, +KPLSs6/qMJ29, !MY*/YF, +KPLSs6/qMJ29, create materialized view0dc&wvqt)", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.normalize("ie:Yd{m\"Eh] K!UI", false);
      assertEquals("ie : Yd { m \"Eh] K!UI\"", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1038, "P b");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("oEP@FJ", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("oEP@FJ P B(3) NULL", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cn");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      defaultDBTable0.equals("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      String string0 = SQLUtil.renderValue("org.apache.derby.impl.sql.compile.CreateSchemaNode");
      assertEquals("'org.apache.derby.impl.sql.compile.CreateSchemaNode'", string0);
      
      defaultDBTable0.getUniqueConstraints(false);
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("org.apache.derby.impl.sql.compile.CreateSchemaNode", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("executeg{]r5(oxn[}hc{");
      defaultDBTable0.getComponents();
      TableContainer tableContainer0 = new TableContainer("executeg{]r5(oxn[}hc{", defaultDBTable0);
      tableContainer0.getSchema();
      tableContainer0.equals("executeg{]r5(oxn[}hc{");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("executeg{]r5(oxn[}hc{", (DBSchema) null);
      String string0 = SQLUtil.renderValue(defaultDBTable1);
      assertEquals("executeg{]r5(oxn[}hc{", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("executeg{]r5(oxn[}hc{");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("s/*=oN4Q'S]", false);
      assertEquals("s /* = oN4Q 'S]'", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYpyV'}$.s");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8bNYpyV'}$.s";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYpyV'}$.s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBDataType.getInstance(384, "MagE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("MagE");
      defaultDBTable0.getComponents();
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "MagE");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertEquals("s8bNYpyV'}$.s", defaultDBTable0.getName());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("org.h2.store.FileLock", stringBuilder0);
      StringBuilder stringBuilder2 = new StringBuilder();
      assertFalse(stringBuilder2.equals((Object)stringBuilder1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3245083869310707
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.normalize(".$hnWdkdN-%w", true);
      String string0 = SQLUtil.normalize("`n!e:5Vymy1", true);
      assertEquals("` n ! e : 5Vymy1", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`n!e:5Vymy1");
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "` n ! e : 5Vymy1";
      stringArray0[2] = "I(^o6<DqcnsjQa(UT";
      stringArray0[3] = ".$hnWdkdN-%w";
      stringArray0[4] = "` n ! e : 5Vymy1";
      stringArray0[5] = "I(^o6<DqcnsjQa(UT";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "` n ! e : 5Vymy1", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5+Opz9X}bm", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(13, "(");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("I(^o6<DqcnsjQa(UT", dBTable0, dBDataType0, integer0, integer1);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("I(^o6<DqcnsjQa(UT ((2,3) NULL", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("B/%Y-m]", false);
      assertEquals("B / % Y - m ]", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedWriter pipedWriter1 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter1);
      TableContainer tableContainer0 = new TableContainer("Ip`O%E");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      String string0 = "create materialized viewselect";
      // Undeclared exception!
      try { 
        dBForeignKeyConstraint0.columnReferencedBy("create materialized viewselect", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // foreign key 'null' does not have a column 'create materialized viewselect'
         //
         verifyException("org.databene.jdbacl.model.DBForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYp'}$.s");
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      // Undeclared exception!
      try { 
        mockPrintWriter0.format(locale0, (String) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("updateCharaceterStream(int, Reader)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("B/%Y-m]");
      SQLUtil.removeComments("B/%Y-m]");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("B/%Y-m]", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exu-e", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(384, "B/%Y-m]");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("B/%Y-m]", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("B/%Y-m] B/%Y-M](0) NULL");
      Random.setNextRandom(384);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.289909825895776
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".$hnWdk,eN-(w");
      System.setCurrentTimeMillis((-480L));
      defaultDBTable0.getIndex(".$hnWdk,eN-(w");
      SQLUtil.normalize(".$hnWdk,eN-(w", false);
      SQLUtil.removeComments(".$ hnWdk, eN - (w");
      SQLUtil.normalize("{MCf<LQzr =~9", false);
      Value[] valueArray0 = new Value[0];
      ValueArray valueArray1 = ValueArray.get(valueArray0);
      Reader reader0 = valueArray1.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insertalter in!exb/he-mo", defaultDBTable0, (DBDataType) null, integer0, integer2);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "insertalter in!exb/he-mo";
      stringArray0[2] = ".$hnWdk,eN-(w";
      stringArray0[3] = "{ MCf < LQzr = ~ 9";
      stringArray0[4] = "{ MCf < LQzr = ~ 9";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("{MCf<LQzr =~9", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("- 0");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.normalize("insertalter in!exb/he-mo", false);
      Random.setNextRandom(40);
      Random.setNextRandom(17);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      Character character0 = new Character('{');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'{'", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "selectselect intoconsidering join strategy";
      stringArray0[5] = "CLOB";
      stringArray0[6] = "CLOB";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "CLOB", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CLOB", false, dBTable0, stringArray0, dBTable0, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      StringBuilder stringBuilder0 = new StringBuilder(2005);
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals("CONSTRAINT CLOB ", stringBuilder1.toString());
      assertEquals("CONSTRAINT CLOB ", stringBuilder0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9943536917623688
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize(" join ", false);
      assertEquals("join", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("join", true, "join", "join");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK join", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("select into");
      SQLUtil.removeComments("");
      SQLUtil.mutatesDataOrStructure("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("R6n~GfXUvWobGIjPN");
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) mockPrintWriter0;
      PrintWriter printWriter0 = mockPrintWriter0.printf("R6n~GfXUvWobGIjPN", objectArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ISU?g&Qb&3M|<";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "R6n~GfXUvWobGIjPN", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("R6n~GfXUvWobGIjPN", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec1, mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      String[] stringArray0 = new String[6];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "RESOURCE";
      stringArray0[3] = "RESOURCE";
      stringArray0[4] = "RESOURCE";
      stringArray0[5] = "RESOURCE";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "RESOURCE", true, stringArray0);
      dBUniqueConstraint0.setTable(defaultDBTable0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) null);
      CharArrayWriter charArrayWriter2 = charArrayWriter1.append('H');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter2, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionalter materialized viewg{]r5(oxn[}hc{");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("unknownLength parameter value must be an integer");
      DBDataType dBDataType0 = DBDataType.getInstance(5, "kNF&-Yk3S@vXUp9>P");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intoconsidering ", defaultDBTable0, dBDataType0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("select intoconsidering , select intoconsidering ", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYpyV'}$.s");
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("s8bNYpyV'}$.s", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance(384, "s8bNYpyV'}$.s");
      Integer integer0 = new Integer(384);
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = new Integer(11);
      Integer integer4 = RawTransaction.LOCK_ESCALATE;
      Integer integer5 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("s8bNYpyV'}$.s", defaultDBTable0, dBDataType0, integer0, integer5);
      defaultDBColumn0.isUnique();
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(5, "kNF&-Yk3S@vXUp9>P");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intoconsidering ", defaultDBTable0, dBDataType0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("kNF&-Yk3S@vXUp9>P");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "select intoconsidering ", false, "select intoconsidering ");
      StringBuilder stringBuilder0 = new StringBuilder("select intoconsidering ");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Random.setNextRandom(1965);
      System.setCurrentTimeMillis(279L);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s8bNYpyV'}$.s");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s8bNYpyV'}$.s";
      TableContainer tableContainer0 = new TableContainer("MagE", defaultDBTable0);
      defaultDBTable0.getPrimaryKeyConstraint();
      DBDataType.getInstance(384, "MagE");
      defaultDBTable0.toString();
      Integer integer0 = new Integer(384);
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType0 = DBDataType.getInstance(384, "BLOB");
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.ABORT;
      Integer integer5 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index", defaultDBTable0, dBDataType0, integer5);
      Integer integer6 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("`tA>oo", defaultDBTable0, dBDataType0, integer0, integer6);
      SQLUtil.renderColumn(defaultDBColumn1);
      SQLUtil.parseColumnTypeAndSize("s8bNYpyV'}$.s");
      PipedReader pipedReader0 = new PipedReader(384);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, 97);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 2210.1;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("2210.1", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("alter materialized viewselect *- frkj", compositeDBObject0);
      tableContainer0.getTable("8ycv>tD){'v}s:lNxJ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-441), "8ycv>tD){'v}s:lNxJ");
      SQLUtil.normalize("", true);
      defaultDBColumn0.setDefaultValue("`&x&Kuy/:1%B");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" 8YCV>TD){'V}S:LNXJ DEFAULT `&x&Kuy/:1%B NULL", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "CLOB";
      stringArray0[1] = "CLOB";
      stringArray0[2] = null;
      stringArray0[3] = "CLOB";
      stringArray0[4] = "CLOB";
      stringArray0[5] = "selectselect intoconsidering join strategy";
      stringArray0[6] = "selectselect intoconsidering join strategy";
      stringArray0[7] = "selectselect intoconsidering join strategy";
      stringArray0[8] = "CLOB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[2], false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringBuilder stringBuilder0 = new StringBuilder(3094);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-91L));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("FOREIGN KEY ", defaultDBTable0, (-2154), "");
      DBDataType dBDataType0 = DBDataType.getInstance((-2154), "");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("select intoconsidering ", defaultDBTable0, dBDataType0);
      arrayList0.add((DBColumn) defaultDBColumn1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("S?@jd3I4Wqor${");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) defaultDBTable0;
      objectArray0[2] = (Object) dBDataType0;
      objectArray0[2] = (Object) defaultDBColumn1;
      objectArray0[4] = (Object) "select intoconsidering ";
      PrintWriter printWriter0 = mockPrintWriter0.printf("S?@jd3I4Wqor${", objectArray0);
      printWriter0.println("h2.defaultMaxLengthInplaceLob2");
      PrintWriter printWriter1 = printWriter0.printf("select intoconsidering ", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertSame(mockPrintWriter0, printWriter1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&R,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-2870.27506);
      SQLUtil.renderNumber(streamTokenizer0);
      Random.setNextRandom((-4));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      List<DBIndex> list0 = new LinkedList<DBIndex>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "insertexecuteg{]r5(oxn[}hc{");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("F", true, defaultDBTable0, "F");
      dBCheckConstraint0.setOwner(defaultDBTable0);
      TableContainer tableContainer0 = new TableContainer("F");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(180);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(rowOutputBinary0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("F");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(5, "kNF&-Yk3S@vXUp9>P");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intoconsidering ", defaultDBTable0, dBDataType0);
      arrayList0.add((DBColumn) defaultDBColumn0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("S?@j3I4W<or${");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "select intoconsidering ", false, "select intoconsidering ");
      StringBuilder stringBuilder0 = new StringBuilder("select intoconsidering ");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(rowOutputBinary0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("select intoconsidering  NOT NULL", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.removeComments("\n/* distinct */");
      assertEquals("\n", string0);
  }
}
