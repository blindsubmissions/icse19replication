/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:02:00 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = ",\n";
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\",\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \",
         // \"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.quote("5[M/<Pd'G`}F-+");
      JSONTokener jSONTokener0 = new JSONTokener("5[M/<Pd'G`}F-+");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 5[M/<Pd'G`}F-+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "ishashCode";
      HashMap<JSONObject, Byte> hashMap0 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("ishashCode");
      try { 
        jSONArray0.getInt(655);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[655] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = JSONObject.quote("5[3/<Pd'G`}F-+");
      assertEquals("\"5[3/<Pd'G`}F-+\"", string0);
      
      JSONObject.testValidity((Object) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("null");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("gettoUnsignedInt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoUnsignedInt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = JSONObject.quote("; =");
      assertEquals("\"; =\"", string0);
      
      String string1 = JSONObject.doubleToString(447.297);
      assertEquals("447.297", string1);
      
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("x_dXxD';DS^", 447.297);
      assertEquals(447.297, double0, 0.01);
      
      String string2 = jSONObject0.toString(427, 92);
      assertEquals("{}", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject.quote("5[3/<Pd'G`}F-+");
      Byte byte0 = new Byte((byte)45);
      JSONObject.numberToString(byte0);
      Object object0 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = JSONObject.quote("3\n");
      Short short0 = new Short((short)44);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = JSONObject.quote("5[3/<Pd'G`}F-+");
      Long long0 = new Long((-542L));
      String string1 = JSONObject.valueToString(long0, 69, 69);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ismax";
      JSONObject jSONObject1 = jSONObject0.accumulate("ismax", "ismax");
      try { 
        jSONObject1.getBoolean("ismax");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ismax\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "^+8,><%";
      Long long0 = new Long((-2230L));
      Integer integer0 = new Integer(0);
      hashMap0.replace(long0, integer0, integer0);
      jSONObject0.has("^+8,><%");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("^+8,><%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ^+8,><%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.507587880637416
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = JSONObject.quote("5[3/<Pd'G`}F-+");
      assertEquals("\"5[3/<Pd'G`}F-+\"", string0);
      
      Long long0 = new Long(0L);
      Long.getLong("s5@|T2tsKT~Z");
      Long.getLong("s5@|T2tsKT~Z");
      JSONObject jSONObject0 = new JSONObject(long0);
      boolean boolean0 = jSONObject0.optBoolean(",:]}/\"[{;=#", true);
      assertTrue(boolean0);
      
      JSONObject.testValidity(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = JSONObject.quote("3\n");
      assertEquals("\"3\\n\"", string0);
      
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean("*y)WJ+Bm}mb9+c");
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.quote("flo");
      assertEquals("\"flo\"", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-100.602));
      assertEquals("-100.602", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = JSONObject.quote("3\n");
      assertEquals("\"3\\n\"", string0);
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
      
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toJSONObject((JSONArray) null);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string2 = JSONObject.valueToString(jSONObject0, 36, 11);
      assertEquals("{}", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.139820771427714
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}PN*pMMWkx7L}F/", (Object) "}PN*pMMWkx7L}F/");
      Double double0 = new Double((-1113));
      Integer integer0 = new Integer((-1113));
      try { 
        jSONObject1.getJSONObject("}PN*pMMWkx7L}F/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}PN*pMMWkx7L}F/\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.quote("%");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"%\"";
      stringArray0[1] = "%";
      stringArray0[2] = "\"%\"";
      stringArray0[3] = "%";
      stringArray0[4] = "\"%\"";
      stringArray0[5] = "%";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JSONObject.quote("3\n");
      assertEquals("\"3\\n\"", string0);
      
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString(1116, 2769);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote("%");
      assertEquals("\"%\"", string0);
      
      Byte byte0 = new Byte((byte)0);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString((int) (byte)0, 88);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.20619205063323187
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = JSONObject.quote("5 \n");
      assertEquals("\"5 \\n\"", string0);
      
      String string1 = JSONObject.valueToString("\"5 \n\"", 70, 70);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      hashMap0.put((JSONObject) null, (JSONObject) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = JSONObject.quote("5[M/<Pd'G`}F-+");
      assertEquals("\"5[M/<Pd'G`}F-+\"", string0);
      
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = null;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6014770913022407
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JSONObject.quote("B)b}_T.wYLQ&7N");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B)b}_T.wYLQ&7N";
      stringArray0[1] = "\"B)b}_T.wYLQ&7N\"";
      JSONObject jSONObject0 = new JSONObject("\"B)b}_T.wYLQ&7N\"", stringArray0);
      jSONObject0.optLong(".", 0L);
      jSONObject0.optJSONObject((String) null);
      Float float0 = new Float(1273.0);
      String string1 = JSONObject.valueToString(float0, 69, 69);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(175);
      Integer integer0 = Integer.getInteger("qmQ[");
      assertNull(integer0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.911737533237336
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      Boolean.valueOf(false);
      jSONObject0.append("val", "] is not a JSONObject.");
      jSONObject0.optLong("val");
      try { 
        jSONObject1.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Float float0 = new Float((-0.7984177F));
      Float.sum((-0.7984177F), (-1944.934F));
      Float.max((-1945.7324F), (-1944.934F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.names();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject.quote("5 \n");
      JSONObject jSONObject0 = new JSONObject((Object) "\"5 \n\"");
      // Undeclared exception!
      jSONObject0.toString(1694, 70);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote("3\n");
      assertEquals("\"3\\n\"", string0);
      
      Float float0 = new Float(1.0F);
      Float.min((-4203.33F), 1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
      
      jSONObject0.toString(62, 128);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.quote("3\n");
      assertEquals("\"3\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 56, 56);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.quote("B)b}_T.wYLQ&7uqN");
      assertEquals("\"B)b}_T.wYLQ&7uqN\"", string0);
      
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(439);
      hashMap0.put(integer0, (Float) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.911737533237336
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      Writer writer1 = jSONArray0.write(writer0);
      jSONObject1.write(writer1);
      Boolean.valueOf(false);
      jSONObject0.append("val", "] is not a JSONObject.");
      try { 
        jSONObject1.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("#W ]MNA{f");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("/>Y", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("/>Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of />Y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = JSONObject.quote("o4l QT4N%cV#");
      assertEquals("\"o4l QT4N%cV#\"", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "qamFx";
      JSONObject jSONObject1 = jSONObject0.accumulate("qamFx", "qamFx");
      jSONObject1.accumulate("qamFx", "qamFx");
      try { 
        Long.decode("qamFx");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"qamFx\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.9117375332373359
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      Boolean.valueOf(false);
      jSONObject0.toString();
      jSONObject0.append("val", "] is not a JSONObject.");
      try { 
        jSONObject1.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)35);
      try { 
        jSONObject0.put((String) null, (int) (byte)35);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3292);
      linkedList0.add(integer0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9539141074039983
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float(1864.0527F);
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Float@0000000001");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Float@0000000001");
      jSONObject0.write(stringWriter1);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("qm2(>l#L%Q'~G /", 2267);
      assertEquals(2267, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8452026173223839
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      String string0 = "val";
      Boolean.valueOf(false);
      JSONObject jSONObject2 = jSONObject0.append("val", "] is not a JSONObject.");
      jSONObject2.optInt("S");
      try { 
        jSONObject1.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9117375332373359
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.getNames(jSONObject0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      Boolean.valueOf(false);
      jSONObject0.append("val", "] is not a JSONObject.");
      try { 
        jSONObject1.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JSONArray initial value should be a string or collection or array.";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.accumulate("JSONArray initial value should be a string or collection or array.", jSONArray0);
      StringWriter stringWriter0 = new StringWriter(2);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "JSONArray initial value should be a string or collection or array.", (-14482067), 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("", (Collection) linkedList0);
      jSONObject0.getJSONArray("");
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = JSONObject.quote("5[3/<Pd'RG`}F-+");
      assertEquals("\"5[3/<Pd'RG`}F-+\"", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5[3/<Pd'RG`}F-+";
      stringArray0[1] = "\"5[3/<Pd'RG`}F-+\"";
      stringArray0[2] = "5[3/<Pd'RG`}F-+";
      JSONObject jSONObject0 = new JSONObject("5[3/<Pd'RG`}F-+", stringArray0);
      String string1 = JSONObject.valueToString(jSONObject0, 1323, 1323);
      assertEquals("{}", string1);
      
      String string2 = JSONObject.valueToString("5[3/<Pd'RG`}F-+");
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("hVuYR(B#d^[Kl{YjW", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = JSONObject.doubleToString((-2619.2755698145106));
      assertEquals("-2619.2755698145106", string0);
      
      String string1 = JSONObject.quote("-2619.2755698145106");
      assertEquals("\"-2619.2755698145106\"", string1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put(":5$JBi>@:{IvN1)agga", false);
      assertEquals(1, jSONObject0.length());
      
      Double double0 = new Double(18.063841274747244);
      JSONObject.testValidity((Object) null);
      jSONObject1.getBoolean(":5$JBi>@:{IvN1)agga");
      String string0 = JSONObject.doubleToString(18.063841274747244);
      assertEquals("18.063841274747244", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8388353838849918
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Integer integer0 = new Integer((-571));
      JSONObject jSONObject0 = new JSONObject(integer0);
      long long0 = jSONObject0.optLong("R!si z`oSvnuIfRRr");
      assertEquals(0L, long0);
      
      jSONObject0.optJSONArray("Expected '");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{`zcUl;uu");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {`zcUl;uu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "{zzqSyR:~D";
      JSONTokener jSONTokener0 = new JSONTokener("{zzqSyR:~D");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {zzqSyR:~D
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8536559613376093
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float(1864.0527F);
      Float float1 = new Float(1.0F);
      Byte byte0 = new Byte((byte)7);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Object object0 = new Object();
      Byte.toUnsignedLong((byte)7);
      JSONObject jSONObject1 = new JSONObject(object0);
      jSONObject1.toString(376, 1968);
      jSONObject1.toString(1968, (int) (byte)7);
      JSONObject.quote("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      JSONObject.quote("\"{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}\"");
      jSONObject0.toString(1968, 92);
      jSONObject1.toString((-3896), 1968);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000005\": \"java.lang.Class@0000000006\"}");
      jSONTokener0.nextValue();
      jSONTokener0.nextTo("{\"java.lang.String@0000000003\": \"java.lang.Class@0000000004\"}");
      try { 
        jSONTokener0.next('#');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '#' and instead saw '\u0000' at character 61 of {\"java.lang.String@0000000005\": \"java.lang.Class@0000000006\"}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "{zzqSy:~;";
      JSONTokener jSONTokener0 = new JSONTokener("{zzqSy:~;");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 8 of {zzqSy:~;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7677281666160183
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "qmQ[";
      JSONObject jSONObject1 = jSONObject0.accumulate("qmQ[", "qmQ[");
      JSONObject jSONObject2 = jSONObject1.putOpt("qmQ[", "qmQ[");
      jSONObject2.put("qmQ[", 1.0);
      try { 
        jSONObject0.getBoolean("qmQ[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qmQ[\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer((-592));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = jSONObject0.optString("bOsuuZtMZAKzGpR");
      assertEquals("", string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean.valueOf(true);
      String string0 = jSONObject0.optString("kv|<p<", "E'");
      assertEquals("E'", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(91, 91);
      jSONObject0.put("kv|<p<", (Collection) null);
      Boolean.valueOf(true);
      String string1 = jSONObject0.optString("kv|<p<", "E'");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject.quote("iAJCrQ11q7Q:");
      JSONObject.valueToString("iAJCrQ11q7Q:");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("\"java.lang.String@0000000001\"");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "}PN*p\\MMWkx7L}F/";
      JSONObject jSONObject1 = jSONObject0.put("}PN*pMMWkx7L}F/", (Object) "}PN*pMMWkx7L}F/");
      try { 
        jSONObject1.append("}PN*pMMWkx7L}F/", "}PN*pMMWkx7L}F/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[}PN*pMMWkx7L}F/] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7041112757296575
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      jSONObject0.append("] is not a JSONObject.", "] is not a JSONObject.");
      Boolean.valueOf(false);
      jSONObject0.append("val", "] is not a JSONObject.");
      try { 
        jSONObject1.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-448), (-448));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.776053131855733
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", (Collection) linkedList0);
      jSONObject1.accumulate("] is not a JSONObject.", linkedList0);
      Boolean.valueOf(false);
      jSONObject0.append("val", "] is not a JSONObject.");
      try { 
        jSONObject1.getInt("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "}PN*p\\MMWkx7L}F/";
      jSONObject0.put("}PN*pMMWkx7L}F/", (Object) "}PN*pMMWkx7L}F/");
      int int0 = (-1113);
      try { 
        jSONObject0.getJSONArray("}PN*pMMWkx7L}F/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}PN*pMMWkx7L}F/\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      byte byte0 = (byte)38;
      Byte byte1 = new Byte((byte)38);
      Byte byte2 = new Byte((byte)38);
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject.quote("=; =");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("x2", "x2");
      boolean boolean0 = jSONObject1.isNull("x2");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 12;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      hashMap0.keySet();
      linkedList0.add((String) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(12);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(91, 1);
      jSONObject0.toJSONArray(jSONArray0);
      Integer integer0 = new Integer(1180);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.min(0.0, 0.0);
      Double.max(419.3531, 419.3531);
      JSONObject.testValidity(double0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optInt(1793, 5);
      Object object0 = new Object();
      linkedList0.add(object0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      linkedList0.removeIf(predicate0);
      jSONArray0.optDouble(2119, (double) 2119);
      JSONObject.testValidity(jSONArray0);
      JSONObject.quote("/3LInQ8 il6Cu#");
      JSONObject.valueToString(linkedList0, (-190), (-190));
      JSONObject.numberToString(double0);
      JSONArray jSONArray1 = new JSONArray("[\"java.lang.Object@0000000005\"]");
      String string0 = JSONObject.valueToString(jSONArray1, 2119, 1793);
      Float float0 = new Float((-3526.721150002913));
      String string1 = JSONObject.valueToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("6?j>]", true);
      boolean boolean0 = jSONObject1.getBoolean("6?j>]");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "2sE|9B&S:Bo");
      JSONObject.quote("bOsuuZtMZAKzGpR");
      JSONObject.quote("gettoUnsignedString");
      JSONTokener jSONTokener0 = new JSONTokener("000");
      JSONTokener jSONTokener1 = new JSONTokener("\"gettoUnsignedString\"");
      jSONTokener1.back();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("gettoUnsignedString", object0);
      boolean boolean0 = jSONObject0.isNull("gettoUnsignedString");
      assertEquals(4, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.9410890073021168
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Byte byte0 = new Byte((byte)38);
      Byte byte1 = new Byte((byte)38);
      Float float0 = new Float(4709.40740366915);
      Byte.compare((byte)38, (byte)38);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = new JSONObject(byte1);
      String string0 = jSONObject0.toString((int) (byte)38, 2804);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      // Undeclared exception!
      jSONTokener0.nextValue();
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      Float float0 = new Float(989.477F);
      jSONObject0.put("cop", (Object) float0);
      Integer integer0 = new Integer(341);
      jSONObject0.optDouble("cop");
      JSONObject.doubleToString(989.477F);
      StringWriter stringWriter0 = new StringWriter(341);
      stringWriter0.append((CharSequence) "wheel.json.JSONObject@0000000001");
      stringWriter0.close();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "wheel.json.JSONObject@0000000001", 341, 511);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Double double0 = new Double((-1099));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.quote("wHlMb6P:yN</=m&0");
      assertEquals("\"wHlMb6P:yN<\\/=m&0\"", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("T", (Collection) linkedList0);
      jSONObject0.put("T", 58);
      JSONObject jSONObject1 = jSONObject0.put("Kl#BN8Xx4KgUJy7?3", (Collection) linkedList0);
      jSONObject1.getInt("T");
      Double double0 = new Double(0.0);
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      JSONObject jSONObject0 = new JSONObject(byte0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("\t", (Collection) linkedList0);
      jSONObject1.optJSONArray("\t");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("T", (Collection) linkedList0);
      jSONObject1.putOpt("T", jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("Kl#BN8Xx4KgUJy7?3", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(2);
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, 2264, 2264);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject.doubleToString((-34776646));
      Object object0 = new Object();
      String string0 = JSONObject.quote("-3.4776646E7");
      assertEquals("\"-3.4776646E7\"", string0);
      
      String string1 = JSONObject.doubleToString(8);
      assertEquals("8", string1);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6264553276101599
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("}PN*pMMWkx7L}F/", (Object) "}PN*pMMWkx7L}F/");
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject2 = jSONObject1.put("}PN*pMMWkx7L}F/", (Map) hashMap0);
      Double double0 = new Double((-1113));
      Integer integer0 = new Integer((-1113));
      jSONObject1.getJSONObject("}PN*pMMWkx7L}F/");
      String string0 = JSONObject.numberToString(integer0);
      JSONObject.doubleToString(Double.NaN);
      String string1 = JSONObject.valueToString(jSONObject2);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float float0 = new Float((-0.5500412F));
      JSONObject jSONObject0 = new JSONObject(float0);
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      jSONObject0.put("6PeM;Nni]wn9S!>ce", (Map) hashMap0);
      JSONObject.testValidity("6PeM;Nni]wn9S!>ce");
      jSONObject0.optJSONObject("6PeM;Nni]wn9S!>ce");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getfloatToRawIntBits", 9);
      jSONObject1.getDouble("getfloatToRawIntBits");
      jSONObject0.accumulate("qamF[", "qamF[");
      JSONObject.quote("");
      JSONObject.testValidity("getfloatToRawIntBits");
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("false", "false");
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.getBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("true", "true");
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "{`zcU=;uu";
      JSONTokener jSONTokener0 = new JSONTokener("{`zcU=;uu");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 6 of {`zcU=;uu
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
