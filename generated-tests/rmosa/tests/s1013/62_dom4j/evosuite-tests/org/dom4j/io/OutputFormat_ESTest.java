/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:15:18 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.isPadText();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setEncoding("XvjcK#D*H^,");
      outputFormat0.setIndentSize(0);
      outputFormat0.getEncoding();
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals("XvjcK#D*H^,", outputFormat0.getEncoding());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2816340498925647
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "-expandEmptykY6BKo;1?!B(b";
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-expandEmptykY6BKo;1?!B(b";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      OutputFormat.createCompactFormat();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator", true);
      outputFormat0.setLineSeparator("-lineSeparator");
      outputFormat0.setIndentSize((-3626));
      outputFormat0.setIndent("-lineSeparator");
      outputFormat0.setIndent(true);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("9c");
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "9c";
      stringArray0[1] = "_[#nVe9GyV:r.";
      stringArray0[2] = "";
      stringArray0[3] = "-lineSeparator";
      stringArray0[4] = "9c";
      stringArray0[0] = "-lineSeparator";
      stringArray0[7] = "9c";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-3626));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3626
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("BXlAK ;H75!cko", true, "BXlAK ;H75!cko");
      String string0 = outputFormat0.getEncoding();
      assertEquals("BXlAK ;H75!cko", string0);
      
      outputFormat0.setNewLineAfterNTags(0);
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(boolean0);
      assertEquals("BXlAK ;H75!cko", outputFormat0.getIndent());
      
      outputFormat0.setIndent(false);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize", true);
      assertEquals("-indentSize", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize(1038);
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0379083330628327
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";M8mgmHB&");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";M8mgmHB&";
      outputFormat0.setPadText(false);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setEncoding("Invalid attribute quote character (");
      outputFormat0.getIndent();
      String[] stringArray1 = new String[7];
      stringArray1[1] = "-encoding";
      outputFormat0.setIndent("kl*W[VYc{6.F6f_");
      stringArray1[2] = "-expandEmpty";
      outputFormat0.setPadText(false);
      stringArray1[3] = "-expandEmpty";
      stringArray1[4] = ";M8mgmHB&";
      outputFormat0.parseOptions(stringArray1, 1);
      int int0 = outputFormat0.parseOptions(stringArray1, 1);
      assertEquals("kl*W[VYc{6.F6f_", outputFormat0.getIndent());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.328515191203992
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setXHTML(true);
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-trimText";
      outputFormat0.setXHTML(false);
      stringArray0[1] = "";
      stringArray0[2] = "-exandEmpty  ";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "";
      outputFormat0.setIndent("");
      stringArray0[1] = "-exandEmpty  ";
      stringArray0[6] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setXHTML(false);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-404));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -404
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = false;
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, (String) null);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('F');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (F)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.908908734898781
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewLineAfterNTags(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-exandEmpty  ";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-trimText";
      stringArray0[0] = "-exandEmpty  ";
      outputFormat0.setPadText(true);
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = (-1840700267);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1840700267));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1840700267
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.375024252984546
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-exandEmpty  ";
      stringArray0[1] = "-trimText";
      OutputFormat.createPrettyPrint();
      stringArray0[2] = "-trimText";
      stringArray0[0] = "-exandEmpty  ";
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = (-1840700267);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1840700267));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1840700267
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "-expandEmptykY6BKo;1?!B(b";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Q7n{|T2G ", true, "Q7n{|T2G ");
      outputFormat0.getLineSeparator();
      outputFormat0.isNewlines();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PnEHP``gM/}Sf";
      stringArray0[1] = "\n";
      stringArray0[2] = "";
      stringArray0[3] = "Q7n{|T2G ";
      stringArray0[4] = "\n";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1904));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1904
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("-trimText");
      String[] stringArray0 = new String[2];
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptykY6BKo;1?!B(b");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-expandEmptykY6BKo;1?!B(b";
      stringArray0[1] = "v'4j>y!nY>OV(:EQ<pa4";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9998704205025659
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";M8mgmHB&");
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getIndent();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ";M8mgmHB&";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "-expandEmpty";
      stringArray0[4] = ";M8mgmHB&";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 556);
      outputFormat0.parseOptions(stringArray0, 904);
      outputFormat0.parseOptions(stringArray0, 39);
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 39);
      assertEquals("-expandEmpty", outputFormat0.getEncoding());
      assertEquals(39, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", false);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(boolean0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("-expandEmpty", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "YZ(%Khl}jhdCJ";
      stringArray0[1] = "YZ(%Khl}jhdCJ";
      stringArray0[1] = "D#2~=;d%`j~PW:\"@4";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
      
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(boolean0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = "";
      String string1 = "-exandEmpty  ";
      int int0 = 0;
      outputFormat0.setNewLineAfterNTags(0);
      boolean boolean0 = true;
      String string2 = null;
      outputFormat0.setIndent((String) null);
      outputFormat0.setXHTML(false);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.509137344082687
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      String[] stringArray0 = new String[4];
      outputFormat0.setEncoding((String) null);
      stringArray0[0] = "YZ(%Khl}jhdCJ";
      stringArray0[1] = "YZ(%Khl}jhdCJ";
      stringArray0[2] = "";
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(1, int0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("M");
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "M";
      stringArray0[1] = "M";
      stringArray0[2] = "M";
      stringArray0[3] = "M";
      stringArray0[5] = "M";
      stringArray0[6] = "M";
      outputFormat0.setTrimText(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isNewLineAfterDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent(true);
      outputFormat1.isXHTML();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isTrimText();
      assertTrue(outputFormat0.isTrimText());
      
      outputFormat1.setXHTML(false);
      assertFalse(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false);
      OutputFormat outputFormat1 = new OutputFormat((String) null, false, (String) null);
      String[] stringArray0 = new String[3];
      stringArray0[1] = null;
      stringArray0[1] = "-xhtmlUTF-8";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("v'4j>y!nYOV(:EQ<pa4");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(false);
      OutputFormat outputFormat2 = new OutputFormat("v'4j>y!nYOV(:EQ<pa4", false, "v'4j>y!nYOV(:EQ<pa4");
      outputFormat1.setAttributeQuoteCharacter('\'');
      outputFormat1.setIndentSize(2399);
      assertEquals('\'', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";M8mgmHB&");
      assertFalse(outputFormat0.isPadText());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-padText";
      stringArray0[1] = ";M8mgmHB&";
      stringArray0[3] = ";M8mgmHB&";
      stringArray0[4] = ";M8mgmHB&";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.getIndent();
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      boolean boolean0 = true;
      OutputFormat outputFormat1 = new OutputFormat("LtDYID", true, "-xhtmlUTF-8");
      outputFormat1.setExpandEmptyElements(true);
      outputFormat1.getIndent();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "-indent";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setAttributeQuoteCharacter('\"');
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-xhtml,:Nh,`/R-/PKv";
      stringArray0[1] = "ov`{]Upg#rBa";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "0G>z%mh";
      stringArray0[4] = "Ahf";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2882));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2882
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("wB4M{U", true, "wB4M{U");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v'4j>y!nY>OV(:EQ<pa4";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-expandEmptykY6BKo;1?!B(b";
      stringArray0[3] = "wB4M{U";
      stringArray0[4] = "-expandEmptykY6BKo;1?!B(b";
      stringArray0[5] = "wB4M{U";
      stringArray0[6] = "-expandEmptykY6BKo;1?!B(b";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-expandEmptykY6BKo;1?!B(b\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-trimText";
      stringArray0[5] = "-trimText";
      stringArray0[6] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration", false);
      String[] stringArray0 = new String[7];
      outputFormat0.setNewLineAfterDeclaration(false);
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-expandEmpty";
      stringArray0[2] = "-suppressDeclaration";
      stringArray0[3] = "-suppressDeclaration";
      stringArray0[4] = "-suppressDeclaration";
      stringArray0[5] = "-suppressDeclaration";
      stringArray0[6] = "-suppressDeclaration";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 7);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "-suppressDeclaration";
      stringArray1[1] = "MpeZ[M-]";
      stringArray1[2] = "-suppressDeclaration";
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.parseOptions(stringArray1, 7);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "-newlines";
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
