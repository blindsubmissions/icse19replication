/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:54:39 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FilterInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.datatype.DatatypeElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getDocumentFactory();
      String string0 = "//tmp/d,T|U<0.tmp";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("0", "//tmp/d,T|U<0.tmp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultDocumentFactory.getInstance();
      sAXReader0.createXMLReader();
      try { 
        MockURI.URI("org.dom4j.io.SAXReader$SAXEntityResolver", "1R9Jyqb6l8U4f{", "1R9Jyqb6l8U4f{", "1R9Jyqb6l8U4f{", "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: org.dom4j.io.SAXReader$SAXEntityResolver://1R9Jy%7Fqb6l8U4f%7B1R9Jy%7Fqb6l8U4f%7B?1R9Jy%7Fqb6l8U4f%7B#
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = " : ";
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " : ");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string1 = "M`X<}jON{/^\"3n!Rd ";
      Integer integer0 = new Integer(1);
      try { 
        sAXReader0.setProperty("M`X<}jON{/^\"3n!Rd ", integer0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: M`X<}jON{/^\"3n!Rd 
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      assertTrue(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      String string0 = null;
      sAXReader0.getXMLReader();
      sAXReader0.getXMLReader();
      BeanElement beanElement0 = new BeanElement((String) null, (Object) null);
      MockFile mockFile0 = new MockFile("4z0+d!+N2h@R", "BO6DM{Z6xBB37u-Q,");
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "BO6DM{Z6xBB37u-Q,", (File) mockFile0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("[XPathPattern: text: ", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class [XPathPattern: text:  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "4'`}w`";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("4'`}w`");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class 4'`}w` not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      String string0 = null;
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setStripWhitespaceText(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = "//tmp/%ts`VbsF->c`SwJun(90Lm7-;}W/fRwL";
      try { 
        MockURI.URI(",Vw!M\"n_tr'inWi", "//tmp/%ts`VbsF->c`SwJun(90Lm7-;}W/fRwL", "//tmp/%ts`VbsF->c`SwJun(90Lm7-;}W/fRwL", (-1), ",Vw!M\"n_tr'inWi", "//tmp/%ts`VbsF->c`SwJun(90Lm7-;}W/fRwL", "//tmp/%ts`VbsF->c`SwJun(90Lm7-;}W/fRwL");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ,Vw!M\"n_tr'inWi://%2F%2Ftmp%2F%25ts%60VbsF-%3Ec%60SwJun(90Lm7-;%7DW%2FfRwL@//tmp/%ts`VbsF->c`SwJun(90Lm7-;}W/fRwL,Vw!M%7F%22n_tr'inWi?//tmp/%25ts%60VbsF-%3Ec%60SwJun(90Lm7-;%7DW/fRwL#//tmp/%25ts%60VbsF-%3Ec%60SwJun(90Lm7-;%7DW/fRwL
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(boolean0);
      
      sAXReader0.resetHandlers();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7660742220974046
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      StringReader stringReader0 = new StringReader("2c+O;%");
      try { 
        sAXReader0.read((Reader) stringReader0, "2c+O;%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document 2c+O;% : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.82337540094768
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "//tmp/YL5!#ixw_h|cJz0']";
      StringReader stringReader0 = new StringReader("//tmp/YL5!#ixw_h|cJz0']");
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = QName.get("//tmp/tmp/Error on line 0file:0?YZHhp[v!I^+hc0H_g9", namespace0);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      namespace0.getUniquePath();
      try { 
        sAXReader0.read((Reader) stringReader0, "a> M=`yjCoh,!}Zdu.s");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document a> M=`yjCoh,!}Zdu.s : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getEntityResolver();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      StringReader stringReader0 = new StringReader("last() requires no argume^ts.");
      DOMDocument dOMDocument0 = new DOMDocument();
      MockURL.getHttpExample();
      try { 
        sAXReader0.read((Reader) stringReader0, "last() requires no argume^ts.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      MockFile mockFile0 = new MockFile("//tmp/Error on line 0O", "//tmp/Error on line 0O");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      sAXReader0.getErrorHandler();
      xMLReaderAdapter0.setErrorHandler((ErrorHandler) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("//tmp/%ts`VbsF->c`SwJun(90Lm7-;}W/fRwL");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setStringInternEnabled(false);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getContentHandler();
      xMLFilterImpl1.getEntityResolver();
      xMLFilterImpl1.setParent(xMLFilterImpl0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("o;710~B");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      MockFile.createTempFile("Error on line ", "Error on line ");
      try { 
        sAXReader0.read("Error on line ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.createDefaultEntityResolver("");
      try { 
        sAXReader0.setXMLReaderClassName("Error on line ");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class Error on line  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8488997058418164
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      StringReader stringReader0 = new StringReader(" : ");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.notationDecl("b<@Js,t^D", (String) null, "?`jW");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@232c511a Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "Error on line ";
      File file0 = MockFile.createTempFile("Error on line ", "_-b");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      MockFile.createTempFile("//tmp/Error on line 0file:", "//tmp/Error on line 0file:");
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.createDefaultEntityResolver("//tmp/Error on line 0file:");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DefaultDocument defaultDocument0 = new DefaultDocument("//tmp/CharacterData node is read only: 0e^1FB2;H\"lz3arLA:");
      assertNull(defaultDocument0.getXMLEncoding());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace("{+T9Zy^Bk", "{+T9Zy^Bk");
      QName qName0 = defaultDocumentFactory0.createQName("{+T9Zy^Bk", namespace0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        MockURL.URL("@\"$a:M");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: @\"$a:M
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8244886549779107
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      File file0 = MockFile.createTempFile("//tmp/Error on line 0file:", "//tmp/Error on line 0file:");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getEntityResolver();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      StringReader stringReader0 = new StringReader("last() requires no argume^ts.");
      DOMDocument dOMDocument0 = new DOMDocument();
      MockURL.getFtpExample();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap00y# LT1vL;-.@_@Y~4");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setFeature("org.jaxen.function.ext.LowerFunction", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: org.jaxen.function.ext.LowerFunction
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      char[] charArray0 = new char[0];
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "last() requiEes no argume^ts.";
      StringReader stringReader0 = new StringReader("last() requiEes no argume^ts.");
      DOMDocument dOMDocument0 = new DOMDocument();
      MockURL.getFtpExample();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      StringReader stringReader1 = new StringReader("last() requiEes no argume^ts.");
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.createDefaultEntityResolver((String) null);
      try { 
        sAXReader0.setXMLReaderClassName("org.dom4j.io.SAXReader$SAXEntityResolver");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class org.dom4j.io.SAXReader$SAXEntityResolver loaded but cannot be instantiated (no empty public constructor?)
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      String string1 = null;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.processingInstruction("%ts`VbsF->c`SwJun(9", "'~ZcS");
      char[] charArray0 = new char[0];
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      DOMDocument dOMDocument0 = new DOMDocument();
      URL uRL0 = MockURL.getFtpExample();
      MockURL.getHttpExample();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.skippedEntity("gLpp)gF;TZ");
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getDispatchHandler();
      sAXReader0.addHandler(" is less than zero", (ElementHandler) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      try { 
        xMLFilterImpl1.getProperty("t$.DtVB_UI{#P");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: t$.DtVB_UI{#P
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      char[] charArray0 = new char[0];
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      SAXParseException sAXParseException0 = new SAXParseException("e8zLA$4w9@'By}\"7O", "e8zLA$4w9@'By}\"7O", "zF[DyhZ|*q%\"}l6", (-1440), 126, (Exception) null);
      xMLFilterImpl1.fatalError(sAXParseException0);
      xMLFilterImpl0.characters(charArray0, 1785, 1785);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      DOMDocument dOMDocument0 = new DOMDocument();
      MockURL.getFtpExample();
      xMLFilterImpl1.getContentHandler();
      String string0 = "Ap/";
      xMLFilterImpl0.setEntityResolver(xMLFilterImpl1);
      StringReader stringReader0 = new StringReader("Ap/");
      stringReader0.close();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStripWhitespaceText(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      Class<XMLFilterImpl> class0 = XMLFilterImpl.class;
      BeanMetaData.get(class0);
      Object object0 = new Object();
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(false);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(false);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      sAXReader_SAXEntityResolver0.uriPrefix = " [name: ";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity(" [name: ", (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "W7;~;XDCk#");
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      sAXReader_SAXEntityResolver0.resolveEntity(" [name: ", " [name: ");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.698011019844113
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "last() requires no arguments.";
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      MockURL.getFtpExample();
      File file0 = MockFile.createTempFile("last() requires no arguments.", "last() requires no arguments.", (File) null);
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      StringReader stringReader0 = new StringReader("//tmp/Error on line 0A:;h9");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      try { 
        sAXReader0.read((Reader) stringReader0, "http://xml.org/sax/features/namespaces");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document http://xml.org/sax/features/namespaces : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity(" [name: ", " [name: ");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.configureReader(parserAdapter0, defaultHandler0);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/org.dom4j.io.SAXModifyElementHandler0Error on line ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      xMLFilterImpl1.resolveEntity("//tmp/tmp/A:;h90/tmp/Error on line 0A:;h906]=\"'z=\"c=", "//tmp/tmp/A:;h90/tmp/Error on line 0A:;h906]=\"'z=\"c=");
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      MockFile.createTempFile("org.dom4j.io.SAXModifyElementHandler", "//tmp/@SZ.g0/tmp/Error on line 0file:");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.82337540094768
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      StringReader stringReader0 = new StringReader("2c+O;%");
      sAXReader0.setEncoding("2c+O;%");
      try { 
        sAXReader0.read((Reader) stringReader0, "2c+O;%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document 2c+O;% : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "Error on line ";
      sAXReader0.setEncoding("@*");
      File file0 = MockFile.createTempFile("Error on line ", "_-b");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      String string0 = "Rg[K#;D:H5g}K'8eS)V";
      sAXReader0.setEncoding("Rg[K#;D:H5g}K'8eS)V");
      try { 
        sAXReader0.read("L<Tm2s\"g[3p\"e");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setEncoding("Q-Z]{g%0j");
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
      String string0 = "Error on line ";
      MockFile.createTempFile("http://xml.org/sax/properties/lexical-handler", "Q-Z]{g%0j");
      StringReader stringReader0 = new StringReader("Q-Z]{g%0j");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string0 = "%ts`VbsF->c`SwJun(9";
      char[] charArray0 = new char[0];
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      DOMDocument dOMDocument0 = new DOMDocument();
      URL uRL0 = MockURL.getFileExample();
      MockURL.getHttpExample();
      sAXReader0.setEncoding("%ts`VbsF->c`SwJun(9");
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("http://xml.org/sax/handlers/LexicalHandler");
      DOMDocument dOMDocument0 = new DOMDocument();
      MockURL.getFtpExample();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = "//tmp/_-b0@r";
      sAXReader0.setEncoding("//tmp/_-b0@r");
      StringReader stringReader1 = new StringReader("//tmp/_-b0@r");
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      StringReader stringReader0 = new StringReader("last() requires no argume^ts.");
      DOMDocument dOMDocument0 = new DOMDocument();
      MockURL.getFtpExample();
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      sAXReader0.setEncoding("//tmp/Y+9j#PkjRrwH/;AN%0_-b");
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap00y# LT1vL;-.@_@Y~4");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
