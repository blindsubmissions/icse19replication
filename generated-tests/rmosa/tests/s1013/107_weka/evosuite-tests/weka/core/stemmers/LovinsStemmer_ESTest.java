/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:55:53 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8319070744211743
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "null";
      lovinsStemmer0.stem("null");
      lovinsStemmer0.stemString("aS'e+9LS%D");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8592298076660805
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("editend");
      assertEquals("editens", string1);
      
      String string2 = lovinsStemmer0.stem("ionals");
      assertEquals("ion", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8632043078532219
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(" is not assignable from ");
      assertEquals(" is not assign from ", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "OO|`_qB";
      stringArray0[1] = "\tThe file to process.";
      stringArray0[2] = "ionalize";
      stringArray0[3] = "ential";
      lovinsStemmer0.toString();
      stringArray0[4] = "bex";
      String string1 = lovinsStemmer0.stem("z5rizton");
      assertEquals("z5rizt", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8319070744211743
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "null";
      lovinsStemmer0.stem("null");
      lovinsStemmer0.stemString("nl");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9100174452958452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("ED$ITOR");
      assertEquals("ed$it", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9618733757185833
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(".|X");
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      lovinsStemmer0.stemString(".|x");
      lovinsStemmer0.stem(".|x");
      lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stemString("ances");
      String string1 = lovinsStemmer0.stemString(".uxpw(LLJ_lZMW_|9]");
      assertEquals(".uxpw(llj_lzmw_|9]", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9042448340582876
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      String string0 = lovinsStemmer0.stem("['Cf<D\"q:I^.5e?|{h@");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("['cf<d\"q:i^.5e?|{h@");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = lovinsStemmer0.stem("z5rizaton");
      assertEquals("z5rizat", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0092788977966365
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("lux");
      String string0 = lovinsStemmer0.stem("lmwphond");
      assertEquals("lmwphons", string0);
      
      String string1 = lovinsStemmer0.stemString("XbTaL");
      assertEquals("xbt", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9939253968133819
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("H-!W[JN1`KoB,");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString(" N");
      assertEquals(" n", string0);
      
      String string1 = lovinsStemmer0.stemString("How somet=ing strange has been published.The first woRd should be captalized.");
      assertEquals("how somes=ing strang ha been publ.th first word should be captal.", string1);
      
      String string2 = lovinsStemmer0.stemString("how somes=ing strang ha been publ.th first word should be captal.");
      assertEquals("how som=ing strang ha been publ.th first word should be capt.", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9471892662486734
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("6mt'ex");
      assertEquals("6mt'ec", string1);
      
      String string2 = lovinsStemmer0.stem("z5rizaton");
      assertEquals("z5rizat", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9171053261083089
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("uad");
      assertEquals("uas", string0);
      
      lovinsStemmer0.stemString("lmwphond");
      lovinsStemmer0.stem("lmwphond");
      String string1 = lovinsStemmer0.stem("lmwphons");
      assertEquals("lmwphon", string1);
      
      String string2 = lovinsStemmer0.stemString("XbTaL");
      assertEquals("xbt", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0028730850667493
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string0);
      
      String string1 = lovinsStemmer0.stemString("How somet=ing strange has been published. The first woRd should be capitalized.");
      assertEquals("how somes=ing strang ha been publ. th first word should be capital.", string1);
      
      String string2 = lovinsStemmer0.stemString("how somes=ing strang ha been publ. th first word should be capital.");
      assertEquals("how som=ing strang ha been publ. th first word should be capit.", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0028730850667493
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("numberert");
      assertEquals("numberers", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("How somet=ing strange has been published. The first woRd should be capitalized.");
      assertEquals("how somes=ing strang ha been publ. th first word should be capital.", string1);
      
      String string2 = lovinsStemmer0.stemString("how somes=ing strang ha been publ. th first word should be capital.");
      assertEquals("how som=ing strang ha been publ. th first word should be capit.", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0028244325266376
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("lud");
      assertEquals("lus", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("nmanher");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string2 = lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.085915479574504
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("lingumit");
      assertEquals("lingumis", string1);
      
      stringArray0[0] = "Uhe WWW Univrsal Resource Locator that points to the item being referenced. This often is used o' technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[1] = "Uhe WWW Univrsal Resource Locator that points to the item being referenced. This often is used o' technical reports to point to the ftp site where the postscript source of the report is located.";
      String string2 = lovinsStemmer0.stem("eousness");
      assertEquals("eous", string2);
      
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("Uhe WWW Univrsal Resource Locator that points to the item being referenced. This often is used o' technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("uh www univrs resourc loc that point to th item being refer. th oft is us o' techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rpt");
      assertEquals("rb", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9789306184473304
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("q?");
      lovinsStemmer1.stemString("#5");
      String string0 = lovinsStemmer1.stemString("#5");
      assertEquals("#5", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "q?";
      stringArray0[1] = "#5";
      stringArray0[2] = "q?";
      stringArray0[3] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      stringArray0[4] = "#5";
      stringArray0[5] = "#5";
      stringArray0[6] = "#5";
      stringArray0[7] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      stringArray0[8] = "#5";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string1);
      
      lovinsStemmer1.stem("#5");
      String string2 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9785214102713589
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("lmwphondpexdex");
      assertEquals("lmwphondpexdic", string1);
      
      String string2 = lovinsStemmer0.stemString("ioeus");
      assertEquals("ioeus", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.014100146548423
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("mach learn");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("mach learn");
      lovinsStemmer1.stemString("mach learn");
      String string1 = lovinsStemmer0.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      assertEquals("th nam of a ser or ses of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th book is publ.", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9574269939986852
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("a83wet");
      lovinsStemmer0.stemString("arization");
      lovinsStemmer0.stemString("icix");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("a83wet");
      lovinsStemmer0.stemString("otide");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0028730850667493
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("bex");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("How somet=ing strange has been published. The first woRd should be capitalized.");
      assertEquals("how somes=ing strang ha been publ. th first word should be capital.", string0);
      
      String string1 = lovinsStemmer0.stemString("how somes=ing strang ha been publ. th first word should be capital.");
      assertEquals("how som=ing strang ha been publ. th first word should be capit.", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.8606014951996964
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("djvjerid");
      assertEquals("djvjeris", string0);
      
      String string1 = lovinsStemmer0.stem("z5rizaton");
      assertEquals("z5rizat", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9921190259876185
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there i also an author field, then the editor field gives the editor of the book or collection in which tha reference appears.");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there i also an author field, then the editor field gives the editor of the book or collection in which tha reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther i als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
      
      String string2 = lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther i als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther i al an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9691609603531334
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("tex");
      String string0 = lovinsStemmer0.stem("lmwphond");
      assertEquals("lmwphons", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("XbTaL");
      assertEquals("xbt", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.014694460814183
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("lingulux");
      lovinsStemmer0.stem("linguvad");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("j");
      String string0 = lovinsStemmer0.stemString("linguvad");
      assertEquals("linguvas", string0);
      
      String string1 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0717614655489127
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Max index (doubles): ";
      stringArray0[1] = "Max index (doubles): ";
      stringArray0[2] = "Max index (doubles): ";
      stringArray0[3] = "Max index (doubles): ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Max index (doubles): ");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("How somet=ing strange has been published. The first woRd should be capitalized.");
      assertEquals("how somes=ing strang ha been publ. th first word should be capital.", string0);
      
      String string1 = lovinsStemmer0.stemString("how somes=ing strang ha been publ. th first word should be capital.");
      assertEquals("how som=ing strang ha been publ. th first word should be capit.", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("uct");
      assertEquals("uc", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9652909455717874
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("aries");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      String string0 = lovinsStemmer0.stemString("The Library of Congress Call Number. I've also seen this as lib-congress.");
      assertEquals("th libr of congres cal number. i'v als seen th as lib-congres.", string0);
      
      String string1 = lovinsStemmer0.stemString("The altgrnating deciion tree learning algorithm");
      assertEquals("th altgrn deci tre learn algorithm", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("31.pand");
      String string0 = lovinsStemmer0.stemString("31.pand");
      assertEquals("31.pans", string0);
      
      lovinsStemmer0.stem("31.vad");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("aUL%ja_<PGDJ5C8");
      lovinsStemmer1.stem("31.vad");
      lovinsStemmer1.stem("}o:5");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stem("31.pans");
      assertEquals("31.pan", string1);
      
      String string2 = lovinsStemmer0.stem("less");
      assertEquals("les", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.8657884713304276
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("ED$ITOR");
      assertEquals("ed$it", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.977978668709108
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      String[] stringArray0 = new String[3];
      String string0 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string0);
      
      lovinsStemmer0.stem("'");
      stringArray0[0] = "5W";
      lovinsStemmer0.stemString("invalis cv revis - not enough part separ by dot!");
      String string1 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string0);
      
      lovinsStemmer0.stemString("^2{&aDYQrD");
      String string1 = lovinsStemmer0.stem("encies");
      assertEquals("enci", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ation");
      lovinsStemmer0.stem("1[?n'SEW");
      String string0 = lovinsStemmer0.stemString("ional");
      assertEquals("ion", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0779108063156595
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("probToLogOdds: probability must be in [0,1] ");
      String string1 = lovinsStemmer1.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.147208338290721
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("'ypQ0)p9]<F?MC/");
      assertEquals("'ypq0)p9]<f?mc/", string0);
      
      lovinsStemmer0.stem("'ypQ0)p9]<F?MC/");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("'ypQ0)p9]<F?MC/");
      lovinsStemmer0.stem("'ypQ0)p9]<F?MC/");
      lovinsStemmer0.stem("'ypQ0)p9]<F?MC/");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("xuoumyt");
      lovinsStemmer0.stem("./F3qoYvls'^1Rr8>R");
      String string1 = lovinsStemmer0.stemString("rsend");
      assertEquals("rsens", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.994636723944814
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(".|X");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      lovinsStemmer0.stemString(".|x");
      lovinsStemmer0.stem("rrpeduzpex");
      lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      String string1 = lovinsStemmer0.stemString("ances");
      assertEquals("anc", string1);
      
      String string2 = lovinsStemmer0.stemString(".uxpw(LLJ_lZMW_|9]");
      assertEquals(".uxpw(llj_lzmw_|9]", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0673245526330821
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("arizrud");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("The name of a series or set of books.nWhen citin0 an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the bo!k is published.");
      assertEquals("th nam of a ser or ses of book.nwh citin0 an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th bo!k is publ.", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1104078383485894
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmeryz");
      assertEquals("wek.cor.stemmer.lovinsstemmerys", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("5.NIi5 rounded: ");
      assertEquals("5.nii5 round: ", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("|$cz*@c)|c&4~&@`rr");
      assertEquals("|$cz*@c)|c&4~&@`r", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ZY:WcBb-}[!Tt2");
      assertEquals("zy:wcb-}[!tt2", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("t2D`Bt//!#uH8Pp!Q");
      assertEquals("t2d`bt//!#uh8p!q", string0);
      
      String string1 = lovinsStemmer0.stemString("t2d`bt//!#uh8p!q");
      assertEquals("t2d`bt//!#uh8p!q", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ement");
      assertEquals("ement", string0);
      
      String string1 = lovinsStemmer0.stemString("Tf\"4");
      assertEquals("tf\"4", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("String should not finish with ");
      lovinsStemmer0.stem("String should not finish with ");
      String string0 = lovinsStemmer0.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string0);
      
      String string1 = lovinsStemmer0.stemString("XbTaL");
      assertEquals("xbt", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(";z*05dQhmgg?'&iz2n*");
      lovinsStemmer0.stemString(";z*05dqhmg?'&iz2n*");
      String string0 = lovinsStemmer0.stemString(";z*05dQhmgg?'&iz2n*");
      assertEquals(";z*05dqhmg?'&iz2n*", string0);
      
      String string1 = lovinsStemmer0.stem("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("the year of publication or, for an unpublished work, the year it was written. generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("XbaL");
      assertEquals("xbal", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("VOLUME");
      String string0 = lovinsStemmer0.stem("VOLUME");
      assertEquals("volum", string0);
      
      String string1 = lovinsStemmer0.stem("volum");
      assertEquals("vol", string1);
      
      String string2 = lovinsStemmer0.stem("vol");
      assertEquals("vol", string2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lmwphond");
      String string0 = lovinsStemmer0.stemString("yz");
      assertEquals("yz", string0);
      
      String string1 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("iev");
      assertEquals("ief", string1);
      
      String string2 = lovinsStemmer1.stemString(">#'G-Qck");
      assertEquals(">#'g-qck", string2);
      
      lovinsStemmer0.stem("The price of the document.");
      lovinsStemmer1.stemString("The price of the document.");
      lovinsStemmer1.stemString("t> 2dEtz");
      String string3 = lovinsStemmer1.stemString("e");
      assertEquals("e", string3);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Machine Learning");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("mach learn");
      String string0 = lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufman publishes", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("?");
      String string0 = lovinsStemmer0.stemString("The proceedings of a conference.");
      assertEquals("th proceed of a confer.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("th proceed of a confer.");
      assertEquals("th proceed of a confer.", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.stemString("metr");
      lovinsStemmer0.stem("5W");
      stringArray0[0] = "5W";
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("umpt");
      assertEquals("um", string0);
      
      String string1 = lovinsStemmer0.stem("um");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("a83wet");
      String string0 = lovinsStemmer0.stemString("arization");
      assertEquals("ariz", string0);
      
      lovinsStemmer0.stemString("a83wet");
      lovinsStemmer0.stem("istr");
      String string1 = lovinsStemmer0.stemString("ypq0lux");
      assertEquals("ypq0luc", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string0);
      
      lovinsStemmer0.stem("invalid CVS revision - not enough parts separated by dots!");
      lovinsStemmer0.stem("invalid cvs revision - not enough parts separated by dots!");
      String string1 = lovinsStemmer0.stemString("leanet");
      assertEquals("leanet", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("atory");
      assertEquals("ator", string0);
      
      String string1 = lovinsStemmer0.stemString("ancUs");
      assertEquals("anc", string1);
      
      String string2 = lovinsStemmer0.stemString(".uxpw(LLJ_lZMW_|9]");
      assertEquals(".uxpw(llj_lzmw_|9]", string2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      lovinsStemmer0.stemString("ination");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("tex");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1175398852665068
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "OO|`_qB";
      lovinsStemmer0.toString();
      stringArray0[1] = "\tThe ile to proce(.";
      stringArray0[2] = "ionalize";
      stringArray0[3] = "ential";
      String string0 = lovinsStemmer0.stemString(" RA`XRYl~vG!w\"DJvj");
      assertEquals(" ra`xr~vg!w\"djvj", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("cFW6SOR$^X;\bj");
      assertEquals("cfw6s$^x;\bj", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lmwphond");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "lmwphond";
      stringArray0[1] = "lmwphond";
      stringArray0[2] = "lmwphond";
      stringArray0[0] = "lmwphond";
      stringArray0[4] = "lmwphond";
      stringArray0[5] = "lmwphons";
      stringArray0[3] = "lmwphons";
      stringArray0[7] = "lmwphond";
      lovinsStemmer0.stem("lmwphond");
      String string0 = lovinsStemmer0.stem("lmwphons");
      assertEquals("lmwphon", string0);
      
      String string1 = lovinsStemmer0.stemString("ETt..[;-//qr");
      assertEquals("es..[;-//qr", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.049595488886733
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("e7A2yl\u0002|S#uLa");
      assertEquals("e7a2yl\u0002|s#l", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("Uhe WWW Univrsal Resource Locator that points to the item being referenced. This often is used o' technical reports to point to the ftpsite where the postscript source of the report is located.");
      assertEquals("uh www univrs resourc loc that point to th item being refer. th oft is us o' techn report to point to th ftpsit whes th postscript sourc of th report is loc.", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Use this type when nothing else fits.");
      assertEquals("us th typ when noth els fit.", string0);
      
      lovinsStemmer0.stem("The year of publication or, foy an unpublished work, the /ear it was written. Generally it shoul{ consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      String string1 = lovinsStemmer0.stemString("the year of publication or, foy an unpublished work, the /ear it was written. generally it shoul{ consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, foy an unpubl work, th /ear it wa writ. gener it shoul{ cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.stem("`0(ia`lOF9)NJXwz");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("yXb8wEarY#TDS;");
      String string0 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.et");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.et", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The yer of ublication or, for an unpulished work, th< year it was written.rGenerally it should consist of four numerals, such a 1984, although the standard styles can handle anyyear whose last our nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th yer of ublic or, for an unpl work, th< year it wa writ.rgener it should cons of four numer, such a 1984, although th standard styl can handl anyyear whos last our nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("typher");
      assertEquals("typher", string1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("`/KV`!\"@jguo8O");
      assertEquals("`/kv`!\"@jguo8", string0);
      
      String[] stringArray0 = new String[19];
      stringArray0[0] = "`/KV`!\"@jguo8O";
      stringArray0[1] = "`/kv`!\"@jguo8";
      stringArray0[2] = "cid";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("j");
      String string1 = lovinsStemmer0.stemString("\"SQ9YLdLRUM$$7K");
      assertEquals("\"sq9yldlr$$7k", string1);
      
      lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      String string2 = lovinsStemmer0.stemString("xUOuM");
      assertEquals("xuoum", string2);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("aries");
      String string0 = lovinsStemmer0.stem("aries");
      assertEquals("ar", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("S)vQ");
      String string1 = lovinsStemmer1.stemString("DlAr-,C");
      assertEquals("dl-,c", string1);
  }
}
