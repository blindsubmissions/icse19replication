/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:03:03 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.StructuredMenuItemHolder;
import freemind.main.FreeMindApplet;
import freemind.modes.Mode;
import freemind.modes.filemode.FileController;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapToolBar;
import java.awt.AWTEventMulticaster;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.FocusTraversalPolicy;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.beans.PropertyChangeListener;
import java.io.BufferedOutputStream;
import java.io.OutputStream;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Locale;
import java.util.Stack;
import java.util.TimeZone;
import javax.help.JHelpGlossaryNavigator;
import javax.help.NavigatorView;
import javax.help.plaf.basic.BasicGlossaryNavigatorUI;
import javax.swing.AbstractButton;
import javax.swing.ActionMap;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JRootPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.BevelBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicDesktopPaneUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.ExtensionHandler;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemEmpty;
import org.apache.xml.serializer.ToUnknownStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.665507131907198
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.grabFocus();
      jDayChooser0.setDay(164);
      jDayChooser1.removeAll();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser0.getKeyListeners();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.getToolTipText();
      jDayChooser1.setMaxDayCharacters(2);
      Date date0 = jDayChooser0.maxSelectableDate;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(2, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      Locale locale0 = Locale.UK;
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.focusLost((FocusEvent) null);
      boolean boolean0 = new Boolean("day");
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAncestorListeners();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.getWeekdayForeground();
      int int0 = (-572);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      NavigatorView navigatorView0 = null;
      JHelpGlossaryNavigator jHelpGlossaryNavigator0 = new JHelpGlossaryNavigator((NavigatorView) null);
      jHelpGlossaryNavigator0.getVetoableChangeListeners();
      BasicGlossaryNavigatorUI basicGlossaryNavigatorUI0 = null;
      try {
        basicGlossaryNavigatorUI0 = new BasicGlossaryNavigatorUI(jHelpGlossaryNavigator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.help.plaf.HelpNavigatorUI", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      int int0 = 228;
      long long0 = (-3145L);
      int int1 = 8771;
      int int2 = 0;
      char char0 = '*';
      MenuElement[] menuElementArray0 = new MenuElement[4];
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getY();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.drawDays();
      jDayChooser0.addNotify();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JButton[] jButtonArray0 = new JButton[7];
      JButton jButton0 = new JButton("day");
      jButtonArray0[0] = jButton0;
      JButton jButton1 = new JButton();
      jDayChooser0.getSelectedDay();
      jButtonArray0[1] = jButton0;
      JButton jButton2 = jDayChooser0.selectedDay;
      MindMapToolBar mindMapToolBar0 = null;
      try {
        mindMapToolBar0 = new MindMapToolBar((MindMapController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.MindMapToolBar", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1431655763), 169L, (-1431655763), 10, '2');
      BorderLayout borderLayout0 = new BorderLayout(0, 164);
      jDayChooser0.setLayout(borderLayout0);
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      jDayChooser0.setMaxDayCharacters(0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDayBordersVisible(false);
      Color color0 = null;
      JDayChooser jDayChooser2 = new JDayChooser(false);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      PDFGraphics2D pDFGraphics2D0 = null;
      try {
        pDFGraphics2D0 = new PDFGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6994507830053567
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(35);
      jDayChooser0.setYear(1837);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1858));
      jDayChooser0.drawDays();
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Color color0 = Color.magenta;
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.setOpaque(false);
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      assertNull(jDayChooser1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setDay(12);
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis(12);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setEnabled(true);
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1409);
      jDayChooser0.setFocus();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(1837);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ActionEvent actionEvent0 = new ActionEvent("{16;G0GIBfOf9i06Ttb", 48, "10");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.712624656592048
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 3, 4, 'p');
      jDayChooser0.setLayout((LayoutManager) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDayBordersVisible(false);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.paintComponents((Graphics) null);
      jDayChooser2.setDecorationBackgroundColor((Color) null);
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.oldDayBackgroundColor = (Color) systemColor0;
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.weekPanel = (JPanel) jYearChooser0;
      jDayChooser0.getSundayForeground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      byte byte0 = (byte)0;
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      // Undeclared exception!
      try { 
        bufferedImage0.setRGB(1023, 297, (-789));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-28));
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 1550;
      long long0 = (-2490L);
      int int1 = 1721;
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.getActionMap();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1550, (-2490L), 1550, 1721, 'O', 1550);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(19, (-1103));
      jDayChooser0.getColorModel();
      BasicDesktopPaneUI basicDesktopPaneUI0 = new BasicDesktopPaneUI();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      basicDesktopPaneUI0.getMinimumSize(jCheckBoxMenuItem0);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.defaultMinSelectableDate = date0;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setFocus();
      jCheckBoxMenuItem0.enableInputMethods(true);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSundayForeground((Color) null);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(1139, (-1092));
      jDayChooser0.getColorModel();
      BasicDesktopPaneUI basicDesktopPaneUI0 = new BasicDesktopPaneUI();
      Dimension dimension0 = basicDesktopPaneUI0.getMaximumSize(jDayChooser0);
      dimension0.clone();
      BasicDesktopPaneUI basicDesktopPaneUI1 = new BasicDesktopPaneUI();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setEnabled(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 3, 4, 'p');
      jDayChooser0.setLayout((LayoutManager) null);
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("x", 6);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      jDayChooser0.setMaxDayCharacters(4);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      MenuElement[] menuElementArray0 = new MenuElement[4];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)29;
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte) (-32);
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("7", imageIcon0, false);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JMenu jMenu0 = new JMenu("7");
      menuElementArray0[1] = (MenuElement) jMenu0;
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      menuElementArray0[2] = (MenuElement) null;
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setMonth(13);
      jDayChooser0.setDay(13);
      assertEquals(13, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1837);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis(1835L);
      jDayChooser0.getToolTipLocation((MouseEvent) null);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-2715));
      jDayChooser0.updateUI();
      jDayChooser0.setDay((-2715));
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSize(1139, (-1092));
      jDayChooser0.getColorModel();
      BasicDesktopPaneUI basicDesktopPaneUI0 = new BasicDesktopPaneUI();
      basicDesktopPaneUI0.getMaximumSize(jDayChooser0);
      BasicDesktopPaneUI basicDesktopPaneUI1 = new BasicDesktopPaneUI();
      JMenuItem jMenuItem0 = new JMenuItem("1", 30);
      basicDesktopPaneUI1.getMinimumSize(jMenuItem0);
      JDayChooser jDayChooser1 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3496, 4, 2, 30, 0, 116);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Date date1 = jDayChooser1.setMaxSelectableDate(date0);
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date1.toString());
      
      jDayChooser0.setFocus();
      JRootPane jRootPane0 = new JRootPane();
      FocusEvent focusEvent0 = new FocusEvent(jMenuItem0, 116, true, jRootPane0);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6741970408327744
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-3163));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-802), 37, (-802), 37, 'p');
      keyEvent0.getExtendedKeyCode();
      KeyEvent.getKeyModifiersText(160);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-802));
      jDayChooser0.drawDays();
      jDayChooser0.setDay(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemEmpty elemEmpty0 = new ElemEmpty();
      DefaultImageHandler defaultImageHandler0 = new DefaultImageHandler();
      // Undeclared exception!
      try { 
        SVGGraphics2D.buildSVGGeneratorContext(elemEmpty0, defaultImageHandler0, (ExtensionHandler) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // extensionHandler should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7017652912416006
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(1837);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1858));
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.selectedColor = (Color) systemColor0;
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis((-1858));
      jDayChooser0.setFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1837, (-1858), 1837, (-1858), '0');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setMonth(13);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7736275476159054
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeHierarchyListener(hierarchyListener0);
      jDayChooser0.setMonth(1057);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      Locale locale0 = jMonthChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      KeyEvent keyEvent0 = new KeyEvent(jMonthChooser0, 22, 249L, 41, 41, '}');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setYear(1837);
      jDayChooser0.setDay((-1858));
      jDayChooser0.drawDays();
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.updateUI();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.grabFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(164);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAll();
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.getDayPanel();
      jDayChooser0.setMaxDayCharacters(164);
      jDayChooser0.setFocus();
      Locale locale0 = new Locale("O}&", "O}&");
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Locale.lookupTag(stack0, (Collection<String>) null);
      jDayChooser0.setLocale(locale0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setEnabled(false);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = ImageObserver.SOMEBITS;
      int int1 = jDayChooser0.getDay();
      assertEquals(14, int1);
      
      MenuElement[] menuElementArray0 = new MenuElement[4];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      menuSelectionManager0.getChangeListeners();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 228, (-3145L), 8771, 0, '*', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPasswordField jPasswordField0 = new JPasswordField("day");
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 397, 1064L, 397, '8', '8');
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      jDayChooser0.setMonth(13);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6994507830053567
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(1837);
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.maxSelectableDate = date0;
      jDayChooser0.setDay((-1858));
      jDayChooser0.drawDays();
      jDayChooser0.setEnabled(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Timestamp timestamp0 = Timestamp.valueOf(localDateTime0);
      jDayChooser0.setSelectableDateRange((Date) null, timestamp0);
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7788010608653915
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.monthChooser = jMonthChooser0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 0L, 40, 40, '\"');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(40);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setEnabled(false);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.660187820854415
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, 0L, 40, 40, '\"');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(5);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 40, 0L, 40, 40, 'b');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.keyPressed(keyEvent1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-49);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(byteArray0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(rowOutputBinary0, 8866);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, bufferedOutputStream0, 38, (byte)14);
      PDFGraphics2D pDFGraphics2D0 = null;
      try {
        pDFGraphics2D0 = new PDFGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7205968383010655
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-3163));
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.remove((HierarchyListener) null, hierarchyListener1);
      AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 40, (-3163), 40, 33, 'n');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 498, 2110L, 38, 38, 'L');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(1297);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, 1297, 1320L, 161, 161, 'L');
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser1.updateUI();
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7408472649052253
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 3, 36, 'p');
      keyEvent0.getExtendedKeyCode();
      String string0 = AbstractButton.MNEMONIC_CHANGED_PROPERTY;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(36);
      jDayChooser0.drawDays();
      jDayChooser0.setDay(3);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setEnabled(false);
      jDayChooser0.updateUI();
      assertEquals(3, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-3163));
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      HierarchyListener hierarchyListener2 = AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      AWTEventMulticaster.remove((HierarchyListener) null, hierarchyListener2);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener(hierarchyListener2);
      int int0 = 53;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3163), (-3163), 1890, 35, 'r');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setIgnoreRepaint(false);
      jDayChooser0.firePropertyChange("D*7qT|Kf", 'U', 'U');
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2034, 0L, (-4296), 34, '[');
      keyEvent0.setKeyChar('~');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      jDayChooser0.setFocusTraversalPolicy(containerOrderFocusTraversalPolicy0);
      jDayChooser0.drawDays();
      jDayChooser0.initialized = false;
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1406, 1406, 1406, 1406, 't');
      System.setCurrentTimeMillis(1406);
      jDayChooser0.keyPressed(keyEvent0);
      Locale locale0 = Locale.CANADA_FRENCH;
      jDayChooser0.setLocale(locale0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      TimeZone.getTimeZone("McLWP&#('d1<_<Iqp");
      jDayChooser0.setAlignmentY(8);
      jDayChooser0.isPaintingForPrint();
      jDayChooser0.initialized = false;
      jDayChooser0.setDoubleBuffered(false);
      Color color0 = Color.decode("10");
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 32;
      floatArray0[1] = (float) 11;
      floatArray0[2] = (float) 11;
      floatArray0[3] = 190.77637F;
      floatArray0[4] = (float) 8;
      color0.getComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setBounds(11, 8, 11, (-240));
      jDayChooser0.setDayBordersVisible(false);
      System.setCurrentTimeMillis(5085L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-3163));
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.remove((HierarchyListener) null, hierarchyListener1);
      AWTEventMulticaster.add((HierarchyListener) null, hierarchyListener1);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 537, (-2205L), 537, 39, '5');
      jDayChooser0.keyPressed(keyEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      jYearChooser0.setActionMap(actionMap0);
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
  }
}
