/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:10:06 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("\t<client-socket-receive-buffer-size>");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime((-400));
      advancedSettings0.getBacklog();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setBacklog(10);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<client-socket-receive-buffer-size>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<client-socket-receive-buffer-size>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setQSObjectPoolMaker("&3I-]\"&ZV5@YvVvZ/>");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(4674);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      assertEquals(4674, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-763));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketSendBufferSize(2407);
      advancedSettings0.getBacklog();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      assertEquals(2407, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      String string0 = null;
      advancedSettings0.setCharset((String) null);
      int int0 = 2158;
      advancedSettings0.setPerformancePreferencesLatency(2158);
      advancedSettings0.setMaxThreadsForNioWrite((-17));
      advancedSettings0.setQSObjectPoolMaker("#5@K=v)rMis(t|y");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-traffic-class>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-traffic-class>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("SySuM");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // SySuM
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-77));
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setQSObjectPoolMaker("{{co(|3>Rl=+CSb");
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setPerformancePreferencesConnectionTime(1309);
      advancedSettings0.setClientSocketSendBufferSize((-77));
      advancedSettings0.setClientSocketReceiveBufferSize((-77));
      advancedSettings0.setPerformancePreferencesBandwidth(1309);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth((-77));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setQSObjectPoolMaker(">ND$5!#U");
      advancedSettings0.setDebugNonBlockingMode(true);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency((-1484));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(false);
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setByteBufferSize((-432));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite((-569));
      advancedSettings0.setClientSocketTrafficClass("[}^R2[N{[(");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getUseDirectByteBuffer();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("yG8C5W0(");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // yG8C5W0(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getClientIdentifier();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setQSObjectPoolMaker("+=i)RA4R$~S&IWn.");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getByteBufferSize();
      int int0 = (-3417);
      advancedSettings0.setClientSocketTrafficClass("+=i)RA4R$~S&IWn.");
      advancedSettings0.setCharset((String) null);
      String string0 = "\\r]osw";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\r]osw");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \r]osw
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setBacklog(10);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getMaxThreadsForNioWrite();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(10, advancedSettings0.getBacklog());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesBandwidth((-1129));
      assertEquals((-1129), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      
      advancedSettings0.setByteBufferSize(1);
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(1, advancedSettings0.getByteBufferSize());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setSocketLinger(2067);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<client-socket-send-buffer-size>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<client-socket-send-buffer-size>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize((-1174));
      advancedSettings0.getCharset();
      advancedSettings0.toXML("");
      assertEquals((-1174), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(3942);
      advancedSettings0.setPerformancePreferencesConnectionTime(40);
      boolean boolean0 = false;
      advancedSettings0.setClientIdentifier("a");
      advancedSettings0.setUseDirectByteBuffer(false);
      int int0 = 0;
      advancedSettings0.setClientSocketReceiveBufferSize((-1163));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("{");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getCharset();
      advancedSettings0.toXML("7a=Zt5-Q=39B7{-o]6");
      assertEquals(1, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.toXML("3JS");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setBacklog((-557));
      advancedSettings0.setPerformancePreferencesLatency((-557));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(3784);
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketReceiveBufferSize(1948);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setUseDirectByteBuffer(false);
      assertEquals(1948, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency((-84));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-138));
      advancedSettings0.setClientIdentifier("8ekoo0a&illR1!");
      advancedSettings0.setBacklog((-2925));
      int int0 = 1408;
      advancedSettings0.setBacklog(1408);
      advancedSettings0.toXML("@/,@i=");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(1408);
      String string0 = "eaK7F+=[7f[(";
      advancedSettings0.setClientIdentifier("eaK7F+=[7f[(");
      advancedSettings0.getUseDirectByteBuffer();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("#");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientSocketReceiveBufferSize((-2048));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(401);
      advancedSettings0.setByteBufferSize(60);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketSendBufferSize((-2048));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setClientSocketSendBufferSize((-1846));
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(0, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1846), int0);
  }
}
