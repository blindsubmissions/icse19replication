/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:04:49 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject.quote("1SN'}M/(62~Qg1c ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"1SN'}M/(62~Qg1c \"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"1SN'}M/(62~Qg1c \"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("[]");
      assertEquals("", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1549550321362567
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString("{}");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"java.lang.String@0000000002\"";
      stringArray0[1] = "\"java.lang.String@0000000002\"";
      stringArray0[2] = "\"java.lang.String@0000000002\"";
      stringArray0[3] = "\"java.lang.String@0000000002\"";
      stringArray0[4] = "\"java.lang.String@0000000002\"";
      stringArray0[5] = "\"java.lang.String@0000000002\"";
      stringArray0[6] = "{}";
      JSONObject jSONObject0 = new JSONObject("\"java.lang.String@0000000002\"", stringArray0);
      String string1 = jSONObject0.optString("{}", "\"java.lang.String@0000000002\"");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = JSONObject.quote("ZTQ;/0P$(#hLIx8#p");
      assertEquals("\"ZTQ;/0P$(#hLIx8#p\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString((-917), 0);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject.quote("S\n");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject.quote("pDR\n");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.get("F YC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"F YC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject.quote("ZTQ;/0P$(#hLIx8#p");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("[x;ZKhx<");
      assertNull(object0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JSONObject.quote("S\n");
      assertEquals("\"S\\n\"", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"S\n\"";
      stringArray0[1] = "\"S\n\"";
      stringArray0[2] = "\"S\n\"";
      JSONObject jSONObject0 = new JSONObject("S\n", stringArray0);
      long long0 = jSONObject0.optLong("*S<", (-120L));
      assertEquals((-120L), long0);
      
      String string1 = JSONObject.valueToString(jSONObject0, 128, 128);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.575832360384573
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = JSONObject.quote("1SN'}M/(62~Qg1c ");
      assertEquals("\"1SN'}M/(62~Qg1c \"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"1SN'}M/(62~Qg1c \"");
      long long0 = jSONObject0.optLong("Null key.");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
      
      String string1 = JSONObject.quote("*,G}F");
      assertEquals("\"*,G}F\"", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject.doubleToString(7.742003414577763);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getString("Expected a ',' or '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-81L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      String string0 = "Z+u";
      jSONObject0.putOpt("Z+u", (Object) null);
      int int0 = 103;
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3396091171567721
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = JSONObject.quote("1SN'}M/(62~Qg1c ");
      JSONObject jSONObject0 = new JSONObject((Object) "\"1SN'}M/(62~Qg1c \"");
      Boolean boolean0 = new Boolean(true);
      jSONObject0.putOpt("JSONArray[", boolean0);
      Float float0 = new Float(3923.6F);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9404479886553264
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.doubleToString(0.24732943528381487);
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5002692973717835
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject.quote("1SN'}M/(62~Qg1c ");
      JSONObject jSONObject0 = new JSONObject((Object) "\"1SN'}M/(62~Qg1c \"");
      jSONObject0.toString();
      Float float0 = new Float(656.164F);
      Float.isFinite(656.164F);
      String string0 = JSONObject.numberToString(float0);
      String string1 = JSONObject.valueToString("\"1SN'}M/(62~Qg1c \"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = JSONObject.quote("ZTQ;/0P$(#hLIx8#p");
      Long long0 = new Long(1L);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = JSONObject.quote("1SN'}M/T62~Qg1c ");
      Byte byte0 = new Byte((byte) (-112));
      String string1 = JSONObject.valueToString(byte0, 9, 9);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject.quote("1SN'}M/T62~Qg1c ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getgetClass";
      stringArray0[1] = "\"1SN'}M/T62~Qg1c \"";
      stringArray0[2] = "1SN'}M/T62~Qg1c ";
      stringArray0[3] = "1SN'}M/T62~Qg1c ";
      stringArray0[4] = "1SN'}M/T62~Qg1c ";
      stringArray0[5] = "\"1SN'}M/T62~Qg1c \"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3545061457128476
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.quote("pR\n");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.accumulate("\"pR\n\"", "\"pR\n\"");
      JSONObject.quote("pR\n");
      JSONObject.testValidity("\"pR\n\"");
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.has("&onUU.J{I;K@3RD");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0933747175566468
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "getfloatValue";
      stringArray0[1] = "@z";
      stringArray0[2] = "`U$HU9Bx";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getDouble("<f:/R|lfR%BTEM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<f:/R|lfR%BTEM\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = JSONObject.quote("\"d/E#Q");
      assertEquals("\"\\\"d/E#Q\"", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.575832360384573
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject.quote("1SN'}M/(62~Qg1c ");
      JSONObject jSONObject0 = new JSONObject((Object) "\"1SN'}M/(62~Qg1c \"");
      jSONObject0.optInt("1SN'}M/(62~Qg1c ", 54);
      String string0 = JSONObject.quote("1SN'}M/(62~Qg1c ");
      Long long0 = new Long(1511L);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6484893275935664
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = JSONObject.quote("1SN'}M/(62~Qg1c ");
      assertEquals("\"1SN'}M/(62~Qg1c \"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"1SN'}M/(62~Qg1c \"");
      int int0 = jSONObject0.optInt("\"1SN'}M/(62~Qg1c \"");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
      
      String string1 = JSONObject.doubleToString((-16.38302));
      assertEquals("-16.38302", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JSONObject.quote("1SN'}M/T62~Qg1c ");
      Double double0 = new Double(0.0);
      String string1 = JSONObject.valueToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.append((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = JSONObject.quote("R\n");
      assertEquals("\"R\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String[] stringArray0 = new String[4];
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertEquals(1, stringArray1.length);
      
      stringArray0[0] = "R\n";
      stringArray0[1] = "\"R\n\"";
      stringArray0[2] = "R\n";
      stringArray0[3] = "R\n";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject1.toString(39, 39);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3396091171567721
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject.quote("1SN'}M/(62~Qg1c ");
      Double double0 = new Double(1.0);
      Double.isFinite(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.names();
      JSONObject.testValidity("\"1SN'}M/(62~Qg1c \"");
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(jSONArray0, jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      hashMap0.put(jSONArray1, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(47);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1225314601479206
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      hashMap0.put(jSONArray0, jSONArray0);
      hashMap0.put(jSONArray0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(47);
      jSONObject0.write(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("is");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      Double double0 = new Double(0.0);
      hashMap0.put(double0, (JSONObject) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      jSONObject0.write(stringWriter1);
      Object object0 = JSONObject.NULL;
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject.getNames((Object) "o&snH*^*j5S3Mh3da");
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(73, 73);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      String string0 = JSONObject.valueToString(linkedList1, 2531, 2531);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = JSONObject.quote("1SN'}M/(62~Qg1c ");
      assertEquals("\"1SN'}M/(62~Qg1c \"", string0);
      
      String string1 = JSONObject.valueToString("1SN'}M/(62~Qg1c ", 17, 17);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3341923457408336
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = JSONObject.quote("ZTQ;/0P$(#hLIx8#p");
      assertEquals("\"ZTQ;/0P$(#hLIx8#p\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"ZTQ;/0P$(#hLIx8#p\"");
      jSONObject0.toString(34, 34);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONTokener jSONTokener0 = new JSONTokener("\"dQf{90");
      jSONTokener0.nextTo(")VY*{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of \"dQf{90
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "isputAll";
      boolean boolean0 = false;
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = JSONObject.quote("d\n");
      assertEquals("\"d\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 80, 833);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.575832360384573
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject.quote("1SN'}M/(62~Qg1c ");
      JSONObject jSONObject0 = new JSONObject((Object) "\"1SN'}M/(62~Qg1c \"");
      boolean boolean0 = jSONObject0.optBoolean("AqRL~O\u0003j'~$");
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("1SN'}M/(62~Qg1c ");
      assertEquals("\"1SN'}M/(62~Qg1c \"", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "N@oD";
      jSONObject0.accumulate("N@oD", "N@oD");
      try { 
        jSONObject0.getBoolean("N@oD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N@oD\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = JSONObject.quote("SasRnD:,_hy");
      assertEquals("\"SasRnD:,_hy\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      Boolean.getBoolean("] is not a JSONObject.");
      Boolean.logicalXor(true, false);
      jSONObject0.accumulate("] is not a JSONObject.", boolean0);
      jSONObject0.getBoolean("] is not a JSONObject.");
      JSONObject.testValidity(boolean0);
      JSONObject.testValidity("NgoP`");
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "NgoPt";
      Integer integer0 = new Integer((-3764));
      jSONObject0.accumulate("NgoPt", integer0);
      try { 
        jSONObject0.getBoolean("NgoPt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NgoPt\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = JSONObject.quote("Unterminated string");
      assertEquals("\"Unterminated string\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(72, 1952);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      jSONArray0.put((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONArray0, 1534, 1534);
      assertEquals("[{}]", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      HashMap<Boolean, Boolean> hashMap2 = new HashMap<Boolean, Boolean>();
      HashMap<JSONObject, Integer> hashMap3 = new HashMap<JSONObject, Integer>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = JSONObject.quote("bS&MXOj@Nhi\"bo");
      assertEquals("\"bS&MXOj@Nhi\\\"bo\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"bS&MXOj@Nhi\"bo\"", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>(linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("N4oD", "N4oD");
      try { 
        jSONObject1.getDouble("N4oD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N4oD\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject.quote("bS&MXOj@Nhi\"bo");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"bS&MXOj@Nhi\"bo\"", (Object) "\"bS&MXOj@Nhi\"bo\"");
      try { 
        jSONObject1.getInt("\"bS&MXOj@Nhi\"bo\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"bS&MXOj@Nhi\\\"bo\\\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-432L));
      String string0 = "/}u~An,%1i";
      try { 
        jSONObject1.append("", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      jSONObject1.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      Boolean boolean0 = new Boolean("wheel.json.JSONObject@0000000001");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte byte0 = (byte)48;
      Byte byte1 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "N@oD";
      JSONObject jSONObject1 = jSONObject0.accumulate("N@oD", "N@oD");
      try { 
        jSONObject1.getLong("N@oD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"N@oD\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("N@oD", 1650);
      JSONObject jSONObject1 = jSONObject0.accumulate("N@oD", "N@oD");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.8958789323265048
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("isputAll", (long) (short)0);
      jSONObject0.optInt(",\n", (int) (short)0);
      jSONObject0.optLong("isputAll");
      try { 
        jSONObject0.getBoolean("_:>64}2");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_:>64}2\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      UnaryOperator<JSONArray> unaryOperator0 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator0);
      LinkedList<JSONArray> linkedList2 = new LinkedList<JSONArray>(linkedList1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      jSONArray0.put((Object) hashMap0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.666940475780652
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = "isputAll";
      String string1 = ",\n";
      JSONObject jSONObject0 = new JSONObject((Object) "isputAll");
      JSONObject jSONObject1 = jSONObject0.put(",\n", 0L);
      jSONObject1.optInt(",\n", 3510);
      byte byte0 = (byte)97;
      Byte byte1 = new Byte((byte)97);
      try { 
        jSONObject1.getJSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Short short0 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("isputAll", (long) (short)0);
      jSONObject0.getDouble("isputAll");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean("isputAll");
      JSONObject jSONObject1 = new JSONObject(boolean1);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6117376823630047
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      JSONObject jSONObject0 = new JSONObject(short1);
      jSONObject0.put("isputAll", (long) (short)0);
      try { 
        jSONObject0.getJSONArray("isputAll");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isputAll\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      jSONObject0.append("{}", jSONObject1);
      JSONObject jSONObject2 = jSONObject0.accumulate("{}", object1);
      jSONObject2.put("{}", true);
      Double double0 = new Double(0.0);
      int int0 = 682;
      int int1 = 72;
      StringWriter stringWriter0 = new StringWriter(35);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{}");
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "{}", 72, 72);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("%{'ccH<XhcKz1U>Dq", "wheel.json.JSONObject@0000000001");
      Double double0 = new Double(192);
      JSONObject jSONObject2 = new JSONObject();
      String string1 = jSONObject1.optString("%{'ccH<XhcKz1U>Dq", "wheel.json.JSONObject@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("wheel.json.JSONObject@0000000001");
      assertNotNull(jSONArray0);
      
      jSONArray0.toJSONObject(jSONArray0);
      String string0 = JSONObject.quote("vU");
      assertEquals("\"vU\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "9_tR";
      Float float0 = new Float(1363.62093641478);
      jSONObject0.putOpt("9_tR", float0);
      jSONObject0.optDouble("9_tR", 1.0);
      try { 
        jSONObject0.getBoolean("getlongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getlongValue\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4604684702463826
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(4727, false);
      hashMap0.put(jSONArray0, jSONArray0);
      hashMap0.put(jSONArray0, jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray1 = new JSONArray();
      int int0 = 47;
      try { 
        jSONObject0.accumulate((String) null, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("{}", (Collection) linkedList0);
      jSONObject0.getJSONArray("{}");
      jSONObject0.getJSONArray("{}");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("{}");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = new Double(0.0F);
      JSONObject.testValidity(double0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONObject0.toString(0, 0);
      Float float1 = new Float((double) 0.0F);
      JSONObject.numberToString(double0);
      Short short0 = new Short((short)1120);
      String string1 = JSONObject.valueToString(short0, 0, 40);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-30803738));
      assertEquals("-3.0803738E7", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("000", false);
      boolean boolean0 = jSONObject0.getBoolean("000");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt(":VNp<+|XQJd", hashMap0);
      hashMap0.put(":VNp<+|XQJd", jSONObject1);
      int int0 = 103;
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("0", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(103);
      // Undeclared exception!
      jSONObject2.write(stringWriter0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("c/9UG*", false);
      jSONObject0.optBoolean("c/9UG*", false);
      Object object0 = JSONObject.NULL;
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>(103, 103);
      jSONObject0.put("c/9UG*", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("c/9UG*");
      jSONObject1.optDouble("c/9UG*");
      Object object1 = JSONObject.NULL;
      Integer integer0 = new Integer(103);
      Integer.min((-1207), 45);
      String string0 = JSONObject.valueToString((Object) null, (-1207), 103);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 50;
      String string0 = "9";
      JSONObject jSONObject1 = jSONObject0.put("9", 50);
      jSONObject1.getString("9");
      JSONObject jSONObject2 = jSONObject1.put("9", (Object) jSONObject0);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("9");
      try { 
        jSONObject3.getInt("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{RED:B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 6 of {RED:B
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = JSONObject.quote("EIAcusZLTS</4,FA");
      assertEquals("\"EIAcusZLTS<\\/4,FA\"", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.265905114814858
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt(":VNp<+|XQJd", hashMap0);
      HashMap<Boolean, Boolean> hashMap1 = new HashMap<Boolean, Boolean>();
      jSONObject0.put("0", (Map) hashMap0);
      jSONObject1.toString((-1069), 103);
      jSONObject1.toString(103);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.doubleToString((-1036.6749555));
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000003\": {},\n\"java.lang.String@0000000004\": {}\n                                                                                                       }");
      JSONObject.doubleToString((-1036.6749555));
      Object object1 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("c/9UG*", false);
      jSONObject0.optBoolean("{", false);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("0", object0);
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>(9, 103);
      JSONObject jSONObject2 = jSONObject1.put("c/9UG*", (Map) hashMap0);
      jSONObject1.toString((-448), 103);
      jSONObject1.putOpt("false", "false");
      jSONObject2.optBoolean("false");
      JSONObject.quote("0");
      Boolean boolean0 = new Boolean(false);
      JSONObject.valueToString("{\n\"java.lang.String@0000000005\": null,\n\"java.lang.String@0000000006\": {}\n                                                                                                       }", 103, 32);
      Byte byte0 = new Byte((byte)16);
      JSONObject.numberToString(byte0);
      try { 
        jSONObject1.getBoolean("int");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"int\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float((-1098.8706F));
      String[] stringArray0 = new String[7];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "sv}*AvF^Pd";
      stringArray0[2] = "get";
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("] is not a JSONObject.", "true");
      boolean boolean1 = jSONObject0.getBoolean("] is not a JSONObject.");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = "{Iu~N=,!cW";
      JSONTokener jSONTokener0 = new JSONTokener("{Iu~N=,!cW");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 6 of {Iu~N=,!cW
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
