/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:06:02 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.084035845275547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "No input instance format defined");
      double[][] doubleArray0 = new double[10][6];
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      discretize0.m_CutPoints = doubleArray0;
      int int0 = 0;
      discretize0.getBinRangesString(0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("7qDgh]w_aL7f0W");
      discretize0.binsTipText();
      StringReader stringReader0 = new StringReader("7qDgh]w_aL7f0W");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[7qDgh]w_aL7f0W], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.133628922152431
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      Discretize.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.makeBinaryTipText();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-3272));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      double[][] doubleArray0 = new double[1][6];
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(6);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.attributeIndicesTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3454);
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useEqualFrequencyTipText();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SystemInUtil.addInputLine("a&6{\"-");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      discretize0.getBinRangesString((-6));
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) (-6);
      doubleArray0[1] = (double) (-6);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-6));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("Ny85f");
      String[] stringArray0 = new String[1];
      discretize0.invertSelectionTipText();
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-M";
      stringArray0[1] = "uW:2?;7_";
      stringArray0[2] = "jc%u-[%jb6l";
      stringArray0[3] = "/=CA=(Nw;Upn:";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[13][6];
      discretize0.m_CutPoints = doubleArray0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No output format defined.";
      stringArray0[1] = "Headers equal:";
      stringArray0[2] = "s";
      stringArray0[3] = "Headers equal:";
      stringArray0[4] = "^asith&TsSi!gsM[";
      stringArray0[5] = "-B";
      stringArray0[6] = "pV![^aE7t";
      stringArray0[7] = "`y%";
      stringArray0[8] = "`y%";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"pV![^aE7t\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M$^KM2W1,~<3}fF";
      stringArray0[1] = "-R";
      stringArray0[2] = "Xff)JcM;f$LA";
      stringArray0[3] = "\tOutput binary attributes for discretized attributes.";
      stringArray0[4] = "Xff)JcM;f$LA";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[2];
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-1606.7246818110407);
      doubleArray2[1] = (-1606.7246818110407);
      doubleArray0[1] = doubleArray2;
      doubleArray2[3] = (-1606.7246818110407);
      double[] doubleArray3 = new double[28];
      doubleArray3[3] = (-1606.7246818110407);
      doubleArray3[5] = 5.70001;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 5.70001;
      doubleArray4[2] = (-1606.7246818110407);
      doubleArray4[3] = (-1032.0749632757);
      doubleArray4[2] = 5.70001;
      doubleArray4[6] = 2566.0512313098147;
      doubleArray0[4] = doubleArray4;
      double[] doubleArray5 = new double[13];
      doubleArray5[0] = 0.0;
      doubleArray5[7] = 5.70001;
      doubleArray0[7] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[1] = 2566.0512313098147;
      doubleArray6[2] = 0.0;
      doubleArray6[4] = 5.70001;
      doubleArray6[5] = 0.0;
      doubleArray3[8] = 5.70001;
      doubleArray0[8] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-20));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -20
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      Discretize discretize1 = new Discretize();
      discretize1.getAttributeIndices();
      Filter.makeCopies(discretize1, 4);
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8143075196071257
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.m_IgnoreClass = true;
      byte byte0 = (byte)98;
      discretize0.m_DiscretizeCols = null;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)98;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      discretize0.m_DiscretizeCols = null;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)98;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      byte byte0 = (byte) (-124);
      discretize0.m_IgnoreClass = true;
      discretize0.m_DiscretizeCols = null;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8Z[UXH++@07t{");
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("8Z[UXH++@07t{", arrayList0, 1826);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      assertFalse(boolean0);
      
      discretize0.setOptions((String[]) null);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8735105206455305
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Upper b{ound (");
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setBins(3833);
      Attribute attribute0 = new Attribute("Upper b{ound (", 1341);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("-t", arrayList0, 0);
      attribute0.enumerateValues();
      instances0.deleteStringAttributes();
      Instances instances1 = new Instances(instances0, 1341);
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      Random.setNextRandom(3);
      Random.setNextRandom(1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList1);
      Attribute attribute1 = attribute0.copy((String) null);
      arrayList0.add(attribute1);
      discretize0.m_FindNumBins = false;
      Instances instances0 = new Instances("5c?_S:K^9XNSP+\"", arrayList0, 62);
      instances0.deleteStringAttributes();
      Instances instances1 = new Instances(instances0, 4);
      discretize0.setInputFormat(instances1);
      boolean boolean0 = discretize0.input((Instance) null);
      assertFalse(discretize0.isNewBatch());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.981096754402682
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=XQn|WyQ1M{@$kK/a|");
      Attribute attribute1 = new Attribute("relational", 4);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("date", arrayList0, 0);
      attribute1.getRevision();
      attribute1.enumerateValues();
      instances0.deleteStringAttributes();
      Instances instances1 = new Instances(instances0, 2);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute1);
      discretize0.setInputFormat(instances1);
      discretize0.setOutputFormat();
      discretize0.getCapabilities();
      discretize0.calculateCutPoints();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(2);
      Random.setNextRandom(3);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList1);
      arrayList0.add(attribute0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "12,3467,-3544,-2145608115,5341,-415,-195225786,-1130");
      Instances instances0 = new Instances("8Z[UXH++@07t{", arrayList0, 2);
      instances0.deleteStringAttributes();
      discretize0.setInputFormat(instances0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = (double) 2;
      discretize0.setIgnoreClass(false);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6212638693187182
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=XQn|WyQ1M{@$kK/a|", arrayList1);
      Attribute attribute1 = new Attribute("relational", 4);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("date", arrayList0, 0);
      arrayList0.add(attribute0);
      attribute1.enumerateValues();
      instances0.deleteStringAttributes();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      discretize0.input(sparseInstance0);
      discretize0.batchFinished();
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=XQn|WyQ1M{@$kK/a|", arrayList1);
      Attribute attribute1 = new Attribute("relational", 4);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("date", arrayList0, 0);
      attribute1.enumerateValues();
      instances0.deleteStringAttributes();
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      discretize0.input(sparseInstance0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 4;
      SparseInstance sparseInstance1 = new SparseInstance(0, doubleArray1);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance1);
      discretize0.input(sparseInstance2);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=XQn|WyQ1M{@$kXK/a|", arrayList1);
      Attribute attribute1 = new Attribute("@attribute");
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("date", arrayList0, 0);
      instances0.deleteStringAttributes();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("|(i}T", arrayList0, 89);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Q^YF$+", protectedProperties1);
      Attribute attribute1 = attribute0.copy("indices have to be ordered");
      arrayList0.add(attribute1);
      attribute1.enumerateValues();
      Instances instances1 = new Instances(instances0, 1029);
      discretize0.setInputFormat(instances1);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      DenseInstance denseInstance0 = new DenseInstance(4);
      discretize0.convertInstance(denseInstance0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8Z[UXH++@07t{");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-Y", arrayList0);
      Attribute attribute1 = new Attribute("kA/f", 83);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("date", arrayList1, 1);
      attribute0.enumerateValues();
      instances0.deleteStringAttributes();
      Discretize discretize0 = new Discretize("");
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance((-832.18714225526), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      discretize0.input(binarySparseInstance0);
      discretize0.batchFinished();
      discretize0.setOutputFormat();
      Discretize discretize1 = new Discretize("I <Q");
      // Undeclared exception!
      try { 
        discretize1.findNumBins(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 0);
      instances0.deleteStringAttributes();
      Instances instances1 = new Instances(instances0, (-1610612734));
      arrayList1.add("date");
      discretize0.m_FindNumBins = true;
      attribute0.enumerateValues();
      instances1.deleteStringAttributes();
      Instances instances2 = new Instances(instances1, (-1610612734));
      discretize0.setInputFormat(instances1);
      int int0 = 9;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=XQn|WyQ1M{@$kK/a|", arrayList1);
      Attribute attribute1 = new Attribute("relational", 4);
      arrayList0.add(attribute1);
      discretize0.m_UseEqualFrequency = true;
      Instances instances0 = new Instances("numeric", arrayList0, 10);
      attribute1.enumerateValues();
      attribute1.addStringValue("date");
      instances0.deleteStringAttributes();
      arrayList0.add(attribute1);
      Instances instances1 = new Instances(instances0, 2);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'relational' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("=XQn|WyQ1M{@$kK/a|");
      Attribute attribute1 = new Attribute("relational", 4);
      attribute1.toString();
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("date", arrayList0, 0);
      attribute1.getRevision();
      instances0.toString();
      Instances instances1 = new Instances(instances0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList1);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("integer", arrayList0, 0);
      Instances instances1 = new Instances(instances0, 3);
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.m_FindNumBins = true;
      discretize0.setUseEqualFrequency(true);
      instances1.deleteStringAttributes();
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setBins((-1488));
      Attribute attribute0 = new Attribute("K?\"sC+qSEj'ib;");
      Instances instances0 = new Instances("k7t7[+?b", arrayList0, 2572);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.449441449430586
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=XQn|WyQ1M{@$kK/a|", arrayList1);
      Attribute attribute1 = new Attribute("relational", 4);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("date", arrayList0, 0);
      attribute1.enumerateValues();
      instances0.setClass(attribute1);
      instances0.deleteStringAttributes();
      Instances instances1 = new Instances(instances0, (-2004318069));
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("=XQn|WyQ1M{@$kK/a|", arrayList1);
      Attribute attribute1 = new Attribute("relational", 4);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("date", arrayList0, 0);
      instances0.setClass(attribute1);
      instances0.deleteStringAttributes();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      discretize0.input(sparseInstance0);
      discretize0.batchFinished();
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
