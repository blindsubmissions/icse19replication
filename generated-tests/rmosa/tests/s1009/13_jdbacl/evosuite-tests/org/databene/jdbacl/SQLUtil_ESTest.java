/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:19:10 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.sql.Connection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.engine.ConnectionInfo;
import org.h2.jdbc.JdbcClob;
import org.h2.jdbc.JdbcConnection;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.Recover;
import org.h2.value.ValueBoolean;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6081583698769648
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DBCatalog dBCatalog0 = new DBCatalog("TA");
      dBCatalog0.getSchemas();
      DBCatalog dBCatalog1 = new DBCatalog();
      String string0 = SQLUtil.normalize("%`Y/\"1lI_`Z2H", false);
      assertEquals("% ` Y / \"1lI_`Z2H\"", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("drop materialized vieworg.firebirdsql.jdbc.fbblob$fbblobinputstream");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.normalize("drop materialized viewdrop materialized vieworg.firebirdsql.jdbc.fbblob$fbblobinputstream", false);
      SQLUtil.isQuery("selectq3,:^a");
      SQLUtil.isQuery("");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "K";
      stringArray0[1] = "K";
      String string0 = SQLUtil.join("", "K", stringArray0, "", "K", stringArray0);
      assertEquals(" as K on K.K = K.K and K.K = K.K", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select intocallnwpd02v\",9e~-ib\"g");
      Random.setNextRandom(43);
      System.setCurrentTimeMillis((-814L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "select intocallnwpd02v\",9e~-ib\"g";
      stringArray0[1] = "select intocallnwpd02v\",9e~-ib\"g";
      stringArray0[2] = "select intocallnwpd02v\",9e~-ib\"g";
      stringArray0[3] = "select intocallnwpd02v\",9e~-ib\"g";
      stringArray0[4] = "select intocallnwpd02v\",9e~-ib\"g";
      stringArray0[5] = "org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet";
      stringArray0[6] = "select intocallnwpd02v\",9e~-ib\"g";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (select intocallnwpd02v\",9e~-ib\"g, select intocallnwpd02v\",9e~-ib\"g, select intocallnwpd02v\",9e~-ib\"g, select intocallnwpd02v\",9e~-ib\"g, select intocallnwpd02v\",9e~-ib\"g, org.apache.derby.impl.sql.execute.IndexRowToBaseRowResultSet, select intocallnwpd02v\",9e~-ib\"g)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8407487285692812
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("callnwpd02v\",9e~-ib\"g");
      assertNull(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.databene.jdbacl.sql.ColumnExpression");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema org.databene.jdbacl.sql.ColumnExpression", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      char char0 = '9';
      String[] stringArray0 = new String[10];
      stringArray0[0] = "SG!%";
      stringArray0[1] = "SG!%";
      stringArray0[2] = "SG!%";
      SQLUtil.renderColumnListWithTableName("SG!%", stringArray0);
      int int0 = (-1216);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "SG!%.SG!%, SG!%.SG!%, SG!%.SG!%, SG!%.null, SG!%.null, SG!%.null, SG!%.null, SG!%.null, SG!%.null, SG!%.null", (-1216), (-1216));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize("MJPztOY:#Z.es39", true);
      assertEquals("MJPztOY : # Z.es39", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3245083869310707
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DBCatalog dBCatalog0 = new DBCatalog("TA");
      dBCatalog0.getSchemas();
      DBCatalog dBCatalog1 = new DBCatalog();
      String string0 = SQLUtil.normalize("%`Y/\"1lI_`Z2H", false);
      assertEquals("% ` Y / \"1lI_`Z2H\"", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1565, "1v2#CDGS5r^2");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{#-k*j>9k2", defaultDBTable0, dBDataType0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("{#-k*j>9k2 1V2#CDGS5R^2 NULL", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("XMLNODE");
      SQLUtil.ownerDotComponent(dBSchema0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "SELECT * FROM null WHERE null = null AND null = null");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // SELECT * FROM null WHERE null = null AND null = null
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("ZwYm>j?8|fcGv<", "ZwYm>j?8|fcGv<", "drop index%r4(\"|");
      assertEquals("'drop index%r4(\"|'", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      String[] stringArray0 = new String[8];
      stringArray0[3] = "uM-tPq<%b8^+}O-;J";
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter materialized view");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "`]N&q<Ys";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("`]N&q<Ys");
      DBCatalog dBCatalog0 = new DBCatalog();
      PipedReader pipedReader0 = new PipedReader();
      Integer integer0 = new Integer((-3054));
      Integer integer1 = RawTransaction.ABORT;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("`]N&q<Ys", (String[]) null, "`]N&q<Ys", "DROP", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.normalize("- ;  ", true);
      assertEquals("- ; ", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("1v2#CDGS5r^2", dBCatalog0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexorg.firebirdsql.jdbc.fbblob$fbblobinputstream", dBSchema0);
      DBCatalog dBCatalog1 = new DBCatalog();
      DBSchema dBSchema1 = new DBSchema("alter table", dBCatalog0);
      dBSchema0.getTriggers();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "alter table");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create unique indexorg.firebirdsql.jdbc.fbblob$fbblobinputstream", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "OUTER", true, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.join("OUTER", "1v2#CDGS5r^2", (String[]) null, "1v2#CDGS5r^2", "alter table", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("  25V", (String[]) null, "  25V", "  25V", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8470396385078469
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.normalize("create unique index", false);
      SQLUtil.normalize("2M>\"jRN[M", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2M>\"jRN[M";
      stringArray0[1] = "}\"LLktg) Z";
      stringArray0[2] = "2M>\"jRN[M";
      stringArray0[3] = "create unique index";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop i");
      stringArray0[4] = "2M > \"jRN[M\"";
      stringArray0[5] = "create unique index";
      stringArray0[6] = "create unique index";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "}\"LLktg) Z", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Random.setNextRandom(58);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("1v2#CDGS5r^2", dBCatalog0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexorg.firebirdsql.jdbc.fbblob$fbblobinputstream", dBSchema0);
      DBCatalog dBCatalog1 = new DBCatalog();
      DBSchema dBSchema1 = new DBSchema("1v2#CDGS5r^2", dBCatalog0);
      dBSchema1.getTriggers();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/*");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/*";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1v2#CDGS5r^2", false, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT 1v2#CDGS5r^2 ", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("1v2#CDGS5r^2", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexorg.firebirdsql.jdbc.fbblob$fbblobinputstream", dBSchema0);
      DBCatalog dBCatalog1 = new DBCatalog("1v2#CDGS5r^2");
      String[] stringArray0 = new String[18];
      stringArray0[0] = "create unique indexorg.firebirdsql.jdbc.fbblob$fbblobinputstream";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("1v2#CDGS5r^2", true, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      StringBuilder stringBuilder0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBCatalog dBCatalog1 = new DBCatalog();
      Vector<DBTrigger> vector0 = new Vector<DBTrigger>();
      SQLUtil.isProcedureCall("exec1863.262");
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("exec1863.262");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'exec1863.262'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("callnwpd02v\",9e~-ib\"g");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("`CH^bVF", false);
      assertEquals("` CH ^ bVF", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize("MJPztOY:#Z.es39", false);
      assertEquals("MJPztOY : # Z.es39", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("MJPztOY:#Z.es39");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "MJPztOY : # Z.es39";
      stringArray0[1] = "MJPztOY:#Z.es39";
      stringArray0[2] = "f";
      stringArray0[3] = "MJPztOY:#Z.es39";
      stringArray0[4] = "Z=q<]z";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "MJPztOY:#Z.es39", false, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("catalo");
      dBUniqueConstraint0.setTable(defaultDBTable1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (MJPztOY : # Z.es39, MJPztOY:#Z.es39, f, MJPztOY:#Z.es39, Z=q<]z)", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize("qL?u+)wRvf<>", true);
      assertEquals("qL ? u +) wRvf < >", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("1v2#CDGS5r^2", dBCatalog0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create unique indexorg.firebirdsql.jdbc.fbblob$fbblobinputstream", dBSchema0);
      DBCatalog dBCatalog1 = new DBCatalog();
      DBSchema dBSchema1 = new DBSchema("1v2#CDGS5r^2", dBCatalog0);
      dBSchema1.getTriggers();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/*");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/*";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1v2#CDGS5r^2", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("create unique indexorg.firebirdsql.jdbc.fbblob$fbblobinputstream");
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"create unique indexorg.firebirdsql.jdbc.fbblob$fbblobinputstream\" ", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(":2U@k%47OG.", dBCatalog0);
      DBCatalog dBCatalog1 = new DBCatalog();
      DBSchema dBSchema1 = new DBSchema(":2U@k%47OG.", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":2U@k%47OG.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" join ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(45);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.append(false);
      // Undeclared exception!
      try { 
        stringBuilder3.insert(1073741824, (Object) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1073741824
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("dfkMJc<Ds!td6c^hr", dBCatalog0);
      DBTrigger dBTrigger0 = new DBTrigger("\\n", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBTrigger0);
      assertEquals("dfkMJc<Ds!td6c^hr.\\n", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("select%`y/\"1li_`z2h", false);
      assertEquals("select % ` y / \"1li_`z2h\"", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringBuilder stringBuilder0 = new StringBuilder("/qfE3ld|F=@)lkT,4+");
      SQLUtil.addOptionalCondition("/qfE3ld|F=@)lkT,4+", stringBuilder0);
      assertEquals("/qfE3ld|F=@)lkT,4+ or /qfE3ld|F=@)lkT,4+", stringBuilder0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(" and ");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(" and ", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-829), 65);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -829
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(416.7285510154);
      boolean boolean0 = false;
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FOREIGN KEY ", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "FOREIGN KEY ";
      stringArray0[1] = "FOREIGN KEY ";
      stringArray0[2] = ")";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(")", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder("");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.7188008609386548
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("Mt<*-}vOea", false);
      assertEquals("Mt < * - } vOea", string0);
      
      Random.setNextRandom((-1));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vHW|H");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "vHW|H";
      stringArray0[1] = "Mt < * - } vOea";
      stringArray0[2] = "`g8";
      stringArray0[3] = "Mt < * - } vOea";
      stringArray0[4] = "Mt < * - } vOea";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "FOREIGN KEY ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Mt < * - } vOea", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Mt < * - } vOea";
      stringArray1[1] = "Mt < * - } vOea";
      stringArray1[2] = "vHW|H";
      stringArray1[3] = "%";
      stringArray1[4] = "J)-vgG'7Td+S 3GsD@";
      stringArray1[5] = "Mt<*-}vOea";
      stringArray1[6] = "vHW|H";
      stringArray1[7] = "Mt < * - } vOea";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Mt<*-}vOea", false, dBTable0, stringArray1, dBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (Mt < * - } vOea, Mt < * - } vOea, vHW|H, %, J)-vgG'7Td+S 3GsD@, Mt<*-}vOea, vHW|H, Mt < * - } vOea) REFERENCES vHW|H(Mt < * - } vOea, Mt < * - } vOea, vHW|H, %, J)-vgG'7Td+S 3GsD@, Mt<*-}vOea, vHW|H, Mt < * - } vOea)", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.addRequiredCondition(stringArray0[0], stringBuilder0);
      stringBuilder0.append((Object) "");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      assertEquals(2, jdbcDataSource0.getTraceId());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('9');
      StringWriter stringWriter1 = new StringWriter();
      DBDataType dBDataType0 = DBDataType.getInstance(97, "org.postgresql.jdbc4.AbstractJdbc4Clob");
      Integer integer0 = RawTransaction.COMMIT;
      Integer.sum((-780), (-780));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("yyWSi1b4", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.removeComments("");
      System.setCurrentTimeMillis((-848L));
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("yyWSi1b4, yyWSi1b4, yyWSi1b4, yyWSi1b4, yyWSi1b4, yyWSi1b4, yyWSi1b4, yyWSi1b4", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("acos(double)", true);
      assertEquals("acos (double)", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize("SELECT * FROM ", true);
      assertEquals("SELECT * FROM", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("8z<Q36_^|eZW'", false);
      assertEquals("8z < Q36_ ^ | eZW ''", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("/qfE3ld|F=@)lkT,4+", stringBuilder0);
      assertEquals("/qfE3ld|F=@)lkT,4+", stringBuilder0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize("adjR%Eg0F<,", true);
      assertEquals("adjR % Eg0F <,", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(36);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (double) 36;
      SQLUtil.renderNumber(streamTokenizer0);
      DBCatalog dBCatalog0 = new DBCatalog("36");
      assertEquals("catalog", dBCatalog0.getObjectType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Character character0 = new Character(']');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("']'", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      PipedReader pipedReader1 = new PipedReader();
      SQLUtil.mutatesDataOrStructure("delete");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.h2.value.Transfer$1", true);
      assertEquals("org.h2.value.Transfer $ 1", string0);
      
      Random.setNextRandom(12);
      String string1 = SQLUtil.normalize("org.h2.value.Transfer $ 1", true);
      assertEquals("org.h2.value.Transfer $ 1", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?K");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.h2.value.Transfer $ 1", true, defaultDBTable0, "L017");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"org.h2.value.Transfer $ 1\" CHECK L017", string2);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBCatalog dBCatalog1 = new DBCatalog();
      NameSpec nameSpec0 = NameSpec.NEVER;
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      DBSchema dBSchema0 = new DBSchema("/!TF?up6XsQhg01", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/!TF?up6XsQhg01", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/!TF?up6XsQhg01";
      stringArray0[3] = "/!TF?up6XsQhg01";
      stringArray0[4] = "/!TF?up6XsQhg01";
      stringArray0[5] = "/!TF?up6XsQhg01";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "myj(_.36YsGoU", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("/!TF?up6XsQhg01", false, dBUniqueConstraint0);
      dBUniqueConstraint0.isIdentical(dBCatalog1);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      Integer integer0 = new Integer(10);
      Integer integer1 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(1021, "selectcatalog null");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectcatalog null", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn0.setType(dBDataType0);
      MockFile mockFile0 = new MockFile("selectcatalog null");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("#&!v>TRrFk/4K(~,K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: #&!v>TRrFk/4K(~,K
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(416.7285510154);
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("FOREIGN KEY ", dBSchema0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "FOREIGN KEY ";
      stringArray0[1] = "FOREIGN KEY ";
      stringArray0[2] = "FOREIGN KEY ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("FOREIGN KEY ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      Integer integer0 = RawTransaction.ABORT;
      DBCatalog dBCatalog1 = new DBCatalog();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("FOREIGN KEY ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DBDataType.getInstance(1816, "select(gv)p9jpa{");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("select(gv)p9jpa{", (DBTable) null, 1816, "select(gv)p9jpa{");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"gv\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      Integer integer0 = new Integer(10);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(10, "user.name");
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("user.name", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn1.setType(dBDataType0);
      MockFile mockFile0 = new MockFile("getXConnection");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(10);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("`]N&q<Ys");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`]N&q<Ys", dBSchema0);
      DBCatalog dBCatalog0 = new DBCatalog();
      PipedReader pipedReader0 = new PipedReader(365);
      DBDataType.getInstance(365, "`]N&q<Ys");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`]N&q<Ys";
      stringArray0[2] = "42995";
      stringArray0[3] = "`]N&q<Ys";
      stringArray0[4] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.replace(365, 365, "`]N&q<Ys");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getDoc());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("t._{eZE$", true, defaultDBTable0, "B");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      RowOutputText rowOutputText0 = new RowOutputText("B", "CHECK B", "B", true, "B");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-59);
      DBSchema dBSchema0 = new DBSchema("updatedrop drop(1) null");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%3ZZd/(7", dBSchema0);
      int int0 = (-2640);
      DBDataType dBDataType0 = DBDataType.getInstance((-2640), "rename");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("  ", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDoc("renamedrop drop(1) null");
      defaultDBColumn0.setDefaultValue("  ");
      SQLUtil.renderColumn(defaultDBColumn0);
      dBSchema0.getTable("2200H.S");
      SQLUtil.isQuery("s-S\"=jg{@eC6eMZMkr;");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("s-S\"=jg{@eC6eMZMkr;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("`]N&q<Y");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionalter tablell\tf.r$ky-y");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-957), "X0Y46.S");
      DBDataType.getInstance(8, "SELECT * FROM ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("X0Y46.S", defaultDBTable0, dBDataType0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.offerLast(defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("X0Y46.S, X0Y46.S", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("`]N&q<Ys");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`]N&q<Ys", dBSchema0);
      defaultDBTable0.getCatalog();
      DBDataType dBDataType0 = DBDataType.getInstance((-1166), "DROP");
      Integer.sum(2497, (-1166));
      Integer integer0 = new Integer((-3054));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "`]N&q<Ys";
      stringArray0[1] = "DROP";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "DROP", true, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call% ` y / \"1li_`z2h\"", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.parseColumnTypeAndSize("call% ` y / \"1li_`z2h\" DROP(-3054,-3054) NULL");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("TYPEINFO", 554);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[1] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.normalize("^$VLn?Iv>UVgxb>\"6y", false);
      assertEquals("^ $ VLn ? Iv > UVgxb > \"6y\"", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1565, "^ $ VLn ? Iv > UVgxb > \"6y\"");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^ $ VLn ? Iv > UVgxb > \"6y\"", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("^ $ VLn ? Iv > UVgxb > \"6y\" ^ $ VLN ? IV > UVGXB > \"6Y\" NOT NULL", string1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.45820823797145316
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/qfE3ld|F=@)lkT,4+");
      streamTokenizer0.nval = 1863.262;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1863.262", string0);
      
      SQLUtil.normalize("/qfE3ld|F=@)lkT,4+", false);
      Random.setNextRandom((-4));
      String string1 = SQLUtil.normalize("/qfE3ld|F=@)lkT,4+", false);
      assertEquals("/ qfE3ld | F = @) lkT, 4 +", string1);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(683);
      String string2 = SQLUtil.removeComments("/ qfE3ld | F = @) lkT, 4 +");
      assertTrue(string2.equals((Object)string1));
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      System.setCurrentTimeMillis((-684L));
      SQLUtil.isQuery("select into");
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'S';
      charArray0[3] = '{';
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1816, "NCLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select(gv)p9jpa{");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select(gv)p9jpa{", defaultDBTable0, dBDataType0, integer0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("NCLOB", stringBuilder0.toString());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      streamTokenizer0.nval = (-417.564425);
      SQLUtil.renderNumber(streamTokenizer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "- 417.564425";
      stringArray0[1] = "- 417.564425";
      stringArray0[2] = null;
      stringArray0[3] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "- 417.564425", true, stringArray0);
      try { 
        pipedReader0.skip((byte)21);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }
}
