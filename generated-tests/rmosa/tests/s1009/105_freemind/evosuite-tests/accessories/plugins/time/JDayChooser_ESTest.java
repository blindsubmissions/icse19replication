/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:06:32 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.extensions.ExportHook;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapToolBar;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.SystemColor;
import java.awt.Toolkit;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.im.InputContext;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.beans.PropertyChangeListener;
import java.net.URL;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.util.Date;
import java.util.Locale;
import javax.help.BackAction;
import javax.help.HelpSet;
import javax.help.HelpSetException;
import javax.help.JHelpIndexNavigator;
import javax.help.Map;
import javax.help.TryMap;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JDialog;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.JToolTip;
import javax.swing.JViewport;
import javax.swing.JWindow;
import javax.swing.TransferHandler;
import javax.swing.event.AncestorListener;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xalan.templates.ElemCopyOf;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xerces.parsers.DTDConfiguration;
import org.apache.xerces.parsers.SecurityConfiguration;
import org.apache.xerces.parsers.XML11DTDConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.apache.xerces.xni.parser.XMLComponentManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.Tile;
import plugins.map.FreeMindMapController;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7039446318508733
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      System.setCurrentTimeMillis(1050L);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      BufferedImage bufferedImage0 = Tile.ERROR_IMAGE;
      Graphics graphics0 = bufferedImage0.getGraphics();
      jDayChooser_DecoratorButton0.paint(graphics0);
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.75809348091404
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 38;
      long long0 = (-349L);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.isWeekOfYearVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay(25);
      jDayChooser0.initDecorations();
      SymbolTable symbolTable0 = new SymbolTable(2097151, 2097151);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl(1814);
      xMLGrammarPoolImpl0.clear();
      SecurityConfiguration securityConfiguration0 = new SecurityConfiguration(symbolTable0, xMLGrammarPoolImpl0, (XMLComponentManager) null);
      // Undeclared exception!
      try { 
        securityConfiguration0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.parsers.XIncludeAwareParserConfiguration", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6789477095792162
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Boolean boolean0 = new Boolean(true);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFocusListeners();
      jDayChooser0.setYear(560);
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale0 = Locale.PRC;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2680), 1138L, (-2809), 32, 'u');
      KeyEvent.getKeyText(43);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.drawDays();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1468, 1468, 2436);
      jDayChooser0.setFocus();
      Color color0 = Color.green;
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(203, dimension0.width);
      
      jDayChooser0.setForeground(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2059), (-2059), 1468, 2436, '(');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(12, 42, 24, 24, 42);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-895));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setDayBordersVisible(true);
      System.setCurrentTimeMillis(24);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("MapControllerPopupDialog.SelectNodeAndCloseInContextMenu", 201);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      TransferHandler transferHandler0 = new TransferHandler("day");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setInheritsPopupMenu(true);
      transferHandler0.getDragImage();
      JTextArea jTextArea0 = new JTextArea();
      jTextArea0.getScrollableTracksViewportHeight();
      jTextArea0.setAutoscrolls(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getFocusTraversalKeys(967);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid focus traversal key identifier
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.609981273402886
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("15", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis((-9223372036854775766L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      Integer integer2 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      Integer.getInteger("day");
      Integer[] integerArray0 = new Integer[4];
      integerArray0[0] = integer0;
      integerArray0[1] = integer1;
      integerArray0[2] = null;
      Integer.toUnsignedLong(705);
      integerArray0[3] = null;
      JList<Integer> jList0 = new JList<Integer>(integerArray0);
      Color color0 = jList0.getSelectionForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      System.setCurrentTimeMillis(0L);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JWindow jWindow0 = null;
      try {
        jWindow0 = new JWindow();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxSelectableDate();
      long long0 = (-1755L);
      // Undeclared exception!
      try { 
        Time.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      FontInfo fontInfo0 = pDFDocumentGraphics2D0.getFontInfo();
      PDFDocument pDFDocument0 = pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources(458752);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, pDFDocument0, pDFResourceContext0, "", "replaceAttributeActionPair", 458752);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Object object0 = new Object();
      BackAction backAction0 = new BackAction(object0);
      jDayChooser_DecoratorButton0.requestFocus(false);
      AWTEventMulticaster.add((MouseListener) backAction0, (MouseListener) backAction0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMaxSelectableDate();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-1189), (-1L), 38, 667, 's', (-2511));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getGraphics();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setDay((-4329));
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      Locale locale0 = new Locale("day", "month");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      Timestamp timestamp0 = new Timestamp((-1791L));
      timestamp0.toLocalDateTime();
      jDayChooser0.setMaxSelectableDate(timestamp0);
      System.setCurrentTimeMillis((-2396L));
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      // Undeclared exception!
      try { 
        processorCharacters0.getStylesheetRoot();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.662701752014223
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setMaxDayCharacters(7);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initialized = true;
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getMinSelectableDate();
      ExportHook exportHook0 = new ExportHook();
      // Undeclared exception!
      try { 
        exportHook0.createBufferedImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.ExportHook", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8049551659304233
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      Integer.compare((-307), 10);
      Integer integer3 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      Integer.getInteger("day");
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer1;
      integerArray0[1] = null;
      JList<Integer> jList0 = new JList<Integer>(integerArray0);
      Color color0 = jList0.getSelectionForeground();
      Color.getColor("&");
      jDayChooser0.setDecorationBackgroundColor(color0);
      Boolean boolean0 = new Boolean(false);
      jDayChooser0.setMaxDayCharacters(869);
      jDayChooser0.setEnabled(false);
      jDayChooser0.updateUI();
      jDayChooser0.updateUI();
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(20);
      mockSimpleDateFormat0.parse("14", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      System.setCurrentTimeMillis(1050L);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        color0.getRGBComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDay(27);
      assertEquals(27, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JButton[] jButtonArray0 = new JButton[5];
      jDayChooser0.getSelectedDay();
      jButtonArray0[4] = null;
      SchemeMode schemeMode0 = new SchemeMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Color color0 = null;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JColorChooser jColorChooser0 = new JColorChooser();
      jDayChooser0.add((Component) jColorChooser0);
      jDayChooser0.locale = null;
      JYearChooser jYearChooser0 = new JYearChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setWeekdayForeground((Color) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      assertEquals(2014, jYearChooser0.getYear());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertNotNull(jYearChooser0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.removeFocusListener(jYearChooser0);
      assertEquals(2014, jYearChooser0.getYear());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jYearChooser0.getStartYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getValue());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 65489, 65489, 65489, 65489, '[');
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(17, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(65472, keyEvent0.getModifiersEx());
      assertEquals(65489L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(65489, keyEvent0.getID());
      assertEquals('[', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(65489, keyEvent0.getKeyCode());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(17, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(65472, keyEvent0.getModifiersEx());
      assertEquals(65489L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(65489, keyEvent0.getID());
      assertEquals('[', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(65489, keyEvent0.getKeyCode());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.637732626422504
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("15", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-9223372036854775766L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      jDayChooser0.setMonth(33);
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      
      jDayChooser0.setDay(33);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertEquals(11, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertNotNull(jMonthChooser0);
      
      PropertyChangeListener[] propertyChangeListenerArray0 = jMonthChooser0.getPropertyChangeListeners("");
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertEquals(11, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertEquals(0, propertyChangeListenerArray0.length);
      assertNotNull(propertyChangeListenerArray0);
      
      Toolkit toolkit0 = jMonthChooser0.getToolkit();
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertEquals(11, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertNotNull(toolkit0);
      
      Locale locale0 = jMonthChooser0.getLocale();
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertEquals(11, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertEquals(11, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      LocalDate localDate0 = MockLocalDate.ofEpochDay(1862L);
      assertNotNull(localDate0);
      
      java.sql.Date date0 = java.sql.Date.valueOf(localDate0);
      assertNotNull(date0);
      
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Color color0 = jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, color0.getGreen());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(164, color0.getRed());
      assertNotNull(color0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(90, color0.getGreen());
      assertEquals(164, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertNotNull(color0);
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals((-16754012), color0.getRGB());
      assertEquals(90, color0.getGreen());
      assertEquals(164, color0.getBlue());
      assertEquals(0, color0.getRed());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "82VbEjg<+");
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)110;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)110}, byteArray0);
      
      Boolean boolean2 = new Boolean(true);
      assertTrue(boolean2);
      assertFalse(boolean2.equals((Object)boolean0));
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      PDFInfo pDFInfo0 = new PDFInfo();
      assertFalse(pDFInfo0.hasObjectNumber());
      assertEquals(0, pDFInfo0.getGeneration());
      assertNull(pDFInfo0.getTitle());
      assertNotNull(pDFInfo0);
      
      Date date0 = pDFInfo0.getCreationDate();
      assertFalse(pDFInfo0.hasObjectNumber());
      assertEquals(0, pDFInfo0.getGeneration());
      assertNull(pDFInfo0.getTitle());
      assertNull(date0);
      
      Date date1 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date1.toString());
      assertNotNull(date1);
      
      jDayChooser0.setMaxDayCharacters(4);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDoubleBuffered(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(203, dimension0.width);
      assertEquals(140, dimension0.height);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(203.0, dimension0.getWidth(), 0.01);
      assertEquals(140.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      jDayChooser0.setDay(25);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 25, false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(25, focusEvent0.getID());
      assertNotNull(focusEvent0);
      
      Component component0 = focusEvent0.getOppositeComponent();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(25, focusEvent0.getID());
      assertNull(component0);
      
      focusEvent0.setSource(jDayChooser0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(25, focusEvent0.getID());
      
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(25, focusEvent0.getID());
      
      dimension0.height = 1066;
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(203.0, dimension0.getWidth(), 0.01);
      assertEquals(1066.0, dimension0.getHeight(), 0.01);
      
      Component component1 = focusEvent0.getOppositeComponent();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(25, focusEvent0.getID());
      assertNull(component1);
      
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(focusEvent0.isTemporary());
      assertEquals(25, focusEvent0.getID());
      
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
      
      jDayChooser0.setMaxDayCharacters(1066);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(25, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jYearChooser0.getMinimum());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(1, jYearChooser0.getStartYear());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertNotNull(jYearChooser0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters((-113));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters((byte)0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.541357735141685
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("15", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      jDayChooser0.setDay((-2782));
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      HelpSet helpSet0 = null;
      try {
        helpSet0 = new HelpSet(classLoader0, (URL) null);
        fail("Expecting exception: HelpSetException");
      
      } catch(Throwable e) {
         //
         // Could not parse
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (Could not find: www.someFakeButWellFormedURL.org)
         // Parsing failed for null
         // Got an IOException (Could not find: www.someFakeButWellFormedURL.org)
         // Parsing failed for null
         // Got an IOException (Could not find: www.someFakeButWellFormedURL.org)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (Could not find: foo.bar)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         // Got an IOException (null)
         // Parsing failed for null
         //
         verifyException("javax.help.HelpSet", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.608820614830946
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)110;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-7), (byte)110}, byteArray0);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setMaxDayCharacters((byte)110);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      
      jDayChooser0.setMaxDayCharacters(4);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertNotNull(jDayChooser0);
      
      MockDate mockDate0 = new MockDate((-1004), 458751, (-1004));
      assertNotNull(mockDate0);
      
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals("Sat Jul 01 00:00:00 GMT 39122", mockDate0.toString());
      assertEquals("Sat Jul 01 00:00:00 GMT 39122", date0.toString());
      assertSame(mockDate0, date0);
      assertSame(date0, mockDate0);
      assertNotNull(date0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDoubleBuffered(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(203, dimension0.width);
      assertEquals(140, dimension0.height);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(203.0, dimension0.getWidth(), 0.01);
      assertEquals(140.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2881), false, jDayChooser0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-2881), focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      assertNotNull(focusEvent0);
      
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals((-2881), focusEvent0.getID());
      assertFalse(focusEvent0.isTemporary());
      
      System.setCurrentTimeMillis(140);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setDoubleBuffered(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      Dimension dimension0 = jDayChooser1.getMinimumSize();
      assertEquals(203, dimension0.width);
      assertEquals(140, dimension0.height);
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(203.0, dimension0.getWidth(), 0.01);
      assertEquals(140.0, dimension0.getHeight(), 0.01);
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotSame(jDayChooser1, jDayChooser0);
      assertNotNull(dimension0);
      
      MockDate mockDate0 = new MockDate((-305), (-305), 3855, (-935), 3855, 140);
      assertNotNull(mockDate0);
      
      jDayChooser0.setSelectableDateRange((Date) null, mockDate0);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("Wed Jan 13 17:17:20 GMT 1580", mockDate0.toString());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
      
      JDayChooser jDayChooser2 = new JDayChooser(true);
      assertFalse(jDayChooser2.isFocusCycleRoot());
      assertFalse(jDayChooser2.isFocusTraversalPolicySet());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser2.getMaxDayCharacters());
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertFalse(jDayChooser2.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser2.isWeekOfYearVisible());
      assertFalse(jDayChooser2.getIgnoreRepaint());
      assertTrue(jDayChooser2.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertFalse(jDayChooser2.equals((Object)jDayChooser0));
      assertFalse(jDayChooser2.equals((Object)jDayChooser1));
      assertNotNull(jDayChooser2);
      
      DebugGraphics debugGraphics0 = new DebugGraphics();
      assertNotNull(debugGraphics0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      System.setCurrentTimeMillis((-2528L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      Class<MapDialog> class0 = MapDialog.class;
      MapDialog[] mapDialogArray0 = jDayChooser0.getListeners(class0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, mapDialogArray0.length);
      assertNotNull(mapDialogArray0);
      
      jDayChooser0.setMonth(40);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setDay((-410));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-410), 40);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -410
         //
         verifyException("org.apache.xerces.util.SymbolTable", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      Class<MapDialog> class0 = MapDialog.class;
      MapDialog[] mapDialogArray0 = jDayChooser0.getListeners(class0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, mapDialogArray0.length);
      assertNotNull(mapDialogArray0);
      
      jDayChooser0.setMonth(8769);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Color color0 = new Color((-1927));
      assertEquals(121, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-1927), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(248, color0.getGreen());
      assertNotNull(color0);
      
      Color color1 = Color.getColor("day", 23);
      assertEquals(255, color1.getAlpha());
      assertEquals(1, color1.getTransparency());
      assertEquals((-16777193), color1.getRGB());
      assertEquals(0, color1.getRed());
      assertEquals(23, color1.getBlue());
      assertEquals(0, color1.getGreen());
      assertFalse(color1.equals((Object)color0));
      assertNotSame(color1, color0);
      assertNotNull(color1);
      
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(121, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals((-1927), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(248, color0.getGreen());
      assertFalse(color0.equals((Object)color1));
      assertNotSame(color0, color1);
      
      jDayChooser0.setDay((-410));
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      System.setCurrentTimeMillis((-776L));
      jDayChooser0.setFocus();
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      jDayChooser0.maxSelectableDate = date0;
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", jDayChooser0.maxSelectableDate.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 39, 1, 39, '%');
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(39, keyEvent0.getID());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(1, keyEvent0.getModifiers());
      assertEquals(39L, keyEvent0.getWhen());
      assertEquals('%', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isMetaDown());
      assertNotNull(keyEvent0);
      
      String string0 = KeyEvent.getKeyModifiersText((-2008));
      assertEquals("Alt+Alt Graph", string0);
      assertNotNull(string0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(15, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(39, keyEvent0.getID());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(39, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(1, keyEvent0.getModifiers());
      assertEquals(39L, keyEvent0.getWhen());
      assertEquals('%', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isMetaDown());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(15, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.692610179636628
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, (-349L), 898, 38, 'G');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(896, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('G', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(38, keyEvent0.getID());
      assertTrue(keyEvent0.isControlDown());
      assertEquals((-349L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(2, keyEvent0.getModifiers());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(896, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('G', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(38, keyEvent0.getID());
      assertTrue(keyEvent0.isControlDown());
      assertEquals((-349L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(2, keyEvent0.getModifiers());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(896, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals('G', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(38, keyEvent0.getID());
      assertTrue(keyEvent0.isControlDown());
      assertEquals((-349L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(38, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals(2, keyEvent0.getModifiers());
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(7, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.706697613279902
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(1, jYearChooser0.getStartYear());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertNotNull(jYearChooser0);
      
      InputContext inputContext0 = jYearChooser0.getInputContext();
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(1, jYearChooser0.getStartYear());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertNull(inputContext0);
      
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 36, (-1040L), 42, 36, 'k');
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(1, jYearChooser0.getStartYear());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals((-1040L), keyEvent0.getWhen());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(8832, keyEvent0.getModifiersEx());
      assertEquals(42, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals('k', keyEvent0.getKeyChar());
      assertEquals(36, keyEvent0.getID());
      assertNotNull(keyEvent0);
      
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jYearChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2014, jYearChooser0.getValue());
      assertEquals(1, jYearChooser0.getStartYear());
      assertFalse(jYearChooser0.isFocusCycleRoot());
      assertEquals(292278994, jYearChooser0.getEndYear());
      assertEquals(292278994, jYearChooser0.getMaximum());
      assertFalse(jYearChooser0.isFocusTraversalPolicyProvider());
      assertEquals(2014, jYearChooser0.getYear());
      assertEquals(1, jYearChooser0.getMinimum());
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
      assertFalse(jYearChooser0.getIgnoreRepaint());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isActionKey());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals((-1040L), keyEvent0.getWhen());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(8832, keyEvent0.getModifiersEx());
      assertEquals(42, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals('k', keyEvent0.getKeyChar());
      assertEquals(36, keyEvent0.getID());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      System.setCurrentTimeMillis((-1040L));
      jDayChooser0.setDay(2013);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      SystemColor systemColor0 = SystemColor.window;
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(1, systemColor0.getTransparency());
      assertNotNull(systemColor0);
      
      try { 
        Controller.showCommonJColorChooserDialog(jDayChooser0, "lmb=J]", systemColor0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      jDayChooser0.defaultMinSelectableDate = date0;
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", jDayChooser0.defaultMinSelectableDate.toString());
      
      Container container0 = jDayChooser0.getTopLevelAncestor();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNull(container0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2759, (-954L), 2759, 40, 'B');
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2759, keyEvent0.getID());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals('B', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(2752, keyEvent0.getModifiersEx());
      assertEquals(7, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-954L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(21, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2759, keyEvent0.getID());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals('B', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(2752, keyEvent0.getModifiersEx());
      assertEquals(7, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-954L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2759, keyEvent0.getID());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals('B', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(2752, keyEvent0.getModifiersEx());
      assertEquals(7, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-954L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      
      SystemColor systemColor0 = SystemColor.textHighlightText;
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      Color color0 = systemColor0.brighter();
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, color0.getRed());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-1), systemColor0.getRGB());
      assertEquals(255, systemColor0.getBlue());
      assertEquals(255, systemColor0.getGreen());
      assertEquals(255, systemColor0.getRed());
      assertEquals(255, color0.getRed());
      assertEquals((-1), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2759, keyEvent0.getID());
      assertEquals(40, keyEvent0.getKeyCode());
      assertEquals('B', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertEquals(2752, keyEvent0.getModifiersEx());
      assertEquals(7, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isAltDown());
      assertEquals((-954L), keyEvent0.getWhen());
      assertFalse(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7322040674847132
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("15", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertNotNull(jDayChooser0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      assertEquals(1, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      assertEquals(1, (int)integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)integer1));
      assertNotNull(integer3);
      
      Integer integer4 = Integer.getInteger("day");
      assertNull(integer4);
      
      integerArray0[3] = integer3;
      JList<Integer> jList0 = new JList<Integer>(integerArray0);
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(4, integerArray0.length);
      assertNotNull(jList0);
      
      jList0.enableInputMethods(false);
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(4, integerArray0.length);
      
      Color color0 = jList0.getSelectionForeground();
      assertEquals(51, color0.getGreen());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(51, color0.getBlue());
      assertEquals(51, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(4, integerArray0.length);
      assertNotNull(color0);
      
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(51, color0.getGreen());
      assertEquals((-13421773), color0.getRGB());
      assertEquals(51, color0.getBlue());
      assertEquals(51, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertFalse(jList0.getIgnoreRepaint());
      assertEquals(4, integerArray0.length);
      
      Boolean boolean1 = new Boolean(true);
      assertTrue(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      assertNotNull(boolean1);
      
      jDayChooser0.setMaxDayCharacters((int) integerArray0[1]);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(4, integerArray0.length);
      
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(17, jDayChooser0.getDay());
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      System.setCurrentTimeMillis((long) integerArray0[1]);
      assertEquals(4, integerArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7076569975017657
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("15", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(17, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.UNDERLINE_ON;
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      boolean boolean1 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 67108864, 9223372036854775807L, (int) integer1, 34, '#');
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(17, jDayChooser0.getDay());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, keyEvent0.getModifiersEx());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(0, keyEvent0.getModifiers());
      assertEquals(9223372036854775807L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isShiftDown());
      assertEquals('#', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(67108864, keyEvent0.getID());
      assertEquals(34, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isControlDown());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(keyEvent0);
      
      String string0 = KeyEvent.getKeyModifiersText((int) integerArray0[2]);
      assertEquals("Button1", string0);
      assertEquals(4, integerArray0.length);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.847691577069754
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis((-2528L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      float float0 = jDayChooser0.getAlignmentX();
      assertEquals(0.5F, float0, 0.01F);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 4, 33, 33, 'V');
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(keyEvent0.isControlDown());
      assertEquals(33, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(4, keyEvent0.getID());
      assertEquals('V', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(4L, keyEvent0.getWhen());
      assertFalse(keyEvent0.isMetaDown());
      assertEquals(8256, keyEvent0.getModifiersEx());
      assertFalse(keyEvent0.isConsumed());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(33, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertNotNull(keyEvent0);
      
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7408322153092204
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("15", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-90);
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte) (-37);
      boolean boolean1 = NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-90), (byte) (-20), (byte)30, (byte) (-37)}, byteArray0);
      
      System.setCurrentTimeMillis((-9223372036854775766L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertNotNull(jDayChooser0);
      
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte) (-90);
      jDayChooser0.setMonth(15);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      
      jDayChooser0.resetKeyboardActions();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      
      String string0 = jDayChooser0.getToolTipText();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertNull(string0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 78, (-9223372036854775766L), 78, 37, '*');
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals((-9223372036854775766L), keyEvent0.getWhen());
      assertEquals(78, keyEvent0.getID());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(14, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('*', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertNotNull(keyEvent0);
      
      boolean boolean2 = jDayChooser0.isValidateRoot();
      assertFalse(boolean2);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals((-9223372036854775766L), keyEvent0.getWhen());
      assertEquals(78, keyEvent0.getID());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(14, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('*', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(37, keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isActionKey());
      assertEquals(64, keyEvent0.getModifiersEx());
      assertEquals((-9223372036854775766L), keyEvent0.getWhen());
      assertEquals(78, keyEvent0.getID());
      assertTrue(keyEvent0.isAltDown());
      assertTrue(keyEvent0.isControlDown());
      assertFalse(keyEvent0.isAltGraphDown());
      assertEquals(14, keyEvent0.getModifiers());
      assertFalse(keyEvent0.isConsumed());
      assertEquals('*', keyEvent0.getKeyChar());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
      assertFalse(jToolTip0.isFocusCycleRoot());
      assertTrue(jToolTip0.getFocusTraversalKeysEnabled());
      assertFalse(jToolTip0.isFocusTraversalPolicySet());
      assertFalse(jToolTip0.getIgnoreRepaint());
      assertNotNull(jToolTip0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      KeyEvent keyEvent0 = new KeyEvent(jToolTip0, '#', '#', '#', '#', '#');
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
      assertFalse(jToolTip0.isFocusCycleRoot());
      assertTrue(jToolTip0.getFocusTraversalKeysEnabled());
      assertFalse(jToolTip0.isFocusTraversalPolicySet());
      assertFalse(jToolTip0.getIgnoreRepaint());
      assertEquals(8384, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals('#', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(35, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(35, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(35, keyEvent0.getID());
      assertEquals(35L, keyEvent0.getWhen());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jToolTip0.isFocusTraversalPolicyProvider());
      assertFalse(jToolTip0.isFocusCycleRoot());
      assertTrue(jToolTip0.getFocusTraversalKeysEnabled());
      assertFalse(jToolTip0.isFocusTraversalPolicySet());
      assertFalse(jToolTip0.getIgnoreRepaint());
      assertEquals(8384, keyEvent0.getModifiersEx());
      assertTrue(keyEvent0.isAltGraphDown());
      assertTrue(keyEvent0.isActionKey());
      assertEquals('#', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(35, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(35, keyEvent0.getKeyCode());
      assertFalse(keyEvent0.isMetaDown());
      assertTrue(keyEvent0.isControlDown());
      assertEquals(35, keyEvent0.getID());
      assertEquals(35L, keyEvent0.getWhen());
      
      jDayChooser0.drawDays();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      jDayChooser0.weeks = null;
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      AncestorListener[] ancestorListenerArray0 = jDayChooser0.getAncestorListeners();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(0, ancestorListenerArray0.length);
      assertNotNull(ancestorListenerArray0);
      
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      System.setCurrentTimeMillis(1050L);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotNull(jDayChooser0);
      
      JButton[] jButtonArray0 = new JButton[2];
      JButton jButton0 = jDayChooser0.selectedDay;
      assertNull(jButton0);
      
      jButtonArray0[0] = null;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      assertEquals(14, jDayChooser1.getDay());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(jDayChooser1.isFocusCycleRoot());
      assertFalse(jDayChooser1.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertFalse(jDayChooser1.getIgnoreRepaint());
      assertFalse(jDayChooser1.isFocusTraversalPolicySet());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser1.equals((Object)jDayChooser0));
      assertNotNull(jDayChooser1);
      
      JButton jButton1 = jDayChooser1.selectedDay;
      assertNull(jButton1);
      
      jButtonArray0[1] = null;
      jDayChooser0.days = jButtonArray0;
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotNull(jDayChooser_DecoratorButton0);
      
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.equals((Object)jDayChooser1));
      assertNotSame(jDayChooser0, jDayChooser1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      boolean boolean0 = NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "jZ6JG%`Z1gxLw3%wwLn");
      assertFalse(boolean0);
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertNotNull(jMonthChooser0);
      
      Locale locale0 = jMonthChooser0.getLocale();
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      jDayChooser0.locale = locale0;
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", jDayChooser0.locale.toString());
      assertEquals("", jDayChooser0.locale.getVariant());
      assertEquals("", jDayChooser0.locale.getCountry());
      assertEquals("en", jDayChooser0.locale.getLanguage());
      assertEquals("eng", jDayChooser0.locale.getISO3Language());
      assertEquals("", jDayChooser0.locale.getISO3Country());
      
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      assertEquals("", pDFDocumentGraphics2D0.getString());
      assertNotNull(pDFDocumentGraphics2D0);
      
      jMonthChooser0.printAll(pDFDocumentGraphics2D0);
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertEquals(1, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser0.hasSpinner());
      assertEquals("", pDFDocumentGraphics2D0.getString());
      
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setDay(35);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertEquals(28, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("15", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-9223372036854775766L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = GVTAttributedCharacterIterator.TextAttribute.WRITING_MODE_LTR;
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2, 0L, 36, 36, 'G');
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(2, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(0L, keyEvent0.getWhen());
      assertEquals(36, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('G', keyEvent0.getKeyChar());
      assertEquals(8448, keyEvent0.getModifiersEx());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(0L, keyEvent0.getWhen());
      assertEquals(36, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('G', keyEvent0.getKeyChar());
      assertEquals(8448, keyEvent0.getModifiersEx());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isActionKey());
      assertFalse(keyEvent0.isConsumed());
      assertEquals(2, keyEvent0.getID());
      assertTrue(keyEvent0.isAltGraphDown());
      assertFalse(keyEvent0.isAltDown());
      assertEquals(36, keyEvent0.getKeyCode());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals(0L, keyEvent0.getWhen());
      assertEquals(36, keyEvent0.getModifiers());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isControlDown());
      assertEquals('G', keyEvent0.getKeyChar());
      assertEquals(8448, keyEvent0.getModifiersEx());
      
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jDayChooser0);
      
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      jDayChooser0.setMonth((byte)15);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      JButton jButton0 = new JButton("=~}j");
      assertFalse(jButton0.getIgnoreRepaint());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertNotNull(jButton0);
      
      jDayChooser0.selectedDay = jButton0;
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(1, jDayChooser0.getDay());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.getIgnoreRepaint());
      assertTrue(jButton0.getFocusTraversalKeysEnabled());
      assertFalse(jButton0.isFocusCycleRoot());
      assertFalse(jButton0.isFocusTraversalPolicySet());
      assertFalse(jButton0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.selectedDay.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.selectedDay.isFocusCycleRoot());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.selectedDay.isFocusTraversalPolicySet());
      assertFalse(jDayChooser0.selectedDay.getIgnoreRepaint());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      
      jDayChooser0.setDay((byte)15);
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(15, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      assertFalse(jMonthChooser0.isFocusTraversalPolicySet());
      assertEquals(0, jMonthChooser0.getMonth());
      assertFalse(jMonthChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser0.isFocusCycleRoot());
      assertFalse(jMonthChooser0.getIgnoreRepaint());
      assertTrue(jMonthChooser0.hasSpinner());
      assertTrue(jMonthChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jMonthChooser0);
      
      JMonthChooser jMonthChooser1 = new JMonthChooser();
      assertTrue(jMonthChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser1.hasSpinner());
      assertFalse(jMonthChooser1.getIgnoreRepaint());
      assertFalse(jMonthChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jMonthChooser1.getMonth());
      assertFalse(jMonthChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser1.isFocusCycleRoot());
      assertFalse(jMonthChooser1.equals((Object)jMonthChooser0));
      assertNotNull(jMonthChooser1);
      
      PropertyChangeListener[] propertyChangeListenerArray0 = jMonthChooser1.getPropertyChangeListeners("");
      assertTrue(jMonthChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser1.hasSpinner());
      assertFalse(jMonthChooser1.getIgnoreRepaint());
      assertFalse(jMonthChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jMonthChooser1.getMonth());
      assertFalse(jMonthChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser1.isFocusCycleRoot());
      assertFalse(jMonthChooser1.equals((Object)jMonthChooser0));
      assertNotSame(jMonthChooser1, jMonthChooser0);
      assertEquals(0, propertyChangeListenerArray0.length);
      assertNotNull(propertyChangeListenerArray0);
      
      Toolkit toolkit0 = jMonthChooser1.getToolkit();
      assertTrue(jMonthChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser1.hasSpinner());
      assertFalse(jMonthChooser1.getIgnoreRepaint());
      assertFalse(jMonthChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jMonthChooser1.getMonth());
      assertFalse(jMonthChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser1.isFocusCycleRoot());
      assertFalse(jMonthChooser1.equals((Object)jMonthChooser0));
      assertNotSame(jMonthChooser1, jMonthChooser0);
      assertNotNull(toolkit0);
      
      Locale locale0 = jMonthChooser1.getLocale();
      assertTrue(jMonthChooser1.getFocusTraversalKeysEnabled());
      assertTrue(jMonthChooser1.hasSpinner());
      assertFalse(jMonthChooser1.getIgnoreRepaint());
      assertFalse(jMonthChooser1.isFocusTraversalPolicySet());
      assertEquals(0, jMonthChooser1.getMonth());
      assertFalse(jMonthChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jMonthChooser1.isFocusCycleRoot());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertFalse(jMonthChooser1.equals((Object)jMonthChooser0));
      assertNotSame(jMonthChooser1, jMonthChooser0);
      assertNotNull(locale0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.810141890163763
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(17, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertNotNull(jDayChooser0);
      
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      jDayChooser0.setMonth(8769);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(17, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      jDayChooser0.setDay((-410));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      SymbolTable symbolTable0 = new SymbolTable(1241, 157.56252F);
      assertNotNull(symbolTable0);
      
      XML11DTDConfiguration xML11DTDConfiguration0 = new XML11DTDConfiguration(symbolTable0);
      assertNotNull(xML11DTDConfiguration0);
      
      jDayChooser0.setEnabled(false);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-410), 86400000L, (-410), (-410), 'D');
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-448), keyEvent0.getModifiersEx());
      assertEquals((-410), keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(86400000L, keyEvent0.getWhen());
      assertEquals((-2147483610), keyEvent0.getModifiers());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals((-410), keyEvent0.getID());
      assertTrue(keyEvent0.isControlDown());
      assertNotNull(keyEvent0);
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(keyEvent0.isMetaDown());
      assertFalse(keyEvent0.isShiftDown());
      assertFalse(keyEvent0.isAltDown());
      assertFalse(keyEvent0.isActionKey());
      assertEquals(0, keyEvent0.getKeyLocation());
      assertEquals((-448), keyEvent0.getModifiersEx());
      assertEquals((-410), keyEvent0.getKeyCode());
      assertTrue(keyEvent0.isAltGraphDown());
      assertEquals(86400000L, keyEvent0.getWhen());
      assertEquals((-2147483610), keyEvent0.getModifiers());
      assertEquals('D', keyEvent0.getKeyChar());
      assertFalse(keyEvent0.isConsumed());
      assertEquals((-410), keyEvent0.getID());
      assertTrue(keyEvent0.isControlDown());
      
      Locale locale0 = new Locale("day", "day");
      assertEquals("DAY", locale0.getCountry());
      assertEquals("day", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("day_DAY", locale0.toString());
      assertEquals("day", locale0.getLanguage());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertEquals("DAY", locale0.getCountry());
      assertEquals("day", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("day_DAY", locale0.toString());
      assertEquals("day", locale0.getLanguage());
      
      jDayChooser0.setEnabled(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      assertNotNull(jDayChooser_DecoratorButton0);
      
      DebugGraphics debugGraphics0 = new DebugGraphics();
      assertNotNull(debugGraphics0);
      
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
      
      System.setCurrentTimeMillis((-410));
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicyProvider());
      assertFalse(jDayChooser_DecoratorButton0.getIgnoreRepaint());
      assertFalse(jDayChooser_DecoratorButton0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser_DecoratorButton0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
      assertFalse(jDayChooser_DecoratorButton0.isFocusCycleRoot());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("15", 12345);
      boolean boolean0 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean0);
      
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertNotNull(jDayChooser0);
      
      Integer integer0 = StrokingTextPainter.WRITING_MODE_RTL;
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = GVTAttributedCharacterIterator.TextAttribute.UNDERLINE_ON;
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      boolean boolean1 = NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      jDayChooser0.maxDayCharacters = 2759;
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(2759, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(2759, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      Locale locale0 = jDayChooser0.getLocale();
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(2759, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.getIgnoreRepaint());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicySet());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
      assertFalse(jDayChooser0.isFocusCycleRoot());
      assertEquals(2759, jDayChooser0.getMaxDayCharacters());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isFocusTraversalPolicyProvider());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      System.setCurrentTimeMillis(34);
  }
}
