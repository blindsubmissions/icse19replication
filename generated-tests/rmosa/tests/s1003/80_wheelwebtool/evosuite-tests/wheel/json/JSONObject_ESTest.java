/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:27:03 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("WN", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote("=/F,\n");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("\"=/F,\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"=/F,\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = JSONObject.quote("dV<{6%tK-vOlZ Y`");
      Double double0 = new Double(83.483214026);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("dV<{6%tK-vOlZ Y`", "\"dV<{6%tK-vOlZ Y`\"");
      Long long0 = new Long((-1046L));
      String string1 = JSONObject.valueToString(long0, 59, 59);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1923957433509247
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = JSONObject.quote("=/F,\n");
      assertEquals("\"=/F,\\n\"", string0);
      
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("~v=#qHHS%Ph-mE%4Y");
      assertEquals(0L, long0);
      
      String string1 = jSONObject0.toString(1290, 1290);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "\\u";
      String string1 = JSONObject.quote(string0);
      assertEquals("\"\\\\u\"", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject.quote("=/F,\n");
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7559146178114426
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "fPKwK";
      jSONObject0.put("fPKwK", (-748.19154830986));
      JSONObject jSONObject1 = jSONObject0.putOpt("fPKwK", "fPKwK");
      try { 
        jSONObject1.getJSONArray("fPKwK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fPKwK\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4763959755529905
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "PtwK";
      String string1 = "46/m";
      jSONObject0.putOpt("46/m", "PtwK");
      try { 
        jSONObject0.getBoolean("46/m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"46/m\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("qtwa", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-748.19154830986));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JSONObject.quote("dV<{6%tK-vOlZ Y`");
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("true");
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6915591643104242
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", 0.0);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      jSONObject1.put("Bad value from toJSONString: ", (Map) hashMap0);
      Float float0 = new Float(1852.0F);
      try { 
        jSONObject0.append("Bad value from toJSONString: ", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Bad value from toJSONString: ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("bd0u54`}xA-z", 2069.4716);
      assertEquals(2069.4716, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject.quote("dV<{6%tK-vOlZ Y`");
      Double double0 = new Double(83.483214026);
      double double1 = Double.sum(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optBoolean("dV<{6%tK-vOlZ Y`");
      JSONObject.testValidity(double0);
      assertNotEquals((double)double0, (double)double1, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "edi_");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      try { 
        Integer.decode("v}BNyR");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"v}BNyR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("QgVXVh5hH^@>!");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Float float0 = new Float((-1776.76));
      Float.sum((-1341.795F), 0.0F);
      Float.max(1.0F, 1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer(1334);
      jSONObject0.append("Kz}'r", integer0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = JSONObject.quote("{z=/l*Wc^ J$F'-=c");
      assertEquals("\"{z=/l*Wc^ J$F'-=c\"", string0);
      
      String string1 = JSONObject.quote((String) null);
      assertEquals("\"\"", string1);
      
      JSONObject jSONObject0 = new JSONObject();
      String string2 = jSONObject0.toString((-851), (-1145));
      assertEquals("{}", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",:]}/\\\"[{;=#";
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 774.0668836672);
      JSONObject.getNames(jSONObject1);
      try { 
        Short.decode(",:]}/\"[{;=#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",:]}/\"[{;=#\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = JSONObject.quote("=/F,\n");
      Double double0 = new Double(1390.851);
      String string1 = JSONObject.valueToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6994866498542252
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = JSONObject.quote("=/F,\n");
      JSONObject jSONObject0 = new JSONObject((Object) "=/F,\n");
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject1 = jSONObject0.put("@<0[8U{PphJ", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(2494);
      Writer writer0 = jSONObject1.write(stringWriter0);
      jSONObject1.write(writer0);
      assertEquals(4, jSONObject0.length());
      
      Object object0 = new Object();
      String string1 = JSONObject.valueToString(object0, 34, 241);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "' and instead saw '";
      stringArray0[1] = "A JSONArray text must start with '['";
      stringArray0[2] = "is";
      stringArray0[3] = "0";
      stringArray0[4] = "+/.)$fXO";
      stringArray0[5] = "`jm6";
      stringArray0[6] = "";
      stringArray0[7] = "toH";
      stringArray0[8] = "istoString";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      linkedList0.add(jSONObject0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject.quote("=/F,\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("=/F,\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of =/F,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 152;
      try { 
        jSONObject0.getString("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-3828L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0, 30, 30);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JN1.<-MBXVQz?D", (-1L));
      jSONObject0.getDouble("JN1.<-MBXVQz?D");
      Float float0 = new Float(3627.800428);
      JSONObject.testValidity(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(2024);
      Short short0 = new Short((short)92);
      JSONObject.valueToString(jSONObject0);
      String string0 = jSONObject0.toString(2024, 2024);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1923957433509247
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = JSONObject.quote("=/F,\n");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("=/F,\n", (Collection) linkedList0);
      String string1 = jSONObject0.toString(2487, 59);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7559146178114426
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("fPKwK", (-748.19154830986));
      jSONObject1.getInt("fPKwK");
      JSONObject jSONObject2 = jSONObject0.putOpt("fPKwK", "fPKwK");
      try { 
        jSONObject2.getBoolean("fPKwK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fPKwK\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject.quote("=/F,\n");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = (-20);
      jSONArray0.optJSONObject((-20));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "=/F,\n";
      stringArray0[1] = "\"=/F,\n\"";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "\"=/F,\n\"");
      linkedList0.removeIf(predicate0);
      stringArray0[2] = "\"=/F,\n\"";
      stringArray0[3] = "\"=/F,\n\"";
      stringArray0[4] = "=/F,\n";
      stringArray0[5] = "=/F,\n";
      stringArray0[6] = "\"=/F,\n\"";
      stringArray0[7] = "=/F,\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Short short0 = new Short((short)60);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.has("4ERJrNgNED<_Ur/@=");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Expected a ',' or ']'";
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or ']'", (Map) hashMap1);
      jSONObject1.optJSONObject("Expected a ',' or ']'");
      String string1 = "RG\\\"v;}vW[5qoNw$`\"";
      try { 
        jSONObject1.getDouble("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = JSONObject.quote("=/F,\n");
      assertEquals("\"=/F,\\n\"", string0);
      
      JSONObject.quote("><H:~@> ]GKQt%e:a");
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, (-1448), (-1448));
      assertEquals("null", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Integer integer0 = new Integer(15);
      assertEquals(15, (int)integer0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.put((Integer) null, (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-10400458);
      Integer integer0 = new Integer((-10400458));
      int int1 = 10;
      Integer.max((-10400458), 10);
      String string0 = "H@` |[8Wkn]WOW!";
      hashMap0.put(integer0, "H@` |[8Wkn]WOW!");
      jSONObject0.toString();
      int int2 = (-1478);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-1478), (-1478));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((-1776.76));
      JSONObject jSONObject1 = new JSONObject(float0);
      jSONObject1.toString();
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((-3491.3875F));
      jSONArray0.put((Object) float0);
      JSONObject.valueToString(jSONArray0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.2953999564375822
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject.quote("=/F,\n");
      JSONObject jSONObject0 = new JSONObject((Object) "=/F,\n");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\"=/F,\n\"");
      assertEquals("\"\\\"=/F,\\n\\\"\"", string0);
      
      String string1 = JSONObject.quote("max");
      assertEquals("\"max\"", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject.getNames((Object) stringArray0[3]);
      try { 
        Integer.valueOf("getcompare");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getcompare\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.8369882167858358
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      linkedList0.add(jSONObject0);
      String string0 = JSONObject.valueToString(linkedList0);
      Boolean boolean0 = Boolean.valueOf("[wheel.json.JSONObject@0000000001]");
      String string1 = JSONObject.valueToString(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = JSONObject.doubleToString(32.374008592063205);
      assertEquals("32.374008592063205", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6769877743224169
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "fPKwK";
      JSONObject jSONObject1 = jSONObject0.put("fPKwK", (-748.19154830986));
      try { 
        jSONObject1.getBoolean("fPKwK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fPKwK\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5806491250694639
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", true);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject1.put("vMKi8})1", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Bad value from toJSONString: \"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject.quote("Y)C1/{9/lhJ%w,C$G");
      JSONObject.doubleToString((-1940.0));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-1940";
      stringArray0[1] = "]hIx+E";
      stringArray0[2] = "-1940";
      stringArray0[3] = "Y)C1/{9/lhJ%w,C$G";
      stringArray0[4] = "\"Y)C1/{9/lhJ%w,C$G\"";
      JSONObject jSONObject0 = new JSONObject("\"Y)C1/{9/lhJ%w,C$G\"", stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Xivi$6'Y");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("islongValue");
      assertEquals("", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7559146178114426
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("fPKwK", (-748.19154830986));
      jSONObject1.optDouble("fPKwK", 474.42);
      JSONObject jSONObject2 = jSONObject0.putOpt("fPKwK", "fPKwK");
      try { 
        jSONObject2.getBoolean("fPKwK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fPKwK\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Bad value from toJSONString: ", 62.3199);
      JSONObject jSONObject1 = jSONObject0.accumulate("Bad value from toJSONString: ", "");
      String string0 = jSONObject1.optString("", "_+g8,c,~fy|${+");
      assertEquals("_+g8,c,~fy|${+", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "fpjwk";
      jSONObject0.putOpt("fpjwk", "fpjwk");
      jSONObject0.put("fpjwk", 1520L);
      try { 
        jSONObject0.getJSONObject("fpjwk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fpjwk\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.159588814308626
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONArray jSONArray1 = jSONArray0.put((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONArray0);
      String string1 = JSONObject.valueToString(jSONArray1, 13, 160);
      assertEquals("[{}]", string1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 47, 47);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"K!!");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) "\"K!!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.863679987341
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", "");
      Double double0 = new Double(1.0);
      jSONObject0.isNull("");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3987;
      try { 
        jSONArray0.getJSONObject(3987);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[3987] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject.quote("=/F,\n");
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject((Object) "pa");
      JSONObject.testValidity(jSONObject0);
      jSONObject0.toString(285, 285);
      Object object0 = new Object();
      JSONObject.quote("\"=/F,\n\"");
      JSONObject.numberToString(float0);
      JSONObject.quote("=/F,\n");
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.9036867253908532
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("fPKwK", (-748.19154830986));
      JSONObject jSONObject1 = jSONObject0.putOpt("fPKwK", "fPKwK");
      jSONObject0.optInt("fPKwK", 94);
      try { 
        jSONObject1.getBoolean("fPKwK");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fPKwK\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      Boolean.compare(true, true);
      JSONObject jSONObject1 = jSONObject0.putOpt("ByZ~%1*", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("ByZ~%1*");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject1 = jSONObject0.put(",\n", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(46);
      jSONObject1.write(stringWriter0);
      jSONObject0.toString();
      JSONObject.valueToString(linkedList0);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("<fJwK", "<fJwK");
      jSONObject0.optString("<fJwK", "<fJwK");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string1 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      jSONTokener0.nextTo("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      long long0 = 1117L;
      JSONArray jSONArray1 = jSONArray0.put(1117L);
      jSONObject0.toJSONArray(jSONArray0);
      int int0 = 18;
      try { 
        jSONArray1.getJSONObject(18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[18] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6935851881355024
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",\n", false);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put(",\n", (Collection) linkedList0);
      jSONObject1.getJSONArray(",\n");
      jSONObject0.toString();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject0.accumulate("null", jSONArray0);
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((short) (-5377));
      try { 
        jSONArray0.getJSONObject((short) (-5377));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-5377] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      String string0 = JSONObject.valueToString(hashMap0, 8448, 13);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\"K!!", "\"K!!");
      jSONObject0.accumulate("\"K!!", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String string0 = "{s";
      JSONTokener jSONTokener0 = new JSONTokener("{s");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {s
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0318204422829809
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{zl*Wc^:J$z',=c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 16 of {zl*Wc^:J$z',=c
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "{z=<l*Wc: J$F'-=c";
      JSONObject.quote("{z=<l*Wc: J$F'-=c");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{z=<l*Wc: J$F'-=c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 9 of {z=<l*Wc: J$F'-=c
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{z=<l}Wc: J$F'-=c");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Double double0 = new Double((-748.19154830986));
      JSONObject jSONObject1 = new JSONObject("{z=<l}Wc: J$F'-=c");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "$rBj(yJnHzIM";
      JSONObject jSONObject1 = jSONObject0.put("$rBj(yJnHzIM", 2);
      jSONObject1.getLong("$rBj(yJnHzIM");
      String string1 = "Stwa";
      jSONObject0.putOpt("Stwa", "Stwa");
      try { 
        jSONObject0.getBoolean("Stwa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Stwa\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2147483645);
      assertEquals("2.147483645E9", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7559146178114424
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("fPKwK", (-748.19154830986));
      JSONObject jSONObject1 = jSONObject0.putOpt("fPKwK", "fPKwK");
      jSONObject1.put("fPKwK", false);
      boolean boolean0 = jSONObject1.getBoolean("fPKwK");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("fPJwK", "fPJwK");
      jSONObject1.accumulate("fPJwK", "fPJwK");
      jSONObject0.optString("fPJwK", "A JSONObject text must begin with '{'");
      JSONObject jSONObject2 = jSONObject1.append("fPJwK", "wheel.json.JSONArray@0000000002");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getmin";
      short short0 = (short) (-5401);
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      jSONObject0.put("getnotifoyAll", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("getmin", (Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.getJSONObject("getmin");
      try { 
        jSONObject2.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Boolean.valueOf("isintern");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isintern", (Collection) null);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("isintern");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("", object0);
      Double double0 = new Double(1.0);
      jSONObject0.isNull("");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 2481;
      try { 
        jSONArray0.getJSONObject(2481);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2481] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = JSONObject.quote("=</F,\n");
      assertEquals("\"=<\\/F,\\n\"", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{zl*Wc^:J$z',}~=c");
      jSONObject0.remove("{zl*Wc^:J$z',}~=c");
      String string0 = JSONObject.valueToString(jSONObject0);
      Float float0 = new Float(1.0);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }
}
