/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:09:11 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9332136802368209
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "lux";
      stringArray0[1] = "rr";
      stringArray0[2] = "|hRSxw#!";
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("iousend");
      assertEquals("iousens", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8831062560133558
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("lud");
      assertEquals("lus", string0);
      
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.stemString("appearet");
      assertEquals("appeares", string1);
      
      lovinsStemmer0.stem("appearet");
      String string2 = lovinsStemmer0.stem("appeares");
      assertEquals("appear", string2);
      
      String string3 = lovinsStemmer0.stem("appear");
      assertEquals("appear", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8935788339454854
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("p:z1up 5izb)\"hvmpvmit");
      assertEquals("p:z1up 5izb)\"hvmpvmis", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("s8W6E4\"qher");
      assertEquals("s8w6e4\"qhes", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.062640026404162
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This hould be a ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th hould be a ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("th edit of a book---for exampl, ``second''. th hould be a ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      assertEquals("th edit of a book---for exampl, ``second''. th hould be a ordin, and should hav th first letter capit, as shown he; th standard styl conver to lower ca when nec.", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8648846829742058
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("her");
      assertEquals("hes", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("px");
      String string1 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string1);
      
      String string2 = lovinsStemmer0.stem("ot");
      assertTrue(string2.equals((Object)string1));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9607162505764949
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("vmX");
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString(" zuQP\"l@Z%#*2G");
      assertEquals(" zuqp\"l@z%#*2g", string1);
      
      String string2 = lovinsStemmer1.stem("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      assertTrue(string2.equals((Object)string0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0459679501693513
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("a docum hav an author and titl, but not form publ.");
      assertEquals("a docum hav an author and titl, but not form publ.", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9507159129853444
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("s8W6E4\"qher");
      assertEquals("s8w6e4\"qhes", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0607990005873988
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("address");
      assertEquals("addres", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("ialist");
      assertEquals("ial", string1);
      
      lovinsStemmer0.stem("vK%");
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("h 6jar/");
      assertEquals("h 6jar/", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0085992326425541
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pex");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      stringArray0[1] = "pex";
      stringArray0[2] = "pic";
      stringArray0[3] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      String string0 = lovinsStemmer0.stem("ert");
      assertEquals("ers", string0);
      
      stringArray0[4] = "pic";
      stringArray0[5] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      stringArray0[6] = "pic";
      stringArray0[7] = "ented";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Proceeding of the Sixteenth International Conference on Machine Learning");
      String string1 = lovinsStemmer0.stemString("proceeding of the sixteenth international conference on machine learn");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.001197145043645
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("invalis cv revis - not enough part separ by dot!");
      String string1 = lovinsStemmer0.stem("inval cv rev - not enough part separ by dot!");
      assertEquals("inval cv rev - not enough part separ by dot!", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8935788339454854
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("3nvrsdex");
      lovinsStemmer0.stem("e\n;tL]&e|@)qT");
      String string1 = lovinsStemmer0.stem("s8W6E4\"qher");
      assertEquals("s8w6e4\"qhes", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8351090341161825
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("erid");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("s8W6E4\"qher");
      assertEquals("s8w6e4\"qhes", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string0);
      
      lovinsStemmer0.stemString("invalis cv revis - not enough part separ by dot!");
      String string1 = lovinsStemmer0.stemString("inval cv rev - not enough part separ by dot!");
      assertEquals("inv cv rev - not enough part separ by dot!", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("cax");
      String string0 = lovinsStemmer0.stem("cax");
      assertEquals("cac", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0306788659501536
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("lis");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("lis");
      String string1 = lovinsStemmer0.stemString("li");
      assertTrue(string1.equals((Object)string0));
      
      lovinsStemmer0.stem("kdWe%z+S'L +");
      lovinsStemmer0.stemString("pex");
      lovinsStemmer0.stem("pand");
      String string2 = lovinsStemmer0.stemString("\rR^vJron");
      assertEquals("\rr^vjron", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0524966234471562
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("55tbex");
      String string1 = lovinsStemmer0.stem("55tbic");
      assertEquals("55tb", string1);
      
      String string2 = lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufman publishes", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.03980222589296
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("tex");
      assertEquals("tic", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      assertEquals("titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1022509565633842
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("id_");
      String string0 = lovinsStemmer0.stemString("%<D&@ <nfc;av=v");
      assertEquals("%<d&@ <nfc;av=v", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("70001yz");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "id_";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "x,&OzC~W&P<]";
      stringArray0[3] = "%<D&@ <nfc;av=v";
      stringArray0[4] = "id_";
      stringArray0[5] = "id_";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.002727982931539
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("%<D&@ <nfc;av=v");
      String string0 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1142684371340668
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stemString("%<D&@ <nfc;av=v");
      String string1 = lovinsStemmer0.stemString("3Jde{T6+!");
      assertEquals("3jd{t6+!", string1);
      
      String string2 = lovinsStemmer0.stemString("EiO%o =-wlus X^G");
      assertEquals("ei%o =-wlus x^g", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("betend");
      assertEquals("betens", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.971644830828541
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pex");
      lovinsStemmer0.stemString("bicond");
      lovinsStemmer0.stem("Proceeding of the Sixteenth International Conference on Machine Learning");
      String string0 = lovinsStemmer0.stemString("proceeding of the sixteenth international conference on machine learn");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.00102500591925
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ally");
      assertEquals("al", string0);
      
      lovinsStemmer0.stem("vmX");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("iful");
      assertEquals("ifl", string1);
      
      String string2 = lovinsStemmer0.stemString("ifl");
      assertEquals("ifl", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceeding of the sixteenth international conference on machine learn", string0);
      
      String string1 = lovinsStemmer0.stemString("acies");
      assertEquals("aci", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0203147579688392
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("hR7yL:gJ49KF!-3v");
      lovinsStemmer0.stem("}V |cs)o}1o>");
      lovinsStemmer0.stemString("hR7yL:gJ49KF!-3v");
      String string0 = lovinsStemmer0.stemString("Get flag -f: ");
      assertEquals("ges flag -f: ", string0);
      
      lovinsStemmer0.stem("hr7yl:gj49kf!-3v");
      String string1 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0085992326425541
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("XW;D6AJ!|&(tyt");
      String string0 = lovinsStemmer0.stem("pex");
      assertEquals("pic", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Proceeding of the Sixteenth International Conference on Machine Learning");
      String string1 = lovinsStemmer0.stemString("proceeding of the sixteenth international conference on machine learn");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "-t\\ull";
      String string1 = lovinsStemmer0.stemString(string0);
      assertEquals("-t\\l", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("-tl");
      assertEquals("-tl", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("The language the document is in.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("iev");
      assertEquals("ief", string0);
      
      String string1 = lovinsStemmer1.stemString("vad");
      assertEquals("vas", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0116912775739304
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("otrud");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("splitix");
      lovinsStemmer0.stem("vad");
      lovinsStemmer0.stem("splitix");
      lovinsStemmer0.stem("idiruad");
      String string1 = lovinsStemmer0.stemString("splitic");
      assertEquals("split", string1);
      
      String string2 = lovinsStemmer0.stemString("vad");
      assertEquals("vas", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("csbB");
      String string1 = lovinsStemmer0.stem("csb");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.03980222589296
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "idine";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("end");
      lovinsStemmer0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0721786339528616
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("luxex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String string0 = lovinsStemmer2.stemString("+6Rul,{");
      assertEquals("+6rl,{", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0245115514622898
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("ax");
      assertEquals("ax", string0);
      
      String string1 = lovinsStemmer1.stemString(".wxfrUm[{=8DiK@\"K");
      assertEquals(".wxfr[{=8dik@\"k", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.058647845415762
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("Freund, Y. and Mason, L.");
      lovinsStemmer1.stem("Freund, Y. and Mason, L.");
      String string1 = lovinsStemmer1.stemString("8034");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "~g@";
      stringArray0[2] = "pp";
      stringArray0[3] = "";
      stringArray0[4] = "<Z^j5,EI";
      stringArray0[5] = "ally";
      stringArray0[6] = ";(DZ&se3geBt";
      String string0 = lovinsStemmer0.stemString("volume");
      assertEquals("volum", string0);
      
      String string1 = lovinsStemmer0.stemString("volum");
      assertEquals("vol", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      String string0 = lovinsStemmer0.stemString("the database key of the entry being cross referenced. any fields that are missing from the current record are inherited from the field being cross referenced.");
      assertEquals("th databas key of th entr being cros refer. any field that ar mis from th cur record ar inherit from th field being cros refer.", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("appearix");
      String string0 = lovinsStemmer0.stem("appearic");
      assertEquals("appe", string0);
      
      String string1 = lovinsStemmer0.stemString("appe");
      assertEquals("ap", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("vmX");
      String string0 = lovinsStemmer0.stemString("iful");
      assertEquals("ifl", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("vmx");
      String string1 = lovinsStemmer1.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("inalid CVS revi!ion - not eough parts separated by dots!");
      assertEquals("inalis cv rev!ion - not eough part separ by dot!", string0);
      
      lovinsStemmer0.stemString("inalis cv rev!ion - not eough part separ by dot!");
      lovinsStemmer0.stem("inal cv rev!ion - not eough part separ by dot!");
      String string1 = lovinsStemmer0.stemString("inal cv rev!ion - not eough part separ by dot!");
      assertEquals("inal cv rev!ion - not eough part separ by dot!", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ond");
      lovinsStemmer0.stemString("hRyL:gJ49KF!o3v");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.stemmers.LovinsStemmer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("rpn40va?u96pher");
      assertEquals("rpn40va?u96pher", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(".F%Puk{S|");
      String string0 = lovinsStemmer0.stemString(".F%Puk{S|");
      assertEquals(".f%puk{s|", string0);
      
      String string1 = lovinsStemmer0.stemString(")c9z53xn@xGg%$'{o:");
      assertEquals(")c9z53xn@xg%$'{o:", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("TYPE");
      String string0 = lovinsStemmer0.stemString("TYPE");
      assertEquals("typ", string0);
      
      String string1 = lovinsStemmer0.stemString("learnet");
      assertEquals("learnet", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ation");
      String string0 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("&ivCUS");
      assertEquals("&ivc", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("&ivCUS");
      assertEquals("&ivc", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pex");
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("iAine");
      assertEquals("iain", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("iul");
      String string0 = lovinsStemmer0.stemString("iul");
      assertEquals("iul", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("px");
      String string0 = lovinsStemmer0.stem("otB(Xide");
      assertEquals("otb(xid", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("lid");
      assertEquals("lis", string0);
      
      lovinsStemmer0.stem("P&E8kk`");
      String string1 = lovinsStemmer0.stem("umpt");
      assertEquals("um", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "o01w.TX03Vh`|P";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034");
      String string1 = lovinsStemmer0.stemString("icaUl");
      assertEquals("icaul", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1036429785985904
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("S4V0!%TD");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("S4V0!%TD");
      assertEquals("s4v0!%td", string2);
      
      String string3 = lovinsStemmer0.stem("'el=`B>`^;x*,NUM");
      assertEquals("'el=`b>`^;x*,n", string3);
      
      String string4 = lovinsStemmer0.stemString("ally");
      assertEquals("al", string4);
  }
}
