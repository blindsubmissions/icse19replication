/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:20:21 GMT 2018
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASEvaluation;
import weka.attributeSelection.SymmetricalUncertAttributeEval;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NullStemmer nullStemmer0 = new NullStemmer();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "!?meVQt0K#GaxIQcaX";
      stringArray0[1] = "-lnorm";
      stringArray0[2] = "tokenizer";
      stringArray0[3] = "(die0kK9LJHj7YpM5";
      stringArray0[4] = "<FY>I(wuo!h~7";
      stringArray0[5] = "";
      stringArray0[6] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7830734690382188
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-stemmer";
      stringArray0[1] = "-stemmer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9250955144163486
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      stringArray0[2] = "";
      stringArray0[3] = "-normalize";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.pruneDictionary();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      Capabilities capabilities1 = sGDText1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      capabilities1.or(capabilities0);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      Random.setNextRandom(1004);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("9122", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("The stemming algorithm to use on the words.", string0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1764933795584236
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      capabilities0.clone();
      capabilities0.or(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      testInstances0.setNumString(1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.m_normalize = true;
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      naiveBayesMultinomialText0.classifyInstance(instance0);
      naiveBayesMultinomialText0.pruneDictionary();
      Random.setNextRandom(0);
      naiveBayesMultinomialText0.pruneDictionary();
      Locale.getISOCountries();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NullStemmer nullStemmer0 = new NullStemmer();
      MockFile mockFile0 = (MockFile)naiveBayesMultinomialText0.m_stopwordsFile;
      File file0 = MockFile.createTempFile("?1IRbxWF`[u};UP", "?1IRbxWF`[u};UP", (File) mockFile0);
      naiveBayesMultinomialText0.setStopwords(file0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2523542313691998
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray0.length);
      
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = true;
      naiveBayesMultinomialText0.m_tokenizer = null;
      naiveBayesMultinomialText0.m_useStopList = true;
      SGDText sGDText0 = new SGDText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      testInstances0.setNumString(1);
      testInstances0.generate();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemInUtil.addInputLine("p^Q");
      Random.setNextRandom((-2308));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SystemInUtil.addInputLine("p^Q");
      MockFile mockFile0 = new MockFile("they", "they");
      mockFile0.setWritable(false, false);
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      naiveBayesMultinomialText0.getOptions();
      Random.setNextRandom((-2308));
      mockFile0.setExecutable(false);
      naiveBayesMultinomialText0.getOptions();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(14, stringArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("Whether to convert all tokens to lowercase", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.globalInfo();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 3064.85381352364;
      doubleArray0[2] = 3064.85381352364;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.normTipText();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-241));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      NaiveBayesMultinomialText.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      DenseInstance denseInstance0 = new DenseInstance(38.81092362949465, (double[]) null);
      naiveBayesMultinomialText0.useStopListTipText();
      double[] doubleArray0 = naiveBayesMultinomialText0.m_probOfClass;
      assertNull(doubleArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      capabilities0.or(capabilities1);
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      Instances instances0 = testInstances0.generate();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1070;
      intArray0[2] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1070, intArray0, 0);
      try { 
        linearNNSearch0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("The LNorm to use for document length normalization.", string0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eQ{GXYB>_";
      stringArray0[1] = "-M";
      stringArray0[2] = "stoplist";
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) nGramTokenizer0;
      stringArray0[3] = "u#]K wr\">w{plV7A";
      stringArray0[4] = "";
      stringArray0[5] = "";
      naiveBayesMultinomialText0.m_minWordP = (-4338.374483974322);
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "H,.K!YdI]^0jSq";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = " uU,E;";
      stringArray0[4] = "-norm";
      stringArray0[5] = "s";
      stringArray0[6] = "KmW\"!*\u0005";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ":dbYo|ffEFD;#j[{L";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = "Whether to convert all tokens to lowercase";
      stringArray0[3] = "Invalid stemmer specification string";
      stringArray0[4] = "H";
      stringArray0[5] = ":dbYo|ffEFD;#j[{L";
      stringArray0[6] = "xw[S9Fr*/:";
      stringArray0[7] = "Z(enr+s&?Vk<?!r";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6047443445382554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      Capabilities capabilities1 = multiScheme0.getCapabilities();
      capabilities0.or(capabilities1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      testInstances0.setNumString(1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, 1065);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.m_normalize = true;
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      naiveBayesMultinomialText0.classifyInstance(instance0);
      naiveBayesMultinomialText0.pruneDictionary();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom((-2150));
      LinearNNSearch linearNNSearch1 = new LinearNNSearch(instances0);
      sGDText0.listOptions();
      BallNode ballNode0 = new BallNode(21);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      Instances instances0 = naiveBayesMultinomial0.m_headerInfo;
      LinearNNSearch linearNNSearch0 = new LinearNNSearch((Instances) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+:MToo?~ah,?W");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)115);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        sparseInstance0.equalHeadersMsg(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setPeriodicPruning(1528);
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(1528, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3";
      stringArray0[1] = "3";
      naiveBayesMultinomialText0.setDebug(true);
      stringArray0[2] = "46 ";
      stringArray0[3] = "-stopwords";
      stringArray0[4] = "3";
      stringArray0[5] = "The stemming algorithm to use on the words.";
      stringArray0[6] = "46 ";
      stringArray0[7] = "3";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      assertTrue(symmetricalUncertAttributeEval0.getMissingMerge());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6359449398796728
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      capabilities0.clone();
      capabilities0.or(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      testInstances0.setNumString(1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.m_normalize = true;
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      naiveBayesMultinomialText0.classifyInstance(instance0);
      naiveBayesMultinomialText0.pruneDictionary();
      Random.setNextRandom(0);
      naiveBayesMultinomialText0.pruneDictionary();
      Locale.getISOCountries();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.tokenizeInstance(instance0, true);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5074740483791491
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      MultiScheme multiScheme0 = new MultiScheme();
      Capabilities capabilities1 = multiScheme0.getCapabilities();
      capabilities0.or(capabilities1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      testInstances0.setNumString(1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, 1062);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      naiveBayesMultinomialText0.classifyInstance(instance0);
      naiveBayesMultinomialText0.pruneDictionary();
      Random.setNextRandom(5);
      naiveBayesMultinomialText0.toString();
      DenseInstance denseInstance0 = new DenseInstance(3);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.825333102396375
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk(2237);
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tSubset evaluation: RMSE\n");
      testInstances1.setSeed((-2));
      iBk0.pruneToK(instances0, (double[]) null, 1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.setNorm(1773.4898420742245);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2237;
      intArray0[2] = (-1);
      intArray0[3] = 4;
      intArray0[4] = (-2);
      intArray0[5] = (-1);
      testInstances0.setRelationalClassFormat(instances0);
      intArray0[6] = 1;
      intArray0[7] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, (-1));
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      assertEquals(1773.4898420742245, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      naiveBayesMultinomialText0.m_periodicP = 7;
      capabilities0.or(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumString(1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2187.563892413), intArray0, 4);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      boolean boolean0 = true;
      linearNNSearch0.nearestNeighbour(sparseInstance1);
      // Undeclared exception!
      try { 
        sparseInstance0.stringValue(21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[2];
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      File file1 = MockFile.createTempFile("hp5Ekd3QHyBZ6#2}[", "o", file0);
      naiveBayesMultinomialText0.m_stopwordsFile = file1;
      doubleArray0[1] = 2.0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      denseInstance0.toStringNoWeight(2923);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      testInstances0.setNumString(1);
      Instances instances0 = testInstances0.generate();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      ASEvaluation aSEvaluation0 = attributeSelectedClassifier0.getEvaluator();
      Capabilities capabilities1 = aSEvaluation0.getCapabilities();
      TestInstances.forCapabilities(capabilities1);
      TestInstances.forCapabilities(capabilities0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText1.pruneDictionary();
      Random.setNextRandom(0);
      sGDText0.listOptions();
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      Capabilities capabilities1 = (Capabilities)capabilities0.clone();
      capabilities0.or(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      capabilities0.and(capabilities1);
      testInstances0.setNumString(1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "-tokenizer";
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = "The,quick,brown,fox,jumps,over,the,lazy,dog";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = " ";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid tokenizer specification string
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      sGDText0.reset();
      Random.setNextRandom((-2));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Random.setNextRandom(1);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      sGDText0.listOptions();
      BallNode ballNode0 = new BallNode(5);
      DenseInstance denseInstance0 = new DenseInstance(5);
      denseInstance0.setDataset(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.distributionForInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      multiScheme0.getOptions();
      Capabilities capabilities1 = multiScheme0.getCapabilities();
      capabilities0.or(capabilities1);
      TestInstances testInstances0 = new TestInstances();
      SystemInUtil.addInputLine("Use word frequencies rather than binary bag of words representation");
      testInstances0.getWords();
      testInstances0.setNumString(1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[0];
      naiveBayesMultinomialText0.m_periodicP = 18;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.pruneDictionary();
      SystemInUtil.addInputLine("e4G:j");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.toString();
      System.setCurrentTimeMillis(0L);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      MultiScheme multiScheme0 = new MultiScheme();
      multiScheme0.getCapabilities();
      Capabilities capabilities1 = multiScheme0.getCapabilities();
      capabilities0.or(capabilities1);
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      testInstances0.setNumString(1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, 1065);
      SparseInstance sparseInstance0 = new SparseInstance(21);
      naiveBayesMultinomialText0.m_normalize = true;
      try { 
        linearNNSearch0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      stringArray0[2] = "";
      stringArray0[3] = "-normalize";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.pruneDictionary();
      Capabilities capabilities0 = new Capabilities(naiveBayesMultinomialText0);
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      Capabilities capabilities1 = sGDText1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      capabilities1.or(capabilities0);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom(1L);
      instances0.randomize(mockRandom0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      Random.setNextRandom(1004);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      capabilities0.clone();
      capabilities0.or(capabilities0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getWords();
      testInstances0.setNumString(1);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      naiveBayesMultinomialText0.m_normalize = true;
      Instance instance0 = linearNNSearch0.nearestNeighbour(sparseInstance0);
      naiveBayesMultinomialText0.classifyInstance(instance0);
      Random.setNextRandom(0);
      Random.setNextRandom((-2300));
      sGDText0.listOptions();
      BallNode ballNode0 = new BallNode(0);
      DenseInstance denseInstance0 = new DenseInstance(22);
      denseInstance0.setDataset(instances0);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom(1000);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.m_useStopList = true;
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      int int0 = 2923;
      denseInstance0.toStringNoWeight(2923);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      int[] intArray0 = new int[39];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-2));
      Instance instance0 = linearNNSearch0.nearestNeighbour(binarySparseInstance0);
      instance0.setClassMissing();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.updateClassifier(instance0, true);
  }
}
