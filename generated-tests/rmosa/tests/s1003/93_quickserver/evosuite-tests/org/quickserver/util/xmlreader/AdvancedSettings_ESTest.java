/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:23:33 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setByteBufferSize(0);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1789));
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setClientIdentifier("");
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-861));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(855);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getQSObjectPoolMaker();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(0, advancedSettings0.getSocketLinger());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(306);
      String string0 = ";47";
      advancedSettings0.setSocketLinger(306);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getDebugNonBlockingMode();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset(";47");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;47
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setMaxThreadsForNioWrite((-958));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger((-2223));
      advancedSettings0.setByteBufferSize((-204));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setSocketLinger((-958));
      assertEquals((-958), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setBacklog(2728);
      advancedSettings0.setSocketLinger((-1487));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setSocketLinger(2718);
      assertEquals(2718, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog((-515));
      advancedSettings0.setByteBufferSize((-2162));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog(962);
      advancedSettings0.setClientSocketSendBufferSize(962);
      advancedSettings0.setMaxThreadsForNioWrite((-654));
      advancedSettings0.setClientIdentifier("\t<max-threads-for-nio-write>");
      advancedSettings0.setPerformancePreferencesConnectionTime(1004);
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketSendBufferSize((-654));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(1004);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setMaxThreadsForNioWrite(962);
      advancedSettings0.setClientIdentifier("\t<max-threads-for-nio-write>");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      assertEquals("\t<max-threads-for-nio-write>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(10);
      assertEquals(10, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("3");
      advancedSettings0.getClientIdentifier();
      assertEquals("3", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1474);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("VCfy:x62:b*");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getQSObjectPoolMaker();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog((-1670));
      int int0 = (-1593);
      advancedSettings0.setPerformancePreferencesBandwidth((-1593));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1474);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("VCfy:x62:b*");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth(2582);
      advancedSettings0.setByteBufferSize((-282));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth(2065);
      advancedSettings0.getPerformancePreferencesBandwidth();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(1474, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth((-799));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getBacklog();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTrafficClass("{qs[nT");
      assertEquals((-799), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      int int0 = 306;
      advancedSettings0.setByteBufferSize(306);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset(";47");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ;47
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-273));
      advancedSettings0.setMaxThreadsForNioWrite((-273));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      assertEquals((-273), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketTrafficClass("E\"UXt^f![O~v");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      int int0 = 0;
      String string0 = "4/ZZmmCZn!a)a";
      int int1 = 0;
      advancedSettings0.setBacklog(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("4/ZZmmCZn!a)a");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 4/ZZmmCZn!a)a
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.toXML("");
      assertEquals((-1), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass(">=");
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      int int0 = 0;
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("ktQJ,$WAe{jB");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ktQJ,$WAe{jB
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(905);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(905);
      advancedSettings1.setCharset("");
      advancedSettings0.setSocketLinger(905);
      advancedSettings0.setSocketLinger(4193);
      advancedSettings1.setSocketLinger(0);
      assertEquals(905, advancedSettings1.getByteBufferSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setBacklog((-1));
      advancedSettings0.toXML("");
      advancedSettings0.setClientIdentifier("j6%{u3");
      advancedSettings0.toXML("|kMN*$J");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("~D");
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("n*60(1H#O");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.toXML("\"z6`%z]");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientIdentifier("El");
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1059));
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getCharset();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("ISO-8859-1");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1789));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings1.toXML("");
      advancedSettings0.setCharset("");
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", advancedSettings0.getClientIdentifier());
      
      advancedSettings1.setCharset((String) null);
      assertEquals(0, advancedSettings1.getClientSocketReceiveBufferSize());
  }
}
