/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:47:01 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0011942590952263
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is al an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9960399478774514
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("/qFk?0*KZK");
      lovinsStemmer0.stem("/qfk?0*kzk");
      lovinsStemmer0.stem("aging");
      String string0 = lovinsStemmer0.stemString("adus`@2748qxA#G");
      assertEquals("adus`@2748qx#g", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0216157810490512
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.stem("ZM<]oq<ZkwRjd!hPm!");
      stringArray0[0] = "f{YK}m){$P5@jv1";
      String string0 = lovinsStemmer0.stem("Can't normalize array. Sum is NaN.");
      assertEquals("can't normalize array. sum is nan.", string0);
      
      stringArray0[1] = "VwYO4j:";
      stringArray0[2] = "+w&20CQBl/pY";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8896354549718973
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("H:$'AT?x9");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "T3v+K^ +naR";
      stringArray0[1] = "T3v+K^ +naR";
      stringArray0[2] = "T3v+K^ +naR";
      stringArray0[3] = "T3v+K^ +naR";
      stringArray0[4] = "T3v+K^ +naR";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("T3v+K^ +naR");
      String string0 = null;
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8317603713216299
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string1);
      
      lovinsStemmer0.stem("otide");
      String string2 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0304851620039015
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("The edition of a book---for example, ``Sec.nd''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``sec.nd''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      String string2 = lovinsStemmer0.stemString("th edit of a book---for exampl, ``sec.nd''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      assertEquals("th edit of a book---for exampl, ``sec.nd''. th should be an ordin, and should hav th first letter capit, as shown he; th standard styl conver to lower ca when nec.", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("String should not finish with ");
      String string0 = lovinsStemmer0.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0462158962297052
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("q0kofxwher");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("otide");
      lovinsStemmer0.stem("otide");
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2277032574112652
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("erid");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("URTb{FT)wm");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.013396639970884
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("\tDisplays this help.");
      assertEquals("\tdisplay th help.", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stem("mit");
      assertEquals("mis", string2);
      
      String string3 = lovinsStemmer1.stem("idine");
      assertEquals("id", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.071429660710323
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("8z b{rnbex");
      String string1 = lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8z b{rnbic";
      stringArray0[1] = "8z b{rnbic";
      stringArray0[2] = "a report publ by a school or other institut, usu number within a ser.";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("H");
      assertEquals("h", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1387073518654653
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("XX:YGfi_K");
      assertEquals("xx:ygf_k", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("dex");
      assertEquals("dic", string2);
      
      lovinsStemmer0.stemString("WPFraR8Q/t\"fpQlj)M[");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("vasend");
      assertEquals("vasens", string3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1010060209404469
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("learnond");
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0742149743370615
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString(")d`kJFdk~KYpyL");
      assertEquals(")d`kjfdk~kypyl", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2002044658164304
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(":N^e1b\u0006>14K&,F");
      String[] stringArray0 = new String[6];
      stringArray0[0] = ":n^e1b\u0006>14k&,f";
      String string0 = lovinsStemmer0.stem("pex");
      assertEquals("pic", string0);
      
      stringArray0[1] = "uZ+IL'(sf`yu^fGVY";
      stringArray0[2] = ":n^e1b\u0006>14k&,f";
      stringArray0[3] = ":N^e1b\u0006>14K&,F";
      stringArray0[4] = ":n^e1b\u0006>14k&,f";
      stringArray0[5] = ":n^e1b\u0006>14k&,f";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stem("icklud");
      assertEquals("icklus", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9488052275329756
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("5v}ert");
      assertEquals("5v}ers", string0);
      
      lovinsStemmer0.stem("otide");
      lovinsStemmer0.stem("otide");
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1264906199895102
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("wR]c6hAR}w");
      String string0 = lovinsStemmer0.stem("entyz");
      assertEquals("entys", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("wR]c6hAR}w");
      assertEquals("wr]c6har}w", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stem("/v}");
      String string3 = lovinsStemmer0.stemString("6I_#C`?^q");
      assertEquals("6i_#c`?^q", string3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0307717730340098
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\n");
      String string0 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string0);
      
      lovinsStemmer0.stemString("jQTr");
      String string1 = lovinsStemmer0.stemString("jQTr");
      assertEquals("jqtr", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("2748qxend");
      assertEquals("2748qxens", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0267482837922726
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      lovinsStemmer0.stemString("linguyt");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9816528863926618
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("otide");
      lovinsStemmer0.stem("otide");
      String string0 = lovinsStemmer0.stemString("treevad");
      assertEquals("treevas", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ation");
      assertEquals("ation", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0634789808323266
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("R n$xMmcdHVqs1q");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("Fatal errox.");
      assertEquals("fat errox.", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0852430602637115
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("FXoH`qxG-[B.0c,<5");
      String string1 = lovinsStemmer0.stem("rud");
      assertEquals("rus", string1);
      
      lovinsStemmer0.stem("pq'vg*[?y/wtn[3>Osl");
      String string2 = lovinsStemmer0.stemString("FEQ]xQnaFQD/gmyl");
      assertEquals("feq]xqnafqd/gmyl", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.013396639970884
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("masonlux");
      assertEquals("masonluc", string0);
      
      String string1 = lovinsStemmer0.stemString("\tDisplays this help.");
      assertEquals("\tdisplay th help.", string1);
      
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stem("idine");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2277032574112652
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Max index (doubles): ");
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("URTb{FT)wm");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string0);
      
      lovinsStemmer0.stem("ot");
      String string1 = lovinsStemmer0.stemString("wQ4!RmNuHXbb/");
      assertEquals("wq4!rmnuhxb/", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("encing");
      assertEquals("enc", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.035974514449061
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, hen the edtor field gives the editor of the book or collecton in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, hen th edt field giv th edit of th book or collect in which th refer appear.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("met");
      assertEquals("mes", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("yt");
      assertEquals("yt", string0);
      
      String string1 = lovinsStemmer1.stem("so;net");
      assertEquals("so;net", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0011942590952263
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("r5jn4lid");
      lovinsStemmer1.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0370993566780629
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ex";
      stringArray0[1] = "Zz}$m2fr$*1%ST60X^";
      stringArray0[2] = "iful";
      stringArray0[3] = "}R40[t@D]@?YJSz?^";
      stringArray0[4] = "bex";
      stringArray0[5] = "j9bru";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stem("ities");
      assertEquals("it", string0);
      
      lovinsStemmer0.stem("ohU]G>a{&F+iJC");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("aaus?)#f~&ZO)");
      String string1 = lovinsStemmer1.stemString("aaus?)#f~&ZO)");
      assertEquals("aaus?)#f~&zo)", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("acies");
      assertEquals("aci", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0779108063156595
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.stem("ZM<]oq<ZkwRjd!hPm!");
      stringArray0[0] = "f{YK}m){$P5@jv1";
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("probToLogOdds: pr}bability }ust be in [0,1] ");
      assertEquals("probtologod: pr}babil }ust be in [0,1] ", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("umpt");
      assertEquals("um", string0);
      
      String string1 = lovinsStemmer1.stem("R. Quinlan");
      assertEquals("r. quinlan", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.065979666935077
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Induction of deciIion trees";
      stringArray0[1] = "Induction of deciIion trees";
      stringArray0[2] = "Induction of deciIion trees";
      stringArray0[3] = "EG#,L5#lM)N49{_";
      stringArray0[4] = "Induction of deciIion trees";
      stringArray0[5] = "ingly";
      stringArray0[6] = "Induction of deciIion trees";
      stringArray0[7] = "Induction of deciIion trees";
      stringArray0[8] = "Induction of deciIion trees";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[5];
      stringArray1[0] = "Induction of deciIion trees";
      stringArray1[1] = "Induction of deciIion trees";
      stringArray1[2] = "Induction of deciIion trees";
      stringArray1[3] = "Induction of deciIion trees";
      stringArray1[4] = "Induction of deciIion trees";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("osluad");
      lovinsStemmer1.stemString("Induction of deciIion trees");
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer1.stemString("Induction of deciIion trees");
      assertEquals("induc of decii tree", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.013396639970884
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("missing_id");
      assertEquals("mis_id", string0);
      
      String string1 = lovinsStemmer0.stemString("\tDisplays this help.");
      assertEquals("\tdisplay th help.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stem("idine");
      assertEquals("id", string3);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0514032782731202
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "idine";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("eness");
      lovinsStemmer0.stemString("\tDisplays this help.");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0999729749338107
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("induction of deciiion treeix");
      assertEquals("induc of decii treeic", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("How something stDange has been published. Te first word should be capitalized.");
      assertEquals("how someth stdang ha been publ. te first word should be capital.", string2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0793321162947263
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Z5HuM+y~fxftTpSBa+s");
      assertEquals("z5hum+y~fxfttpsb+s", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("8034ex");
      lovinsStemmer0.stem("z5hum+y~fxfttpsb+s");
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufman publishes", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      String string1 = lovinsStemmer0.stemString("@;Av");
      assertEquals("@;av", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("olv");
      assertEquals("olut", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      assertEquals("th organ that sponsor a confer or that publish a manu.", string0);
      
      String string1 = lovinsStemmer0.stemString("th organ that sponsor a confer or that publish a manu.");
      assertEquals("th organ that spons a confer or that publ a manu.", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("hood");
      assertEquals("hood", string0);
      
      String string1 = lovinsStemmer0.stemString("]6KrR");
      assertEquals("]6kr", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Get position of flag -f: ");
      assertEquals("ges posit of flag -f: ", string0);
      
      String string1 = lovinsStemmer0.stemString("ical");
      assertEquals("ical", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("agg");
      assertEquals("ag", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("~H\"BPPP[y#<");
      assertEquals("~h\"bppp[y#<", string0);
      
      String string1 = lovinsStemmer0.stemString("~H\"BPPP[y#<");
      assertEquals("~h\"bpp[y#<", string1);
      
      String string2 = lovinsStemmer0.stemString("yq$d?!.}P");
      assertEquals("yq$d?!.}p", string2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("istr");
      assertEquals("ister", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("vad");
      String string1 = lovinsStemmer0.stemString("upher");
      assertEquals("upher", string1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("rpt");
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
      
      lovinsStemmer0.stem("rb");
      String string1 = lovinsStemmer0.stemString("\n}");
      assertEquals("\n}", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      String string0 = lovinsStemmer0.stemString(",eToR");
      assertEquals(",es", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("['vg*[?y/wtn[3>Oul");
      assertEquals("['vg*[?y/wtn[3>oul", string1);
      
      lovinsStemmer0.stem("e");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("REEb <6LGUrG[!576V");
      lovinsStemmer0.stemString(":N^e1b\u0006>14K&,F");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      String string1 = lovinsStemmer0.stemString("MachEine 9earninR");
      assertEquals("machein 9earninr", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("tNyL{m");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("tNyL{m");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("d4PeRih3=$y=y/},");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
