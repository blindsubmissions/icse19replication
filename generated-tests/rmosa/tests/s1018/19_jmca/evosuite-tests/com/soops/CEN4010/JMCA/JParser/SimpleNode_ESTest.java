/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:41:54 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "*lshft");
      stringWriter2.append((CharSequence) "*lshft");
      SimpleNode simpleNode1 = new SimpleNode(47);
      simpleNode1.setIdentifier("*lshft");
      simpleNode1.dump("^vzx", stringWriter3);
      simpleNode0.setIdentifier("^vzx");
      StringWriter stringWriter4 = new StringWriter(47);
      simpleNode1.dump("^vzx", stringWriter1);
      simpleNode1.jjtClose();
      SimpleNode simpleNode2 = new SimpleNode(47);
      simpleNode0.dump("^vzx", stringWriter1);
      SimpleNode simpleNode3 = new SimpleNode((-1));
      StringWriter stringWriter5 = new StringWriter();
      simpleNode3.dump("Hh/;9W", stringWriter5);
      simpleNode0.dump("3sZJi;G", stringWriter3);
      simpleNode1.dump("*lshft", stringWriter3);
      simpleNode2.dump("3sZJi;G", stringWriter0);
      assertEquals("*lshft*lshft*lshft*lshft<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n<PackageDeclaration>\n  <identifier>^vzx</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>^vzx</identifier>\n</PackageDeclaration>\n<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3854);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 10;
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.jjtOpen();
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      JJTJavaParserState jJTJavaParserState0 = javaParser0.jjtree;
      // Undeclared exception!
      try { 
        jJTJavaParserState0.rootNode();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3245083869310707
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(37);
      CharBuffer charBuffer0 = CharBuffer.allocate(84);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode0.setIdentifier("");
      simpleNode0.dump("", stringWriter0);
      simpleNode0.setIdentifier("*@t");
      StringWriter stringWriter3 = new StringWriter(1);
      SimpleNode simpleNode2 = new SimpleNode(13);
      simpleNode2.dump("e%", stringWriter3);
      simpleNode1.dump((String) null, stringWriter2);
      simpleNode0.dump("*@t", stringWriter0);
      simpleNode0.dump("", stringWriter1);
      simpleNode2.dump("\"\r\"", stringWriter0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<NameList>\n</NameList>\n<NameList>\n  <identifier>*@t</identifier>\n</NameList>\n<NameList>\n  <identifier>*@t</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.7653029452149065
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SystemInUtil.addInputLine("q2#H7t&r!W]");
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("*lshf4t");
      JavaParser javaParser0 = new JavaParser("*lshf4t");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1);
      simpleNode1.toString("*lshf4t");
      simpleNode0.jjtSetParent(simpleNode1);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = (Node) simpleNode1;
      simpleNode0.children = nodeArray0;
      simpleNode1.setIdentifier("y");
      stringReader0.close();
      simpleNode0.dump("X`7,K~t6", stringWriter0);
      simpleNode1.dump("y", stringWriter0);
      simpleNode1.dump("y", stringWriter0);
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.dump("<", stringWriter0);
      assertEquals("<PackageDeclaration><PackageDeclaration>\n  <identifier>y</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>y</identifier>\n</PackageDeclaration>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>y</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>y</identifier>\n</PackageDeclaration>\n<PackageDeclaration><PackageDeclaration>\n  <identifier>y</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>y</identifier>\n</PackageDeclaration>\n</PackageDeclaration>\n<PackageDeclaration><PackageDeclaration>\n  <identifier>y</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>y</identifier>\n</PackageDeclaration>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.48509409130221154
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jhzFE8A`p1yk1hi?B/");
      StringReader stringReader0 = new StringReader(".");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">FT7b`fVdvr[ab");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ".");
      simpleNode1.dump("Fm`/|h)l", stringWriter2);
      simpleNode1.dump("Fm`/|h)l", stringWriter1);
      assertEquals(1, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('<');
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.setIdentifier("*lshft");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "\"\r\"");
      simpleNode0.dump("-H 9C}<Yt3", stringWriter2);
      simpleNode0.toString();
      StringWriter stringWriter3 = stringWriter1.append('<');
      StringWriter stringWriter4 = stringWriter3.append((CharSequence) "*lshft");
      simpleNode0.dump("&&", stringWriter4);
      simpleNode0.dump("'kjm-l$:!-z;,]~;8j", stringWriter3);
      assertEquals("<\"\r\"<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n<*lshft<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n", stringWriter3.toString());
      assertEquals("<\"\r\"<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n<*lshft<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4709001279172663
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lshft");
      stringWriter1.write("*lshft");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "*lshft");
      stringWriter1.append((CharSequence) "*lshft");
      SimpleNode simpleNode1 = new SimpleNode(47);
      simpleNode1.setIdentifier("*lshft");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("*lshft");
      simpleNode1.setIdentifier(">=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">=");
      simpleNode1.dump("x)@3X}\"}4w=v.", stringWriter0);
      StringWriter stringWriter3 = new StringWriter();
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtSetParent((Node) null);
      simpleNode1.setIdentifier("'");
      simpleNode0.dump(")pw", stringWriter2);
      simpleNode1.dump("\"--\"", stringWriter0);
      simpleNode0.dump("LC1ep", stringWriter0);
      simpleNode1.dump("1jZ,5`FcSB%{0", stringWriter0);
      assertEquals("*lshft*lshft*lshft*lshft*lshft<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n  <identifier>'</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n  <identifier>'</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-401));
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(80);
      String string0 = ">FT7b`fVdvr[ab";
      String string1 = "jhzFE8A`p1yk1hi?B/";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      JavaParser javaParser0 = new JavaParser(pipedInputStream0);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 80);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HF6Q>j#z0JN");
      StringReader stringReader0 = new StringReader(";");
      JavaParser javaParser1 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(80);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-149782473));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -149782473
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "*lshft");
      stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lshft");
      stringWriter1.append((CharSequence) "*lshft");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "*lshft");
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("<<");
      StringReader stringReader0 = new StringReader("<<");
      StringWriter stringWriter3 = new StringWriter(1);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump((String) null, stringWriter3);
      simpleNode0.dump("HVL77dZ-7", stringWriter2);
      assertEquals("*lshft*lshft*lshft*lshft*lshft<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n</VariableDeclaratorId>\n", stringWriter2.toString());
      assertEquals("*lshft*lshft*lshft*lshft*lshft<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(8);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(7, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jhzFE8A`p1yk1hi?B/");
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.setIdentifier((String) null);
      SimpleNode simpleNode3 = new SimpleNode(0);
      simpleNode1.jjtAddChild(simpleNode2, 118);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1432583002));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Node[] nodeArray0 = new Node[2];
      simpleNode0.children = nodeArray0;
      stringWriter0.append('I');
      simpleNode0.dump("y", stringWriter0);
      assertEquals("I<PackageDeclaration></PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("~Q][V%z[{M");
      simpleNode0.setIdentifier("}");
      simpleNode0.dump("*ge", stringWriter0);
      assertEquals("<PackageDeclaration>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "*lshft";
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "*lshft");
      stringWriter0.write("*lshft");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "*lshft");
      stringWriter1.close();
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("*lshft");
      String string1 = "<";
      simpleNode0.setIdentifier("<");
      simpleNode0.dump("*rshft", stringWriter2);
      simpleNode0.dump("*rshft", stringWriter2);
      StringWriter stringWriter3 = null;
      try {
        stringWriter3 = new StringWriter((-1994980959));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(80);
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ";");
      stringWriter1.append('0');
      StringWriter stringWriter2 = stringWriter1.append('y');
      simpleNode0.dump((String) null, stringWriter2);
      simpleNode0.setIdentifier("2C");
      StringWriter stringWriter3 = new StringWriter(1473);
      simpleNode0.dump("ai'c=N.V9+7R5NabY", stringWriter0);
      simpleNode0.dump("2C", stringWriter0);
      assertEquals(";0y<IfStatement>\n</IfStatement>\n<IfStatement>\n  <identifier>2C</identifier>\n</IfStatement>\n<IfStatement>\n  <identifier>2C</identifier>\n</IfStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(10);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      simpleNode0.setIdentifier("&");
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("dg8D", stringWriter1);
      assertEquals("<EnumConstant>\n  <identifier>*amp</identifier>\n</EnumConstant>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      SimpleNode simpleNode0 = new SimpleNode(37);
      CharBuffer charBuffer0 = CharBuffer.allocate(84);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) null);
      StringWriter stringWriter3 = new StringWriter(1);
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = stringWriter2.append((CharSequence) charBuffer0);
      SimpleNode simpleNode1 = new SimpleNode(1761);
      simpleNode0.setIdentifier("&&");
      simpleNode0.dump("&&", stringWriter5);
      simpleNode0.dump((String) null, stringWriter1);
      simpleNode0.dump((String) null, stringWriter2);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000null\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<NameList>\n  <identifier>*amp</identifier>\n</NameList>\n<NameList>\n  <identifier>*amp</identifier>\n</NameList>\n<NameList>\n  <identifier>*amp</identifier>\n</NameList>\n", stringWriter2.toString());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000null\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<NameList>\n  <identifier>*amp</identifier>\n</NameList>\n<NameList>\n  <identifier>*amp</identifier>\n</NameList>\n<NameList>\n  <identifier>*amp</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "*lshft");
      stringWriter2.append((CharSequence) "*lshft");
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("*lshft");
      stringWriter1.close();
      arrayList0.add("*lshft");
      simpleNode0.setIdentifier(">=");
      simpleNode0.dump("*lshft", stringWriter2);
      simpleNode0.dump(">=", stringWriter1);
      simpleNode0.dump("l", stringWriter0);
      simpleNode0.dump("&&", stringWriter2);
      simpleNode0.dump("l", stringWriter2);
      assertEquals("*lshft*lshft*lshft*lshft<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter2.toString());
      assertEquals("*lshft*lshft*lshft*lshft<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "*lshft");
      stringWriter0.append((CharSequence) "*lshft");
      stringWriter2.append((CharSequence) "*lshft");
      SimpleNode simpleNode1 = new SimpleNode(47);
      simpleNode1.setIdentifier("*lshft");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("*lshft");
      simpleNode1.dump("x)@3X}\"}4w=v.", stringWriter0);
      simpleNode1.setIdentifier(">>");
      simpleNode1.dump("ZpzNwWeal;&vY", stringWriter1);
      assertEquals("*lshft*lshft*lshft*lshft<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n  <identifier>*rshft</identifier>\n</InstanceOfExpression>\n", stringWriter1.toString());
      assertEquals("*lshft*lshft*lshft*lshft<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*lshft</identifier>\n  <identifier>*rshft</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1;
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "*lshft");
      stringWriter1.close();
      stringWriter2.append((CharSequence) "*lshft");
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("*lshft");
      simpleNode0.setIdentifier(">");
      simpleNode0.dump("*lshft", stringWriter2);
      String string0 = null;
      // Undeclared exception!
      try { 
        stringWriter0.write("P", 1, 18);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(1);
      CharBuffer.allocate(84);
      StringWriter stringWriter1 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(103);
      simpleNode0.setIdentifier("{");
      simpleNode0.dump("{", stringWriter0);
      simpleNode1.dump("h8Q;N[35<_%:j2w2", stringWriter1);
      assertFalse(stringWriter1.equals((Object)stringWriter0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "*lshft");
      stringWriter2.close();
      stringWriter2.append((CharSequence) "*lshft");
      stringWriter3.append((CharSequence) "*lshft");
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add("*lshft");
      arrayList1.add("*lshft");
      simpleNode0.setIdentifier("<");
      simpleNode0.setIdentifier("<=");
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump((String) null, stringWriter0);
      StringWriter stringWriter4 = new StringWriter(18);
      simpleNode0.dump((String) null, stringWriter4);
      stringWriter4.append((CharSequence) "<");
      simpleNode0.dump("<=", stringWriter0);
      simpleNode0.dump((String) null, stringWriter2);
      assertEquals("*lshft*lshft*lshft*lshft*lshft<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*lt</identifier>\n  <identifier>*le</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*lt</identifier>\n  <identifier>*le</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*lt</identifier>\n  <identifier>*le</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*lt</identifier>\n  <identifier>*le</identifier>\n</VariableDeclaratorId>\n", stringWriter2.toString());
      assertEquals("*lshft*lshft*lshft*lshft*lshft<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*lt</identifier>\n  <identifier>*le</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*lt</identifier>\n  <identifier>*le</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*lt</identifier>\n  <identifier>*le</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*lshft</identifier>\n  <identifier>*lshft</identifier>\n  <identifier>*lt</identifier>\n  <identifier>*le</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(13);
      Node node0 = simpleNode0.parent;
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.jjtSetParent((Node) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}");
      simpleNode0.dump("X[x,WYo", stringWriter0);
      simpleNode0.dump((String) null, stringWriter0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      simpleNode0.dump("s%Adrkt", stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("X[x,WYo", stringWriter0);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("PackageDeclaration", stringWriter0);
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "+HA6MFEtuRb");
      SimpleNode simpleNode0 = new SimpleNode(63);
      simpleNode0.setIdentifier("+HA6MFEtuRb");
      SimpleNode simpleNode1 = new SimpleNode((-2787));
      SimpleNode simpleNode2 = new SimpleNode(89);
      simpleNode0.toString();
      simpleNode2.setIdentifier("+HA6MFEtuRb");
      StringReader stringReader0 = new StringReader("+HA6MFEtuRb");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-1261));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter2.append('(');
      simpleNode0.dump("+HA6MFEtuRb", stringWriter4);
      SimpleNode simpleNode3 = new SimpleNode(javaParser0, (-2787));
      simpleNode3.dump("@mr]`Y", stringWriter3);
      simpleNode2.dump("@mr]`Y", stringWriter3);
      simpleNode3.dump("xZzKYTpd", stringWriter0);
      simpleNode3.dump("Literal : +HA6MFEtuRb", stringWriter2);
      simpleNode2.dump("xZzKYTpd", stringWriter4);
      assertEquals("+HA6MFEtuRb(<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n<ReturnStatement>\n  <identifier>+HA6MFEtuRb</identifier>\n</ReturnStatement>\n", stringWriter4.toString());
      assertEquals("+HA6MFEtuRb(<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n<ReturnStatement>\n  <identifier>+HA6MFEtuRb</identifier>\n</ReturnStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "*lshft");
      stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "*lshft");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "*lshft");
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      SimpleNode simpleNode1 = new SimpleNode(1);
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList0.add(")");
      simpleNode1.setIdentifier("_");
      simpleNode1.dump("*rshft", stringWriter0);
      StringWriter stringWriter3 = new StringWriter(1);
      StringWriter stringWriter4 = new StringWriter(1);
      StringWriter stringWriter5 = new StringWriter();
      simpleNode1.dump("*rshft", stringWriter5);
      simpleNode1.jjtAddChild(simpleNode0, 1);
      simpleNode0.dump("<T{|Y^^'&UBVH0", stringWriter2);
      simpleNode1.dump("*lshft", stringWriter4);
      simpleNode0.dump("_", stringWriter0);
      assertEquals("*lshft*lshft*lshft*lshft<PackageDeclaration>\n  <identifier>_</identifier>\n</PackageDeclaration>\n<VariableDeclaratorId>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }
}
