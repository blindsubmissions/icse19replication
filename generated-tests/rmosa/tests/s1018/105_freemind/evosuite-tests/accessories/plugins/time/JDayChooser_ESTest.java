/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:47:41 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.schememode.SchemeController;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseMotionListener;
import java.awt.image.IndexColorModel;
import java.sql.Time;
import java.text.Format;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.temporal.TemporalAdjuster;
import java.time.temporal.TemporalQuery;
import java.util.Date;
import java.util.HashSet;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLayeredPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JWindow;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SpinnerListModel;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.ImageNode;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.pdf.PDFInfo;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.w3c.dom.Document;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser1.isWeekOfYearVisible();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9257516392020637
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(11);
      jDayChooser0.setName("Map markers visible");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 11, 61445, 11, 'A');
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      keyEvent0.setKeyChar('A');
      jDayChooser0.setLocale(locale0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      fopImage_ImageInfo0.dpiHorizontal = (double) 3015;
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      fopImage_ImageInfo0.dpiHorizontal = (-1075.7);
      jpegImage0.getTransparentColor();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-1956), (-1956), 3015, 33, '!');
      Locale locale1 = Locale.GERMAN;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1956));
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      TemporalQuery<Format.Field> temporalQuery0 = (TemporalQuery<Format.Field>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn(format_Field0).when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      zoneOffset0.query(temporalQuery0);
      jDayChooser0.setDay(0);
      jDayChooser0.setEnabled(false);
      Locale locale2 = Locale.TAIWAN;
      keyEvent1.paramString();
      jDayChooser0.setFocus();
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDoubleBuffered(true);
      JInternalFrame jInternalFrame0 = new JInternalFrame("accessories.plugins.time.JMonthChooser$1", true, true, true, true);
      JLayeredPane jLayeredPane0 = jInternalFrame0.getLayeredPane();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 218, true, jLayeredPane0);
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-11));
      jDayChooser0.removeAll();
      jDayChooser0.init();
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.GERMAN;
      locale0.getDisplayLanguage();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDay((-3170));
      jDayChooser0.setDay(4470);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.setMonth((-87));
      jDayChooser0.setEnabled(true);
      Locale locale0 = Locale.TAIWAN;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.decorationBackgroundVisible = true;
      jDayChooser0.getPropertyChangeListeners("accessories.plugins.time.JDayChooser");
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setWeekdayForeground((Color) null);
      JComponent.getDefaultLocale();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 10, 5001L, (-3874), 6, 'l', 6);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getUIClassID();
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.GERMAN;
      locale0.getDisplayLanguage();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDay((-3170));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = jYearChooser0.dayChooser;
      EvoSuiteURL evoSuiteURL0 = null;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "year";
      stringArray0[1] = "year";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1327, 4390, 4390, 4390, 1327);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(31, int0);
      
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8648659786657173
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.resetKeyboardActions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ZoneOffset.ofTotalSeconds(23);
      jDayChooser0.setMaxDayCharacters(1034);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 36, 36, 23, 40, 'U');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) jDayChooser_DecoratorButton0;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(1765);
      jDayChooser0.setEnabled(false);
      Locale locale0 = Locale.TAIWAN;
      locale0.getExtensionKeys();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.keyPressed(keyEvent0);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setEnabled(false);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6885063804586076
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getCursor();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.setWeekOfYearVisible(false);
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      jDayChooser0.removeMouseMotionListener((MouseMotionListener) null);
      jDayChooser0.getLocale();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getDay();
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, (-5878), "day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.resetKeyboardActions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.requestFocus(false);
      ZoneOffset.ofTotalSeconds(23);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Date date0 = jDayChooser1.getMinSelectableDate();
      jDayChooser1.maxSelectableDate = date0;
      jDayChooser1.getDaysInMonth();
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.weekPanel = (JPanel) jDayChooser0;
      jDayChooser0.setDecorationBackgroundVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 216, 216, 216, 12303, 'e');
      KeyEvent.getKeyText('e');
      keyEvent0.setKeyCode(12303);
      jDayChooser0.keyTyped(keyEvent0);
      MindMapMode mindMapMode0 = new MindMapMode();
      assertEquals("MindMap", mindMapMode0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6304702401606765
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.GERMAN;
      locale0.getDisplayLanguage();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDay((-3170));
      jDayChooser0.updateUI();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = false;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Metal");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isFocusable();
      jDayChooser0.getWeekdayForeground();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7129242178517146
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "discrete");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, 18, "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.GERMAN;
      locale0.getDisplayLanguage();
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-3170));
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDay((-3170));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.removeAll();
      jDayChooser0.init();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(3);
      JScrollPane jScrollPane0 = new JScrollPane();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.firePropertyChange("day", true, true);
      System.setCurrentTimeMillis(1275);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 1275, true);
      jDayChooser0.focusLost(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(11, (-1638), 11, 11, 11);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.setDay(11);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(11, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      jDayChooser0.printAll(debugGraphics0);
      jDayChooser0.getUI();
      jDayChooser0.getSundayForeground();
      jDayChooser0.setAlwaysFireDayProperty(true);
      GridLayout gridLayout0 = new GridLayout();
      jDayChooser0.setLayout(gridLayout0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getDaysInMonth();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(28, 28, 28, 28, 28);
      jDayChooser0.setDay(1469);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockDate mockDate0 = new MockDate((-2815), 44, 1550, 49, (-816));
      mockDate0.toInstant();
      jDayChooser0.setSelectableDateRange((Date) null, mockDate0);
      jDayChooser0.setDay(44);
      jDayChooser0.setDayBordersVisible(false);
      SchemeMode schemeMode0 = new SchemeMode();
      SchemeController schemeController0 = null;
      try {
        schemeController0 = new SchemeController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ZoneId zoneId0 = ZoneId.systemDefault();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-27);
      byteArray0[5] = (byte) (-117);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LocalTime localTime0 = MockLocalTime.now(zoneId0);
      Time time0 = Time.valueOf(localTime0);
      time0.toLocalTime();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8913, 4, 8913, 8913, 'Y', 4);
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jPanel0.resetKeyboardActions();
      int int0 = (-687);
      jDayChooser0.getMaxDayCharacters();
      long long0 = (-1367L);
      int int1 = (-2481);
      char char0 = 'Y';
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JMapViewer jMapViewer0 = new JMapViewer();
      MapDialog mapDialog0 = new MapDialog();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("tile_cache_max_age");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(2324, (-3384), byteArray0, byteArray0, byteArray0, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      java.sql.Date date0 = new java.sql.Date(32);
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.resetKeyboardActions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getFocusListeners();
      jDayChooser_DecoratorButton0.getMnemonic();
      jDayChooser0.setDay(0);
      MockDate mockDate0 = new MockDate((-4), (-4), (-4), (-4), (-2264));
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setSelectableDateRange(mockDate0, (Date) null);
      jDayChooser0.setDay((-2743));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getBaseline(109, 109);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 6, 6, 2066, 2186, 'v');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDay(2066);
      jDayChooser0.setMonth('v');
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawDays();
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.setMaxSelectableDate(date0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.resetKeyboardActions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ZoneOffset.ofTotalSeconds(23);
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getBackground();
      jDayChooser0.sundayForeground = color0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 38, 23, 17, 36, 'U');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(23);
      jDayChooser0.setFocus();
      JWindow jWindow0 = null;
      try {
        jWindow0 = new JWindow();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.706697613279902
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "Cw|A_,4\"");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.removeAll();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.init();
      jDayChooser_DecoratorButton0.validate();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 38, 38, 38, 'U');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(38);
      jDayChooser0.setFocus();
      JWindow jWindow0 = null;
      try {
        jWindow0 = new JWindow();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.GERMAN;
      locale0.getDisplayLanguage();
      String[] stringArray0 = Locale.getISOCountries();
      SpinnerListModel spinnerListModel0 = new SpinnerListModel(stringArray0);
      JSpinner jSpinner0 = new JSpinner(spinnerListModel0);
      JSpinner jSpinner1 = new JSpinner(spinnerListModel0);
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner1);
      JPanel jPanel0 = new JPanel(jSpinner_DefaultEditor0);
      spinnerListModel0.getNextValue();
      KeyEvent keyEvent0 = new KeyEvent(jSpinner0, 228, 7948800000L, 27, 34, 'k');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7245232524096474
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.resetKeyboardActions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ZoneOffset.ofTotalSeconds(23);
      jDayChooser_DecoratorButton0.isDefaultCapable();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1883), 40, 23, (-2416), 'U');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setName("h\"DTEz$l$hu}[");
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser_DecoratorButton0, 23, 23, 1016, 33, 'U');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(659);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 37, 659, 24, 37, 'R', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(27, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale.getISOCountries();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 33, 39, 39, 'h');
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes(39, 624);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 39 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.resetKeyboardActions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(23);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 36, 36, 23, 35, 'U');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.keyPressed(keyEvent0);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) zoneOffset0;
      objectArray0[1] = (Object) jDayChooser_DecoratorButton0;
      SpinnerListModel spinnerListModel0 = new SpinnerListModel(objectArray0);
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) jDayChooser_DecoratorButton0, 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.725330858196089
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.resetKeyboardActions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(23);
      jDayChooser_DecoratorButton0.isDefaultCapable();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8216, (-175L), 8216, 38, '1');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setName("dM");
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser_DecoratorButton0, 955, (-175L), 21, 1016, 'U');
      jDayChooser0.keyPressed(keyEvent0);
      TemporalQuery<Format.Field> temporalQuery0 = (TemporalQuery<Format.Field>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Format.Field) null).when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      zoneOffset0.query(temporalQuery0);
      jDayChooser0.setDay((-2416));
      jDayChooser0.setEnabled(false);
      Locale locale0 = Locale.CHINESE;
      jDayChooser0.setFocus();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale.getISOCountries();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.initialized = false;
      Locale locale0 = new Locale("day", "Center");
      locale0.getDisplayVariant();
      jDayChooser1.setLocale(locale0);
      jDayChooser0.setDay((-3170));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(63726);
      jDayChooser_DecoratorButton0.isDefaultCapable();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1418, 0L, (-1764), 63726, 'U');
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setName("h\"DTEz$l$hu}[");
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 49, 400L, 1418, 63726, 'U');
      jDayChooser0.keyPressed(keyEvent0);
      TemporalQuery<Format.Field> temporalQuery0 = (TemporalQuery<Format.Field>) mock(TemporalQuery.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(temporalQuery0).queryFrom(any(java.time.temporal.TemporalAccessor.class));
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      zoneOffset0.query(temporalQuery0);
      jDayChooser0.setDay(1016);
      jDayChooser0.setEnabled(false);
      Locale locale0 = Locale.TAIWAN;
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.resetKeyboardActions();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ZoneOffset.ofTotalSeconds(23);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 36, 36, 23, 23, 'U');
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.keyPressed(keyEvent0);
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) jDayChooser_DecoratorButton0;
      SpinnerListModel spinnerListModel0 = new SpinnerListModel(objectArray0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.weeks = null;
      jDayChooser1.getToolkit();
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay(36);
      Color color0 = Color.blue;
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertEquals(28, jDayChooser1.getDay());
  }
}
