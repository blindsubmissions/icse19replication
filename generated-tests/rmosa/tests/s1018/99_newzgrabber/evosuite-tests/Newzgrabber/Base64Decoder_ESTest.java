/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:30:12 GMT 2018
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Base64Decoder;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import java.io.ByteArrayInputStream;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Locale;
import javax.swing.DebugGraphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Decoder_ESTest extends Base64Decoder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.12425083738963087
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)98;
      byteArray0[6] = (byte)98;
      byteArray0[6] = (byte)49;
      byteArray0[8] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      DebugGraphics.logStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.decodeStream();
      byteArrayInputStream0.reset();
      base64Decoder0.setBegin(false);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.decodeStream();
      base64Decoder1.decodeStream();
      System.setCurrentTimeMillis((byte)49);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.12693054534140227
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-94);
      byteArray0[5] = (byte)102;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      Locale locale0 = Locale.UK;
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      MockFile mockFile0 = new MockFile(".I$Op#P2Brx(r~`r@t", "]iL;BW\"YN4!N");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(4L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.13269142083987176
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.decodeStream();
      mockPrintStream0.println();
      byteArrayInputStream0.reset();
      Newzgrabber.verbose = true;
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder1.updateProgress();
      base64Decoder1.LineCount = (-1090L);
      byteArrayInputStream0.read();
      base64Decoder1.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.13579395875159386
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)59;
      byteArray0[2] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "b>;h0DZaZ?lJ/WLz");
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)66;
      byteArray1[2] = (byte)98;
      byteArray1[3] = (byte)59;
      byteArray1[4] = (byte)59;
      byteArray1[5] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("b>;h0DZaZ?lJ/WLz");
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(bufferedCustomInputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("[kr1V7");
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream1);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream1);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      boolean boolean0 = base64Decoder0.foundbegin;
      byteArrayInputStream0.close();
      Newzgrabber.IsBatch = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      base64Decoder0.decodeStream();
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        bufferedCustomInputStream0.read(byteArray0, (int) (byte)10, (int) (byte)10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)10;
      byteArray0[6] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.decodeStream();
      byteArrayInputStream0.reset();
      base64Decoder0.ProgressSet = false;
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder1.LineCount = (long) (byte)49;
      base64Decoder1.decodeStream();
      base64Decoder1.decodeStream();
      assertEquals(51L, base64Decoder1.getLineCount());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.15841057013179086
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)46;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "b>;h0DZaZ?lJ/WLz");
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)46;
      byteArray0[6] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.decodeStream();
      Newzgrabber.verbose = true;
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder1.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)49;
      byteArray0[4] = (byte)98;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      base64Decoder0.ABORT = true;
      base64Decoder0.decodeStream();
      byteArrayInputStream0.reset();
      base64Decoder0.updateProgress();
      byteArrayInputStream0.read();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(0L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "b>;h0DZaZ?lJ/WLz");
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte)43;
      byteArray0[5] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      DebugGraphics.logStream();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }
}
