/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:45:47 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Map<JSONObject, Integer> map0 = null;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      linkedList0.add(float0);
      jSONObject0.put("", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject.quote("icvPe3F\"wgU W");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("icvPe3F\"wgU W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"icvPe3F\\\"wgU W\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3640159254907818
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject.quote("Substring boundseror");
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(0);
      hashMap0.entrySet();
      JSONObject jSONObject1 = jSONObject0.accumulate("\"Substring boundseror\"", integer0);
      try { 
        jSONObject1.getJSONObject("\"Substring boundseror\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"Substring boundseror\\\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.optLong("JSONObject[", 0L);
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4741083800990982
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject.quote("[Hd\n");
      Integer integer0 = new Integer(71);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optLong(".K1mgj)('piHVPyeRd");
      try { 
        jSONObject0.getBoolean("\"E}v\"#F(u#wI}A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"E}v\\\"#F(u#wI}A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1855318123159404
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      byte byte0 = (byte) (-36);
      Byte byte1 = new Byte((byte) (-36));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "is~6Uppe@rC|se";
      stringArray0[1] = "is~6Uppe@rC|se";
      stringArray0[2] = "is~6Uppe@rC|se";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      jSONObject0.optBoolean("geG1T");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("is~6Uppe@rC|se", object0);
      jSONObject1.keys();
      try { 
        jSONObject1.getLong("is~6Uppe@rC|se");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is~6Uppe@rC|se\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3396091171567721
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject.quote("-{;/o");
      Float float0 = new Float((-1994.243F));
      Float.max((-1994.243F), (-1994.243F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Double double0 = Double.valueOf((double) (-1994.243F));
      jSONObject0.append("true", double0);
      JSONObject.testValidity("-{;/o");
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("<,,L1@?^O*h", "<,,L1@?^O*h");
      try { 
        jSONObject0.getInt("<,,L1@?^O*h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<,,L1@?^O*h\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      Short short0 = new Short((short)47);
      Short.toUnsignedLong((short)47);
      Short.compare((short)0, (short)8448);
      Short.toUnsignedLong((short)0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("<Z06kwD`oN", object0);
      Long long0 = new Long((short)47);
      jSONObject1.keys();
      Short.toUnsignedLong((short) (-496));
      JSONObject.doubleToString((short) (-496));
      Long long1 = new Long(1424L);
      jSONObject1.accumulate("<Z06kwD`oN", long1);
      assertEquals(4, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject(long1);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JSONObject.quote("icvP3F\"wgU W");
      assertEquals("\"icvP3F\\\"wgU W\"", string0);
      
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      String string1 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string1);
      assertNotNull(string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4216010062582942
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject.quote("-{;/o");
      Float float0 = new Float((-1994.243F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      Double double0 = new Double(2834.400331);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JSONObject.quote("icvPe3F\"wgU W");
      Double double0 = new Double(1.0);
      String string1 = JSONObject.valueToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject.quote("4,4\n");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "4,4\n";
      stringArray0[1] = "4,4\n";
      stringArray0[2] = "toU";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject.quote("4[\n");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"4[\n\"";
      stringArray0[1] = "4[\n";
      stringArray0[2] = "4[\n";
      stringArray0[3] = "4[\n";
      stringArray0[4] = "%][ ";
      stringArray0[5] = "4[\n";
      stringArray0[6] = "4[\n";
      stringArray0[7] = "sp";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.quote(";\n");
      JSONTokener jSONTokener0 = new JSONTokener("\"\\;\n\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"\\;
         // \"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JSONObject.quote("icvPe3F\"wgU W");
      assertEquals("\"icvPe3F\\\"wgU W\"", string0);
      
      String string1 = JSONObject.valueToString("icvPe3F\"wgU W");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-2664.4517));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.438180636739496
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("-{;/o");
      jSONObject0.optBoolean("j?|j:@Knjg(8S_\"x 6X");
      try { 
        jSONObject0.getJSONObject("mer");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mer\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = JSONObject.quote("-{;/o");
      assertEquals("\"-{;/o\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(129, 129);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject.quote("[Hd\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("\"[Hd\n\"", 1.0);
      try { 
        jSONObject0.getBoolean("\"[Hd\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"[Hd\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Expect'h '");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1063911301690834
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("-{;/o");
      try { 
        jSONObject0.getString("com");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"com\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.toString((-605));
      try { 
        jSONObject0.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = JSONObject.doubleToString(9.294121349144941);
      assertEquals("9.294121349144941", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3341923457408336
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject.quote("icvPe3F\"wgU W");
      String string0 = JSONObject.quote("\"\\icvPe3F\"wgU W\"");
      assertEquals("\"\\\"\\\\icvPe3F\\\"wgU W\\\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "sum");
      jSONObject0.toString((-234), (-234));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = JSONObject.quote("icvPe3F\"wgU W");
      Short short0 = new Short((short)2433);
      String string1 = JSONObject.valueToString(short0, (short)2433, (short)2433);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject.valueToString(linkedList0, 59, 59);
      JSONArray jSONArray0 = new JSONArray("[]");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject.quote("icvP3F\"wgU W");
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"\\icvP3F\"wgU W\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"\\icvP3F\"wgU W\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.2540536082248628
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject.quote("-{;/o");
      Float float0 = new Float((-1994.243F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.putOpt("G<-0t", "G<-0t");
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("wheel.json.JSONTokener");
      assertEquals("\"wheel.json.JSONTokener\"", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(181L);
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = (-5L);
      try { 
        jSONObject0.put((String) null, (-5L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2514);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0, 1639, 1639);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("java.lang.Long@0000000001");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Integer integer0 = new Integer(44);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer1 = new Integer(474);
      String string0 = jSONObject0.optString("Z[<XxTAZO%9a ", "Z[<XxTAZO%9a ");
      assertEquals("Z[<XxTAZO%9a ", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = JSONObject.valueToString(boolean0);
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = JSONObject.quote("4,4\n");
      assertEquals("\"4,4\\n\"", string0);
      
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      Function<Object, Boolean> function0 = (Function<Object, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      hashMap0.computeIfAbsent("G<.hq>UQ;-^D<\"!", function0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      String string1 = jSONObject0.toString(13, 13);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4216010062582942
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject.quote(";&\n");
      JSONObject jSONObject0 = new JSONObject((Object) ";&\n");
      jSONObject0.put(";&\n", 0L);
      Long long0 = new Long((-2366L));
      try { 
        jSONObject0.append(";&\n", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[;&
         // ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = (-5L);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (-5L));
      jSONObject1.optInt("wheel.json.JSONArray", 32);
      String string0 = "' and instead saw '";
      JSONTokener jSONTokener0 = new JSONTokener("' and instead saw '");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ' and instead saw '
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.71842219025284
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = JSONObject.quote(";&\n");
      assertEquals("\";&\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"\\;&\n\"");
      jSONObject0.toString();
      Byte byte0 = new Byte((byte)5);
      JSONObject.numberToString(byte0);
      jSONObject0.toString((int) (byte)5, (int) (byte)5);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(1468);
      hashMap0.put((String) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(15);
      // Undeclared exception!
      try { 
        jSONObject0.write(stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7152863051349312
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      StringWriter stringWriter0 = new StringWriter(4);
      stringWriter0.append('>');
      stringWriter0.append((CharSequence) "<Z06kwD`oN");
      Long long0 = new Long(4);
      hashMap0.replace(long0, (Float) null);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "<Z06kwD`oN");
      jSONObject0.write(stringWriter1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("G2A_JD;W9Z*", (Object) null);
      Long long0 = new Long((-4673L));
      String string0 = JSONObject.quote("G2A_JD;W9Z*");
      assertEquals("\"G2A_JD;W9Z*\"", string0);
      
      JSONObject.valueToString(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5538483415669473
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("ismon", "ismon");
      try { 
        jSONObject1.getBoolean("ismon");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ismon\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6425559869377249
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("ismon", "ismon");
      jSONObject1.put("ismon", (-4168L));
      try { 
        jSONObject1.getBoolean("ismon");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ismon\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Double.valueOf((-1551.665339));
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("000");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      String string0 = JSONObject.valueToString(hashMap0, 3, 1015);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5002692973717837
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = JSONObject.quote("-{;/o");
      assertEquals("\"-{;/o\"", string0);
      
      Float float0 = new Float((-1994.243F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      
      String string1 = JSONObject.doubleToString(2123.29);
      assertEquals("2123.29", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt((String) null, (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = JSONObject.quote("^\n");
      assertEquals("\"^\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(76, 76);
      JSONObject.valueToString(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-2491), 59);
      String string0 = "iskeys";
      JSONTokener jSONTokener0 = new JSONTokener("iskeys");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("iskeys");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of iskeys
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = JSONObject.quote("Rve3\"wgU W");
      assertEquals("\"Rve3\\\"wgU W\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1264), (-1264));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3396091171567721
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject.quote("-{;/o");
      Float float0 = new Float((-1994.243F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
      
      String string0 = JSONObject.quote("-{;/o");
      assertEquals("\"-{;/o\"", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-1697L));
      jSONObject0.put("gH'<R", (double) (-1697L));
      jSONObject0.getLong("gH'<R");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("gH'<R"));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Integer integer0 = new Integer((-6254807));
      linkedList0.push(integer0);
      jSONObject0.accumulate("\b", jSONArray0);
      JSONObject.valueToString(jSONObject0);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.017746072809222
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long((-1697L));
      JSONObject.getNames((Object) long0);
      jSONObject0.put("", (-2456.98803322));
      Byte byte0 = new Byte((byte)34);
      hashMap0.put((JSONArray) null, byte0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = "{[Hd\n";
      JSONObject.quote("{[Hd\n");
      JSONTokener jSONTokener0 = new JSONTokener("{[Hd\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or ']' at character 5 of {[Hd
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = JSONObject.getNames((Object) boolean0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(",\n", stringArray0);
      JSONObject jSONObject2 = jSONObject1.append(",\n", jSONObject0);
      Object object0 = new Object();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      jSONObject2.optString(",\n", "isput");
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put((-1997.5));
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("istoUpperCase", "istoUpperCase");
      Float float0 = new Float((-778.1F));
      Float float1 = new Float((-778.1F));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "istoUpperCase");
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Long long0 = new Long(0L);
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(long0, biFunction0);
      StringWriter stringWriter0 = new StringWriter(4);
      StringWriter stringWriter1 = stringWriter0.append('+');
      stringWriter0.append((CharSequence) "<Z06kwD`oN");
      stringWriter1.append((CharSequence) "<Z06kwD`oN");
      boolean boolean0 = jSONObject0.isNull("<Z06kwD`oN");
      assertTrue(boolean0);
      
      jSONObject0.optJSONObject("<Z06kwD`oN");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (-5L));
      jSONObject1.getDouble("wheel.json.JSONArray");
      String string0 = "] is not a JSONObject.";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ] is not a JSONObject.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1383515773601602
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (-5L));
      JSONObject jSONObject2 = jSONObject1.put("Unclosed comment", 0.0);
      jSONObject2.put("Unclosed comment", (-5L));
      String string0 = jSONObject1.toString(2770);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append((CharSequence) string0);
      Double double0 = Double.valueOf((-514.3392068252556));
      jSONObject1.put("wheel.json.JSONArray", 0L);
      JSONObject jSONObject3 = new JSONObject(string0);
      JSONObject.testValidity("Unclosed comment");
      jSONObject2.toString(8, 2137);
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      JSONTokener jSONTokener0 = new JSONTokener("=fbt#lPxWNTs/pC{g_1");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 0 of =fbt#lPxWNTs/pC{g_1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0231815516091443
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", (Map) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("G2A_JD;W9Z*", (Collection) linkedList0);
      Long long0 = new Long((-4673L));
      jSONObject1.getJSONObject("is");
      int int0 = (-54582779);
      jSONObject1.toString((-54582779), (-54582779));
      JSONObject.quote("G2A_JD;W9Z*");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of is
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("' f=c3X#FO8,vs", (double) (-27L));
      double double0 = jSONObject0.optDouble("' f=c3X#FO8,vs", (double) (-27L));
      assertEquals((-27.0), double0, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.append("gettoString", jSONArray0);
      jSONObject1.optJSONArray("gettoString");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{0;-SB^&J'U8!X>^");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {0;-SB^&J'U8!X>^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{7<%%el9Hq$+<: w=^");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 17 of {7<%%el9Hq$+<: w=^
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONArray";
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      jSONObject0.putOpt("wheel.json.JSONArray", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("istoUpperCase", "istoUpperCase");
      Long long0 = new Long((-1697L));
      JSONObject jSONObject2 = jSONObject0.put("isparseBoolean", (double) (-1697L));
      Byte byte0 = new Byte((byte)34);
      Byte byte1 = new Byte((byte)34);
      jSONObject2.getJSONArray("istoUpperCase");
      jSONObject1.optJSONArray("'");
      String string0 = JSONObject.quote("toU");
      assertEquals("\"toU\"", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("[]", true);
      boolean boolean0 = jSONObject0.getBoolean("[]");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long long0 = new Long((-4673L));
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      String string1 = JSONObject.doubleToString((-54582779));
      assertEquals("-5.4582779E7", string1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Double double0 = new Double(1298.04168);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("ismon", "ismon");
      jSONObject0.put("ismon", false);
      jSONObject1.keys();
      jSONObject1.getBoolean("ismon");
      Object object0 = JSONObject.NULL;
      Double double1 = new Double(1298.04168);
      JSONObject.testValidity(jSONObject1);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      hashMap0.put(jSONObject0, jSONObject0);
      jSONObject0.put("wheel.json.JSONArray", (Map) hashMap0);
      Integer integer0 = new Integer((-54582745));
      JSONObject jSONObject1 = jSONObject0.optJSONObject("wheel.json.JSONArray");
      assertNotNull(jSONObject1);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("is~6Uppe@rC|se", "true");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.getBoolean("is~6Uppe@rC|se");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("is~6Uppe@rC|se");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of is~6Uppe@rC|se
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.0551149578337586
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Byte byte0 = new Byte((byte) (-36));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "is~6Uppe@rC|se";
      stringArray0[1] = "is~6Uppe@rC|se";
      stringArray0[2] = "is~6Uppe@rC|se";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optBoolean("geG1T");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("is~6Uppe@rC|se", object0);
      jSONObject1.keys();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject1.getBoolean("is~6Uppe@rC|se");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is~6Uppe@rC|se\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject.quote(".1,L_</#o0m`$}Eak");
      String string0 = Long.toUnsignedString((-141L));
      assertEquals("18446744073709551475", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = "{7<%%el9Hq$+< w=";
      JSONTokener jSONTokener0 = new JSONTokener("{7<%%el9Hq$+< w=");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 15 of {7<%%el9Hq$+< w=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Short short0 = new Short((short)3);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.putOpt("false", "false");
      jSONObject0.getBoolean("false");
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }
}
