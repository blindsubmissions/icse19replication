/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:25:35 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1153));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger((-1153));
      int int0 = advancedSettings0.getSocketLinger();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1153), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketTrafficClass("8!7d75%|sHsEf4nk6f#");
      advancedSettings0.setByteBufferSize(383);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(0);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset((String) null);
      int int0 = (-4284);
      advancedSettings0.setPerformancePreferencesBandwidth((-4284));
      advancedSettings0.setSocketLinger((-3339));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-53));
      advancedSettings0.setPerformancePreferencesLatency((-53));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-1042));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals((-53), advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-53), int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize((-2394));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-3098));
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("(S9B+RgJT-9.@.`X");
      advancedSettings0.setPerformancePreferencesLatency((-3098));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-1466));
      advancedSettings0.setDebugNonBlockingMode(true);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("</performance-preferences-connection-time>\n");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals("</performance-preferences-connection-time>\n", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientIdentifier("</client-socket-send-buffer-size>\n");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-send-buffer-size>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-send-buffer-size>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = "@M>$J(S }C&Ha";
      advancedSettings0.setSocketLinger(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-traffic-class>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-traffic-class>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(11);
      String string0 = "L(?X=&<yp<";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("L(?X=&<yp<");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // L(?X=&<yp<
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesBandwidth((-135));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("'K/)6*2h");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      assertEquals((-135), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency(2919);
      advancedSettings0.setClientSocketSendBufferSize(2919);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(2433);
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(2919, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("n!o57CCc!1G1ZC");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setSocketLinger((-2691));
      advancedSettings0.setMaxThreadsForNioWrite((-1926));
      advancedSettings0.getDebugNonBlockingMode();
      assertEquals((-2691), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger((-164));
      advancedSettings0.setSocketLinger((-164));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setSocketLinger((-2582));
      advancedSettings0.setClientIdentifier("`O  6I$*f7s~@|:6#");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setByteBufferSize((-164));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setSocketLinger(33);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesLatency((-216));
      assertEquals("`O  6I$*f7s~@|:6#", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setBacklog(426);
      assertEquals(426, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("M&YWaU=7f-8X>)");
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = true;
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setQSObjectPoolMaker("dsa");
      boolean boolean1 = false;
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("sa");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // sa
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize((-440));
      advancedSettings0.setBacklog((-4011));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize((-440));
      advancedSettings0.setClientIdentifier("j");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setSocketLinger(752);
      advancedSettings0.toXML("Q+tu{hQwPv~");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("-1Z@HU\",orM%k_a<G)X");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -1Z@HU\",orM%k_a<G)X
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setBacklog((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setByteBufferSize(591);
      advancedSettings0.setPerformancePreferencesBandwidth(985);
      advancedSettings0.setBacklog(985);
      advancedSettings0.setPerformancePreferencesConnectionTime(985);
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.toXML("yO[en0u");
      advancedSettings0.setPerformancePreferencesLatency(591);
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(2433);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      advancedSettings0.setByteBufferSize(378);
      advancedSettings0.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      assertEquals(985, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("6)wD");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger((-2241));
      advancedSettings0.setMaxThreadsForNioWrite((-2241));
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setBacklog((-2241));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML("vOaNS{Vl~/G!^");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.toXML(",78!^75PhW~xZrXj");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setQSObjectPoolMaker("vOaNS{Vl~/G!^");
      advancedSettings0.getCharset();
      assertEquals((-2241), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(4939);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize((-1));
      assertEquals(4939, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setByteBufferSize(3715);
      assertEquals(3715, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.toXML("</debug-non-blocking-mode>\n");
      advancedSettings0.setSocketLinger((-1523));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize((-1523));
      advancedSettings0.setMaxThreadsForNioWrite(817);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setSocketLinger(10);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }
}
