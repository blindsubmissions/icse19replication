/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 12:09:07 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9689972972005365
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("!^!goMvOP2}r_ADpQR");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("!^!goMvOP2}r_ADpQR");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9371836611247049
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("atives");
      assertEquals("ativ", string0);
      
      lovinsStemmer0.stem("fitend");
      String string1 = lovinsStemmer0.stem("fitens");
      assertEquals("fiten", string1);
      
      String string2 = lovinsStemmer0.stemString("erisend");
      assertEquals("erisens", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9680065317199433
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Machine Learning");
      String string0 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString(":[j.+m)}x+J6aY/D~fz");
      String string1 = lovinsStemmer3.stemString("mach learn");
      assertEquals("mach learn", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.069660184529402
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("rud");
      assertEquals("rus", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("-UQ");
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stem("VzsM\"8sF!;@hgA");
      assertEquals("vzsm\"8sf!;@hg", string2);
      
      lovinsStemmer0.stem("+_/EVC}x,Q");
      lovinsStemmer0.stemString("");
      String string3 = lovinsStemmer0.stemString("evaAr ");
      assertEquals("evaar ", string3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9847659851312066
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The work's title, typed as explained in the LaTeX book.");
      assertEquals("th work titl, typ as explain in th latic book.", string0);
      
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer0.stem("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      assertTrue(string3.equals((Object)string1));
      
      String string4 = lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      assertEquals("th year of publ or, for an unpubl work, th year it wa writ. gener it should con of four numer, such as 1984, although th standard styl can handl any year who last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.981432209061683
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The organization that sponsors a conference or that publishes a manual.";
      stringArray0[1] = "th organ that sponsor a confer or that publish a manu.";
      stringArray0[2] = "A Master's thesis.";
      stringArray0[3] = "The organization that sponsors a conference or that publishes a manual.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("th organ that sponsor a confer or that publish a manu.");
      String string0 = lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      assertEquals("th organ that sponsor a confer or that publish a manu.", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Problem reading local properties: ");
      assertEquals("problem read loc propers: ", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9841870919496665
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("ifully");
      lovinsStemmer0.stemString("ifully");
      lovinsStemmer0.stemString("ifl");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.stemmers.LovinsStemmer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9935807440619877
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("How something strange has been published. The first word should be captalized.");
      lovinsStemmer0.stem("how someth strang ha been publ. th first word should be captal.");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("How something strange has been published. The first word should be captalized.");
      assertEquals("how someth strang ha been publ. th first word should be captal.", string1);
      
      lovinsStemmer0.stem("how someth strang ha been publ. th first word should be captal.");
      lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be captal.");
      String string2 = lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capt.");
      assertEquals("how someth strang ha been publ. th first word should be capt.", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9722194872618366
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stemString("mustlud");
      String string1 = lovinsStemmer0.stemString("mustlud");
      assertEquals("mustlus", string1);
      
      String string2 = lovinsStemmer0.stemString("mustlus");
      assertEquals("mustlus", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0216825800692961
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer2.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.stem("doublert");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.stemmers.LovinsStemmer", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1431359387534687
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("8034cid");
      String string1 = lovinsStemmer0.stemString("h)es%end");
      assertEquals("h)es%ens", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer0.stemString("#DduS=yD9w]7G|F+k");
      assertEquals("#ddus=yd9w]7g|f+k", string3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ationA");
      assertEquals("ation", string0);
      
      String string1 = lovinsStemmer0.stem("ation");
      assertEquals("ation", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0472665798410326
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("end");
      assertEquals("ens", string0);
      
      lovinsStemmer0.stem("Freund, Y. and Mason, L.");
      String string1 = lovinsStemmer0.stemString("freund, y. and mason, l.");
      assertEquals("freund, y. and mason, l.", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0654894137192743
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("howpublished");
      assertEquals("howpubl", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("0jbix");
      assertEquals("0jbic", string1);
      
      lovinsStemmer0.stemString("cSvb;kZ1^-0Jb");
      lovinsStemmer0.stemString("N#");
      String string2 = lovinsStemmer0.stemString("k'L5TyaL,z");
      assertEquals("k'l5ty,z", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.002751586376685
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("erid");
      assertEquals("eris", string0);
      
      lovinsStemmer0.stem("Q8.N'L;%hIT)9F.[^x");
      lovinsStemmer0.stem("Q8.N'L;%hIT)9F.[^x");
      String string1 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.mit");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.mis", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.014235953284152
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("hitpand");
      lovinsStemmer0.stem("hitpand");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string0);
      
      String string1 = lovinsStemmer0.stemString("invalis cv revis - not enough part separ by dot!");
      assertEquals("inval cv rev - not enough part separ by dot!", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.014235953284152
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("idond");
      assertEquals("idons", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string1);
      
      String string2 = lovinsStemmer0.stemString("invalis cv revis - not enough part separ by dot!");
      assertEquals("inval cv rev - not enough part separ by dot!", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0450901618075912
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("wbzh4jkvad");
      lovinsStemmer0.stemString("eh:7FH&ZbYvh*~D\"");
      lovinsStemmer0.stem("eh:7FH&ZbYvh*~D\"");
      String string0 = lovinsStemmer0.stemString("dex");
      assertEquals("dic", string0);
      
      String string1 = lovinsStemmer0.stemString("2oADO.S[*uX{J]}{");
      assertEquals("2oad.s[*ux{j]}{", string1);
      
      lovinsStemmer0.stemString("idine");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("mustzlucex");
      assertEquals("mustzlucec", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9943474300935294
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("idax");
      assertEquals("idac", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("VzsM\"8sF!;@hgA");
      assertEquals("vzsm\"8sf!;@hg", string1);
      
      lovinsStemmer0.stem("+_/EVC}x,Q");
      lovinsStemmer0.stemString("");
      String string2 = lovinsStemmer0.stemString("evaAr ");
      assertEquals("evaar ", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0285012855549123
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string0);
      
      String string1 = lovinsStemmer0.stemString("GGg.mXCKy0xwqpV");
      assertEquals("gg.mxcky0xwqpv", string1);
      
      lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capital.");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stem("How something strange has been published. The first word should be capitalized.");
      assertEquals("how something strange has been published. the first word should be capitalized.", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0984139995809032
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ewyyt");
      assertEquals("ewyys", string0);
      
      String string1 = lovinsStemmer0.stemString("6|GvOn<2'}Z>Ot-");
      assertEquals("6|gvon<2'}z>ot-", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("e=6#!V{lZCQWhZ(hYu");
      assertEquals("e=6#!v{lzcqwhz(hyu", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.002727982931539
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("her");
      assertEquals("hes", string0);
      
      lovinsStemmer0.stem("probToLogOdds: probability must be in [0,1] ");
      lovinsStemmer0.stem("Sorted array (doubles): ");
      String string1 = lovinsStemmer0.stemString("probtologodds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0472665798410326
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("mustpex");
      assertEquals("mustpic", string0);
      
      lovinsStemmer0.stem("Freund, Y. and Mason, L.");
      String string1 = lovinsStemmer0.stemString("freund, y. and mason, l.");
      assertEquals("freund, y. and mason, l.", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9854344116600984
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(":JQV|`");
      lovinsStemmer0.stem("mustyzlux");
      lovinsStemmer0.stem("Usually the address of the publisher or othe type of institution. For major publishing hous|s, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you an help the reader by giving the complete address.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer0.stemString("usually the address of the publisher or othe type of institution. for major publishing hous|s, van leunen recommends omitting the information entirely. for small publishers, on the other hand, you an help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or oth typ of institut. for major publish hous|s, van leun recommens omis th inform entir. for smal publishes, on th other hand, you an help th reader by giv th comples addres.", string0);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("phzplahbex");
      String string1 = lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.mit");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.mis", string1);
      
      lovinsStemmer1.stem("hY_SG0I #@'y@N:7Y(");
      String string2 = lovinsStemmer1.stemString("P$a uG<7EL)V");
      assertEquals("p$a ug<7el)v", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lovinsstemm}ryz");
      assertEquals("lovinsstemm}rys", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("acies");
      assertEquals("aci", string1);
      
      String string2 = lovinsStemmer0.stem("aci");
      assertEquals("ac", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0269528316950722
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer1.stemString("Fatal error.");
      assertEquals("fat error.", string1);
      
      lovinsStemmer1.stem("y}");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("fat error.");
      lovinsStemmer2.stemString("a#hqJu6B85wWrM");
      lovinsStemmer2.stemString("8034");
      String string2 = lovinsStemmer1.stem("Fatal error.");
      assertEquals("fatal error.", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "invalid CVS reviKion < not enough parts separated by dots!";
      String string0 = lovinsStemmer0.stem("olv");
      assertEquals("olut", string0);
      
      String string1 = lovinsStemmer0.stemString("+_/EVC}x,Q");
      assertEquals("+_/evc}x,q", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("y}");
      assertEquals("y}", string0);
      
      lovinsStemmer0.stem("8034");
      String string1 = lovinsStemmer0.stem("t,s`9A<%NeZ1FWNYL");
      assertEquals("t,s`9a<%nez1fwn", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.032201416351942
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("uruad");
      assertEquals("uruas", string1);
      
      String string2 = lovinsStemmer0.stemString("uruas");
      assertEquals("uru", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stem("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      assertTrue(string1.equals((Object)string0));
      
      String string2 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0688272578789668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("her");
      assertEquals("hes", string0);
      
      String string1 = lovinsStemmer0.stemString("hes");
      assertEquals("he", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("cKVgaz'r&sGLSum$X#");
      String string2 = lovinsStemmer0.stemString("cKVgaz'r&sGLSum$X#");
      assertEquals("ckvgaz'r&sglsum$x#", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The volume of a journal or multi-volume book.");
      lovinsStemmer0.stemString("th volum of a journ or mult-volum book.");
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("d`]DIev: Ig");
      assertEquals("d`]dief: ig", string0);
      
      lovinsStemmer0.stem("yl");
      lovinsStemmer0.stemString("tex");
      String string1 = lovinsStemmer0.stem("tex");
      assertEquals("tic", string1);
      
      lovinsStemmer0.stemString("A}I:.");
      String string2 = lovinsStemmer0.stemString("d1:=x4rOni=H");
      assertEquals("d1:=x4ron=h", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.062911758989169
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "otide";
      stringArray0[1] = "otide";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.stemString("otide");
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "otide";
      String string0 = lovinsStemmer0.stem("yt");
      assertEquals("yt", string0);
      
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string1);
      
      lovinsStemmer0.stemString("qtmdex");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("\"ZqD5cnB2l?fvupp");
      assertEquals("\"zqd5cnb2l?fvup", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("hrpher");
      lovinsStemmer0.stem("hrpher");
      String string0 = lovinsStemmer0.stemString("hrpher");
      assertEquals("hrpher", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("hk");
      lovinsStemmer0.stemString("hk");
      String string0 = lovinsStemmer0.stemString("|}#@IVH\"/Q /t=K");
      assertEquals("|}#@ivh\"/q /t=k", string0);
      
      String string1 = lovinsStemmer0.stemString("i@*OrR;YT+");
      assertEquals("i@*or;yt+", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("8sfyt");
      assertEquals("8sfys", string0);
      
      String string1 = lovinsStemmer0.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string0);
      
      lovinsStemmer1.stemString("induc of decis tree");
      String string1 = lovinsStemmer0.stem("induc of decis tree");
      assertEquals("induc of decis tre", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      String string1 = lovinsStemmer0.stemString("A}:.");
      assertEquals("a}:.", string1);
      
      String string2 = lovinsStemmer0.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      assertEquals("usu th addr of th publish or other typ of institut. for major publ hous, van leun recommen om th inform entir. for smal publish, on th other hand, you can help th reader by giv th compl addr.", string2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.014235953284152
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("ating");
      assertEquals("ating", string0);
      
      String string1 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string1);
      
      String string2 = lovinsStemmer0.stemString("invalis cv revis - not enough part separ by dot!");
      assertEquals("inval cv rev - not enough part separ by dot!", string2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0258476703739292
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "6.]|Xv*FP";
      stringArray0[1] = "evaaruad";
      stringArray0[2] = "27oU[@GD$>=m%";
      stringArray0[3] = "ll";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("f6Z>");
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Q8.N'L;%hIT)9F.[^x");
      String string0 = lovinsStemmer0.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string0);
      
      String string1 = lovinsStemmer0.stem("Q8.N'L;%hIT)9F.[^x");
      assertEquals("q8.n'l;%hit)9f.[^x", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("hoi%ulished");
      assertEquals("ho%l", string0);
      
      String string1 = lovinsStemmer0.stemString("ho%l");
      assertEquals("ho%l", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      String string0 = lovinsStemmer0.stem("rpt");
      assertEquals("rb", string0);
      
      String string1 = lovinsStemmer0.stemString("Gd>VhQ3Zm/");
      assertEquals("gd>vhq3zm/", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("dotrud");
      assertEquals("dotrus", string0);
      
      String string1 = lovinsStemmer0.stemString("n9bb I{jg>");
      assertEquals("n9b i{jg>", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("}:jHmUM~");
      assertEquals("}:jhm~", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("oul/");
      assertEquals("oul/", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("invalid CVS revLion - not eough part? separatedzbd dots!");
      assertEquals("invalis cv revlion - not eough part? separatedzbd dot!", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[6];
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      stringArray0[3] = "Sortedarray (doubles): ";
      String string1 = lovinsStemmer0.stemString("eTi?");
      assertEquals("es?", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("8034");
      String string1 = lovinsStemmer0.stemString("esenet");
      assertEquals("esenet", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer0.stemString("1ga{\"RMwOfeeN^");
      assertEquals("1g{\"rmwofeen^", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("h)es%end");
      String string1 = lovinsStemmer0.stemString("#DcuS=y9w]7G|F+k");
      assertEquals("#dc=y9w]7g|f+k", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.stemString("Fatal error.");
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("XE/eaul)~ZX,rq0i");
      assertEquals("xe/eaul)~zx,rq0", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("Fatal error.");
      assertEquals("fat error.", string3);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0859090605747141
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("3iaR)|f%CRdNPW");
      assertEquals("3i)|f%crdnpw", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = "WRYL-{tDf8GX7M\"w";
      lovinsStemmer0.stemString("WRYL-{tDf8GX7M\"w");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.stemmers.LovinsStemmer", e);
      }
  }
}
