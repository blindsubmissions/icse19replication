/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:59:36 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      
      boolean boolean0 = discretize0.m_FindNumBins;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("8964", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("unknown(");
      int[] intArray0 = new int[22];
      discretize0.setIgnoreClass(false);
      intArray0[4] = 1083;
      intArray0[6] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.findNumBinsTipText();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-1838.2979);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[1] = 1.0;
      doubleArray2[3] = 1.0;
      double[] doubleArray3 = new double[9];
      doubleArray1[5] = 1.0;
      doubleArray3[1] = 0.0;
      doubleArray3[4] = (-1838.2979);
      doubleArray3[5] = 1.0;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = 1.0;
      doubleArray0[3] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[1] = 2244.684;
      doubleArray2[2] = 1.0;
      double[] doubleArray5 = new double[0];
      doubleArray0[5] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[6] = doubleArray6;
      double[] doubleArray7 = new double[0];
      discretize0.m_CutPoints = doubleArray0;
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(66);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 66
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Discretize.main(stringArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-1330));
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9652370493802307
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "S=M^43kbx{&";
      Discretize discretize0 = new Discretize("S=M^43kbx{&");
      discretize0.m_DiscretizeCols = null;
      discretize0.listOptions();
      int int0 = 33;
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.133628922152431
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xE");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      
      discretize0.getBinRangesString(1);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.makeBinaryTipText();
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("[Weka] Problem loading package ");
      String string0 = discretize0.binsTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("xE");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9850531879046147
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][0];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "w@XNfRbPs~|#No2Q";
      stringArray0[1] = "-M";
      stringArray0[2] = "2Pi=b";
      stringArray0[3] = "3EBa\"B{pwx)=u[NZk";
      stringArray0[4] = "NNuT,k44#=N=T.*gs";
      stringArray0[5] = "iO3 jE<";
      stringArray0[6] = "&l8t";
      stringArray0[7] = "LEIzrvJx`{o&";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-B";
      stringArray0[1] = "!~IGR%,:)-Ru[}{";
      stringArray0[2] = "'3~=2Ffd";
      stringArray0[3] = "   * @param format\tthe data format to use\n";
      stringArray0[4] = "~_B :|)#uBsx#I";
      stringArray0[5] = "&xL}]w";
      Filter.runFilter(discretize0, stringArray0);
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null, (-187), (-187));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2685350920163807
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[6][0];
      discretize0.m_CutPoints = doubleArray0;
      int int0 = 2;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "N+9";
      stringArray0[1] = "Variance: ";
      stringArray0[2] = "inf";
      stringArray0[3] = "Ty =31z!e]PZdJl\"7";
      stringArray0[4] = "-R";
      stringArray0[5] = "s$!'e)7@d&:`";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: N+9 Variance:  inf Ty =31z!e]PZdJl\"7 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("S=M^;3kbx{&");
      discretize0.m_DiscretizeCols = null;
      byte[] byteArray0 = new byte[1];
      discretize0.setUseEqualFrequency(true);
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize(" instances from ");
      discretize0.m_MakeBinary = true;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize("^:2]");
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize(" ");
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/");
      arrayList0.add(attribute0);
      discretize0.m_MakeBinary = true;
      Instances instances0 = new Instances(".m", arrayList0, 0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("S=M^43kbx{&");
      discretize0.m_DiscretizeCols = null;
      discretize0.setFindNumBins(true);
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][0];
      double[] doubleArray1 = new double[3];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-885.0628569);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 2897.67;
      doubleArray2[3] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = (-885.0628569);
      doubleArray3[3] = 2897.67;
      doubleArray3[4] = 0.0;
      doubleArray3[5] = (-885.0628569);
      doubleArray3[6] = (-885.0628569);
      doubleArray3[7] = 2897.67;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[13];
      doubleArray4[2] = 0.0;
      doubleArray3[7] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-1726));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1726
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize("S=M^kbx&");
      discretize0.getOptions();
      discretize0.setMakeBinary(true);
      Instances instances0 = null;
      discretize0.m_IgnoreClass = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5345497796724494
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setUseEqualFrequency(true);
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", 2);
      arrayList0.add(attribute0);
      discretize0.setIgnoreClass(true);
      Instances instances0 = new Instances(".m", arrayList0, 0);
      attribute0.toString();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.put("weka.filters.SimpleFilter", protectedProperties0);
      Attribute attribute0 = new Attribute("weka.filters.SimpleFilter", arrayList0, protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList1, 4);
      instances0.stringFreeStructure();
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      discretize1.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualWidthBinning((-1493));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1493
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.429919372567885
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", 2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(".m", arrayList0, 0);
      attribute0.toString();
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4637482107991966
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("apWAzu%GXzUr./qq(");
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances("relational", arrayList0, 0);
      Instances instances1 = new Instances("relational", arrayList0, 2);
      discretize0.setInputFormat(instances1);
      instances0.toString();
      instances0.sort(4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      instances0.add((Instance) binarySparseInstance0);
      Filter.useFilter(instances0, discretize0);
      Instances instances2 = null;
      try {
        instances2 = new Instances(instances1, 3, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5410742055645152
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("apWAzu%GXzUr./qq(");
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances(".m", arrayList0, 0);
      Instances instances1 = new Instances("relational", arrayList0, 2);
      discretize0.setInputFormat(instances1);
      Instances instances2 = new Instances("@attribute", arrayList0, 1);
      instances2.toString();
      instances0.sort(0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      sparseInstance0.setMissing(attribute0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      discretize0.convertInstance(sparseInstance0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      sparseInstance0.setMissing(14);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\"*hM/0RR=Aj");
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-2124392423));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2124392423
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6243199214581634
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine("E<");
      Attribute attribute0 = new Attribute("WsUdcIW Me!A8I%", 125);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("O^nzYqa~>u^j~", arrayList0, 3);
      discretize0.setInputFormat(instances0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      attribute0.addStringValue(attribute0, 4);
      discretize0.batchFinished();
      Filter.useFilter(instances0, discretize0);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 360;
      doubleArray0[2] = (double) 360;
      doubleArray0[5] = (double) 360;
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      discretize0.input(denseInstance0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("weka.filters.SimpleFilter", arrayList0, protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList1, 4);
      instances0.stringFreeStructure();
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "integer";
      stringArray0[1] = "relational";
      stringArray0[2] = "relational";
      stringArray0[3] = "@relation";
      stringArray0[4] = "integer";
      try { 
        Filter.filterFile(discretize1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: integer relational relational @relation integer 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6818744551297216
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine("CaEnot handle dRte");
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", 2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("pW-zu%GXzUr./'q/", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.convertInstance(sparseInstance0);
      discretize0.getBinRangesString(0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.065091515505754
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", 2);
      Instances instances0 = new Instances("@end", arrayList0, 10);
      attribute0.toString();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_UseEqualFrequency = true;
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'pW-zu%GXzUr./'q/' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8946891171539901
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/");
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances(".m", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      arrayList0.add(attribute0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8989267893363286
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/");
      discretize0.setDesiredWeightOfInstancesPerInterval(4);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(".m", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      attribute0.getRevision();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("weka.filters.SimpleFilter", arrayList0, protectedProperties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList1, 4);
      instances0.stringFreeStructure();
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      discretize1.batchFinished();
      discretize0.setInputFormat(instances0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      // Undeclared exception!
      try { 
        discretize1.convertInstance(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("apWAzu%GXzUr./qq(");
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances(".m", arrayList0, 0);
      Instances instances1 = new Instances("relational", arrayList0, 2);
      discretize0.m_UseEqualFrequency = true;
      Instances instances2 = new Instances("@attribute", arrayList0, 1);
      instances2.toString();
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.m_NumBins = 48;
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", 2);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 48);
      attribute0.toString();
      instances0.setClass(attribute0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'pW-zu%GXzUr./'q/' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", 2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("m", arrayList0, 0);
      discretize0.m_NumBins = 0;
      attribute0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      arrayList0.add(attribute0);
      discretize0.isNewBatch();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(360);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("WsUdcIW Me!A8I%", 3036);
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = new Instances("date", arrayList0, 539);
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      discretize0.setInputFormat(instances0);
      discretize0.getBinRangesString((-661));
      discretize0.calculateCutPoints();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", 2);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 10);
      attribute0.toString();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) attribute0);
      predicate0.negate();
      Predicate.isEqual((Object) arrayList0);
      attribute0.toString();
      Discretize discretize1 = new Discretize("");
      assertFalse(discretize1.getMakeBinary());
      
      discretize1.setInputFormat(instances0);
      boolean boolean0 = discretize1.batchFinished();
      assertFalse(boolean0);
      assertTrue(discretize1.isNewBatch());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseBinNumbers());
      
      discretize0.setInputFormat(instances0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "J1&");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[5][2];
      discretize0.m_UseBinNumbers = false;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[2] = 0.04355073285794564;
      doubleArray0[4] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray2;
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      double[] doubleArray3 = new double[6];
      doubleArray3[1] = Double.NEGATIVE_INFINITY;
      doubleArray3[2] = 0.04355073285794564;
      doubleArray3[3] = Double.NEGATIVE_INFINITY;
      doubleArray3[4] = 0.04355073285794564;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray0[4] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getBinRangesString(1);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      Attribute attribute0 = new Attribute("apWAzu%GXzUr./qq(");
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances(".m", arrayList0, 0);
      Instances instances1 = new Instances("relational", arrayList0, 2);
      discretize0.setInputFormat(instances1);
      Instances instances2 = new Instances("@attribute", arrayList0, 1);
      MockRandom mockRandom0 = new MockRandom();
      instances2.randomize(mockRandom0);
      instances0.sort(0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      discretize0.convertInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-2124392423));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2124392423
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.112383902386424
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      discretize0.m_NumBins = 48;
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", 2);
      attribute0.setWeight(48);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList0, 48);
      attribute0.toString();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      instances0.add((Instance) binarySparseInstance0);
      discretize0.setMakeBinary(true);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'pW-zu%GXzUr./'q/' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("apWAzu%GXzUr./qq(");
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "real");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "@attribute");
      Instances instances0 = new Instances("m", arrayList0, 0);
      Instances instances1 = new Instances("relational", arrayList0, 2);
      discretize0.setInputFormat(instances1);
      Instances instances2 = new Instances("@attribute", arrayList0, 1);
      instances2.toString();
      instances1.setClass(attribute0);
      instances0.sort(1);
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.setInputFormat(instances1);
      Attribute attribute1 = new Attribute("@data", instances0);
      discretize0.setMakeBinary(true);
      Filter.useFilter(instances2, discretize0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[5] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      discretize0.input(sparseInstance0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("apWAzu%GXzUr./qq(");
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      Instances instances0 = new Instances("m", arrayList0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      instances0.add((Instance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'apWAzu%GXzUr./qq(' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 3109;
      Attribute attribute0 = new Attribute("\tUse bin numbers rather than ranges for discretized attributes.", 3109);
      Instances instances0 = new Instances("integer", arrayList0, 2);
      attribute0.toString();
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      instances0.add((Instance) sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '\tUse bin numbers rather than ranges for discretized attributes.' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.473633818304346
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", (-2));
      Instances instances0 = new Instances("@end", arrayList0, 10);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_UseEqualFrequency = true;
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      Instances instances2 = new Instances(instances0, 2, (-545));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.setMakeBinary(true);
      Filter.useFilter(instances1, discretize0);
      Instances instances3 = Filter.useFilter(instances1, discretize0);
      // Undeclared exception!
      try { 
        instances3.variance(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", (-2));
      Instances instances0 = new Instances("@end", arrayList0, 10);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance0);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'pW-zu%GXzUr./'q/' 'pW-zu%GXzUr./'q/' 'pW-zu%GXzUr./'q/' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", (-2));
      Instances instances0 = new Instances("@end", arrayList0, 10);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance1);
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances0, 2, (-545));
      instances1.add((Instance) binarySparseInstance1);
      try { 
        Filter.useFilter(instances1, discretize0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'pW-zu%GXzUr./'q/' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.116391822669907
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = (-2);
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", (-2));
      Instances instances0 = new Instances("@end", arrayList0, 10);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_UseEqualFrequency = true;
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance1);
      int int1 = (-545);
      Instances instances1 = new Instances(instances0, 2, (-545));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.setMakeBinary(true);
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      try { 
        Filter.useFilter(instances0, discretize1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'pW-zu%GXzUr./'q/_1' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("apWAzu%GXzUr./qq(");
      arrayList0.add(attribute0);
      discretize0.m_FindNumBins = true;
      Instances instances0 = new Instances("relational", arrayList0, 0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) sparseInstance0);
      Instances instances1 = new Instances("relational", arrayList0, 2);
      discretize0.setInputFormat(instances1);
      instances0.toString();
      instances0.sort(4);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      instances0.add((Instance) binarySparseInstance1);
      Filter.useFilter(instances0, discretize0);
      Instances instances2 = null;
      try {
        instances2 = new Instances(instances1, 3, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = (-2);
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", (-2));
      Instances instances0 = new Instances("@end", arrayList0, 10);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_UseBinNumbers = true;
      discretize0.m_UseEqualFrequency = true;
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance1);
      int int1 = (-545);
      Instances instances1 = new Instances(instances0, 2, (-545));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.setMakeBinary(true);
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      try { 
        Filter.useFilter(instances0, discretize1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'pW-zu%GXzUr./'q/_1' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.481578812296775
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", (-2));
      Instances instances0 = new Instances("@end", arrayList0, 10);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_UseEqualFrequency = true;
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      Instances instances2 = new Instances(instances1, 2, 1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      discretize0.setMakeBinary(true);
      Instances instances3 = Filter.useFilter(instances1, discretize0);
      Filter.useFilter(instances3, discretize0);
      Instances instances4 = null;
      try {
        instances4 = new Instances(".arff", arrayList0, (-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -545
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("pW-zu%GXzUr./'q/", (-2));
      Instances instances0 = new Instances("@end", arrayList0, 10);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_UseEqualFrequency = true;
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      Filter.useFilter(instances0, discretize0);
      discretize0.convertInstance(binarySparseInstance1);
      System.setCurrentTimeMillis((-2300L));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(613566757);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 613566757
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
