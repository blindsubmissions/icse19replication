/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 12:05:59 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBResultSet;
import org.h2.value.ValueLobDb;
import org.hsqldb.rowio.RowOutputBinary;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[21];
      String string0 = SQLUtil.join("", (String) null, stringArray0, "er6Al-*", (String) null, stringArray0);
      assertEquals("er6Al-* as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.30682915344097056
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("3:f(|-^LU]~eNk$**", false);
      assertEquals("3 : f (| - ^ LU ] ~ eNk $ * *", string0);
      
      boolean boolean0 = SQLUtil.isQuery("renameinserti8*}ul");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.29113983883196504
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = SQLUtil.normalize("3`*;|^/[v-5,", true);
      assertEquals("3 ` * ; | ^ / [ v - 5,", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("vt`Z3I{=");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "vt`Z3I{=";
      stringArray0[1] = ",64q";
      stringArray0[2] = ",64q";
      stringArray0[3] = "3`*;|^/[v-5,";
      stringArray0[4] = ",64q";
      stringArray0[5] = "vt`Z3I{=";
      stringArray0[6] = "3 ` * ; | ^ / [ v - 5,";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "3`*;|^/[v-5,", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(",64q", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2256), "vt`Z3I{=");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(",64q", dBTable0, dBDataType0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(",64q VT`Z3I{= NULL", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9998704205025657
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("updte");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "UNIQUE ", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("updte");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("updte", true, dBPrimaryKeyConstraint0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      stringArray0[0] = "updte";
      stringArray0[1] = "updte";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("updte", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.normalize("updte", true);
      SQLUtil.normalize("3:f(|-^LU]~eNk$**", false);
      StringBuilder stringBuilder0 = new StringBuilder("updte");
      NameSpec nameSpec0 = NameSpec.NEVER;
      FKChangeRule fKChangeRule0 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec1);
      assertEquals("updteCONSTRAINT updte ", stringBuilder0.toString());
      
      Boolean boolean0 = SQLUtil.mutatesStructure("updte");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SQLUtil.normalize("1ernAl-*", true);
      assertEquals("1ernAl - *", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1ernAl - *");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1ernAl-*";
      stringArray0[1] = "1ernAl - *";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "1ernAl - *", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (1ernAl-*, 1ernAl - *)", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "1o8NGhCpxPeH^1";
      String[] stringArray0 = new String[6];
      stringArray0[4] = "1o8NGhCpxPeH^1";
      stringArray0[1] = "1o8NGhCpxPeH^1";
      stringArray0[2] = "1o8NGhCpxPeH^1";
      stringArray0[4] = "1o8NGhCpxPeH^1";
      SQLUtil.leftJoin("1o8NGhCpxPeH^1", stringArray0, stringArray0[0], "HH", stringArray0);
      int int0 = 2023;
      DBDataType.getInstance(2023, "Hg<");
      // Undeclared exception!
      try { 
        Integer.decode(stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("\u0001x", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append('J');
      // Undeclared exception!
      try { 
        stringBuilder2.insert((int) 'J', true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.107652786215132
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil.normalize("1ernAl-*", true);
      System.setCurrentTimeMillis((-1L));
      SQLUtil.mutatesDataOrStructure("-vM(@e!tSmUEx");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("m9ol4h");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("nK88i]");
      String[] stringArray0 = new String[19];
      stringArray0[0] = "nK88i]";
      stringArray0[1] = "nK88i]";
      stringArray0[3] = "nK88i]";
      SQLUtil.normalize("nK88i]", false);
      String string0 = SQLUtil.renderColumnListWithTableName("nK88i]", stringArray0);
      assertEquals("nK88i].nK88i], nK88i].nK88i], nK88i].null, nK88i].nK88i], nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null, nK88i].null", string0);
      
      String string1 = SQLUtil.normalize("nK88i]", false);
      assertEquals("nK88i ]", string1);
      
      String string2 = SQLUtil.normalize("CONSTRAINT DELETE CHECK RENAME", false);
      assertEquals("CONSTRAINT DELETE CHECK RENAME", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ", ";
      String[] stringArray1 = new String[5];
      stringArray1[1] = ", ";
      stringArray1[2] = ", ";
      stringArray1[0] = ", ";
      stringArray1[4] = ", ";
      SQLUtil.innerJoin(", ", stringArray0, ", ", ", ", stringArray1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn(", ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ', ' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "BLOB";
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("BLOB", (String) null, "BLOB");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "select";
      stringArray0[1] = ">1@@{R+";
      stringArray0[2] = ">1@@{R+";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ">1@@{R+", true, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9998704205025657
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("updte");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "UNIQUE ", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("updte");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("updte", true, dBPrimaryKeyConstraint0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      stringArray0[0] = "updte";
      stringArray0[1] = "updte";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("updte", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.normalize("updte", true);
      SQLUtil.normalize("3:f(|-^LU]~eNk$**", false);
      StringBuilder stringBuilder0 = new StringBuilder("updte");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec1);
      assertEquals("updteCONSTRAINT updte ", stringBuilder1.toString());
      
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (updte, updte, , ) REFERENCES null(updte, updte, , )", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("ii]68?yf<", true, "N68", "N68");
      StringBuilder stringBuilder0 = new StringBuilder("ii]68?yf<");
      StringBuilder stringBuilder1 = stringBuilder0.append((StringBuffer) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      assertEquals("ii]68?yf<nullCONSTRAINT ii]68?yf< ", stringBuilder1.toString());
      assertEquals("ii]68?yf<nullCONSTRAINT ii]68?yf< ", stringBuilder0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SAMPLE_SIZE", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.getOwner();
      StringBuilder stringBuilder0 = new StringBuilder("SAMPLE_SIZE");
      StringBuilder stringBuilder1 = stringBuilder0.append((-486.7954889));
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[7];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVARArray0[0] = xSQLVAR0;
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      xSQLVARArray0[1] = xSQLVAR1;
      XSQLVAR xSQLVAR2 = xSQLVAR0.deepCopy();
      xSQLVARArray0[2] = xSQLVAR2;
      XSQLVAR xSQLVAR3 = xSQLVAR1.deepCopy();
      xSQLVARArray0[3] = xSQLVAR3;
      XSQLVAR xSQLVAR4 = xSQLVAR1.deepCopy();
      xSQLVARArray0[4] = xSQLVAR4;
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      xSQLVARArray0[5] = xSQLVAR5;
      XSQLVAR xSQLVAR6 = xSQLVAR0.deepCopy();
      xSQLVARArray0[6] = xSQLVAR6;
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID("zBe*2PRW9}0A-B0Vk=");
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys(basicUUID0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(FLm.+p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (FLm.+p
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "\u0001x");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("\u0001x", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append('J');
      // Undeclared exception!
      try { 
        stringBuilder2.insert((int) 'J', true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 74
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("ert6Al-*");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("T,[R?$,%WIuG", true, "T,[R?$,%WIuG", "only");
      dBCheckConstraint0.setDoc("n([[\"(lp7rV");
      dBSchema0.equals(dBCheckConstraint0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ert6Al-*";
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema ert6Al-*", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("only", dBSchema0);
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM only WHERE ert6Al-* = 'ert6Al-*' AND null = null", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("BLOB");
      dBSchema0.getTable("BLOB");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BLOB", (DBTable) null, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      Random.setNextRandom(125);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.172993472439513
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = SQLUtil.normalize("call", true);
      assertEquals("call", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "call", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter session", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("update");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("updateCONSTRAINT \"alter session\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("7;|]>\"g6/F,-:g");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("7;|]>\"g6/F,-:g");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "7;|]>\"g6/F,-:g";
      stringArray0[1] = "7;|]>\"g6/F,-:g";
      stringArray0[2] = "7;|]>\"g6/F,-:g";
      stringArray0[3] = "TdB!?6@avy0}ke";
      stringArray0[4] = "7;|]>\"g6/F,-:g";
      stringArray0[5] = "guv/}P}9jufF:^p0x#";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "guv/}P}9jufF:^p0x#", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("7;|]>\"g6/F,-:g", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      StringBuilder stringBuilder0 = new StringBuilder("7;|]>\"g6/F,-:g");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7;|]>\"g6/F,-:g", dBTable0, 3387, "7;|]>\"g6/F,-:g");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("7;|]>\"g6/F,-:g", string0);
      
      boolean boolean0 = SQLUtil.isDML("7;|]>\"g6/F,-:g");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize("Gert6Al-*", false);
      assertEquals("Gert6Al - *", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.73798344858705
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("update");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "update";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BLOCKSIZE");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("update");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[1] = " on ";
      stringArray0[2] = " on ";
      byte[] byteArray0 = new byte[0];
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((-2111), byteArray0, 0L);
      valueLobDb0.copyToTemp();
      SQLUtil.removeComments(" on ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[0], true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.getOwner();
      StringBuilder stringBuilder0 = new StringBuilder(";*?X&jh");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals(";*?X&jh", stringBuilder0.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("}lvyDP<zju(C");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "#]rsWc-Vf?w";
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputTextLog0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("#]rsWc-Vf?w");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("}lvyDP<zju(C", true, "iKn7plTpe", "update");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("CONSTRAINT }lvyDP<zju(C ", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = " (";
      stringArray0[1] = " (";
      stringArray0[2] = "";
      stringArray0[3] = " (";
      byte[] byteArray0 = new byte[0];
      ValueLobDb valueLobDb0 = ValueLobDb.createSmallLob((-2111), byteArray0, 0L);
      valueLobDb0.copyToTemp();
      SQLUtil.removeComments(" (");
      SQLUtil.isProcedureCall(" on ");
      StringBuilder stringBuilder0 = new StringBuilder(" (");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("close", stringBuilder0);
      SQLUtil.isQuery("x");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance("BLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" (", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.addOptionalCondition("", stringBuilder1);
      System.setCurrentTimeMillis(142L);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" (");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("U^Vc*\"c@-LpEQ7})n", false);
      assertEquals("U ^ Vc * \"c@-LpEQ7})n\"", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_1NIQUE , NULL as INDEX_QUALIFIER , nd.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITNON , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , null as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8", true);
      assertEquals("SELECT NULL as TABLE_CAT, NULL as TABLE_SCHEM, ind.RDB $ RELATION_NAME AS TABLE_NAME, ind.RDB $ UNIQUE_FLAG AS NON_1NIQUE, NULL as INDEX_QUALIFIER, nd.RDB $ INDEX_NAME as INDEX_NAME, NULL as ITYPE, ise.rdb $ field_position + 1 as ORDINAL_POSITNON, ise.rdb $ field_name as COLUMN_NAME, ind.RDB $ INDEX_TYPE as ASC_OR_DESC, 0 as CARDINALITY, 0 as IPAGES, null as FILTER_CONDITION FROM rdb $ indices ind, rdb $ index_segments ise WHERE ind.rdb $ index_name = ise.rdb $ index_name AND UPPER (ind.rdb $ relation_name) = ? ORDER BY 4, 6, 8", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("drop index0n-~lapt");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("drop index0n-~lapt", true, "8|O/|P\"1H >*:", "delete");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1830495018513072
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("updte");
      String[] stringArray0 = new String[4];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "UNIQUE ", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("updte");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("updte", true, dBPrimaryKeyConstraint0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      stringArray0[0] = "updte";
      stringArray0[1] = "updte";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("updte", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.normalize("updte", true);
      SQLUtil.normalize("3:f(|-^LU]~eNk$**", false);
      StringBuilder stringBuilder0 = new StringBuilder("updte");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec1);
      assertEquals("updteCONSTRAINT updte ", stringBuilder1.toString());
      
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(1530);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec2, mockPrintWriter0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 808);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      DBSchema dBSchema0 = new DBSchema("dI7C#\"wm5rnzWj.a", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("dI7C#\"wm5rnzWj.a", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("dI7C#\"wm5rnzWj.a", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("dI7C#\"wm5rnzWj.a.dI7C#\"wm5rnzWj.a", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "#]rsWc-Vf?w");
      StringBuilder stringBuilder0 = new StringBuilder("#]rsWc-Vf?w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("#]rsWc-Vf?w");
      int int0 = 134;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#]rsWc-Vf?w", defaultDBTable0, 134, "#]rsWc-Vf?w");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DBColumn[] dBColumnArray0 = new DBColumn[15];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[10] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ")}>A 4yBTp");
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ValueLobDb.createSmallLob(30329, byteArray0, (-1838L));
      Character character0 = new Character('M');
      SQLUtil.renderValue(character0);
      Random.setNextRandom((-1717986916));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("gQflP-ISkBe^;O,Qm", false);
      assertEquals("gQflP - ISkBe ^ ; O, Qm", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.isProcedureCall("executecreate materialized view");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("#]rsWc-Vf?w");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize("L];nH(]Rwvv<H`@/o", true);
      assertEquals("L ] ; nH (] Rwvv < H ` @ / o", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("SAMPLE_SIZE", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.getOwner();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("o}<");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("8[~B#]RJWF'QXUGC#~", true);
      assertEquals("8 [ ~ B # ] RJWF 'QXUGC#~'", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select");
      SQLUtil.isQuery("select");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.isQuery("SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_1NIQUE , NULL as INDEX_QUALIFIER , nd.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITNON , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , null as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8");
      Random.setNextRandom(152);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter session", false);
      assertEquals("alter session", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("ansiTrim", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(32, "create table ");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter session", dBTable0, dBDataType0, integer0, (Integer) null);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("alter session CREATE TABLE (0) NULL", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("updat");
      DBDataType dBDataType0 = DBDataType.getInstance(29, "updat");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("updat", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDefaultValue("updat");
      defaultDBColumn0.setType(dBDataType0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("updat UPDAT(2,2) DEFAULT updat NULL", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("()");
      dBSchema0.getTable("()");
      int int0 = (-3372);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("()", (DBTable) null, (-3372), "()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("Updte");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "alter tasble";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Updte", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("BLOB");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(stringArray0[0], true, dBPrimaryKeyConstraint1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint1, nameSpec0);
      String string0 = "~+J0qJ\\";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("PRIMARY KEY (, alter tasble)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y_jE3BPH4;&(JM)@4fa");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable0, "c");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      mockPrintWriter0.println();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("CLOB", false, "CLOB", "X");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK X", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter session");
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      Integer integer0 = RawTransaction.ABORT;
      assertEquals(1, (int)integer0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("()");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("2; ", (DBTable) null, 90107, "2; ");
      linkedList0.add((DBColumn) defaultDBColumn0);
      dBSchema0.getTable("\u0001\u0211");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("()", (DBTable) null, 90107, ")<$-5jzgIJzM@FGuTs");
      linkedList0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      System.setCurrentTimeMillis(90107);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";}k_F:");
      System.setCurrentTimeMillis((-7523L));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "update";
      stringArray0[1] = "update";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("update");
      DBDataType dBDataType0 = DBDataType.getInstance(39, "K,|te");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBDataType0.isNumber();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.setType(dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("update");
      DBDataType dBDataType0 = DBDataType.getInstance(39, "K,|te");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBDataType0.isNumber();
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, (Integer) null, integer2);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("zw$X+33a>Z12\"T", defaultDBTable0, dBDataType0);
      defaultDBColumn1.setType(dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "select into";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select into");
      DBDataType.getInstance(39, "select into");
      SQLUtil.isQuery("select into");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      try { 
        Integer.parseUnsignedInt("executee$hykds");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"executee$hykds\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.5660857389596289
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 221.103;
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize(" AS ", true);
      Random.setNextRandom((-4));
      Random.setNextRandom(1869);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "l+jC+N%x0-e0d,c$yC");
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "l+jC+N%x0-e0d,c$yC", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("l+jC+N%x0-e0d,c$yC", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, stringArray0[0], true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 256.0;
      Boolean boolean0 = new Boolean((String) null);
      SQLUtil.renderNumber(streamTokenizer0);
      Random.setNextRandom((-4));
      Random.setNextRandom(189);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-1988.491759293);
      Boolean boolean0 = Boolean.FALSE;
      SQLUtil.renderNumber(streamTokenizer0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1331, " W4ERE ");
      Integer integer0 = new Integer(32);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECTIVITY INT");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" W4ERE ", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "_Lr@7 jO;/b");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer.toUnsignedLong((-2));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_Lr@7 jO;/b", defaultDBTable0, dBDataType0, integer0, integer1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "_Lr@7 jO;/b", true, "_Lr@7 jO;/b");
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      System.setCurrentTimeMillis((-982L));
  }
}
