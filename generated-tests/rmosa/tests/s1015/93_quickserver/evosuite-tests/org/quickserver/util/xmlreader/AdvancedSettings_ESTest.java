/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:54:12 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(3009);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getCharset();
      advancedSettings0.getCharset();
      assertEquals(3009, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("(E`+O!KNv{O$");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("(E`+O!KNv{O$");
      advancedSettings1.getClientIdentifier();
      advancedSettings2.getClientSocketTcpNoDelay();
      advancedSettings1.getUseDirectByteBuffer();
      advancedSettings2.getQSObjectPoolMaker();
      advancedSettings1.setQSObjectPoolMaker((String) null);
      assertEquals("(E`+O!KNv{O$", advancedSettings1.getClientIdentifier());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1529);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesBandwidth(1529);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setBacklog(1529);
      advancedSettings0.setPerformancePreferencesBandwidth(581);
      advancedSettings0.setMaxThreadsForNioWrite(871);
      assertEquals(871, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setBacklog((-2807));
      advancedSettings0.setPerformancePreferencesLatency(1202);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setSocketLinger(1327);
      advancedSettings0.setClientSocketReceiveBufferSize(1012);
      advancedSettings0.setClientSocketReceiveBufferSize(1898);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertEquals(1327, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setSocketLinger((-1322));
      advancedSettings0.setClientIdentifier("5P`wtp'");
      advancedSettings0.setClientSocketTrafficClass("]RzLYJr+GB^t");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals("5P`wtp'", advancedSettings0.getClientIdentifier());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setPerformancePreferencesBandwidth((-2265));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-2894));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setSocketLinger((-1934));
      advancedSettings0.setPerformancePreferencesLatency((-1003));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setClientIdentifier("jmA");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setSocketLinger(10);
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(10, advancedSettings0.getSocketLinger());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setSocketLinger((-2028));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(121);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass("fAr");
      advancedSettings0.getDebugNonBlockingMode();
      assertEquals(121, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1004));
      advancedSettings0.setClientIdentifier("Ad:oBD^:W'^&kndwG>");
      advancedSettings0.setBacklog((-1004));
      advancedSettings0.setBacklog(10);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setBacklog(956);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTrafficClass("X+ytcfl-3,U_");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientIdentifier();
      assertEquals("Ad:oBD^:W'^&kndwG>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("9fZgy~gsga");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setQSObjectPoolMaker("9fZgy~gsga");
      advancedSettings0.setByteBufferSize((-976));
      advancedSettings0.setByteBufferSize(2556);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      assertEquals(2556, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1426);
      advancedSettings0.setClientSocketSendBufferSize(1426);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(1426);
      advancedSettings0.setPerformancePreferencesConnectionTime(1426);
      advancedSettings0.setSocketLinger(1426);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(1426);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesBandwidth(1426);
      advancedSettings0.setPerformancePreferencesBandwidth(1426);
      advancedSettings0.setBacklog(1426);
      assertEquals(1426, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("fb?>e");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setQSObjectPoolMaker("F~V#U!");
      assertEquals("fb?>e", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("1gXLEaM#pA6-");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 1gXLEaM#pA6-
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(1);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("?bQ gWH<@'1Ol=yXwW");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ?bQ gWH<@'1Ol=yXwW
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      String string0 = "";
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize((-4270));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getQSObjectPoolMaker();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</performance-preferences-latency>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </performance-preferences-latency>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setByteBufferSize(1);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("P<r:4~w#:BN]V/uv?");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // P<r:4~w#:BN]V/uv?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("[L!2H");
      assertEquals("[L!2H<advanced-settings>\n[L!2H\t<charset>ISO-8859-1</charset>\n[L!2H\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n[L!2H\t<byte-buffer-size>65536</byte-buffer-size>\n[L!2H\t<backlog>0</backlog>\n[L!2H\t<socket-linger>-1</socket-linger>\n[L!2H\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n[L!2H\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n[L!2H\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n[L!2H\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n[L!2H\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n[L!2H\t<performance-preferences-latency>0</performance-preferences-latency>\n[L!2H\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n[L!2H\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n[L!2H</advanced-settings>\n", string0);
      
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.toXML((String) null);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.toXML((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings1.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientIdentifier("]78vzVLBjul}~M@X");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings1.setQSObjectPoolMaker("6U|waTF!/8_aHO\"-C");
      advancedSettings0.getClientIdentifier();
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("P<r:4~w#:BN]V/uv?");
      assertEquals("]78vzVLBjul}~M@X", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setPerformancePreferencesLatency(2202);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setQSObjectPoolMaker("v'Cs~xPgw%o_a");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientSocketTrafficClass("v'Cs~xPgw%o_a");
      advancedSettings0.setSocketLinger(2202);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.toXML("v'Cs~xPgw%o_a");
      advancedSettings0.getBacklog();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getCharset();
      assertEquals(2202, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog((-1126));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</performance-preferences-bandwidth>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </performance-preferences-bandwidth>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketReceiveBufferSize(21);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(21, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("Dzl");
      advancedSettings0.setClientSocketSendBufferSize((-4122));
      advancedSettings0.toXML("^6zV T#X\">h");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-81));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger(1641);
      assertEquals((-4122), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketSendBufferSize((-1853));
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.setSocketLinger((-1853));
      advancedSettings0.setPerformancePreferencesLatency((-4150));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setSocketLinger((-1853));
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings1.setSocketLinger((-4002));
      advancedSettings1.setSocketLinger(10);
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.setCharset((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(1897);
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
  }
}
