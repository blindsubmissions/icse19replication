/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 12:14:54 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject.quote("s\n");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "s\n";
      stringArray0[1] = "+jcSlTj]Jg[Q";
      stringArray0[2] = "\"s\n\"";
      stringArray0[3] = "s\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf("/Y}[QsU$wx7!~)9 +A");
      jSONObject0.putOpt("/Y}[QsU$wx7!~)9 +A", (Object) null);
      boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("Expected a ',' or ']'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = ">";
      JSONTokener jSONTokener0 = new JSONTokener(">");
      jSONTokener0.nextClean();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.328515191203992
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject.quote("\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("\"\n\"");
      try { 
        jSONObject0.getBoolean("\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.quote("1lW:8COP(K~ B\"g");
      String string0 = JSONObject.quote("\"1lW:8COP(K~ B\"g\"");
      assertEquals("\"\\\"1lW:8COP(K~ B\\\"g\\\"\"", string0);
      
      HashMap<Long, JSONArray> hashMap0 = new HashMap<Long, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString(61, 61);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = ",\n";
      JSONObject.quote(",\n");
      JSONObject.quote("\",\n\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of '
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = JSONObject.quote(", \n");
      Long long0 = new Long((-1L));
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = JSONObject.quote("o, \n");
      Byte byte0 = new Byte((byte)21);
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      Short short0 = new Short((short)42);
      String string1 = JSONObject.valueToString(short0, 71, 71);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("p$=~D_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p$=~D_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject.quote(", \n");
      JSONObject.doubleToString((-1761.0));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-1761";
      JSONObject jSONObject0 = new JSONObject("-1761", stringArray0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = JSONObject.quote("->B;__0VzbQ");
      assertEquals("\"->B;__0VzbQ\"", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject.getNames((Object) "] not found.");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.quote(":@ 1{p^!@wwBc1j_A");
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 8;
      try { 
        jSONObject0.put((String) null, (Object) "\":@ 1{p^!@wwBc1j_A\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = JSONObject.quote(", \n");
      assertEquals("\", \\n\"", string0);
      
      Double double0 = new Double((-910.08));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(17, 32);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.quote("(7.!");
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, 32, 32);
      assertEquals("{}", string0);
      
      String string1 = JSONObject.quote("(7.!");
      assertEquals("\"(7.!\"", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      jSONObject0.optBoolean("TzAcmD`hAa#VA=e");
      try { 
        jSONObject0.getBoolean("\",\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\",\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Double double0 = new Double(0.0);
      assertEquals(0.0, (double)double0, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject.quote("(7;.!");
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("", (-4496L));
      try { 
        jSONObject0.getBoolean("(7;.!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"(7;.!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      long long0 = jSONObject0.optLong(",\n");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long0);
      
      String string1 = JSONObject.quote("JSON does not allow non-finite numbers.");
      assertEquals("\"JSON does not allow non-finite numbers.\"", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1276.516536598297));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "isforEach";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("isforEach");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("6vXT$Z06G4&vTen@uWQ", "getvalueOf");
      assertEquals("getvalueOf", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject.quote("m7GO.!");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("] not found.", 2310.8530017);
      try { 
        jSONObject0.getBoolean("J");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"J\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Vv", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JSONObject.quote("'/:49ERuA`SD81J8;");
      assertEquals("\"'/:49ERuA`SD81J8;\"", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double double0 = new Double(227.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, "'");
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1758.392));
      assertEquals("-1758.392", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.20619205063323187
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.quote(",j\n");
      assertEquals("\",j\\n\"", string0);
      
      String string1 = JSONObject.valueToString(",j\n");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.quote("b(uud$w");
      Double double0 = new Double(480.8);
      String string1 = JSONObject.valueToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{B?");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {B?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-763));
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = Boolean.FALSE;
      hashMap0.replace(integer0, boolean1);
      hashMap0.put(integer0, boolean0);
      String string0 = JSONObject.doubleToString(0.0);
      String string1 = JSONObject.valueToString(hashMap0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote(", \n");
      assertEquals("\", \\n\"", string0);
      
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toString(115, 115);
      assertEquals(1, jSONObject0.length());
      
      String string1 = JSONObject.valueToString("\", \n\"", (-622), (-622));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5171534199663772
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = JSONObject.quote(", \n");
      assertEquals("\", \\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) ", \n");
      JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2076);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("/Y}[QsU$wx7!~)9 +A");
      JSONObject jSONObject1 = jSONObject0.putOpt("/Y}[QsU$wx7!~)9 +A", boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject1.getBoolean("/Y}[QsU$wx7!~)9 +A");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 58;
      JSONObject jSONObject1 = jSONObject0.put("_fL8vHS.G ,^e5", 58);
      JSONObject.valueToString((Object) null);
      JSONObject.valueToString("_fL8vHS.G ,^e5");
      Integer integer0 = new Integer(58);
      try { 
        jSONObject1.getJSONObject("_fL8vHS.G ,^e5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_fL8vHS.G ,^e5\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = JSONObject.quote(", \n");
      assertEquals("\", \\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 0, 0);
      assertEquals("[]", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 108, 893);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("gethashCode", "gethashCode");
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      HashMap<Boolean, Float> hashMap1 = new HashMap<Boolean, Float>(hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(hashMap0, 1659, 1659);
      String string0 = "<WaX*-( kSU";
      try { 
        jSONObject0.getLong("<WaX*-( kSU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<WaX*-( kSU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4375503412075572
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = JSONObject.quote(", \n");
      assertEquals("\", \\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) ", \n");
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      double double0 = 1273.09651061;
      Double double1 = new Double(1273.09651061);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 923L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject.quote("33\"tA1;");
      JSONObject.testValidity("\"33\"tA1;\"");
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("cm.ZSvi");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Double double0 = new Double(4399.501645067667);
      Double.min(4399.501645067667, 1680.091894);
      Double.min(4399.501645067667, 4399.501645067667);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double double1 = new Double((-1363.1));
      jSONObject0.putOpt("is", double1);
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(4399.501645067667);
      assertEquals("4399.501645067667", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Double double0 = new Double(4399.501645067667);
      Double.min(4399.501645067667, 4399.501645067667);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.append("{`87]B];?P", jSONObject1);
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(4399.501645067667);
      assertEquals("4399.501645067667", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(1);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{W:*D%pgHu$*$eolsNQ@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {W:*D%pgHu$*$eolsNQ@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0023564215220286
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double(88);
      StringWriter stringWriter0 = new StringWriter(88);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("MaV.V&`lb$^qDvy-", "MaV.V&`lb$^qDvy-");
      jSONObject1.optLong("MaV.V&`lb$^qDvy-");
      JSONObject jSONObject2 = jSONObject1.put("MaV.V&`lb$^qDvy-", 88);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject2.getJSONArray("MaV.V&`lb$^qDvy-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MaV.V&`lb$^qDvy-\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6347010720336776
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      int int0 = (-1);
      JSONObject.valueToString((Object) null, (-1), 1056);
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      jSONObject0.accumulate("[ufU\"teRgU;Y", hashMap0);
      try { 
        jSONObject0.getDouble("[ufU\"teRgU;Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[ufU\\\"teRgU;Y\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.870411159159411
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("null", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.putOpt("null", "null");
      jSONObject1.accumulate("null", "null");
      JSONObject.valueToString("JSON does not allow non-finite numbers.");
      try { 
        jSONObject1.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5936174605927704
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double(4399.501645067667);
      Double.min(4399.501645067667, 4399.501645067667);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "0");
      jSONObject0.toString();
      jSONObject0.toString(9, 9);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("] is not a JSONArray.");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      jSONObject0.put("{?:~D;pgHuXZ$e&NQ", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)522);
      jSONObject0.put("", (Object) short0);
      jSONObject0.optString("", "null");
      Short short1 = new Short((short)383);
      assertFalse(short1.equals((Object)short0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      boolean boolean0 = jSONObject0.isNull(".}(VSIOO?p9Y.");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("M,=x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of M,=x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("Expected a ',' or ']'", jSONArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("Expected a ',' or ']'", jSONArray1);
      assertEquals(0, jSONArray1.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject.quote("(7;");
      JSONObject jSONObject0 = new JSONObject((Object) "\"(7;\"");
      // Undeclared exception!
      jSONObject0.toString(1135, 1135);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.quote("rKl</");
      assertEquals("\"rKl<\\/\"", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.588328803039602
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ab9#*a\"Gc*BcIkgoG";
      JSONObject jSONObject1 = jSONObject0.putOpt("ab9#*a\"Gc*BcIkgoG", "ab9#*a\"Gc*BcIkgoG");
      try { 
        jSONObject1.append("ab9#*a\"Gc*BcIkgoG", "ab9#*a\"Gc*BcIkgoG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ab9#*a\"Gc*BcIkgoG] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("_fL8vHS.G ,^e5", 895);
      jSONObject1.getDouble("_fL8vHS.G ,^e5");
      StringWriter stringWriter0 = new StringWriter(895);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "_fL8vHS.G ,^e5", 895, 895);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.optLong(1264, (long) 1264);
      jSONArray0.put((Object) null);
      jSONArray0.put(61, (Object) null);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      double double0 = 0.0;
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      jSONArray0.put((Map) hashMap0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.get(":XzeVNI;iOkF,<OR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":XzeVNI;iOkF,<OR\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("enull", "enull");
      try { 
        jSONObject1.getInt("enull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"enull\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean(true);
      String string0 = "Expected a ',' or ']'";
      jSONObject0.keys();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("Expected a ',' or ']'", jSONArray1);
      try { 
        Long.valueOf("Expected a ',' or ']'", 47);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 47 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.9199261201964186
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("!z", false);
      JSONObject jSONObject1 = jSONObject0.putOpt("nBull", "nBull");
      jSONObject1.optLong("nBull", 1986L);
      try { 
        jSONObject1.getBoolean("nBull");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"nBull\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject1 = jSONObject0.putOpt("/Y}[QsU$wx7!~)9 +A", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("/Y}[QsU$wx7!~)9 +A");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^Q>?iYXA]>`0)Yp^=", 0.0);
      jSONObject0.optDouble("^Q>?iYXA]>`0)Yp^=", 0.0);
      try { 
        jSONObject0.getBoolean("islongBitsToDouble");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islongBitsToDouble\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(88);
      jSONObject0.put("MaV.V&`lb$^qDvy-", (Object) integer0);
      jSONObject0.optInt("MaV.V&`lb$^qDvy-", 88);
      boolean boolean0 = new Boolean("MaV.V&`lb$^qDvy-");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("_fL8vHS.G ,^e5", 895);
      jSONObject1.getLong("_fL8vHS.G ,^e5");
      StringWriter stringWriter0 = new StringWriter(895);
      stringWriter0.close();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "_fL8vHS.G ,^e5", 895, 895);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(53);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("^5@", (Collection) linkedList0);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-6.508130426045116E-4));
      assertEquals("-6.508130426045116E-4", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Double double0 = new Double(88);
      StringWriter stringWriter0 = new StringWriter(88);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("#2G1f1#:t8", jSONArray0);
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONArray jSONArray1 = jSONObject1.optJSONArray("#2G1f1#:t8");
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.00723735328094
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("_fL8vHS.G ,^e5", 58);
      jSONObject0.put("_fL8vHS.G ,^e5", (Object) jSONObject1);
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      jSONObject1.put("Unterminated string", (Map) hashMap0);
      JSONObject.valueToString((Object) null);
      JSONObject.valueToString("_fL8vHS.G ,^e5");
      Integer integer0 = new Integer(58);
      jSONObject1.getJSONObject("_fL8vHS.G ,^e5");
      // Undeclared exception!
      jSONObject0.toString(58, (-3388));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Float float0 = new Float(912.1847455119163);
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject0 = new JSONObject((Object) "gettoOctalString");
      Float float1 = new Float(1.0);
      jSONObject0.append("-", float1);
      jSONObject0.append("-", "-");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(50);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("gJ:etgetBoolean", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("gJ:etgetBoolean");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1213);
      JSONObject jSONObject0 = new JSONObject((Object) "] not fo<)nd");
      Writer writer0 = jSONObject0.write(stringWriter0);
      String string0 = JSONObject.doubleToString(1683);
      assertEquals("1683", string0);
      
      Short short0 = new Short((short) (-1792));
      JSONObject.numberToString(short0);
      JSONObject.valueToString(writer0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONObject jSONObject1 = jSONObject0.put("null", (Collection) linkedList0);
      jSONObject1.getJSONArray("null");
      jSONObject0.putOpt("null", "null");
      String string0 = JSONObject.quote("null");
      assertEquals("\"null\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "{?:*D%pgHu\"*$esNQ@";
      JSONTokener jSONTokener0 = new JSONTokener("{?:*D%pgHu\"*$esNQ@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {?:*D%pgHu\"*$esNQ@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.8768448811808436
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("5a#*rpTBR");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5a#*rpTBR";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("ismin", object0);
      JSONObject.valueToString((Object) null);
      try { 
        jSONObject0.getBoolean("ismin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ismin\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{B=/MO'j");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 3 of {B=/MO'j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",\n";
      JSONObject jSONObject0 = new JSONObject(",\n", stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("zf[^F\"GJe8rws2:U{", (Collection) linkedList0);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      jSONObject0.put("] is not a Boolean.", (Map) hashMap0);
      Boolean boolean0 = new Boolean("zf[^F\"GJe8rws2:U{");
      jSONObject0.toString((-2055), 92);
      Integer integer0 = new Integer(92);
      linkedList0.add(integer0);
      JSONObject.testValidity("] is not a Boolean.");
      Long long0 = new Long(0L);
      JSONObject.numberToString(long0);
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000005\": {}\n                                                                                            }");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONObject.testValidity(jSONObject1);
      String string1 = JSONObject.quote("e6F");
      assertEquals("\"e6F\"", string1);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject.quote(",\n");
      String[] stringArray0 = new String[1];
      stringArray0[0] = ",\n";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put(",\n", (Collection) linkedList0);
      JSONObject.getNames((Object) linkedList0);
      jSONObject0.toString((-2055), 92);
      Integer integer0 = new Integer(92);
      JSONObject.testValidity("] is not a Boolean.");
      Long long0 = new Long(92);
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000003\": []}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONObject.testValidity(jSONObject1);
      String string0 = JSONObject.quote("] is not a Boolean.");
      JSONObject.valueToString(jSONTokener0, (-2055), (-2055));
      jSONObject1.toString((-1593), 1877);
      String string1 = JSONObject.valueToString(linkedList0, 92, (-2055));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{?:~D;pgHu\"*$e&NQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {?:~D;pgHu\"*$e&NQ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", "true");
      boolean boolean0 = jSONObject1.getBoolean("true");
      assertTrue(boolean0);
      
      Short short0 = new Short((short) (-4436));
      JSONObject.valueToString(short0);
      String string0 = JSONObject.quote("s");
      assertEquals("\"s\"", string0);
  }
}
