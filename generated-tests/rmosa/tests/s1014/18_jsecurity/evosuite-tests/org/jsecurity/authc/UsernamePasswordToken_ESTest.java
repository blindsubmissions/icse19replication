/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:34:49 GMT 2018
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false);
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "O;8", inetAddress0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'F';
      charArray0[2] = '\\';
      charArray0[3] = '\'';
      charArray0[4] = 'S';
      charArray0[5] = '1';
      charArray0[6] = '\\';
      charArray0[7] = 'e';
      charArray0[8] = '5';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '/';
      charArray0[1] = 'Z';
      charArray0[2] = '{';
      charArray0[3] = '~';
      charArray0[4] = 'R';
      charArray0[5] = '!';
      charArray0[6] = 'L';
      charArray0[7] = '9';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, charArray0, false);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
      
      usernamePasswordToken0.setUsername((String) null);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setUsername("");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'o';
      charArray0[1] = '}';
      charArray0[2] = '.';
      charArray0[3] = 'u';
      charArray0[4] = 'n';
      charArray0[5] = 'S';
      charArray0[6] = '^';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Zko9z>+U}{~~d", "Zko9z>+U}{~~d", false);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setUsername("");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true);
      usernamePasswordToken0.toString();
      boolean boolean0 = true;
      char[] charArray0 = new char[1];
      char char0 = 'd';
      try { 
        MockInetAddress.getByAddress((byte[]) null);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: null
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("(BtGA.@V~y-IK6z{", "(BtGA.@V~y-IK6z{");
      char[] charArray0 = new char[1];
      charArray0[0] = '0';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.toString();
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setUsername("");
      char[] charArray1 = new char[1];
      charArray1[0] = '.';
      usernamePasswordToken0.setPassword(charArray1);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.getUsername();
      char[] charArray0 = new char[2];
      char char0 = 'f';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte) (-100);
      byteArray0[5] = (byte)109;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)67;
      byteArray0[8] = (byte)80;
      try { 
        MockInetAddress.getByAddress("4D)?qfzdc?H", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-122, 0, 53, 49, -100, 109, 1, 67, 80]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setRememberMe(false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [1]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (char[]) null, true, (InetAddress) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.clear();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = 'E';
      charArray0[2] = 'X';
      charArray0[3] = ',';
      charArray0[4] = 'o';
      charArray0[5] = 'd';
      charArray0[6] = '6';
      charArray0[7] = '4';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememberMe=", "", false, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=, rememberMe=false (/192.168.1.42)", string0);
      
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, false);
      usernamePasswordToken0.setUsername("yH/,[dp[38M");
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setUsername(".$\"/8'GDbXi(r`>@hH");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setUsername((String) null);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
      
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = '!';
      charArray0[2] = '|';
      charArray0[3] = '\\';
      charArray0[4] = 'k';
      charArray0[5] = '6';
      charArray0[6] = '%';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("wnExN`", charArray0, (InetAddress) null);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.setUsername("LXTV~X:,|qfN4");
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - LXTV~X:,|qfN4, rememberMe=false", string0);
      
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (/192.168.1.42)", string0);
      
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.setUsername(" - ");
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.setUsername("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (/192.168.1.42)");
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setUsername((String) null);
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
