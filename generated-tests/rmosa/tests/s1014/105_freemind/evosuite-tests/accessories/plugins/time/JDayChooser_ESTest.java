/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:42:16 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.main.FreeMindApplet;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyChangeListener;
import java.sql.Time;
import java.text.AttributedCharacterIterator;
import java.time.Clock;
import java.util.Date;
import java.util.Hashtable;
import java.util.List;
import java.util.Locale;
import javax.help.DefaultHelpModel;
import javax.help.HelpSet;
import javax.help.JHelp;
import javax.help.plaf.basic.BasicHelpUI;
import javax.swing.AbstractButton;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.multi.MultiButtonUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.svg12.SVG12DOMImplementation;
import org.apache.batik.gvt.ImageNode;
import org.apache.batik.gvt.TextNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xerces.parsers.XML11DTDConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      jDayChooser0.getHierarchyListeners();
      Time time0 = new Time(0);
      jDayChooser0.setSelectableDateRange(time0, time0);
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5703209512407335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "wF,o";
      stringArray0[2] = "0";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.textText;
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser_DecoratorButton0.getIconTextGap();
      jDayChooser0.maxDayCharacters = 15;
      MultiButtonUI multiButtonUI0 = new MultiButtonUI();
      multiButtonUI0.paint((Graphics) null, jDayChooser0);
      // Undeclared exception!
      try { 
        multiButtonUI0.getMinimumSize(jDayChooser_DecoratorButton0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      systemColor0.getColorSpace();
      jDayChooser0.setWeekdayForeground(systemColor0);
      boolean boolean0 = false;
      jDayChooser0.setDayBordersVisible(false);
      System.setCurrentTimeMillis(4294977024L);
      List<Locale.LanguageRange> list0 = null;
      ImageNode imageNode0 = new ImageNode();
      HelpSet helpSet0 = new HelpSet();
      DefaultHelpModel defaultHelpModel0 = new DefaultHelpModel(helpSet0);
      JHelp jHelp0 = new JHelp(defaultHelpModel0);
      BasicHelpUI basicHelpUI0 = new BasicHelpUI(jHelp0);
      // Undeclared exception!
      try { 
        imageNode0.remove((Object) basicHelpUI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // javax.help.plaf.basic.BasicHelpUI@23af518c is not a GraphicsNode
         //
         verifyException("org.apache.batik.gvt.CompositeGraphicsNode", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6440131694248166
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.orange;
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-9223372036854775808L);
      floatArray0[1] = (float) (-9223372036854775808L);
      jDayChooser0.setAlwaysFireDayProperty(false);
      floatArray0[2] = (float) (-9223372036854775808L);
      floatArray0[3] = (float) (-9223372036854775808L);
      floatArray0[4] = (float) (-9223372036854775808L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Color.getColor("day", color0);
      floatArray0[5] = (float) (-9223372036854775808L);
      floatArray0[6] = (float) (-9223372036854775808L);
      floatArray0[7] = (float) (-9223372036854775808L);
      floatArray0[8] = (float) (-9223372036854775808L);
      systemColor0.getRGBColorComponents(floatArray0);
      systemColor0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      System.setCurrentTimeMillis((-9223372036854775808L));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBackgroundVisible();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setFocusTraversalKeysEnabled(true);
      // Undeclared exception!
      try { 
        Time.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.isDecorationBordersVisible();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7449129422959606
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setEnabled(true);
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getAlignmentY();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2461, false);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.getDayPanel();
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HelpSet helpSet0 = new HelpSet(classLoader0);
      Hashtable<JButton, Object> hashtable0 = new Hashtable<JButton, Object>();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        jDayChooser_DecoratorButton0.remove(436);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 436
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.validate();
      jDayChooser0.setMonth(699);
      jDayChooser0.setDay(100);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.80289844853145
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setLocale(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      Color color0 = Color.orange;
      jDayChooser0.setDecorationBackgroundColor(color0);
      System.setCurrentTimeMillis((-3347L));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-677), (-3347L), (-677), (-677), 'Y');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.drawDays();
      XML11DTDConfiguration xML11DTDConfiguration0 = new XML11DTDConfiguration();
      Locale locale0 = xML11DTDConfiguration0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 12, "day", 21168000000L, 5);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.getInputContext();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.setFirstDayOfWeek(52);
      mockGregorianCalendar0.getMaximum(0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = null;
      try {
        unmarshallingContext0 = new UnmarshallingContext((-894), (String[]) null, (String[]) null, (String[]) null, (String[]) null, iBindingFactory0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.removeFocusListener(jYearChooser0);
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.setMinimumSize((Dimension) null);
      jDayChooser0.firePropertyChange("*KXp-u4Rvh9-U", 0.212F, 0.212F);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7076569975017657
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 9223372036854775791L;
      System.setCurrentTimeMillis(9223372036854775791L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.orange;
      int int0 = 3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int1 = 34;
      long long1 = (-882L);
      char char0 = 'X';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1359, (-882L), 3, 34, 'X');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("d\",j7+Qm,,!W", true, false);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.drawWeeks();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextSelectionColor();
      jDayChooser0.setSundayForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Dimension dimension0 = jDayChooser0.getMaximumSize();
      Color color0 = jDayChooser0.getSundayForeground();
      dimension0.setSize(3, 3);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 3;
      // Undeclared exception!
      try { 
        color0.getComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      PDFInfo pDFInfo0 = new PDFInfo();
      jDayChooser0.updateUI();
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashtable0);
      jDayChooser0.setFont(font0);
      jDayChooser0.getMaxDayCharacters();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3756), (-3756), (-4175), (-4175), '+');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setMaxDayCharacters((-4175));
      String string0 = AbstractButton.HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY;
      // Undeclared exception!
      try { 
        Time.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8329167138240616
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775767L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(29);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2065), 272L, (-2065), (-2065), 'c');
      jDayChooser0.keyPressed(keyEvent0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser1.setMaxDayCharacters((-1437625606));
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      System.setCurrentTimeMillis(272L);
      jDayChooser0.setEnabled(false);
      assertEquals(29, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      Time time0 = new Time(1L);
      jDayChooser0.setSelectableDateRange((Date) null, time0);
      jDayChooser0.updateUI();
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)TextNode.PAINT_INFO;
      // Undeclared exception!
      try { 
        hashtable0.put(gVTAttributedCharacterIterator_TextAttribute0, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.drawDays();
      jDayChooser0.setEnabled(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(777);
      float[] floatArray0 = new float[3];
      floatArray0[0] = 467.08F;
      floatArray0[1] = (-738.4315F);
      floatArray0[2] = (float) 777;
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      sVGGeneratorContext_GraphicContextDefaults0.getRenderingHints();
      ImageHandlerJPEGEncoder imageHandlerJPEGEncoder0 = null;
      try {
        imageHandlerJPEGEncoder0 = new ImageHandlerJPEGEncoder("6", "lightgrey");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.91238681579902
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(12);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getSelectedDay();
      jDayChooser0.setEnabled(true);
      jDayChooser0.getUIClassID();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, (-2472L), 12, 12, 'l');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7100799133333875
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 41, 41, 41, 41, 'E');
      keyEvent0.setKeyCode(41);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Date date1 = jDayChooser1.setMaxSelectableDate(date0);
      assertSame(date1, date0);
      
      JDayChooser jDayChooser2 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser1.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton2 = jDayChooser1.new DecoratorButton();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.drawDays();
      XML11DTDConfiguration xML11DTDConfiguration0 = new XML11DTDConfiguration();
      xML11DTDConfiguration0.getEntityResolver();
      Locale locale0 = xML11DTDConfiguration0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawDays();
      Color color0 = jDayChooser0.getWeekdayForeground();
      float[] floatArray0 = new float[3];
      // Undeclared exception!
      try { 
        color0.getRGBComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(12);
      jDayChooser0.setDay(4153);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SVG12DOMImplementation sVG12DOMImplementation0 = new SVG12DOMImplementation();
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setLocale(locale0);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setFocusCycleRoot(true);
      Color color0 = Color.orange;
      jDayChooser0.setDecorationBackgroundColor(color0);
      System.setCurrentTimeMillis((-3347L));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.decorationBordersVisible = true;
      jDayChooser0.setDay(28);
      jDayChooser0.transferFocus();
      jDayChooser0.setMonth(28);
      long long0 = 2125L;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      try {
        pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D((PDFDocumentGraphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.orange;
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 514, 514, 514, 33, 'f');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7855319236978073
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 36, 1564L, 4, 36, 'S');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(true);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuElement[] menuElementArray0 = new MenuElement[1];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 499, 499, 38, 38, 'b', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 65280, 65280, 13, 37, '6');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setEnabled(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, (-1609L), 1359, 34, 'E');
      KeyEvent keyEvent1 = new KeyEvent(jYearChooser0, 34, 64, 3, 35, 'x');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.setDay(34);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7561376338576675
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.orange;
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-9223372036854775808L);
      floatArray0[1] = (float) (-9223372036854775808L);
      floatArray0[2] = (float) (-9223372036854775808L);
      systemColor0.getColorSpace();
      floatArray0[3] = (float) (-9223372036854775808L);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      floatArray0[4] = (float) (-9223372036854775808L);
      floatArray0[5] = (float) (-9223372036854775808L);
      floatArray0[6] = (float) (-9223372036854775808L);
      systemColor0.getColorComponents(floatArray0);
      jDayChooser0.addPropertyChangeListener("9", (PropertyChangeListener) null);
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) (-9223372036854775808L);
      floatArray1[1] = (float) (-9223372036854775808L);
      floatArray1[2] = (float) (-9223372036854775808L);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      XML11DTDConfiguration xML11DTDConfiguration0 = new XML11DTDConfiguration(symbolTable0, xMLGrammarPoolImpl0);
      Locale locale0 = xML11DTDConfiguration0.getLocale();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDay((-360));
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      float[] floatArray0 = new float[10];
      floatArray0[0] = (float) (-9223372036854775808L);
      floatArray0[8] = (float) (-9223372036854775808L);
      floatArray0[4] = (float) (-9223372036854775808L);
      floatArray0[5] = (float) (-9223372036854775808L);
      floatArray0[6] = (float) (-9223372036854775808L);
      floatArray0[7] = (float) (-9223372036854775808L);
      floatArray0[8] = (float) (-9223372036854775808L);
      systemColor0.getRGBColorComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      System.setCurrentTimeMillis((-9223372036854775808L));
      jDayChooser0.setDay((-1437625606));
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getToolkit();
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      jDayChooser_DecoratorButton0.paint(graphics2D0);
      jDayChooser0.updateUI();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.setDay(3605);
      System.setCurrentTimeMillis(3605);
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.addContainerListener((ContainerListener) null);
      Locale locale0 = Locale.CANADA_FRENCH;
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 3605, 5149L, 3605, (-2630), '}', (-2630));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.maxDayCharacters = 1227;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }
}
