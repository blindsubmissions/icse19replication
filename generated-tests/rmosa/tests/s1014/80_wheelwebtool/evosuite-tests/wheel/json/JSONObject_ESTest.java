/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:39:40 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6816102690529531
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = JSONObject.quote("(;/\"oY");
      assertEquals("\"(;/\\\"oY\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"(;/\"oY\"");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = JSONObject.quote(")/l6F3;{<f*';");
      assertEquals("\")/l6F3;{<f*';\"", string0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("[TTl3", (double) (-3251));
      assertEquals((-3251.0), double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject.quote(",\n");
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject.quote("] is not a Boolean.");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\"] is not a Boolean.\"", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject.quote("Expecte a ',' or ']'");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("Expecte a ',' or ']'", stringArray0);
      jSONObject0.optLong("] not found.");
      try { 
        jSONObject0.getBoolean("Expecte a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expecte a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONObject.quote(")/6F3;{<4-';");
      assertEquals("\")/6F3;{<4-';\"", string0);
      
      Integer integer0 = Integer.getInteger(")/6F3;{<4-';", (-939));
      JSONObject.numberToString(integer0);
      String string1 = JSONObject.quote("Expected a ':' after a key");
      assertEquals("\"Expected a ':' after a key\"", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JSONObject.quote("0jU\n");
      assertEquals("\"0jU\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(18, 18);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JSONObject.quote("(;K|\"GY");
      Float float0 = new Float(1899.3718F);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Float float0 = new Float((-540.14F));
      assertEquals((-540.14F), (float)float0, 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z!v/.%}k";
      stringArray0[1] = "!<dl]C~D4";
      stringArray0[2] = "\",\n\"";
      stringArray0[3] = "\",\n\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      double double0 = jSONObject0.optDouble("] is not a number.");
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = jSONObject1.optDouble("z!v/.%}k", 0.0);
      assertEquals(0.0, double1, 0.01);
      
      String string1 = jSONObject1.toString(103, 103);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.456586254197242
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(1, (Collection) linkedList0);
      jSONArray0.toString();
      try { 
        jSONObject0.getString("[null,wheel.json.JSONArray@0000000003]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[null,wheel.json.JSONArray@0000000003]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 789.9445553143607;
      try { 
        jSONObject0.put((String) null, 83);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.quote("(;/\"oY");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("(;/\"oY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of (;/\"oY
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2534.6367021);
      assertEquals("2534.6367021", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double.min(0.0, 3988.24);
      Float float0 = new Float((float) 2370);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("juuhA", (Object) "juuhA");
      jSONObject1.optInt("k7Vt", 3113);
      try { 
        jSONObject1.getBoolean("juuhA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"juuhA\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6845649069716608
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("null");
      jSONObject0.put("null", (Object) "null");
      try { 
        jSONObject0.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      try { 
        jSONObject0.get("jXUxm9tZ%S3/TKmR!ak");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jXUxm9tZ%S3/TKmR!ak\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Float float0 = new Float(1.3541);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6845649069716608
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("u(he", (Object) "u(he");
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject0.getBoolean("u(he");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u(he\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iJmih";
      JSONObject jSONObject1 = jSONObject0.put("iJmih", (Object) "iJmih");
      jSONObject1.accumulate("iJmih", "iJmih");
      try { 
        jSONObject0.getBoolean("iJmih");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iJmih\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 123;
      Integer integer0 = new Integer(123);
      Float float0 = new Float((float) 123);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.has("] is not a Boolean.");
      Float.isFinite(0.0F);
      jSONObject0.has("to");
      Float float1 = new Float((float) 123);
      String string0 = "A JSONObject text must endwith }'";
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.get("03L*)txl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"03L*)txl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      jSONObject0.isNull("wM?L");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject.quote(";TQ\"1V sVgJf<5|p08#");
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";TQ\"1V sVgJf<5|p08#";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.testValidity(jSONObject1);
      assertNotSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject.quote("rl\n");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rl\n";
      stringArray0[1] = "\"rl\n\"";
      stringArray0[2] = "rl\n";
      stringArray0[3] = "rl\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4375503412075572
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = JSONObject.quote("Tb\"1V sgJf<5wp08#");
      Float float0 = new Float((-158.64636F));
      Float.sum((-158.64636F), (-1666.8668F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.names();
      JSONObject.numberToString(float0);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("", ",\n");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      Double double0 = new Double((-1.0));
      String string1 = JSONObject.valueToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject.quote("] noc&p7rt fond.");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] noc&p7rt fond.";
      stringArray0[1] = "\"] noc&p7rt fond.\"";
      stringArray0[2] = "\"] noc&p7rt fond.\"";
      stringArray0[3] = "\"] noc&p7rt fond.\"";
      stringArray0[4] = "JIX4.a))qwqtkp";
      stringArray0[5] = "\"] noc&p7rt fond.\"";
      stringArray0[6] = "] noc&p7rt fond.";
      stringArray0[7] = "\"] noc&p7rt fond.\"";
      stringArray0[8] = "] noc&p7rt fond.";
      JSONObject jSONObject0 = new JSONObject("] noc&p7rt fond.", stringArray0);
      jSONObject0.optBoolean("islogicalOr");
      try { 
        jSONObject0.getBoolean("] noc&p7rt fond.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] noc&p7rt fond.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(40);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = JSONObject.quote("Tb\"1V sgJf<5wp08#");
      assertEquals("\"Tb\\\"1V sgJf<5wp08#\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-1659), (-1659));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = JSONObject.quote("0jU\n");
      assertEquals("\"0jU\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"0jU\n\"");
      JSONObject.valueToString(jSONObject0, (-1094), (-1094));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = JSONObject.quote("rl\n");
      assertEquals("\"rl\\n\"", string0);
      
      JSONObject.valueToString("\"rl\n\"", (-1340), 1892);
      Integer integer0 = new Integer((-1340));
      JSONObject.numberToString(integer0);
      JSONObject jSONObject0 = new JSONObject((Object) "\"java.lang.String@0000000001\"");
      jSONObject0.toString((-311), 420);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5171534199663772
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\",\n\"");
      assertEquals("\"\\\",\\n\\\"\"", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wM?L";
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@0000000002.", (Object) jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject1.write(stringWriter0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = JSONObject.quote("0jU\n");
      assertEquals("\"0jU\\n\"", string0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0, 12, 12);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.222965696461502
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-65));
      Boolean boolean0 = Boolean.valueOf(",\n");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.put("[", 1415L);
      jSONObject1.optLong("[");
      jSONObject1.toString((-50530497), (int) (byte) (-65));
      JSONTokener jSONTokener0 = new JSONTokener("[");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wM?L";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("wM?L", object0);
      try { 
        jSONObject1.getJSONObject("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)103);
      JSONObject jSONObject1 = jSONObject0.putOpt("`-7iO=<a8", short0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getInt("`-7iO=<a8");
      Long long0 = new Long((-1L));
      JSONObject.doubleToString((-1357.735));
      String string0 = JSONObject.doubleToString(4522.07114);
      assertEquals("4522.07114", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("A");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("isreplaceAll");
      String string0 = "{Y@&?s@7?d5)={#x";
      JSONTokener jSONTokener1 = new JSONTokener("{Y@&?s@7?d5)={#x");
      jSONTokener1.toString();
      try { 
        jSONTokener1.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 16 of {Y@&?s@7?d5)={#x
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{+*j<");
      jSONTokener0.toString();
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {+*j<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("{~R!L9}77=");
      assertEquals("", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject.quote("kAm3!]M");
      JSONObject jSONObject0 = new JSONObject((Object) "\"\\kAm3!]M\"");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter1);
      JSONTokener jSONTokener0 = new JSONTokener("kAm3!]M");
      JSONObject.testValidity(jSONTokener0);
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("{aXy'p2|nyejLy?K/n7");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3826070734809082
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wM?L";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("wM?L", object0);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject1.getBoolean("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wM?L\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.956558887917925
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "jFgud";
      JSONObject jSONObject1 = jSONObject0.put("jFgud", (Object) "jFgud");
      try { 
        jSONObject1.getLong("jFgud");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jFgud\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ipmin";
      JSONObject jSONObject1 = jSONObject0.put("ipmin", (Object) "ipmin");
      try { 
        jSONObject1.append("ipmin", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ipmin] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "juuhA";
      jSONObject0.put("juuhA", (Object) "juuhA");
      try { 
        jSONObject0.getJSONArray("juuhA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"juuhA\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "muuY";
      JSONObject jSONObject1 = jSONObject0.put("muuY", (Object) "muuY");
      try { 
        jSONObject1.getInt("muuY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"muuY\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0823563847381665
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Boolean.valueOf(false);
      Boolean.valueOf(false);
      Boolean.logicalXor(false, false);
      Boolean.logicalXor(false, false);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "null";
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(385, (long) 385);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("@im'", jSONArray0);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("@im'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of @im'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 32, 32);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      JSONObject.valueToString(hashMap0, 1, 1);
      String string0 = JSONObject.valueToString(hashMap0, 1, 1);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString((Object) null, 1, 1);
      jSONObject0.append("JSONArray[", jSONArray0);
      JSONArray jSONArray1 = jSONObject0.optJSONArray("JSONArray[");
      assertEquals(1, jSONArray1.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{P'E(:=~#.uga7");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 6 of {P'E(:=~#.uga7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.1081244635940606
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String string0 = "[";
      JSONObject jSONObject0 = new JSONObject((Object) "[");
      jSONObject0.toString((int) (byte) (-117));
      Double double0 = new Double((byte) (-117));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": [java.lang.Byte@0000000004],\n\"java.lang.String@0000000005\": \"java.lang.Class@0000000006\",\n\"java.lang.String@0000000007\": java.lang.Boolean@0000000008\n}");
      JSONObject jSONObject2 = new JSONObject();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("ma");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ma
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = "{k'E(:C~.uga7";
      JSONTokener jSONTokener0 = new JSONTokener("{k'E(:C~.uga7");
      jSONTokener0.syntaxError("] is not a JSONObject.");
      jSONTokener0.toString();
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {k'E(:C~.uga7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("jFguE", (Object) "jFguE");
      jSONObject0.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}");
      jSONTokener0.nextValue();
      jSONTokener0.syntaxError((String) null);
      jSONTokener0.back();
      Float float0 = new Float(1.0F);
      Object object0 = new Object();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 61 of {\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.036468722089663
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Object object0 = JSONObject.NULL;
      Object object1 = new Object();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      Short short0 = new Short((short) (-1000));
      JSONObject jSONObject1 = jSONObject0.put("islongValue", object0);
      jSONObject1.put("islongValue", (Collection) null);
      Long long0 = new Long((-3L));
      Float float0 = new Float((float) (-3L));
      jSONObject0.getJSONArray("islongValue");
      JSONObject.valueToString(float0, 89, 128);
      jSONObject0.put("gettrim", (Object) jSONObject1);
      JSONObject jSONObject2 = jSONObject1.put("gettrim", (Collection) null);
      int int0 = (-2448);
      jSONObject2.toString((int) (short) (-1000), (-2448));
      Float float1 = new Float((double) (-3L));
      try { 
        Integer.valueOf("islongValue", (-1005));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1005 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject.quote("] is not a Boolean.");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("{~R!L9}77=", (Collection) linkedList0);
      jSONObject0.optString("{~R!L9}77=");
      JSONObject.testValidity("{~R!L9}77=");
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("wM?L", object0);
      jSONObject0.accumulate("wM?L", jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('w');
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("wM?L", object0);
      jSONObject1.isNull("wM?L");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("wM?L");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wM?L
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wM?L";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("wM?L", (Object) jSONObject0);
      jSONObject1.getJSONObject("wM?L");
      try { 
        jSONObject1.getJSONObject("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "get";
      JSONObject jSONObject1 = jSONObject0.put("get", (Object) "get");
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject2 = jSONObject1.put("get", (Map) hashMap0);
      jSONObject0.optJSONObject("get");
      try { 
        jSONObject2.getBoolean("issplit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issplit\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "get";
      jSONObject0.put("get", (Object) "get");
      jSONObject0.put("get", true);
      jSONObject0.getBoolean("get");
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("jnuA", (Object) "jnuA");
      Short short0 = new Short((short)3796);
      Long long0 = new Long((short)3796);
      JSONObject jSONObject2 = jSONObject1.put("islongValue", (Object) long0);
      String string0 = "__No/,(V(Lv";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject3 = jSONObject2.put("__No/,(V(Lv", (Collection) linkedList0);
      Long long1 = new Long((short)3796);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONObject1.put("true", (Object) jSONArray0);
      jSONObject3.put("ismax", (Collection) null);
      jSONObject2.toString((-2448), (-2448));
      Float float0 = new Float((double) (short)3796);
      try { 
        Integer.valueOf("z:Z^!58itz~A", (-1005));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1005 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("wM?L", object0);
      boolean boolean0 = jSONObject1.isNull("wM?L");
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean(false);
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("wM?", object0);
      JSONObject jSONObject2 = jSONObject0.accumulate("wM?", jSONObject1);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject3 = jSONObject1.accumulate("wM?", boolean0);
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)35);
      jSONObject0.append("is", byte0);
      jSONObject0.append("is", object0);
      try { 
        jSONObject0.getDouble("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HashMap<Boolean, Short> hashMap0 = new HashMap<Boolean, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 1;
      JSONObject.valueToString(hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6845649069716608
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "iQmin";
      JSONObject jSONObject1 = jSONObject0.put("iQmin", 998);
      jSONObject1.optDouble("iQmin");
      jSONObject0.put("iQmin", (Object) "iQmin");
      try { 
        jSONObject0.getBoolean("iQmin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iQmin\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      String string0 = "8A Qxa{5m- \" FWv)I";
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(70);
      JSONObject jSONObject1 = jSONObject0.put("&E)u", (Object) integer0);
      jSONObject1.getDouble("&E)u");
      try { 
        Integer.decode("nbe9,3xrI22wjU(?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"nbe9,3xrI22wjU(?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.put("int", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("int");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = JSONObject.quote("LLMA</");
      assertEquals("\"LLMA<\\/\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Integer.toUnsignedLong((-752));
      String string0 = JSONObject.doubleToString(4294966544L);
      assertEquals("4.294966544E9", string0);
  }
}
