/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:51:03 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = 1871L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-3761L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-3761L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3762 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967288L, (-9223372036854775796L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 4294967288, -9223372036854775796 are not valid Space Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(2046L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.694153703984459
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 845L, 845L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 541L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("g*RRurd3e46H^pH68$C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse g*RRurd3e46H^pH68$C into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = (-26L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-26L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 1L;
      Range.Builder range_Builder0 = new Range.Builder(1L);
      long long1 = (-1408L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1408L));
      range_Builder1.shift(9223372036854775807L);
      long long2 = 1987L;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Qp@B1~ag2_H|QU=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Qp@B1~ag2_H|QU=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-2615L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd((-2147485544L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 1871L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-3761L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-3761L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd((-3761L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L);
      long long0 = (-1408L);
      range_Builder0.expandEnd((-1408L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range_Builder0.copy();
      range_Builder0.expandBegin((-9L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8745133271871883
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 281L, 281L);
      range0.complement(range0);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, 2138L, 2138L);
      range1.intersection(range0);
      range0.equals(range_CoordinateSystem0);
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9785439348439597
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(4294967288L);
      range0.equals(".sG");
      Range range1 = range0.asRange();
      range1.intersection(range0);
      range0.getLength();
      Long long0 = new Long(4294967288L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("W3<3pRnp@T=<{8K[7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.W3<3pRnp@T=<{8K[7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.712962173052891
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.startsBefore(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.824365939916928
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(2147483639L);
      Range range1 = Range.of(2147483640L);
      range0.startsBefore(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range1);
      range1.equals(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8357589838940775
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -32768 .. -32768 ]/0B", string0);
      
      Range range1 = Range.of((-1873L));
      Object object0 = new Object();
      range0.equals(range1);
      boolean boolean0 = range1.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.966943486189354
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals("");
      boolean boolean0 = range0.equals("UTF-8");
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.191573864609419
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of(9223372036854775284L);
      Range range1 = Range.of(9223372036854775284L);
      range1.equals(range0);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Long long0 = new Long(9223372036854775284L);
      Long.getLong("");
      range1.equals(long0);
      Long long1 = new Long(206L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775285L, long2);
      
      boolean boolean0 = range1.intersects(range0);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.362614650677469
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Range range1 = Range.ofLength(1L);
      range1.equals(range0);
      Range.CoordinateSystem.values();
      range0.equals(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Zero Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Zero Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      boolean boolean0 = range0.equals("UTF-8");
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.addFirst(range0);
      range0.complementFrom(linkedList0);
      range0.isEmpty();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775284L);
      range0.endsBefore(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.924781263085244
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(30L);
      Long long0 = new Long(30L);
      Long long1 = new Long((-32768L));
      Long.getLong("h%98r)$5{ge#", long1);
      Range range1 = Range.of(30L);
      range0.equals(range1);
      boolean boolean0 = range0.equals(long0);
      Long long2 = new Long((-128L));
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long3 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(31L, long3);
      
      boolean boolean1 = range1.intersects(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.824365939916929
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.getLength();
      range0.equals(object0);
      range0.split(9223372036854774949L);
      range0.equals((Object) null);
      Range.Comparators.values();
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.902823587955807
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.823416998397393
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-189L), (-189L));
      Long long0 = new Long((-189L));
      Range range1 = Range.of(range_CoordinateSystem0, (-962L), (-962L));
      range0.getBegin();
      range1.isSubRangeOf(range0);
      range1.getBegin();
      range1.equals(range0);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8917136024766323
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(756L, 9223372036854710280L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 560L, 9223372036854710280L);
      range0.equals(range1);
      range1.getBegin();
      assertFalse(range1.equals((Object)range0));
      
      Object object0 = new Object();
      range0.equals(object0);
      long long0 = range0.getEnd();
      assertEquals(9223372036854710280L, long0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9606885123462443
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(65535L, 2147483647L);
      Object object1 = new Object();
      range0.equals(object1);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(892L);
      Long long0 = new Long(438L);
      Range range1 = Range.of(438L);
      range1.getLength();
      range1.intersects(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals("");
      range0.equals("UTF-8");
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(range1.isEmpty());
      assertTrue(list0.contains(range0));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2230L), 9223372032559808510L);
      Object object0 = new Object();
      long long0 = range0.getEnd();
      assertEquals(9223372032559808510L, long0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-9223372036854774710L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8754478444593765
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967288L, 9223372036854775807L);
      Long long0 = new Long(4294967288L);
      Long long1 = new Long(4294967288L);
      Long.max(4294967288L, 2868L);
      range0.equals(long1);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("3M2-1>K7r", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.921657656496706
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-145L), (-145L));
      Long long0 = new Long((-145L));
      Range range1 = Range.of(range_CoordinateSystem0, (-966L), (-966L));
      range1.getBegin();
      range1.intersection(range0);
      Object object0 = new Object();
      range0.isSubRangeOf(range1);
      Object object1 = new Object();
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(860L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.799768088520818
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-107L));
      Range range1 = Range.of((-19L));
      Object object0 = new Object();
      range1.equals(object0);
      range1.startsBefore(range0);
      range1.startsBefore(range0);
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.874573052004374
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967314L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 4294967314 .. 9223372036854775807 ]/SB", range_CoordinateSystem2);
      range1.equals(range_CoordinateSystem1);
      range0.equals(range1);
      Object object0 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(1537L);
      Range range1 = Range.of(6356L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(309L);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967288L, 4294967288L);
      Long long0 = new Long(4294967288L);
      Long long1 = new Long(4294967288L);
      long long2 = Long.max(4294967288L, 2868L);
      assertEquals(4294967288L, long2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.149557874507356
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -32768 .. -32768 ]/0B", string0);
      
      Range range1 = Range.of((-1873L));
      Range range2 = range0.intersection(range1);
      String string1 = range2.toString();
      assertEquals("[ 0 .. -1 ]/0B", string1);
      
      Object object0 = new Object();
      range0.equals(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(9223372036854775284L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(877L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(673L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.886202314102128
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-2147483648L));
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(796L, 796L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 560L, 796L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      range1.equals(range_CoordinateSystem0);
      long long0 = range0.getEnd();
      assertEquals(796L, long0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(9223372036854775303L);
      Range range1 = Range.of(9223372036854775303L, 9223372036854775303L);
      range1.equals(range0);
      range0.complement(range1);
      Long.getLong("");
      Long long0 = new Long(206L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.Comparators.values();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(4294967285L);
      range0.equals(range0);
      Range.CoordinateSystem.values();
      Long long0 = new Long(4294967285L);
      assertEquals(4294967285L, (long)long0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(4294967288L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(796L, 9223372036854710280L);
      boolean boolean0 = range0.equals((Object) null);
      boolean boolean1 = range0.equals("");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775284L);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(756L, 9223372036854710280L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.809783478004049
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.equals(object0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of(892L);
      long long0 = range0.getBegin();
      assertEquals(892L, long0);
      
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.97854393484396
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775807L, long0);
      
      long long1 = range0.getLength();
      assertEquals(9223372032559808519L, long1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(object0);
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(4294967317L);
      range0.equals(range0);
      Range.CoordinateSystem.values();
      long long0 = new Long(4294967317L);
      assertEquals(4294967317L, long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(114L);
      Range range1 = Range.ofLength(114L);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-32762L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.778225413018443
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-340L), (-340L));
      Range range1 = Range.of(range_CoordinateSystem0, (-962L), (-962L));
      Range range2 = Range.of(range_CoordinateSystem0, (-962L), (-962L));
      boolean boolean0 = range1.equals(range2);
      long long0 = range0.getBegin();
      assertEquals((-340L), long0);
      
      boolean boolean1 = range0.equals(range1);
      assertSame(range1, range2);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean2 = range0.equals((Object) null);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals("");
      range0.getBegin();
      Range range1 = Range.of(2454L);
      range1.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.013412304782512
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294966390L, 4294967295L);
      range0.getBegin();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Long long0 = new Long(4294967295L);
      range0.equals(long0);
      range0.equals(long0);
      long long1 = range0.getBegin();
      assertEquals(4294967295L, long1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      range1.equals(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967288L, 9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(4294967288L, 9223372036854710273L);
      Range range1 = range0.asRange();
      long long0 = range1.getLength();
      assertEquals(9223372032559742986L, long0);
      
      long long1 = range1.getBegin();
      assertEquals(4294967288L, long1);
      
      range1.equals(range1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1283L, 4294967295L);
      Long long0 = new Long(2147483640L);
      Long long1 = new Long(9223372036854775807L);
      Long.max(3064L, 2868L);
      range0.equals(long1);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.5553480614894135
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(9223372036854775284L, 9223372036854775284L);
      Range range1 = Range.ofLength(9223372036854775284L);
      Long long0 = new Long(9223372036854775284L);
      Long long1 = new Long(9223372036854775284L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8745730520043735
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(9223372036854775284L, 9223372036854775284L);
      Range.of(9223372036854775284L, 9223372036854775284L);
      range0.getEnd();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(9223372036854775284L, 9223372036854775284L);
      Range.of(9223372036854775284L, 9223372036854775284L);
      Range range1 = Range.of(9223372036854775284L, 9223372036854775807L);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.ofLength(4294967301L);
      Range range1 = Range.ofLength(9223372032559808520L);
      range0.equals(range1);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.961733480018979
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(4294967301L);
      Range range1 = Range.of(1L, 4294967301L);
      range0.equals(range1);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = (-1873L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967300L, 9223372036854775807L);
      Long long0 = new Long(4294967300L);
      Long long1 = new Long(4294967300L);
      Long.max(4294967300L, 2868L);
      range0.equals((Object) null);
      range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(4294967288L);
      Range range1 = Range.ofLength(2147483647L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.9617334800189785
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(4294967288L);
      Range range1 = Range.of(1L, 4294967288L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      long long0 = range1.getEnd();
      assertEquals(4294967288L, long0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.8147041867002995
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      range0.getLength();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem.values();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      long long0 = 875L;
      Range range0 = Range.of(875L, 9223372036854710280L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 502L, 9223372036854710280L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.of(875L, 502L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.026343894846192
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-1705L));
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range1.getEnd();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.of(96L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-2147483686L), (-1705L));
      Range range1 = Range.of((-2147483686L), (-2147483686L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Range.Comparators.values();
      long long0 = range0.getBegin();
      assertFalse(range0.equals((Object)range1));
      assertEquals((-2147483686L), long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.229118808315411
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.ofLength(2147549189L);
      Range range1 = Range.of(506L, 2147549189L);
      Range range2 = range0.intersection(range1);
      range2.iterator();
      boolean boolean0 = range1.equals(range2);
      assertFalse(boolean0);
      
      long long0 = range2.getEnd();
      assertEquals(2147549188L, long0);
      
      long long1 = range1.getBegin();
      assertEquals(506L, long1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(506L, 2147549189L);
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(9223372036854775284L);
      range0.spliterator();
      range0.getEnd();
      Range range1 = Range.of(9223372036854775283L);
      range1.equals(range0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Z?!o8k}M?", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Z?!o8k}M? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = new Long(2147483647L);
      range0.toString();
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.equals(range0);
      range0.isEmpty();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 2147483647 .. 2147483646 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 2147483647 .. 2147483646 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967314L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 4294967314 .. 9223372036854775807 ]/SB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 4294967314 .. 9223372036854775807 ]/SB", range_CoordinateSystem2);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.parseRange("[ 4294967314 .. 9223372036854775807 ]/SB", range_CoordinateSystem3);
      range0.equals(range2);
      boolean boolean1 = range0.equals(range2);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.1326043672347037
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range range2 = Range.of(range_CoordinateSystem0, (-7L), 0L);
      range0.equals(range2);
      range0.getEnd();
      range1.getBegin();
      Long long0 = new Long((-7L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.1536542749750778
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of((-1L), 520L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem2, (-1L), 521L);
      range1.spliterator();
      range1.equals(range0);
      Object object1 = new Object();
      range1.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 281L, 281L);
      range0.getLength();
      range0.equals(range0);
      range0.equals("=712m#PL?");
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(875L, 9223372036854710262L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 875L, 9223372036854710262L);
      range1.equals(object0);
      boolean boolean0 = range1.equals(object0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertNotSame(range1, range0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.816469954316438
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 281L, 281L);
      Range range1 = Range.of(range_CoordinateSystem0, 1329L, 1329L);
      range1.getLength();
      range1.startsBefore(range0);
      range1.equals(range0);
      range1.equals("=712m#PL?");
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
