/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:25:05 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-62));
      advancedSettings0.setClientSocketReceiveBufferSize(2904);
      advancedSettings0.setClientSocketSendBufferSize(2904);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesConnectionTime((-62));
      assertEquals((-62), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTrafficClass("</client-socket-receive-buffer-size>\n");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(133);
      assertEquals(133, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setByteBufferSize(0);
      assertEquals(0, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(0);
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("z;{i!U(w");
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(2994);
      advancedSettings0.setPerformancePreferencesBandwidth(2994);
      advancedSettings0.getCharset();
      advancedSettings0.setSocketLinger(2994);
      advancedSettings0.setByteBufferSize(2994);
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(2994, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setQSObjectPoolMaker("");
      assertEquals((-1), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesLatency((-469));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime((-469));
      assertEquals((-469), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = 850;
      advancedSettings0.setClientSocketSendBufferSize(850);
      int int1 = (-1050);
      advancedSettings0.setClientSocketSendBufferSize((-1050));
      advancedSettings0.setByteBufferSize((-1050));
      int int2 = 3935;
      advancedSettings0.setClientSocketSendBufferSize(3935);
      String string0 = "{aB`!odk";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("{aB`!odk");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // {aB`!odk
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(4264);
      advancedSettings0.toXML((String) null);
      assertEquals(4264, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getBacklog();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      int int0 = 850;
      advancedSettings0.setClientSocketSendBufferSize(850);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketSendBufferSize((-1829));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(850);
      advancedSettings1.setClientSocketSendBufferSize(0);
      String string0 = "{aB`!odk";
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("H`E/");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // H`E/
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("% ");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setQSObjectPoolMaker("+p~J@_ H");
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals("% ", advancedSettings0.getClientIdentifier());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketSendBufferSize(3935);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("5#pW,c ))57/)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 5#pW,c ))57/)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setBacklog(2539);
      advancedSettings0.setClientSocketReceiveBufferSize(955);
      advancedSettings0.setClientSocketTrafficClass("6z{6O@N");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.toXML("</charset>\n");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-3617));
      advancedSettings0.setSocketLinger((-3617));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-1744));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      String string0 = "G/pmP$%T%$/Y";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("G/pmP$%T%$/Y");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // G/pmP$%T%$/Y
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(2239);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("");
      assertEquals(2239, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "\t<qsobject-pool-maker>";
      advancedSettings0.setPerformancePreferencesBandwidth(42);
      String string1 = "";
      advancedSettings0.setQSObjectPoolMaker("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<qsobject-pool-maker>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<qsobject-pool-maker>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(1849);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth(1849);
      assertEquals(1849, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-1);
      advancedSettings0.setClientSocketTrafficClass("</max-threads-for-nio-write>\n");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesLatency(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</max-threads-for-nio-write>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </max-threads-for-nio-write>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(1);
      advancedSettings0.setClientSocketTrafficClass("</client-identifier>\n");
      advancedSettings0.setBacklog((-1787));
      advancedSettings0.setClientIdentifier("</client-identifier>\n");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite(65536);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setPerformancePreferencesLatency((-1787));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog((-3546));
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setBacklog(1);
      assertEquals(65536, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-2654);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2654));
      String string0 = "t";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("t");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // t
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("Mh^A");
      advancedSettings0.setByteBufferSize((-769));
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setCharset("");
      assertEquals("Mh^A", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 1205;
      advancedSettings0.setByteBufferSize(1205);
      advancedSettings0.setClientSocketSendBufferSize((-364));
      advancedSettings0.setQSObjectPoolMaker("\t<qsobject-pool-maker>");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<{_H");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <{_H
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("lzg}=]9}M8B,3Prlz");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite((-2449));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("[");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("[");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // [
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-242));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("\u0000*no/l");
      advancedSettings0.setClientIdentifier("~R!");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setQSObjectPoolMaker("</charset>\n");
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketSendBufferSize(618);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize((-116));
      advancedSettings0.setClientIdentifier("Mq5");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getCharset();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, int0);
  }
}
