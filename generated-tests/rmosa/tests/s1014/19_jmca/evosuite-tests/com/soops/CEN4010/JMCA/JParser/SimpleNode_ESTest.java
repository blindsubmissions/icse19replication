/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:16:15 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "y";
      JavaParser javaParser0 = new JavaParser("y");
      simpleNode0.parser = javaParser0;
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter1.close();
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter2 = new StringWriter(9);
      SimpleNode simpleNode1 = new SimpleNode(9);
      simpleNode1.parser = simpleNode0.parser;
      simpleNode0.dump(">=", stringWriter0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = (Node) simpleNode1;
      nodeArray0[2] = (Node) simpleNode1;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode1;
      SimpleNode simpleNode2 = new SimpleNode(simpleNode0.parser, 119);
      nodeArray0[7] = (Node) simpleNode2;
      nodeArray0[8] = (Node) simpleNode0;
      simpleNode1.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode1.dump("w2^%URrW", stringWriter1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-3158);
      SimpleNode simpleNode0 = new SimpleNode((-3158));
      simpleNode0.jjtGetParent();
      simpleNode0.jjtClose();
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode0, (-3158));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      stringWriter1.flush();
      stringWriter0.close();
      simpleNode0.jjtAddChild((Node) null, 2674);
      simpleNode0.parent = null;
      SimpleNode simpleNode1 = new SimpleNode(121);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1074787335));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1074787335
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5138165375168556
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      stringWriter1.flush();
      stringWriter0.close();
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier("a+OLzwgM~Jp!(*4-%");
      StringWriter stringWriter2 = new StringWriter(9);
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump("<INTEGER_LITERAL>", stringWriter1);
      SimpleNode simpleNode1 = new SimpleNode(9);
      simpleNode1.dump("<INTEGER_LITERAL>", stringWriter3);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode1.toString();
      simpleNode1.dump("", stringWriter0);
      simpleNode0.dump("", stringWriter2);
      simpleNode0.dump("EnumBody", stringWriter0);
      simpleNode1.dump("", stringWriter2);
      stringWriter3.append((CharSequence) "'$5 %d6cZ'");
      StringWriter stringWriter4 = new StringWriter();
      simpleNode1.dump("int", stringWriter3);
      simpleNode0.dump("'$5 %d6cZ'", stringWriter4);
      simpleNode1.dump(".2__N", stringWriter1);
      StringWriter stringWriter5 = new StringWriter(2094);
      simpleNode1.dump("a+OLzwgM~Jp!(*4-%", stringWriter5);
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals(":<EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n<EnumBody><EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n</EnumBody>\n<EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n<EnumBody><EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n</EnumBody>\n<EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n", stringWriter1.toString());
      assertEquals(":<EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n<EnumBody><EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n</EnumBody>\n<EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n<EnumBody><EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n</EnumBody>\n<EnumBody>\n  <identifier>a+OLzwgM~Jp!(*4-%</identifier>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtOpen();
      String string0 = "com.soops.CEN4010.JMCA.JParser.SimpleNode";
      JavaParser javaParser0 = new JavaParser("com.soops.CEN4010.JMCA.JParser.SimpleNode");
      JJTJavaParserState jJTJavaParserState0 = javaParser0.jjtree;
      // Undeclared exception!
      try { 
        jJTJavaParserState0.peekNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.640036020064709
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(28);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      stringWriter0.append((CharSequence) "a+OLzwgM~Jp!(*4-%");
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter1 = new StringWriter(28);
      stringWriter1.write(">>");
      simpleNode0.dump("'$5 %d6cZ'", stringWriter1);
      SimpleNode simpleNode1 = new SimpleNode(28);
      simpleNode1.jjtAddChild(simpleNode0, 28);
      simpleNode1.toString();
      simpleNode1.toString("lt");
      StringWriter stringWriter2 = stringWriter1.append('V');
      simpleNode1.dump("Type", stringWriter2);
      simpleNode1.dump("`OLi>/$$", stringWriter1);
      simpleNode0.dump("lt", stringWriter2);
      simpleNode1.dump("*amp", stringWriter0);
      assertEquals("a+OLzwgM~Jp!(*4-%<Type><Type>\n  <identifier>*ge</identifier>\n</Type>\n</Type>\n", stringWriter0.toString());
      assertEquals(29, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3245083869310707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      SimpleNode simpleNode1 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter(84);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter1 = new StringWriter(1);
      stringWriter1.append((CharSequence) ">");
      SimpleNode simpleNode2 = new SimpleNode(1);
      simpleNode2.setIdentifier("vBBiL%R)KZ_i\"");
      simpleNode0.dump(">", stringWriter1);
      simpleNode2.dump("vBBiL%R)KZ_i\"", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      simpleNode1.dump(">", stringWriter3);
      simpleNode2.dump(">", stringWriter2);
      assertEquals("<PackageDeclaration>\n  <identifier>vBBiL%R)KZ_i\"</identifier>\n</PackageDeclaration>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.7071094627648349
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "a+OLzwgM~Jp!(*4-%");
      simpleNode0.setIdentifier(">");
      SimpleNode simpleNode1 = new SimpleNode(47);
      simpleNode1.dump(" (<U3MXwsIKK", stringWriter1);
      SimpleNode simpleNode2 = new SimpleNode(47);
      simpleNode1.jjtAddChild(simpleNode2, 1036);
      simpleNode0.toString();
      simpleNode2.dump("BQe@-6F/zl1]e", stringWriter0);
      simpleNode0.dump("InstanceOfExpression : >", stringWriter0);
      simpleNode2.dump("I* db0", stringWriter0);
      simpleNode2.dump("H:w'mA%xW+l", stringWriter1);
      assertEquals("a+OLzwgM~Jp!(*4-%<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n", stringWriter1.toString());
      assertEquals("a+OLzwgM~Jp!(*4-%<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      JavaParser javaParser0 = new JavaParser("y");
      simpleNode0.parser = javaParser0;
      SimpleNode simpleNode1 = new SimpleNode(simpleNode0.parser, 9);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      SimpleNode simpleNode2 = new SimpleNode(simpleNode0.parser, (-1543));
      simpleNode1.jjtAddChild(simpleNode2, 711);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "true");
      simpleNode1.dump((String) null, stringWriter0);
      simpleNode2.dump("&&", stringWriter0);
      simpleNode1.dump((String) null, stringWriter0);
      simpleNode1.dump("TypeBound", stringWriter0);
      assertEquals("<EnumBody></EnumBody>\n<EnumBody></EnumBody>\n<EnumBody></EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.jjtSetParent((Node) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "a+OLzwgM~Jp!(*4-%");
      simpleNode0.setIdentifier(">");
      simpleNode0.dump("\"volatile\"", stringWriter0);
      stringWriter0.append('/');
      SimpleNode simpleNode1 = new SimpleNode((-2021358545));
      simpleNode1.dump("a+OLzwgM~Jp!(*4-%", stringWriter1);
      simpleNode0.dump("\"volatile\"", stringWriter0);
      simpleNode0.dump("<lPZ]r", stringWriter1);
      assertEquals("a+OLzwgM~Jp!(*4-%<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n/<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n", stringWriter1.toString());
      assertEquals("a+OLzwgM~Jp!(*4-%<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n/<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(52);
      StringWriter stringWriter0 = new StringWriter(1298);
      stringWriter0.close();
      stringWriter0.append((CharSequence) "a+OLzwgM~Jp!(*4-%");
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      stringWriter0.append('4');
      simpleNode0.dump("a+OLzwgM~Jp!(*4-%", stringWriter0);
      simpleNode0.jjtGetNumChildren();
      SimpleNode simpleNode1 = new SimpleNode(1298);
      JavaParser javaParser0 = new JavaParser("Java Parser Version 1.1:  Encountered errors during parse.");
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 57);
      assertEquals(0, simpleNode2.jjtGetNumChildren());
      
      simpleNode2.jjtAddChild(simpleNode1, 0);
      int int0 = simpleNode2.jjtGetNumChildren();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "a+OLzwgM~Jp!(*4-%");
      simpleNode0.setIdentifier(">");
      simpleNode0.dump("\"volatile\"", stringWriter0);
      stringWriter0.append('/');
      SimpleNode simpleNode1 = new SimpleNode((-2021358545));
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode1.dump(";", stringWriter1);
      simpleNode0.dump(";", stringWriter0);
      simpleNode1.dump(">", stringWriter0);
      assertEquals("a+OLzwgM~Jp!(*4-%<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n/<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(':');
      stringWriter1.flush();
      stringWriter0.close();
      simpleNode0.setIdentifier("<=");
      simpleNode0.dump("<=", stringWriter1);
      StringWriter stringWriter2 = stringWriter1.append(',');
      SimpleNode simpleNode1 = new SimpleNode((-2021358545));
      simpleNode1.dump("*le", stringWriter2);
      assertEquals(":<InstanceOfExpression>\n  <identifier>*le</identifier>\n</InstanceOfExpression>\n,", stringWriter1.toString());
      assertEquals(":<InstanceOfExpression>\n  <identifier>*le</identifier>\n</InstanceOfExpression>\n,", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      simpleNode0.setIdentifier("{");
      simpleNode0.dump("a+OLzwgM~Jp!(*4-%", stringWriter0);
      assertEquals("<InstanceOfExpression>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      JavaParser javaParser0 = new JavaParser("y");
      simpleNode0.parser = javaParser0;
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      stringWriter1.close();
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter2 = new StringWriter(9);
      SimpleNode simpleNode1 = new SimpleNode(9);
      simpleNode1.parser = simpleNode0.parser;
      simpleNode0.dump(">=", stringWriter0);
      simpleNode1.dump("w2^%URrW", stringWriter1);
      simpleNode1.dump("EnumBody", stringWriter0);
      simpleNode0.dump("y", stringWriter0);
      assertEquals("null<EnumBody>\n  <identifier>*ge</identifier>\n</EnumBody>\n<EnumBody>\n  <identifier>*ge</identifier>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(97);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "a+OLzwgM~Jp!(*4-%");
      simpleNode0.setIdentifier("&");
      simpleNode0.dump("PreDecrementExpression", stringWriter1);
      assertEquals("a+OLzwgM~Jp!(*4-%<MarkerAnnotation>\n  <identifier>*amp</identifier>\n</MarkerAnnotation>\n", stringWriter1.toString());
      assertEquals("a+OLzwgM~Jp!(*4-%<MarkerAnnotation>\n  <identifier>*amp</identifier>\n</MarkerAnnotation>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<<");
      simpleNode0.dump("<<", stringWriter0);
      assertEquals("<PackageDeclaration>\n  <identifier>*lshft</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(106);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.close();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.dump("&&", stringWriter0);
      simpleNode0.setIdentifier("&&");
      simpleNode0.dump("&&", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(106);
      simpleNode1.dump("&&", stringWriter0);
      simpleNode1.dump("&&", stringWriter0);
      assertEquals("<DefaultValue>\n  <identifier>*amp</identifier>\n</DefaultValue>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(31);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("}");
      simpleNode0.dump(">", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('/');
      SimpleNode simpleNode1 = new SimpleNode((-2021358545));
      simpleNode1.dump("a+OLzwgM~Jp!(*4-%", stringWriter0);
      simpleNode1.dump("\"volatile\"", stringWriter1);
      assertEquals("<TypeArguments>\n</TypeArguments>\n/", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(1);
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.dump("", stringWriter0);
      assertEquals("\u0001<PackageDeclaration>\n  <identifier>*lt</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>*lt</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>*lt</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter1 = stringWriter0.append('k');
      SimpleNode simpleNode1 = new SimpleNode((-2021426403));
      simpleNode0.dump("A|`ypm?JyE@/w${b]Q|", stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode1.dump("TypeArguments", stringWriter2);
      assertFalse(simpleNode1.equals((Object)simpleNode0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode1.setIdentifier(">");
      SimpleNode simpleNode2 = new SimpleNode(1);
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<ForInit>\n  <identifier>*rshft</identifier>\n</ForInit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      JavaParser javaParser0 = new JavaParser("<identifier>Literal Value</identifier>\n");
      StringWriter stringWriter0 = new StringWriter(9);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("<identifier>Literal Value</identifier>\n");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<identifier>Literal Value</identifier>\n");
      SimpleNode simpleNode1 = new SimpleNode(9);
      char[] charArray0 = new char[2];
      charArray0[1] = 'R';
      Node[] nodeArray0 = new Node[0];
      simpleNode1.children = nodeArray0;
      simpleNode1.dump("w2^%URrW", stringWriter0);
      assertEquals(0, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      SimpleNode simpleNode1 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter(1);
      simpleNode0.setIdentifier("");
      JavaParser javaParser0 = new JavaParser(">>");
      SimpleNode simpleNode2 = new SimpleNode(18);
      simpleNode2.setIdentifier(">>");
      simpleNode2.setIdentifier("");
      SimpleNode simpleNode3 = new SimpleNode((-493));
      simpleNode0.dump("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess", stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode1.dump(">>", stringWriter0);
      simpleNode1.dump("", stringWriter0);
      simpleNode2.dump(">>", stringWriter0);
      simpleNode0.dump("", stringWriter0);
      assertEquals("<PackageDeclaration>\n</PackageDeclaration>\n<VariableDeclaratorId>\n  <identifier>*rshft</identifier>\n</VariableDeclaratorId>\n<PackageDeclaration>\n</PackageDeclaration>\n", stringWriter0.toString());
  }
}
