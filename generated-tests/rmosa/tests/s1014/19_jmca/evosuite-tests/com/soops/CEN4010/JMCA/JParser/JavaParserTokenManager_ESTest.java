/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 11:38:28 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7420948513274582
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vp");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)125;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0725425366907027
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("86K]S:Bcf-ii?");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2204), (-2204), 1304);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-2204));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2204. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6659719558982153
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]QP+Zy:i");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2445, (-672), 47);
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-670), javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6208203668487002
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]QP+Zy:i");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2445, (-672), 47);
      javaCharStream0.FillBuff();
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = Token.newToken((-672));
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals((-672), javaCharStream0.getBeginColumn());
      assertEquals((-672), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1574063695721108
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-121);
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte) (-47);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("\")\"");
      javaCharStream0.inputStream = (Reader) stringReader0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader1 = new StringReader("2Dw:eR");
      javaCharStream0.ReInit((Reader) stringReader1, (int) (byte)28, (int) (byte)28);
      Token token0 = new Token();
      javaParserTokenManager0.TokenLexicalActions(token0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.reset();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaCharStream0.UpdateLineColumn('G');
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-2864));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2864. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9106860237635703
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'u/2{((");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 244, 244, 244);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 244, column 246.  Encountered: \"/\" (47), after : \"\\'u\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4988484127801347
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?,L6*=>{#3Fa[tY");
      stringReader0.mark(16);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, (-358));
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      charArray0[2] = '5';
      stringReader0.read(charArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token1 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.SkipLexicalActions(token0);
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertEquals((-354), javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.bufpos);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.990821077963976
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H7VZ)Em,");
      stringReader0.mark(3270);
      stringReader0.mark(16);
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = '!';
      charArray0[2] = '7';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-885), 58);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(59, javaCharStream0.getBeginColumn());
      assertEquals(")", token0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9621733712278555
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.skip((byte)14);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = new Token();
      javaParserTokenManager0.TokenLexicalActions(token0);
      byteArrayInputStream0.markSupported();
      byteArrayInputStream0.skip(2L);
      byteArrayInputStream0.reset();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u000e\" (14), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6659719558982153
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]QP+Zy:i");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2445, (-672), 47);
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      MockFile mockFile0 = new MockFile("new");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.ITALIAN;
      PrintStream printStream0 = mockPrintStream0.format(locale0, "]QP+Zy:i", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      javaParserTokenManager0.setDebugStream(printStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-672), javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0495129201568638
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x$V>>*G6*:9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      int int0 = 3642;
      javaParserTokenManager0.jjnewStateCnt = 3642;
      char[] charArray0 = new char[1];
      charArray0[0] = '5';
      javaParserTokenManager0.input_stream = javaCharStream0;
      stringReader0.read(charArray0);
      Token token0 = javaParserTokenManager0.getNextToken();
      int int1 = 58;
      token0.image = "x$V>>*G6*:9";
      token0.beginLine = 58;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      token0.beginLine = 1;
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      File file0 = MockFile.createTempFile("x$V>>*G6*:9", "x$V>>*G6*:9");
      try { 
        MockFile.createTempFile("x$V>>*G6*:9", "Yec5I:}#", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0946600495950138
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"else\"");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)69, 2, (byte)69);
      stringReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      char[] charArray0 = new char[0];
      javaCharStream0.nextCharBuf = charArray0;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0061742195272536
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("++");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-672), 984);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.image = "++";
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(984, javaCharStream0.getBeginColumn());
      assertEquals(985, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0195249015738743
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (byte)0, (byte)28);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4474960394447567
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tru");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2529, 1000, 2529);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 1000;
      intArray0[2] = (-1449);
      intArray0[3] = 2529;
      javaCharStream0.bufcolumn = intArray0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaCharStream0.backup((-1010));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1002, javaCharStream0.getBeginColumn());
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3177937305360579
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("new");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, (byte)0, (byte)0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5534735682252014
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2529, 1000, 2529);
      int[] intArray0 = new int[4];
      intArray0[0] = 2529;
      intArray0[1] = 1000;
      intArray0[2] = (-1449);
      intArray0[3] = 2529;
      javaCharStream0.bufcolumn = intArray0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaCharStream0.backup((-1010));
      int[] intArray1 = new int[8];
      intArray1[0] = (-1010);
      intArray1[1] = 2222;
      intArray1[2] = (-1010);
      intArray1[3] = (-1010);
      intArray1[4] = 2529;
      intArray1[5] = (-1010);
      intArray1[6] = (-1010);
      intArray1[7] = 1009;
      javaCharStream0.bufline = intArray1;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1000, javaCharStream0.getBeginColumn());
      assertEquals(61, token0.kind);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1659837730176281
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-119);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjimageLen = 16;
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("\u0149", token0.toString());
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.184684549036312
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaCharStream0.backup((byte) (-8));
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.jjFillToken();
      javaCharStream0.Done();
      token1.next = token0;
      Token.newToken(666);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, (-2385), (byte)79, 1);
      javaCharStream1.available = 1;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((byte)69);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 69. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1244090607223383
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2529, 1000, 2529);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-885), (-885));
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(2, javaCharStream2.getEndColumn());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.505421061691098
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N+(&F0`1(%eln,!e");
      StringReader stringReader1 = new StringReader("N+(&F0`1(%eln,!e");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)58;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)51;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      byteArrayInputStream0.reset();
      Token token0 = new Token();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0505492800778384
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ozS`US!?");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 114, 321, 115);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0210060741771227
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("E", token0.toString());
      assertEquals(74, token0.kind);
      
      Token token1 = new Token();
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token2.kind);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1656575943936078
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H7VZ)Em,");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringReader0.mark(16);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-885), 58);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)48;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4567779623383825
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vp");
      StringReader stringReader0 = new StringReader("native");
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader1 = new StringReader("s$5m&|#e{IOzl7");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2, 2, 2048);
      stringReader1.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.bufpos = 2048;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2, column 8.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4709549498647483
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vEjkcBq5Z3");
      StringReader stringReader0 = new StringReader("YrU+MA;dNrcQo3");
      stringReader0.mark((byte)55);
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0509603909569225
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Bbq");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3639), (-3639), 97);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(3, javaCharStream1.getColumn());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.474431023750964
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      StringReader stringReader0 = new StringReader("while");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1, 1769, (byte)28);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.jjmatchedPos = (-1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(1769, javaCharStream1.getBeginColumn());
      assertEquals(1773, javaCharStream1.getColumn());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9458115120847672
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 15, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(21, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.684239607557355
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boxe(n");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 15, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(18, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7178033939582644
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("short");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)55, 543, 89);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token1 = javaParserTokenManager1.jjFillToken();
      javaParserTokenManager1.input_stream = javaCharStream0;
      javaParserTokenManager1.SkipLexicalActions(token0);
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(547, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8250111016881045
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("final");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 465);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 465. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.835907726735761
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vp");
      StringReader stringReader0 = new StringReader("native");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24, 91);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(29, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8593092245995049
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("static");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "static");
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Token token0 = javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)113;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("qoq", token0.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7266194818534493
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x$V>>*G6*:9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      javaCharStream0.inputStream = (Reader) stringReader0;
      javaParserTokenManager0.jjnewStateCnt = 3642;
      char[] charArray0 = new char[1];
      stringReader0.mark(3642);
      charArray0[0] = '5';
      javaParserTokenManager0.input_stream = javaCharStream0;
      stringReader0.read(charArray0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.image = "x$V>>*G6*:9";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(5, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5668434290030966
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">>>=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<EXPONENT>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-672), 867, 825);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.TokenLexicalActions(token0);
      javaParserTokenManager1.SkipLexicalActions(token0);
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(867, javaCharStream0.getBeginColumn());
      assertEquals(870, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.19734072770205
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = '@';
      charArray0[2] = 'f';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 62, 1498, 1498);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curChar = 'f';
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.bufpos);
      assertEquals(124, token0.kind);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0900326901780029
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N+(&F0`1(%eln,!e");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 321, 321, 662);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(322, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.46788182411995
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-456), 55, 35);
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(14, javaCharStream0.bufpos);
      assertEquals(69, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4899862769303143
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[5] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("d<uhQk}sckb0U");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1021, (byte)40, (byte)101);
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(46, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4651893950794024
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w?`pINyK]ZeB}veE3]V");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 33, 33, 33);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      javaCharStream1.prevCharIsLF = true;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals("w", token0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9936917876721477
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+CE&pPojb,");
      StringReader stringReader0 = new StringReader("xz';zHi51,Lxcc(X");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 23, 91, 74);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.next;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(92, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9672949211697504
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H7VZ)Em,");
      stringReader0.mark(3270);
      stringReader0.mark(16);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-885), 58);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(61, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringReader stringReader0 = new StringReader("do");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 655, 655, 20);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader1 = new StringReader("%");
      stringReader1.mark(20);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.TokenLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(656, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6208203668487002
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?,L6*=>{#3Fa[tY");
      stringReader0.mark(16);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, (-358));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endColumn = 22;
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(",", token1.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9901172232794796
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"char\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 20, 655, 655);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = 655;
      stringReader0.mark(20);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaCharStream0.prevCharIsCR = false;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(73, token0.kind);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4636840036127363
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H7VZ)Em,");
      stringReader0.mark(16);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-885), 58);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)61;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[1] = (byte)45;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, javaCharStream1.getColumn());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.059971581279863
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+CE&pPojb,");
      StringReader stringReader0 = new StringReader("xz';zHi51,Lxcc(X");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 23, 91, 74);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.BeginToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager1.debugStream);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0359320178987352
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if");
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)14;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      byteArrayInputStream0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      byteArrayInputStream1.read(byteArray0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4665363510490446
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?,L6*=>{#3Fa[tY");
      stringReader0.mark(16);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, (-358));
      FileSystemHandling.shouldAllThrowIOExceptions();
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[2] = '5';
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-351), javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)101;
      byteArray0[2] = (byte)0;
      StringReader stringReader0 = new StringReader("4vdTU]tW");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 21, 21, 2633);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.kind = 1231;
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(25, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"6K]S:Bcf-Z@?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2204), (-2204), 1304);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2204, column -2191.  Encountered: <EOF> after : \"\\\"6K]S:Bcf-Z@?\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[2] = (byte)101;
      StringReader stringReader0 = new StringReader("IL6_*&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjFillToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0913876605765003
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", 38TU%R%buayv% '9v");
      StringReader stringReader1 = new StringReader("A0C NW 0|-");
      StringReader stringReader2 = new StringReader("A0C NW 0|-");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.TokenLexicalActions(token0);
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1148109080812005
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)28;
      byteArray0[3] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      StringReader stringReader0 = new StringReader("-=");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream2);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(1, javaCharStream2.bufpos);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals("-=", token0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5207108143724417
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)55;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.skip(4414L);
      byteArrayInputStream0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'A';
      charArray0[2] = '>';
      charArray0[3] = 'M';
      javaCharStream0.buffer = charArray0;
      Token token0 = javaParserTokenManager0.getNextToken();
      Token.newToken(105);
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("7", token1.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4796164096561935
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpz/eml");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fpz/eml");
      StringReader stringReader1 = new StringReader(".&5!6LK~=k8=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 220, 220);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.image = null;
      javaParserTokenManager0.getNextToken();
      Token token1 = new Token();
      javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager2.SkipLexicalActions(token2);
      Token token3 = javaParserTokenManager2.getNextToken();
      StringBuffer stringBuffer0 = javaParserTokenManager1.image;
      javaParserTokenManager0.image = null;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager2.SkipLexicalActions(token3);
      assertEquals(229, javaCharStream0.getBeginColumn());
      assertEquals(230, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      StringReader stringReader0 = new StringReader("9JHmk5z`[4ixC~\"M");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)28, (byte)0, 148);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(6, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9765126931215053
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boola");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 15, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.003114354779567
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", 38TU%R%buayv% '9v");
      StringReader stringReader1 = new StringReader("private");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.ReInit(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.kind = 6;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4887673017632637
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpz/eml");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-672), 47, 57);
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      stringReader0.read(charArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager1.MoreLexicalActions();
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0036962705949486
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'u/2{((");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 244, 244, 244);
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = '#';
      charArray0[2] = 'C';
      charArray0[3] = '<';
      charArray0[4] = 'v';
      stringReader0.read(charArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(244, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(77, token1.kind);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9965414670069311
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N+(&F0`1(%eln,!e");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 321, 321, 662);
      char[] charArray0 = new char[8];
      charArray0[0] = '>';
      charArray0[1] = '-';
      charArray0[2] = 'L';
      charArray0[3] = 'r';
      charArray0[4] = 'g';
      charArray0[5] = '#';
      charArray0[6] = 'y';
      charArray0[7] = '>';
      javaCharStream0.buffer = charArray0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("N", token0.toString());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9885212084320698
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("86K]S:Bcf-ii?");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2204), (-2204), 1304);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals("]", token0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1081402366234607
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("Yx`HfA2I]`1bpo%");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)0, 15, 56);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.ReInit(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(16, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x$V>>*G6*:9");
      StringReader stringReader1 = new StringReader("&g_ijEP`FjtoC+I");
      StringReader stringReader2 = new StringReader("x$V>>*G6*:9");
      StringReader stringReader3 = new StringReader("x$V>>*G6*:9");
      StringReader stringReader4 = new StringReader("x$V>>*G6*:9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader4);
      StringReader stringReader5 = new StringReader("&g_ijEP`FjtoC+I");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader5, (-1), 58);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals("&", token0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0592872501705188
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", 38TU%R%buayv% '9v");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3369), (-2670), 27);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.available = 84;
      javaParserTokenManager0.getNextToken();
      Token token1 = new Token();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-2664), javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5006647116603324
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`CBZrV+K-Gl9d`7Z.");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("-fr*h&\"B5,1)");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("-", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(102, token1.kind);
      assertEquals(1, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("-", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("fr", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[2] = (byte)0;
      StringReader stringReader0 = new StringReader("J;Kyr)h0^5p>D");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)40, 54, (byte)101);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(54, token0.endColumn);
      assertEquals(54, token0.beginColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(40, token0.endLine);
      assertNotNull(token0);
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals("J", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(54, token1.endColumn);
      assertEquals(54, token1.beginColumn);
      assertEquals(40, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals("J", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(54, token0.endColumn);
      assertEquals(54, token0.beginColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(40, token0.endLine);
      assertFalse(token0.equals((Object)token1));
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals("J", token0.toString());
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4854505996156284
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader(", 38TU%R%buayv% '9v");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {',', ' '}, charArray0);
      
      charArray0[1] = ':';
      int int1 = stringReader0.read(charArray0);
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'3', '8'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1498, 1740, 62);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1498, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1741, token0.endColumn);
      assertEquals(1498, token0.endLine);
      assertEquals(1740, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(1741, javaCharStream0.getColumn());
      assertEquals(1498, javaCharStream0.getEndLine());
      assertEquals(1740, javaCharStream0.getBeginColumn());
      assertEquals(1498, javaCharStream0.getLine());
      assertEquals(1741, javaCharStream0.getEndColumn());
      assertEquals(1498, javaCharStream0.getBeginLine());
      assertEquals("TU", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1498, token1.beginLine);
      assertEquals(108, token1.kind);
      assertEquals(1742, token1.beginColumn);
      assertEquals(1498, token1.endLine);
      assertEquals(1742, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1498, javaCharStream0.getEndLine());
      assertEquals(1742, javaCharStream0.getColumn());
      assertEquals(1498, javaCharStream0.getLine());
      assertEquals(1742, javaCharStream0.getEndColumn());
      assertEquals(1742, javaCharStream0.getBeginColumn());
      assertEquals(1498, javaCharStream0.getBeginLine());
      assertEquals("%", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1498, javaCharStream0.getEndLine());
      assertEquals(1742, javaCharStream0.getColumn());
      assertEquals(1498, javaCharStream0.getLine());
      assertEquals(1742, javaCharStream0.getEndColumn());
      assertEquals(1742, javaCharStream0.getBeginColumn());
      assertEquals(1498, javaCharStream0.getBeginLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1498, token2.beginLine);
      assertEquals(1743, token2.beginColumn);
      assertEquals(1498, token2.endLine);
      assertEquals(1743, token2.endColumn);
      assertEquals(74, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(1743, javaCharStream0.getColumn());
      assertEquals(1498, javaCharStream0.getEndLine());
      assertEquals(1498, javaCharStream0.getLine());
      assertEquals(1743, javaCharStream0.getEndColumn());
      assertEquals(1498, javaCharStream0.getBeginLine());
      assertEquals(1743, javaCharStream0.getBeginColumn());
      assertEquals("R", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1744, token3.beginColumn);
      assertEquals(108, token3.kind);
      assertEquals(1498, token3.beginLine);
      assertEquals(1498, token3.endLine);
      assertEquals(1744, token3.endColumn);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(1744, javaCharStream0.getEndColumn());
      assertEquals(1744, javaCharStream0.getColumn());
      assertEquals(1498, javaCharStream0.getEndLine());
      assertEquals(1498, javaCharStream0.getLine());
      assertEquals(1744, javaCharStream0.getBeginColumn());
      assertEquals(1498, javaCharStream0.getBeginLine());
      assertEquals("%", token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.9885212084320698
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("86K]S:Bcf-ii?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2204), (-2204), 1304);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('8', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-2204), token0.endLine);
      assertEquals((-2203), token0.endColumn);
      assertEquals((-2204), token0.beginColumn);
      assertEquals((-2204), token0.beginLine);
      assertNotNull(token0);
      assertEquals((-2203), javaCharStream0.getEndColumn());
      assertEquals((-2204), javaCharStream0.getEndLine());
      assertEquals((-2204), javaCharStream0.getBeginLine());
      assertEquals((-2204), javaCharStream0.getLine());
      assertEquals((-2204), javaCharStream0.getBeginColumn());
      assertEquals((-2203), javaCharStream0.getColumn());
      assertEquals("6K", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2202), token1.beginColumn);
      assertEquals(82, token1.kind);
      assertEquals((-2202), token1.endColumn);
      assertEquals((-2204), token1.endLine);
      assertEquals((-2204), token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-2202), javaCharStream0.getEndColumn());
      assertEquals((-2202), javaCharStream0.getColumn());
      assertEquals((-2204), javaCharStream0.getEndLine());
      assertEquals((-2204), javaCharStream0.getBeginLine());
      assertEquals((-2204), javaCharStream0.getLine());
      assertEquals((-2202), javaCharStream0.getBeginColumn());
      assertEquals("]", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2202), token1.beginColumn);
      assertEquals(82, token1.kind);
      assertEquals((-2202), token1.endColumn);
      assertEquals((-2204), token1.endLine);
      assertEquals((-2204), token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2202), javaCharStream0.getEndColumn());
      assertEquals((-2202), javaCharStream0.getColumn());
      assertEquals((-2204), javaCharStream0.getEndLine());
      assertEquals((-2204), javaCharStream0.getBeginLine());
      assertEquals((-2204), javaCharStream0.getLine());
      assertEquals((-2202), javaCharStream0.getBeginColumn());
      assertEquals("]", token1.toString());
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.4432470818856766
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-128);
      byteArray0[2] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(14, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("/FUh7qz@[&@Hr+");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-128), (byte)28);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("/", token0.toString());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)69, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("F#K<VN3<f%Q,}IF");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)69, (byte)69, (byte)69);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(69, token0.endLine);
      assertEquals(69, token0.beginLine);
      assertEquals(69, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(69, token0.endColumn);
      assertNotNull(token0);
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals("F", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(69, token0.endLine);
      assertEquals(69, token0.beginLine);
      assertEquals(69, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(69, token0.endColumn);
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals("F", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(69, token0.endLine);
      assertEquals(69, token0.beginLine);
      assertEquals(69, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(69, token0.endColumn);
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getColumn());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(69, javaCharStream0.getEndColumn());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals("F", token0.toString());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)28;
      byteArray0[2] = (byte) (-121);
      StringReader stringReader0 = new StringReader("Di|`PgC96)lO");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)0, 25, 355);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(26, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(25, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(26, javaCharStream0.getColumn());
      assertEquals("Di", token0.toString());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4645480542047278
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(14, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("<DECIMAL_LITERAL>");
      assertNotNull(stringReader0);
      
      stringReader0.mark(37);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(14, byteArray0.length);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(14, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(14, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertEquals(14, byteArray0.length);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1779, 15, 15);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1779, token0.beginLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(36, token0.kind);
      assertEquals(16, token0.endColumn);
      assertEquals(1779, token0.endLine);
      assertNotNull(token0);
      assertEquals(1779, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(1779, javaCharStream0.getEndLine());
      assertEquals(1779, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals("if", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token1.beginColumn);
      assertEquals(36, token1.kind);
      assertEquals(1779, token1.beginLine);
      assertEquals(16, token1.endColumn);
      assertEquals(1779, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1779, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(1779, javaCharStream0.getEndLine());
      assertEquals(1779, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals("if", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1779, token0.beginLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(36, token0.kind);
      assertEquals(16, token0.endColumn);
      assertEquals(1779, token0.endLine);
      assertFalse(token0.equals((Object)token1));
      assertEquals(1779, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(1779, javaCharStream0.getEndLine());
      assertEquals(1779, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals("if", token0.toString());
      assertNotSame(token0, token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(16, token2.beginColumn);
      assertEquals(1779, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(16, token2.endColumn);
      assertEquals(1779, token2.endLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(1779, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(1779, javaCharStream0.getEndLine());
      assertEquals(1779, javaCharStream0.getBeginLine());
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0213087748777132
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kK`!o~yM");
      assertNotNull(stringReader0);
      
      stringReader0.mark(3270);
      stringReader0.mark(21);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-885), 58);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-885), token0.endLine);
      assertEquals(59, token0.endColumn);
      assertEquals(58, token0.beginColumn);
      assertEquals((-885), token0.beginLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals((-885), javaCharStream0.getEndLine());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(58, javaCharStream0.getBeginColumn());
      assertEquals((-885), javaCharStream0.getBeginLine());
      assertEquals((-885), javaCharStream0.getLine());
      assertEquals("kK", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -885, column 60.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4926180567335552
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fNnwpXu");
      assertNotNull(stringReader0);
      
      stringReader0.mark(574);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1360, 16);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1360, token0.endLine);
      assertEquals(1360, token0.beginLine);
      assertEquals(16, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(22, token0.endColumn);
      assertNotNull(token0);
      assertEquals(1360, javaCharStream0.getEndLine());
      assertEquals(1360, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(1360, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals("fNnwpXu", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1360, token0.endLine);
      assertEquals(1360, token0.beginLine);
      assertEquals(16, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(22, token0.endColumn);
      assertEquals(1360, javaCharStream0.getEndLine());
      assertEquals(1360, javaCharStream0.getLine());
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(1360, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals("fNnwpXu", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1360, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(1360, token1.beginLine);
      assertEquals(22, token1.endColumn);
      assertEquals(22, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1360, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(1360, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(1360, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, token2.beginColumn);
      assertEquals(22, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1360, token2.endLine);
      assertEquals(1360, token2.beginLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(1360, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(1360, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(1360, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, token3.endColumn);
      assertEquals(1360, token3.endLine);
      assertEquals(1360, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(22, token3.beginColumn);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(1360, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getBeginColumn());
      assertEquals(1360, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(1360, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.4602749643502881
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)101;
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte)101;
      byteArray0[4] = (byte) (-128);
      byteArray0[5] = (byte) (-128);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)62;
      byteArray0[8] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)101, (byte) (-128), (byte)101, (byte) (-128), (byte) (-128), (byte)101, (byte)62, (byte)101}, byteArray0);
      
      StringReader stringReader0 = new StringReader("g(}KOxz@Pk2>IQD");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, (byte)101);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(94, token0.endLine);
      assertEquals(101, token0.beginColumn);
      assertEquals(101, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(94, token0.beginLine);
      assertNotNull(token0);
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals("g", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(94, token0.endLine);
      assertEquals(101, token0.beginColumn);
      assertEquals(101, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(94, token0.beginLine);
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals("g", token0.toString());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3055010412811485
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpz/eml");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-672), 47, 55);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.curLexState = (-448);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(47, token0.endColumn);
      assertEquals((-672), token0.beginLine);
      assertEquals(47, token0.beginColumn);
      assertEquals((-672), token0.endLine);
      assertEquals(0, token0.kind);
      assertNotNull(token0);
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals((-672), javaCharStream0.getBeginLine());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals((-672), javaCharStream0.getEndLine());
      assertEquals((-672), javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -672, column 49.  Encountered: \"z\" (122), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N+(&F0`1(%eln,!e");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.mark(2916);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-885), 2198);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)70;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)61, (byte)55, (byte)22, (byte)70}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)61, (byte)55, (byte)22, (byte)70}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)61, (byte)55, (byte)22, (byte)70}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)61, (byte)55, (byte)22, (byte)70}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, token0.endColumn);
      assertEquals(93, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals("==", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)61, (byte)61, (byte)55, (byte)22, (byte)70}, byteArray0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4742789151381839
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("5nLkXjGmFbkIkv;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 268, (byte)28);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertEquals(268, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(28, token0.beginColumn);
      assertEquals(268, token0.beginLine);
      assertEquals(41, token0.endColumn);
      assertNotNull(token0);
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(268, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(268, javaCharStream0.getBeginLine());
      assertEquals(268, javaCharStream0.getLine());
      assertEquals("5nLkXjGmFbkIkv", token0.toString());
      
      token0.endColumn = (-1289);
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(268, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(268, javaCharStream0.getBeginLine());
      assertEquals(268, javaCharStream0.getLine());
      assertEquals("5nLkXjGmFbkIkv", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertEquals((-1289), token0.endColumn);
      assertEquals(268, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(28, token0.beginColumn);
      assertEquals(268, token0.beginLine);
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(268, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(268, javaCharStream0.getBeginLine());
      assertEquals(268, javaCharStream0.getLine());
      assertEquals("5nLkXjGmFbkIkv", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream0.bufpos);
      assertEquals((-1289), token0.endColumn);
      assertEquals(268, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(28, token0.beginColumn);
      assertEquals(268, token0.beginLine);
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(268, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(268, javaCharStream0.getBeginLine());
      assertEquals(268, javaCharStream0.getLine());
      assertEquals("5nLkXjGmFbkIkv", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.bufpos);
      assertEquals(268, token1.beginLine);
      assertEquals(42, token1.endColumn);
      assertEquals(42, token1.beginColumn);
      assertEquals(83, token1.kind);
      assertEquals(268, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(268, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(268, javaCharStream0.getBeginLine());
      assertEquals(268, javaCharStream0.getLine());
      assertEquals(";", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.bufpos);
      assertEquals((-1289), token0.endColumn);
      assertEquals(268, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(28, token0.beginColumn);
      assertEquals(268, token0.beginLine);
      assertFalse(token0.equals((Object)token1));
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(268, javaCharStream0.getEndLine());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(268, javaCharStream0.getBeginLine());
      assertEquals(268, javaCharStream0.getLine());
      assertEquals("5nLkXjGmFbkIkv", token0.toString());
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(19, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("mPh$Ap;F/x#jEr(-pO~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-3477), (byte)79);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-3477), token0.beginLine);
      assertEquals(84, token0.endColumn);
      assertEquals((-3477), token0.endLine);
      assertEquals(79, token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(79, javaCharStream1.getBeginColumn());
      assertEquals((-3477), javaCharStream1.getBeginLine());
      assertEquals(84, javaCharStream1.getEndColumn());
      assertEquals((-3477), javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getColumn());
      assertEquals((-3477), javaCharStream1.getEndLine());
      assertEquals("mPh$Ap", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-3477), token0.beginLine);
      assertEquals(84, token0.endColumn);
      assertEquals((-3477), token0.endLine);
      assertEquals(79, token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(79, javaCharStream1.getBeginColumn());
      assertEquals((-3477), javaCharStream1.getBeginLine());
      assertEquals(84, javaCharStream1.getEndColumn());
      assertEquals((-3477), javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getColumn());
      assertEquals((-3477), javaCharStream1.getEndLine());
      assertEquals("mPh$Ap", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("trdue");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2529, 1000, 2529);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1000, token0.beginColumn);
      assertEquals(1004, token0.endColumn);
      assertEquals(2529, token0.endLine);
      assertEquals(2529, token0.beginLine);
      assertNotNull(token0);
      assertEquals(2529, javaCharStream0.getEndLine());
      assertEquals(2529, javaCharStream0.getLine());
      assertEquals(1000, javaCharStream0.getBeginColumn());
      assertEquals(1004, javaCharStream0.getEndColumn());
      assertEquals(1004, javaCharStream0.getColumn());
      assertEquals(2529, javaCharStream0.getBeginLine());
      assertEquals("trdue", token0.toString());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.4439465588519675
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = '@';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)16;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)16}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)16}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)16}, byteArray0);
      
      javaParserTokenManager0.defaultLexState = 1004;
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)16}, byteArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(104, token0.kind);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("/", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)16}, byteArray0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">,@N9/KA'MTd=t");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 112, 112);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(112, token0.endColumn);
      assertEquals(112, token0.beginLine);
      assertEquals(124, token0.kind);
      assertEquals(112, token0.beginColumn);
      assertEquals(112, token0.endLine);
      assertNotNull(token0);
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(112, javaCharStream0.getEndLine());
      assertEquals(112, javaCharStream0.getLine());
      assertEquals(112, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(">", token0.toString());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpz/eml");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fpz/eml");
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("d.&5!6LK~=k8=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vEjkcBq5Z3");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader2 = new StringReader("@R]*y `T.+9\"TG}h.y");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      stringReader1.mark(220);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 220, 4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(86, token0.kind);
      assertEquals(4, token0.beginColumn);
      assertEquals(4, token0.endColumn);
      assertEquals(220, token0.endLine);
      assertEquals(220, token0.beginLine);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(token0);
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getLine());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("@", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token1.beginColumn);
      assertEquals(220, token1.beginLine);
      assertEquals(220, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getLine());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("R", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1214874425772632
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")#l?62/d=z]hUy\u0006r5r");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, (byte)0, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(4, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(4, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(78, token0.kind);
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(")", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      token0.next = null;
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(")", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(4, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(4, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(")", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 4, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpz/eml");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-672), 47, 55);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-672), token0.endLine);
      assertEquals(49, token0.endColumn);
      assertEquals((-672), token0.beginLine);
      assertEquals(47, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals((-672), javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals((-672), javaCharStream0.getEndLine());
      assertEquals((-672), javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals("fpz", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(49, token1.endColumn);
      assertEquals((-672), token1.beginLine);
      assertEquals(47, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-672), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals((-672), javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals((-672), javaCharStream0.getEndLine());
      assertEquals((-672), javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals("fpz", token1.toString());
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Vp");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Vp");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader2 = new StringReader("\"!=\"");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2048, 2048, 2048);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader3 = new StringReader("Vp");
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertNotNull(stringReader3);
      
      stringReader0.reset();
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2048, token0.endLine);
      assertEquals(2048, token0.beginLine);
      assertEquals(2048, token0.beginColumn);
      assertEquals(2049, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertNotNull(token0);
      assertEquals(2048, javaCharStream0.getEndLine());
      assertEquals(2049, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals(2048, javaCharStream0.getBeginLine());
      assertEquals(2048, javaCharStream0.getLine());
      assertEquals(2049, javaCharStream0.getEndColumn());
      assertEquals("Vp", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader2);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2049, token1.endColumn);
      assertEquals(2048, token1.beginLine);
      assertEquals(2048, token1.endLine);
      assertEquals(2049, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2048, javaCharStream0.getEndLine());
      assertEquals(2049, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getBeginLine());
      assertEquals(2049, javaCharStream0.getBeginColumn());
      assertEquals(2048, javaCharStream0.getLine());
      assertEquals(2049, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2049, token2.endColumn);
      assertEquals(2048, token2.endLine);
      assertEquals(2048, token2.beginLine);
      assertEquals(2049, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(2048, javaCharStream0.getEndLine());
      assertEquals(2049, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getBeginLine());
      assertEquals(2049, javaCharStream0.getBeginColumn());
      assertEquals(2048, javaCharStream0.getLine());
      assertEquals(2049, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2049, token3.beginColumn);
      assertEquals(2049, token3.endColumn);
      assertEquals(2048, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(2048, token3.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(2048, javaCharStream0.getEndLine());
      assertEquals(2049, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getBeginLine());
      assertEquals(2049, javaCharStream0.getBeginColumn());
      assertEquals(2048, javaCharStream0.getLine());
      assertEquals(2049, javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.4893287859186137
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vEjkcBq5Z3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("YrU+MA;dNrcQo3");
      assertNotNull(stringReader0);
      
      stringReader0.mark((byte)55);
      int int0 = stringReader0.read();
      assertEquals(89, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals('r', char0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("U", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("U", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("+", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("MA", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token3.kind);
      assertEquals(4, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("MA", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(83, token4.kind);
      assertEquals(5, token4.endColumn);
      assertEquals(5, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(";", token4.toString());
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(10, token5.endColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertEquals(74, token5.kind);
      assertEquals(6, token5.beginColumn);
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertNotNull(token5);
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("dNrcQ", token5.toString());
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7932127614804356
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = '~';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'f', 'a'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("lse", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(3, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager1.SkipLexicalActions(token3);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(3, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals("", token3.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(mockFileInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[19];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)69;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(19, byteArray0.length);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(19, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(19, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("W9M a");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 96, (byte) (-8), 91);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertNotNull(javaCharStream3);
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertEquals(0, javaCharStream3.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream3.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertNotNull(token0);
      assertEquals(1, javaCharStream3.getBeginColumn());
      assertEquals(3, javaCharStream3.getColumn());
      assertEquals(1, javaCharStream3.getEndLine());
      assertEquals(3, javaCharStream3.getEndColumn());
      assertEquals(1, javaCharStream3.getBeginLine());
      assertEquals(1, javaCharStream3.getLine());
      assertEquals("W9M", token0.toString());
      assertNotSame(javaCharStream3, javaCharStream1);
      assertNotSame(javaCharStream3, javaCharStream0);
      assertNotSame(javaCharStream3, javaCharStream2);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream3.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertEquals(1, javaCharStream3.getBeginColumn());
      assertEquals(3, javaCharStream3.getColumn());
      assertEquals(1, javaCharStream3.getEndLine());
      assertEquals(3, javaCharStream3.getEndColumn());
      assertEquals(1, javaCharStream3.getBeginLine());
      assertEquals(1, javaCharStream3.getLine());
      assertEquals("W9M", token0.toString());
      assertNotSame(javaCharStream3, javaCharStream1);
      assertNotSame(javaCharStream3, javaCharStream0);
      assertNotSame(javaCharStream3, javaCharStream2);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7226074028003346
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("catch");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token0.endColumn);
      assertEquals(19, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("catch", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      javaCharStream0.Done();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = 666;
      Token token2 = Token.newToken(1);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertNull(token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      int int1 = (-2385);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("catch");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5522404920261001
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]QP+Zy:i");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)62}, byteArray0);
      
      StringReader stringReader1 = new StringReader("\";F[?U2;M:V+ Vo%sq");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("this");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 79, 79);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(82, token0.endColumn);
      assertEquals(79, token0.beginColumn);
      assertEquals(79, token0.beginLine);
      assertEquals(79, token0.endLine);
      assertEquals(57, token0.kind);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(token0);
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(82, javaCharStream0.getEndColumn());
      assertEquals(82, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals("this", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(82, token0.endColumn);
      assertEquals(79, token0.beginColumn);
      assertEquals(79, token0.beginLine);
      assertEquals(79, token0.endLine);
      assertEquals(57, token0.kind);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(82, javaCharStream0.getEndColumn());
      assertEquals(82, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals("this", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(82, token0.endColumn);
      assertEquals(79, token0.beginColumn);
      assertEquals(79, token0.beginLine);
      assertEquals(79, token0.endLine);
      assertEquals(57, token0.kind);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(82, javaCharStream0.getEndColumn());
      assertEquals(82, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals("this", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vEjkcBq5Z3");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      StringReader stringReader0 = new StringReader("8%;:o:4tKr>^f[]jr");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("YrU+MA;dNrcQo3");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      stringReader1.mark(61);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      int int0 = stringReader0.read();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(56, int0);
      assertNotSame(stringReader0, stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("%", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("%", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(83, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(";", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(":", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(83, token3.kind);
      assertEquals(3, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(";", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(4, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(4, token4.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("o", token4.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertEquals(5, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(1, token5.endLine);
      assertEquals(5, token5.endColumn);
      assertEquals(92, token5.kind);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token5);
      assertEquals(":", token5.toString());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertNotSame(token5, token0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      StringReader stringReader0 = new StringReader("h{BYBC0");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 97, 97, 97);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.mark(394);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(97, token0.beginColumn);
      assertEquals(97, token0.endColumn);
      assertEquals(97, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals("h", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(97, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(97, token0.beginColumn);
      assertEquals(97, token0.endColumn);
      assertEquals(97, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertEquals("h", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(97, javaCharStream0.getEndLine());
      assertEquals(97, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(97, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0162477515808332
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+CE&pPojb,");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("xz';zHi51,Lxcc(X");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 23, 91, 74);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token0.endColumn);
      assertEquals(23, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.beginLine);
      assertEquals(91, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals("xz", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token0.endColumn);
      assertEquals(23, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.beginLine);
      assertEquals(91, token0.beginColumn);
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals("xz", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(23, javaCharStream0.getLine());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(23, javaCharStream0.getBeginLine());
      assertEquals(23, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getColumn());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager1.debugStream);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(mockPrintStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 23, column 95.  Encountered: \"z\" (122), after : \"\\';\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.9131893659176967
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("Yf'_SqGy>I{3x+\"?x<\"");
      assertNotNull(stringReader0);
      
      stringReader0.mark(16);
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 5, 84);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[2];
      charArray0[1] = '5';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'f'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 84, 1478);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"S\" (83), after : \"\\'_\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.4544424096059707
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".At7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2204), 117, 117);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 117, 58);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaParserTokenManager0.jjmatchedPos = (-1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token0.kind);
      assertEquals(117, token0.beginLine);
      assertEquals(58, token0.endColumn);
      assertEquals(58, token0.beginColumn);
      assertEquals(117, token0.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(117, javaCharStream1.getLine());
      assertEquals(117, javaCharStream1.getEndLine());
      assertEquals(58, javaCharStream1.getBeginColumn());
      assertEquals(58, javaCharStream1.getColumn());
      assertEquals(117, javaCharStream1.getBeginLine());
      assertEquals(58, javaCharStream1.getEndColumn());
      assertEquals(".", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4659462905591452
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28}, byteArray0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+EAf%X?;A{{sfc");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("float");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      StringReader stringReader1 = new StringReader("+EAf%X?;A{{sfc");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (byte)28, 2048, 2048);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader2 = new StringReader("float");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(28, token0.beginLine);
      assertEquals(2048, token0.beginColumn);
      assertEquals(28, token0.endLine);
      assertEquals(101, token0.kind);
      assertEquals(2048, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertNotNull(token0);
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(2048, javaCharStream0.getEndColumn());
      assertEquals(2048, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(2049, token1.beginColumn);
      assertEquals(2051, token1.endColumn);
      assertEquals(28, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(28, token1.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2051, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(2049, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(2051, javaCharStream0.getColumn());
      assertEquals("EAf", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(28, token2.beginLine);
      assertEquals(108, token2.kind);
      assertEquals(28, token2.endLine);
      assertEquals(2052, token2.beginColumn);
      assertEquals(2052, token2.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(2052, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(2052, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(2052, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals("%", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      token1.specialToken = token2;
      assertEquals(2052, javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(2052, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(2052, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals("EAf", token1.toString());
      assertEquals("%", token2.toString());
      assertEquals("%", token1.specialToken.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(28, token3.beginLine);
      assertEquals(28, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(2053, token3.endColumn);
      assertEquals(2053, token3.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertEquals(2053, javaCharStream0.getEndColumn());
      assertEquals(2053, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(2053, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals("X", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(2053, javaCharStream0.getEndColumn());
      assertEquals(2053, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals(2053, javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getEndLine());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[4] = (byte)55;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vEjkcBq5Z3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("vEjkcBq5Z3");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1, (byte)55);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(64, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(55, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(55, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("vEjkcBq5Z3", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(64, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(55, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndColumn());
      assertEquals(55, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("vEjkcBq5Z3", token0.toString());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      StringReader stringReader0 = new StringReader("yrd\"S;LEu6;");
      assertNotNull(stringReader0);
      
      stringReader0.mark(50);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 114, (-1508));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(114, token0.endLine);
      assertEquals((-1506), token0.endColumn);
      assertEquals(114, token0.beginLine);
      assertEquals((-1508), token0.beginColumn);
      assertNotNull(token0);
      assertEquals(114, javaCharStream0.getLine());
      assertEquals((-1506), javaCharStream0.getColumn());
      assertEquals((-1508), javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals((-1506), javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals("yrd", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 114, column -1497.  Encountered: <EOF> after : \"\\\"S;LEu6;\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.1350803350378804
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("privat8e");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)70;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "privat8e");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)70, 732, 732);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.lengthOfMatch = 67;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(732, token0.beginColumn);
      assertEquals(70, token0.endLine);
      assertEquals(739, token0.endColumn);
      assertEquals(70, token0.beginLine);
      assertNotNull(token0);
      assertEquals(732, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(739, javaCharStream0.getEndColumn());
      assertEquals(739, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals("privat8e", token0.toString());
      
      javaParserTokenManager0.jjnewStateCnt = 66;
      assertEquals(732, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(739, javaCharStream0.getEndColumn());
      assertEquals(739, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(70, token1.endLine);
      assertEquals(739, token1.endColumn);
      assertEquals(70, token1.beginLine);
      assertEquals(739, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(739, javaCharStream0.getEndColumn());
      assertEquals(739, javaCharStream0.getColumn());
      assertEquals(739, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(732, token0.beginColumn);
      assertEquals(70, token0.endLine);
      assertEquals(739, token0.endColumn);
      assertEquals(70, token0.beginLine);
      assertFalse(token0.equals((Object)token1));
      assertEquals(70, javaCharStream0.getEndLine());
      assertEquals(70, javaCharStream0.getBeginLine());
      assertEquals(739, javaCharStream0.getEndColumn());
      assertEquals(739, javaCharStream0.getColumn());
      assertEquals(739, javaCharStream0.getBeginColumn());
      assertEquals(70, javaCharStream0.getLine());
      assertEquals("privat8e", token0.toString());
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.5323981718726023
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(";Z&wfc'+z+;XP");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(83, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(";", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("Z", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("Z", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(105, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("&", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(stringReader1, stringReader0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4678818241199503
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)55;
      byteArray0[4] = (byte)55;
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vEjkcBq5Z3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("YrU+MA;dNrcQo3");
      assertNotNull(stringReader0);
      
      stringReader0.mark((byte)55);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 114, (-454));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(114, token0.beginLine);
      assertEquals((-452), token0.endColumn);
      assertEquals(114, token0.endLine);
      assertEquals((-454), token0.beginColumn);
      assertNotNull(token0);
      assertEquals((-454), javaCharStream0.getBeginColumn());
      assertEquals((-452), javaCharStream0.getColumn());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals((-452), javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals("YrU", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-451), token1.beginColumn);
      assertEquals((-451), token1.endColumn);
      assertEquals(114, token1.beginLine);
      assertEquals(101, token1.kind);
      assertEquals(114, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals((-451), javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals((-451), javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals((-451), javaCharStream0.getColumn());
      assertEquals("+", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-451), token1.beginColumn);
      assertEquals((-451), token1.endColumn);
      assertEquals(114, token1.beginLine);
      assertEquals(101, token1.kind);
      assertEquals(114, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals((-451), javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals((-451), javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals((-451), javaCharStream0.getColumn());
      assertEquals("+", token1.toString());
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.156796498061095
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)28}, byteArray0);
      
      byte[] byteArray1 = new byte[1];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)28;
      StringReader stringReader0 = new StringReader("synchronized");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2676, 120, 2676);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(120, token0.beginColumn);
      assertEquals(2676, token0.endLine);
      assertEquals(56, token0.kind);
      assertEquals(131, token0.endColumn);
      assertEquals(2676, token0.beginLine);
      assertNotNull(token0);
      assertEquals(2676, javaCharStream0.getBeginLine());
      assertEquals(131, javaCharStream0.getEndColumn());
      assertEquals(2676, javaCharStream0.getLine());
      assertEquals(120, javaCharStream0.getBeginColumn());
      assertEquals(2676, javaCharStream0.getEndLine());
      assertEquals(131, javaCharStream0.getColumn());
      assertEquals("synchronized", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(56, token1.kind);
      assertEquals(120, token1.beginColumn);
      assertEquals(131, token1.endColumn);
      assertEquals(2676, token1.beginLine);
      assertEquals(2676, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2676, javaCharStream0.getBeginLine());
      assertEquals(131, javaCharStream0.getEndColumn());
      assertEquals(2676, javaCharStream0.getLine());
      assertEquals(120, javaCharStream0.getBeginColumn());
      assertEquals(2676, javaCharStream0.getEndLine());
      assertEquals(131, javaCharStream0.getColumn());
      assertEquals("synchronized", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(56, token1.kind);
      assertEquals(120, token1.beginColumn);
      assertEquals(131, token1.endColumn);
      assertEquals(2676, token1.beginLine);
      assertEquals(2676, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2676, javaCharStream0.getBeginLine());
      assertEquals(131, javaCharStream0.getEndColumn());
      assertEquals(2676, javaCharStream0.getLine());
      assertEquals(120, javaCharStream0.getBeginColumn());
      assertEquals(2676, javaCharStream0.getEndLine());
      assertEquals(131, javaCharStream0.getColumn());
      assertEquals("synchronized", token1.toString());
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      byteArray0[5] = (byte)40;
      StringReader stringReader0 = new StringReader("transient");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)40, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(60, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(40, token0.endLine);
      assertNotNull(token0);
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("transient", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(60, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(40, token0.endLine);
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("transient", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(40, token1.beginLine);
      assertEquals(8, token1.endColumn);
      assertEquals(8, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(40, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(8, token2.beginColumn);
      assertEquals(40, token2.beginLine);
      assertEquals(8, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(40, token2.endLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(8, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(40, token3.endLine);
      assertEquals(8, token3.beginColumn);
      assertEquals(40, token3.beginLine);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[2] = (byte)101;
      byteArray0[5] = (byte)40;
      StringReader stringReader0 = new StringReader("rnsient");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)40, (byte)101);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token0.endLine);
      assertEquals(107, token0.endColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(101, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("rnsient", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token0.endLine);
      assertEquals(107, token0.endColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(101, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("rnsient", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(40, token1.beginLine);
      assertEquals(40, token1.endLine);
      assertEquals(107, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(107, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(107, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(107, token2.endColumn);
      assertEquals(40, token2.endLine);
      assertEquals(40, token2.beginLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.kind);
      assertEquals(107, token3.endColumn);
      assertEquals(40, token3.endLine);
      assertEquals(107, token3.beginColumn);
      assertEquals(40, token3.beginLine);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/QP+Zy?i");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[8];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader1 = new StringReader("\";F[?U2;M:V+ Vo%sq");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 79, 79);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 19.  Encountered: <EOF> after : \"\\\";F[?U2;M:V+ Vo%sq\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5830834967711245
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpz/eml");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fpz/eml");
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("d.&5!6LK~=k8=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 220, 220);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(220, token0.endColumn);
      assertEquals(220, token0.beginColumn);
      assertEquals(220, token0.beginLine);
      assertEquals(220, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertEquals(220, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(220, javaCharStream0.getBeginColumn());
      assertEquals(220, javaCharStream0.getEndColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      assertEquals("d", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = new Token();
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNull(token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(220, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(220, javaCharStream0.getBeginColumn());
      assertEquals(220, javaCharStream0.getEndColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertEquals(220, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(220, javaCharStream0.getBeginColumn());
      assertEquals(220, javaCharStream0.getEndColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      
      javaParserTokenManager2.image = null;
      assertEquals(220, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(220, javaCharStream0.getBeginColumn());
      assertEquals(220, javaCharStream0.getEndColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(85, token2.kind);
      assertEquals(221, token2.endColumn);
      assertEquals(221, token2.beginColumn);
      assertEquals(220, token2.beginLine);
      assertEquals(220, token2.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(221, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(221, javaCharStream0.getBeginColumn());
      assertEquals(221, javaCharStream0.getEndColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      assertEquals(".", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = new Token();
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertNull(token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(220, token4.beginLine);
      assertEquals(222, token4.beginColumn);
      assertEquals(222, token4.endColumn);
      assertEquals(220, token4.endLine);
      assertEquals(105, token4.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertNotNull(token4);
      assertEquals(222, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(222, javaCharStream0.getBeginColumn());
      assertEquals(222, javaCharStream0.getEndColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      assertEquals("&", token4.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      
      javaParserTokenManager2.SkipLexicalActions(token3);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token4));
      assertEquals(222, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(222, javaCharStream0.getBeginColumn());
      assertEquals(222, javaCharStream0.getEndColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      assertNull(token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token4);
      
      Token token5 = javaParserTokenManager2.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(220, token5.beginLine);
      assertEquals(66, token5.kind);
      assertEquals(220, token5.endLine);
      assertEquals(223, token5.endColumn);
      assertEquals(223, token5.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertNotNull(token5);
      assertEquals(223, javaCharStream0.getEndColumn());
      assertEquals(223, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(223, javaCharStream0.getBeginColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      assertEquals("5", token5.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(224, token6.beginColumn);
      assertEquals(220, token6.beginLine);
      assertEquals(224, token6.endColumn);
      assertEquals(89, token6.kind);
      assertEquals(220, token6.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertNotNull(token6);
      assertEquals(224, javaCharStream0.getEndColumn());
      assertEquals(224, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(224, javaCharStream0.getBeginColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      assertEquals("!", token6.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token6, token1);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertNotSame(token6, token3);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(224, javaCharStream0.getEndColumn());
      assertEquals(224, javaCharStream0.getColumn());
      assertEquals(220, javaCharStream0.getEndLine());
      assertEquals(224, javaCharStream0.getBeginColumn());
      assertEquals(220, javaCharStream0.getBeginLine());
      assertEquals(220, javaCharStream0.getLine());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?,L6*=>{#3Fa[tY");
      assertNotNull(stringReader0);
      
      stringReader0.mark(16);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, (-358));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'?', ',', 'L'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-358), token0.beginColumn);
      assertEquals((-358), token0.endColumn);
      assertEquals(37, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(37, token0.beginLine);
      assertNotNull(token0);
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals((-358), javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-358), javaCharStream0.getEndColumn());
      assertEquals((-358), javaCharStream0.getBeginColumn());
      assertEquals("6", token0.toString());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)23;
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals((-358), javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-358), javaCharStream0.getEndColumn());
      assertEquals((-358), javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(112, token1.kind);
      assertEquals((-356), token1.endColumn);
      assertEquals(37, token1.endLine);
      assertEquals((-357), token1.beginColumn);
      assertEquals(37, token1.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals((-356), javaCharStream0.getColumn());
      assertEquals((-356), javaCharStream0.getEndColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-357), javaCharStream0.getBeginColumn());
      assertEquals("*=", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-355), token2.endColumn);
      assertEquals((-355), token2.beginColumn);
      assertEquals(37, token2.beginLine);
      assertEquals(37, token2.endLine);
      assertEquals(124, token2.kind);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token2);
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals((-355), javaCharStream0.getColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-355), javaCharStream0.getEndColumn());
      assertEquals((-355), javaCharStream0.getBeginColumn());
      assertEquals(">", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(79, token3.kind);
      assertEquals((-354), token3.endColumn);
      assertEquals((-354), token3.beginColumn);
      assertEquals(37, token3.beginLine);
      assertEquals(37, token3.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals((-354), javaCharStream0.getEndColumn());
      assertEquals((-354), javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-354), javaCharStream0.getColumn());
      assertEquals("{", token3.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(37, javaCharStream0.getEndLine());
      assertEquals(37, javaCharStream0.getLine());
      assertEquals((-354), javaCharStream0.getEndColumn());
      assertEquals((-354), javaCharStream0.getBeginColumn());
      assertEquals(37, javaCharStream0.getBeginLine());
      assertEquals((-354), javaCharStream0.getColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s3t%S|-+t,-<T");
      assertNotNull(stringReader0);
      
      stringReader0.mark(574);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1360, 39);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 27, 1360, 1917);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(1360, token0.beginColumn);
      assertEquals(1362, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(27, token0.endLine);
      assertEquals(27, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(27, javaCharStream1.getLine());
      assertEquals(1362, javaCharStream1.getColumn());
      assertEquals(1360, javaCharStream1.getBeginColumn());
      assertEquals(27, javaCharStream1.getEndLine());
      assertEquals(27, javaCharStream1.getBeginLine());
      assertEquals(1362, javaCharStream1.getEndColumn());
      assertEquals("s3t", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(1363, token1.endColumn);
      assertEquals(27, token1.endLine);
      assertEquals(1363, token1.beginColumn);
      assertEquals(108, token1.kind);
      assertEquals(27, token1.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(27, javaCharStream1.getLine());
      assertEquals(1363, javaCharStream1.getColumn());
      assertEquals(27, javaCharStream1.getEndLine());
      assertEquals(27, javaCharStream1.getBeginLine());
      assertEquals(1363, javaCharStream1.getEndColumn());
      assertEquals(1363, javaCharStream1.getBeginColumn());
      assertEquals("%", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(1363, token2.beginColumn);
      assertEquals(27, token2.endLine);
      assertEquals(108, token2.kind);
      assertEquals(27, token2.beginLine);
      assertEquals(1363, token2.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(27, javaCharStream1.getLine());
      assertEquals(1363, javaCharStream1.getColumn());
      assertEquals(27, javaCharStream1.getEndLine());
      assertEquals(27, javaCharStream1.getBeginLine());
      assertEquals(1363, javaCharStream1.getEndColumn());
      assertEquals(1363, javaCharStream1.getBeginColumn());
      assertEquals("%", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]QP+Zy:i");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)62}, byteArray0);
      
      StringReader stringReader1 = new StringReader("\";F[?U2;M:V+ Vo%sq");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("vc");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 79, 79);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(79, token0.endLine);
      assertEquals(79, token0.beginLine);
      assertEquals(79, token0.beginColumn);
      assertEquals(80, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(token0);
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals("vc", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(79, token0.endLine);
      assertEquals(79, token0.beginLine);
      assertEquals(79, token0.beginColumn);
      assertEquals(80, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals("vc", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(79, token0.endLine);
      assertEquals(79, token0.beginLine);
      assertEquals(79, token0.beginColumn);
      assertEquals(80, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(79, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getLine());
      assertEquals("vc", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.737435333836268
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-59);
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(30, token0.kind);
      assertNotNull(token0);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("false", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token3.beginColumn);
      assertEquals(5, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token3));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token3);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.4678818241199503
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      stringReader0.mark(3270);
      stringReader0.mark(16);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3270, (-885));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 16, (-1), 16);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(16, token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(16, token0.endLine);
      assertEquals((-1), token0.endColumn);
      assertEquals(88, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(16, javaCharStream1.getBeginLine());
      assertEquals(16, javaCharStream1.getLine());
      assertEquals(16, javaCharStream1.getEndLine());
      assertEquals("<", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream1.bufpos);
      assertEquals(0, token1.beginColumn);
      assertEquals(16, token1.beginLine);
      assertEquals(12, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(16, token1.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(12, javaCharStream1.getEndColumn());
      assertEquals(12, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(16, javaCharStream1.getBeginLine());
      assertEquals(16, javaCharStream1.getLine());
      assertEquals(16, javaCharStream1.getEndLine());
      assertEquals("OCTAL_LITERAL", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream1.bufpos);
      assertEquals(16, token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(16, token0.endLine);
      assertEquals((-1), token0.endColumn);
      assertEquals(88, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(12, javaCharStream1.getEndColumn());
      assertEquals(12, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(16, javaCharStream1.getBeginLine());
      assertEquals(16, javaCharStream1.getLine());
      assertEquals(16, javaCharStream1.getEndLine());
      assertEquals("<", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, javaCharStream1.bufpos);
      assertEquals(0, token1.beginColumn);
      assertEquals(16, token1.beginLine);
      assertEquals(12, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(16, token1.endLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(12, javaCharStream1.getEndColumn());
      assertEquals(12, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(16, javaCharStream1.getBeginLine());
      assertEquals(16, javaCharStream1.getLine());
      assertEquals(16, javaCharStream1.getEndLine());
      assertEquals("OCTAL_LITERAL", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.4457774057567563
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Eu/2{((");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 244, (-3778), 104);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-3778), token0.beginColumn);
      assertEquals(244, token0.endLine);
      assertEquals((-3777), token0.endColumn);
      assertEquals(244, token0.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertEquals(244, javaCharStream0.getEndLine());
      assertEquals((-3778), javaCharStream0.getBeginColumn());
      assertEquals(244, javaCharStream0.getBeginLine());
      assertEquals((-3777), javaCharStream0.getEndColumn());
      assertEquals((-3777), javaCharStream0.getColumn());
      assertEquals(244, javaCharStream0.getLine());
      assertEquals("Eu", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3776), token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals(244, token1.beginLine);
      assertEquals((-3776), token1.endColumn);
      assertEquals(244, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(244, javaCharStream0.getEndLine());
      assertEquals(244, javaCharStream0.getBeginLine());
      assertEquals((-3776), javaCharStream0.getBeginColumn());
      assertEquals((-3776), javaCharStream0.getColumn());
      assertEquals((-3776), javaCharStream0.getEndColumn());
      assertEquals(244, javaCharStream0.getLine());
      assertEquals("/", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3776), token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals(244, token1.beginLine);
      assertEquals((-3776), token1.endColumn);
      assertEquals(244, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(244, javaCharStream0.getEndLine());
      assertEquals(244, javaCharStream0.getBeginLine());
      assertEquals((-3776), javaCharStream0.getBeginColumn());
      assertEquals((-3776), javaCharStream0.getColumn());
      assertEquals((-3776), javaCharStream0.getEndColumn());
      assertEquals(244, javaCharStream0.getLine());
      assertEquals("/", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(244, token2.beginLine);
      assertEquals((-3776), token2.endColumn);
      assertEquals(244, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-3776), token2.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(244, javaCharStream0.getEndLine());
      assertEquals(244, javaCharStream0.getBeginLine());
      assertEquals((-3776), javaCharStream0.getBeginColumn());
      assertEquals((-3776), javaCharStream0.getColumn());
      assertEquals((-3776), javaCharStream0.getEndColumn());
      assertEquals(244, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(244, token2.beginLine);
      assertEquals((-3776), token2.endColumn);
      assertEquals(244, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-3776), token2.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(244, javaCharStream0.getEndLine());
      assertEquals(244, javaCharStream0.getBeginLine());
      assertEquals((-3776), javaCharStream0.getBeginColumn());
      assertEquals((-3776), javaCharStream0.getColumn());
      assertEquals((-3776), javaCharStream0.getEndColumn());
      assertEquals(244, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3776), token1.beginColumn);
      assertEquals(104, token1.kind);
      assertEquals(244, token1.beginLine);
      assertEquals((-3776), token1.endColumn);
      assertEquals(244, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(244, javaCharStream0.getEndLine());
      assertEquals(244, javaCharStream0.getBeginLine());
      assertEquals((-3776), javaCharStream0.getBeginColumn());
      assertEquals((-3776), javaCharStream0.getColumn());
      assertEquals((-3776), javaCharStream0.getEndColumn());
      assertEquals(244, javaCharStream0.getLine());
      assertEquals("/", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H7VZ)Em,");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)38;
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38}, byteArray0);
      
      long long0 = byteArrayInputStream0.skip((-1));
      assertEquals(0L, long0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(98, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertNotNull(token0);
      assertEquals("&&", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38}, byteArray0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(98, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("&&", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38, (byte)38}, byteArray0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H7VZ)Em,");
      assertNotNull(stringReader0);
      
      stringReader0.mark(16);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)40;
      byteArray0[2] = (byte)40;
      byteArray0[3] = (byte)40;
      byteArray0[0] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)40, (byte)40, (byte)40, (byte)40, (byte)0}, byteArray0);
      
      StringReader stringReader1 = new StringReader("&=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(114, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("&=", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "H7VZ)Em,");
      assertFalse(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token2);
      assertEquals("", token2.toString());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(stringReader1, stringReader0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(2, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token3);
      assertEquals("", token3.toString());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(stringReader1, stringReader0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5091732063209804
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpz/eml");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)58}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)58}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)58}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)58}, byteArray0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("a", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)58}, byteArray0);
      
      byteArrayInputStream0.reset();
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)58}, byteArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(104, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("/", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)97, (byte)47, (byte)58}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, (byte)58);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 58. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?,L6*=>{#3Fa[tY");
      assertNotNull(stringReader0);
      
      stringReader0.mark(16);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, (-358));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '5';
      StringReader stringReader1 = new StringReader("/P(L5`e6Vta");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 102, (-1), 16);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(104, token0.kind);
      assertEquals(102, token0.beginLine);
      assertEquals((-1), token0.endColumn);
      assertEquals(102, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(102, javaCharStream1.getLine());
      assertEquals(102, javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(102, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals("/", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(102, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(102, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(102, javaCharStream1.getLine());
      assertEquals(102, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(102, javaCharStream1.getBeginLine());
      assertEquals("P", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token2 = token_GTToken0.next;
      assertNull(token2);
      
      token0.next = (Token) token_GTToken0;
      assertEquals(102, javaCharStream1.getLine());
      assertEquals(102, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(102, javaCharStream1.getBeginLine());
      assertEquals("/", token0.toString());
      assertNull(token_GTToken0.toString());
      assertNull(token0.next.toString());
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(102, javaCharStream1.getLine());
      assertEquals(102, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(102, javaCharStream1.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(104, token0.kind);
      assertEquals(102, token0.beginLine);
      assertEquals((-1), token0.endColumn);
      assertEquals(102, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(102, javaCharStream1.getLine());
      assertEquals(102, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(102, javaCharStream1.getBeginLine());
      assertEquals("/", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0PR");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1478, 1478);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 1478;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)44;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)94, (byte)44}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      intArray0[2] = 1478;
      intArray0[3] = 1478;
      javaCharStream0.bufline = intArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1480, token0.endColumn);
      assertEquals(1478, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1478, token0.endLine);
      assertEquals(1478, token0.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(token0);
      assertEquals("0PR", token0.toString());
      assertEquals(1478, javaCharStream0.getBeginLine());
      assertEquals(1478, javaCharStream0.getEndLine());
      assertEquals(1478, javaCharStream0.getBeginColumn());
      assertEquals(1478, javaCharStream0.getLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      token0.next = null;
      assertEquals("0PR", token0.toString());
      assertEquals(1478, javaCharStream0.getBeginLine());
      assertEquals(1478, javaCharStream0.getEndLine());
      assertEquals(1478, javaCharStream0.getBeginColumn());
      assertEquals(1478, javaCharStream0.getLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.jjmatchedPos = 1478;
      assertEquals(1478, javaCharStream0.getBeginLine());
      assertEquals(1478, javaCharStream0.getEndLine());
      assertEquals(1478, javaCharStream0.getBeginColumn());
      assertEquals(1478, javaCharStream0.getLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1480, token0.endColumn);
      assertEquals(1478, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1478, token0.endLine);
      assertEquals(1478, token0.beginLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("0PR", token0.toString());
      assertEquals(1478, javaCharStream0.getBeginLine());
      assertEquals(1478, javaCharStream0.getEndLine());
      assertEquals(1478, javaCharStream0.getBeginColumn());
      assertEquals(1478, javaCharStream0.getLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1478, javaCharStream0.getBeginLine());
      assertEquals(1478, javaCharStream0.getEndLine());
      assertEquals(1478, javaCharStream0.getBeginColumn());
      assertEquals(1478, javaCharStream0.getLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1478, token2.endLine);
      assertEquals(1478, token2.beginLine);
      assertEquals(1480, token2.endColumn);
      assertEquals(1480, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(1478, javaCharStream0.getBeginLine());
      assertEquals(1478, javaCharStream0.getEndLine());
      assertEquals(1480, javaCharStream0.getBeginColumn());
      assertEquals(1478, javaCharStream0.getLine());
      assertEquals(1480, javaCharStream0.getColumn());
      assertEquals(1480, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.3718238514763048
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0t1*O");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      StringReader stringReader0 = new StringReader("0t1*O");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2, column 3.  Encountered: \"t\" (116), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7055557186116357
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tre");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 52, 542, 924);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("tre");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.lengthOfMatch = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(542, token0.beginColumn);
      assertEquals(52, token0.beginLine);
      assertEquals(544, token0.endColumn);
      assertEquals(52, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertEquals(544, javaCharStream0.getColumn());
      assertEquals(542, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(544, javaCharStream0.getEndColumn());
      assertEquals("tre", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(542, token0.beginColumn);
      assertEquals(52, token0.beginLine);
      assertEquals(544, token0.endColumn);
      assertEquals(52, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(544, javaCharStream0.getColumn());
      assertEquals(542, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(544, javaCharStream0.getEndColumn());
      assertEquals("tre", token0.toString());
      assertNotSame(stringReader0, stringReader1);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "if");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[14];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(14, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("zH;C|oIeF\"8g@N#5");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1831), 1858, 1097);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-1831), token0.beginLine);
      assertEquals(1859, token0.endColumn);
      assertEquals(1858, token0.beginColumn);
      assertEquals((-1831), token0.endLine);
      assertNotNull(token0);
      assertEquals((-1831), javaCharStream0.getBeginLine());
      assertEquals(1859, javaCharStream0.getEndColumn());
      assertEquals((-1831), javaCharStream0.getEndLine());
      assertEquals(1859, javaCharStream0.getColumn());
      assertEquals(1858, javaCharStream0.getBeginColumn());
      assertEquals((-1831), javaCharStream0.getLine());
      assertEquals("zH", token0.toString());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v@x+8$n`_T{K|2ZO5");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 54, 83);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.lengthOfMatch = (-993);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(54, token0.beginLine);
      assertEquals(83, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(83, token0.beginColumn);
      assertEquals(54, token0.endLine);
      assertNotNull(token0);
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals("v", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(54, token0.beginLine);
      assertEquals(83, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(83, token0.beginColumn);
      assertEquals(54, token0.endLine);
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals("v", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(54, token0.beginLine);
      assertEquals(83, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(83, token0.beginColumn);
      assertEquals(54, token0.endLine);
      assertEquals(83, javaCharStream0.getColumn());
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(54, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getLine());
      assertEquals(83, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getBeginLine());
      assertEquals("v", token0.toString());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Eu/2{((");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("package");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("package");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 99, 99);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(99, token0.beginColumn);
      assertEquals(99, token0.endLine);
      assertEquals(46, token0.kind);
      assertEquals(105, token0.endColumn);
      assertEquals(99, token0.beginLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(token0);
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(99, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals("package", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      Token token1 = new Token();
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNull(token1.toString());
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream(stringReader0, 99, 99, (-1124));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tre");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4K&)PYdT(|.lx:_");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 52, (-817), 924);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader2 = new StringReader(",~bi{7^`-TA");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNotNull(token0);
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(52, token1.endLine);
      assertEquals((-817), token1.beginColumn);
      assertEquals(52, token1.beginLine);
      assertEquals((-816), token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-817), javaCharStream0.getBeginColumn());
      assertEquals((-816), javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals((-816), javaCharStream0.getEndColumn());
      assertEquals("4K", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-815), token2.endColumn);
      assertEquals(52, token2.endLine);
      assertEquals(105, token2.kind);
      assertEquals((-815), token2.beginColumn);
      assertEquals(52, token2.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals((-815), javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals((-815), javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals((-815), javaCharStream0.getEndColumn());
      assertEquals("&", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(78, token3.kind);
      assertEquals((-814), token3.beginColumn);
      assertEquals(52, token3.beginLine);
      assertEquals((-814), token3.endColumn);
      assertEquals(52, token3.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals((-814), javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals((-814), javaCharStream0.getEndColumn());
      assertEquals((-814), javaCharStream0.getBeginColumn());
      assertEquals(")", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      StringReader stringReader0 = new StringReader("abstract");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(13, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("abstract", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(8, token1.endColumn);
      assertEquals(8, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      StringReader stringReader0 = new StringReader("import");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-583), 242);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(38, token0.kind);
      assertEquals((-578), token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals((-583), token0.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertEquals((-578), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-578), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals((-583), javaCharStream0.getBeginColumn());
      assertEquals("import", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-578), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1), token1.beginLine);
      assertEquals((-1), token1.endLine);
      assertEquals((-578), token1.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-578), javaCharStream0.getBeginColumn());
      assertEquals((-578), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-578), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-578), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1), token1.beginLine);
      assertEquals((-1), token1.endLine);
      assertEquals((-578), token1.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-578), javaCharStream0.getBeginColumn());
      assertEquals((-578), javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-578), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      StringReader stringReader0 = new StringReader("wS8 l1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 107, 20);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertNotNull(byteArrayInputStream1);
      assertEquals(6, byteArrayInputStream1.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream1.reset();
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(6, byteArrayInputStream1.available());
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(107, token0.endLine);
      assertEquals(22, token0.endColumn);
      assertEquals(20, token0.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals("wS8", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(107, token0.endLine);
      assertEquals(22, token0.endColumn);
      assertEquals(20, token0.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals("wS8", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(107, token1.beginLine);
      assertEquals(24, token1.beginColumn);
      assertEquals(25, token1.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(107, javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getLine());
      assertEquals(25, javaCharStream0.getEndColumn());
      assertEquals(25, javaCharStream0.getColumn());
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getEndLine());
      assertEquals("l1", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.7266194818534493
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x$V>>*G6*:9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("x$V", token0.toString());
      
      javaParserTokenManager0.jjnewStateCnt = 3642;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      
      char[] charArray0 = new char[1];
      stringReader0.mark(3642);
      charArray0[0] = '5';
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(3, javaParserTokenManager0.input_stream.getEndColumn());
      assertEquals(3, javaParserTokenManager0.input_stream.getColumn());
      assertEquals(1, javaParserTokenManager0.input_stream.getEndLine());
      assertEquals(1, javaParserTokenManager0.input_stream.getLine());
      assertEquals(1, javaParserTokenManager0.input_stream.getBeginLine());
      
      int int0 = stringReader0.read(charArray0);
      assertEquals((-1), int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'5'}, charArray0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(">>", token1.toString());
      
      token1.image = "x$V>>*G6*:9";
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("x$V>>*G6*:9", token1.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)23}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.endColumn);
      assertEquals(124, token2.kind);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(">", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, token3.endColumn);
      assertEquals(103, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(6, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*", token3.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.endLine);
      assertEquals(8, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(7, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertNotNull(token4);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("G6", token4.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x$V>>*G6*:9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjnewStateCnt = 3642;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[1];
      stringReader0.mark(3642);
      charArray0[0] = '5';
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginColumn());
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, int0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'x'}, charArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("$V", token0.toString());
      
      token0.image = "x$V>>*G6*:9";
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("x$V>>*G6*:9", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(124, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">>", token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("D<4tx1|o");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1), 52);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("D", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      assertNotNull(bufferedInputStream0);
      
      token0.image = "0000";
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("0000", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("<", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("0000", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.4727735820813344
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">>>=");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("eJ=vf%7");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("%");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 122, 79);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(80, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(122, token0.beginLine);
      assertEquals(79, token0.beginColumn);
      assertEquals(122, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals("eJ", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      token0.kind = (-1310);
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals("eJ", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      javaParserTokenManager0.jjimageLen = 122;
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getColumn());
      
      token0.specialToken = (Token) token_GTToken0;
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals("eJ", token0.toString());
      assertNull(token_GTToken0.toString());
      assertNull(token0.specialToken.toString());
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(80, token0.endColumn);
      assertEquals(122, token0.beginLine);
      assertEquals(79, token0.beginColumn);
      assertEquals(122, token0.endLine);
      assertEquals((-1310), token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(79, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals("eJ", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token2.beginLine);
      assertEquals(122, token2.endLine);
      assertEquals(81, token2.endColumn);
      assertEquals(87, token2.kind);
      assertEquals(81, token2.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals("=", token2.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(81, javaCharStream0.getColumn());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token2.beginLine);
      assertEquals(122, token2.endLine);
      assertEquals(81, token2.endColumn);
      assertEquals(87, token2.kind);
      assertEquals(81, token2.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals("=", token2.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("b");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Y~+=AGE#");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      long long0 = stringReader1.skip(0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0L, long0);
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 91, 0, 824);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(91, token0.endLine);
      assertEquals(91, token0.beginLine);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals("Y", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(90, token1.kind);
      assertEquals(91, token1.endLine);
      assertEquals(91, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals("~", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token2.beginColumn);
      assertEquals(91, token2.endLine);
      assertEquals(91, token2.beginLine);
      assertEquals(110, token2.kind);
      assertEquals(3, token2.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals("+=", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(91, token0.endLine);
      assertEquals(91, token0.beginLine);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getBeginLine());
      assertEquals(91, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(91, javaCharStream0.getEndLine());
      assertEquals("Y", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.8391108826083904
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("booxe(n");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 15, 0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.beginColumn);
      assertEquals(19, token0.endColumn);
      assertEquals(15, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(15, token0.beginLine);
      assertNotNull(token0);
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals("booxe", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(15, token1.beginLine);
      assertEquals(15, token1.beginColumn);
      assertEquals(15, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals("booxe", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(15, token1.beginLine);
      assertEquals(15, token1.beginColumn);
      assertEquals(15, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals("booxe", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(19, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(15, token1.beginLine);
      assertEquals(15, token1.beginColumn);
      assertEquals(15, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals("booxe", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[5] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      StringReader stringReader0 = new StringReader("N-'Y7/Ro!Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals('N', char0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("-", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("-", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"Y\" (89), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fa[|");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 15, 15, 0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.endLine);
      assertEquals(15, token0.beginLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(16, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      assertEquals(15, javaCharStream0.getEndLine());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(15, javaCharStream0.getBeginLine());
      assertEquals(15, javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals("fa", token0.toString());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jQfyjtP>T(E!%IVMs");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3738, 3738, 3738);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = '[';
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(3738, token0.endLine);
      assertEquals(3738, token0.beginLine);
      assertEquals(3738, token0.beginColumn);
      assertEquals(3744, token0.endColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(3738, javaCharStream0.getEndLine());
      assertEquals(3738, javaCharStream0.getBeginColumn());
      assertEquals(3738, javaCharStream0.getLine());
      assertEquals(3738, javaCharStream0.getBeginLine());
      assertEquals(3744, javaCharStream0.getEndColumn());
      assertEquals(3744, javaCharStream0.getColumn());
      assertEquals("jQfyjtP", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertEquals(3738, javaCharStream0.getEndLine());
      assertEquals(3738, javaCharStream0.getBeginColumn());
      assertEquals(3738, javaCharStream0.getLine());
      assertEquals(3738, javaCharStream0.getBeginLine());
      assertEquals(3744, javaCharStream0.getEndColumn());
      assertEquals(3744, javaCharStream0.getColumn());
      
      javaParserTokenManager2.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(3738, token0.endLine);
      assertEquals(3738, token0.beginLine);
      assertEquals(3738, token0.beginColumn);
      assertEquals(3744, token0.endColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(3738, javaCharStream0.getEndLine());
      assertEquals(3738, javaCharStream0.getBeginColumn());
      assertEquals(3738, javaCharStream0.getLine());
      assertEquals(3738, javaCharStream0.getBeginLine());
      assertEquals(3744, javaCharStream0.getEndColumn());
      assertEquals(3744, javaCharStream0.getColumn());
      assertEquals("jQfyjtP", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token1.kind);
      assertEquals(3738, token1.endLine);
      assertEquals(3738, token1.beginLine);
      assertEquals(3745, token1.endColumn);
      assertEquals(3745, token1.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertNotNull(token1);
      assertEquals(3738, javaCharStream0.getEndLine());
      assertEquals(3745, javaCharStream0.getBeginColumn());
      assertEquals(3738, javaCharStream0.getLine());
      assertEquals(3738, javaCharStream0.getBeginLine());
      assertEquals(3745, javaCharStream0.getColumn());
      assertEquals(3745, javaCharStream0.getEndColumn());
      assertEquals(">", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3745, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(3738, token2.endLine);
      assertEquals(3745, token2.endColumn);
      assertEquals(3738, token2.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(3738, javaCharStream0.getEndLine());
      assertEquals(3745, javaCharStream0.getBeginColumn());
      assertEquals(3738, javaCharStream0.getLine());
      assertEquals(3738, javaCharStream0.getBeginLine());
      assertEquals(3745, javaCharStream0.getColumn());
      assertEquals(3745, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager2.MoreLexicalActions();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(3738, javaCharStream0.getEndLine());
      assertEquals(3745, javaCharStream0.getBeginColumn());
      assertEquals(3738, javaCharStream0.getLine());
      assertEquals(3738, javaCharStream0.getBeginLine());
      assertEquals(3745, javaCharStream0.getColumn());
      assertEquals(3745, javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3738, token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals(3738, token3.endLine);
      assertEquals(3746, token3.endColumn);
      assertEquals(3746, token3.beginColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(3738, javaCharStream0.getEndLine());
      assertEquals(3738, javaCharStream0.getLine());
      assertEquals(3738, javaCharStream0.getBeginLine());
      assertEquals(3746, javaCharStream0.getColumn());
      assertEquals(3746, javaCharStream0.getBeginColumn());
      assertEquals(3746, javaCharStream0.getEndColumn());
      assertEquals("T", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vEjkcBq5Z3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("f0b~RH");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2598), 15, 28);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token0.endColumn);
      assertEquals((-2598), token0.endLine);
      assertEquals((-2598), token0.beginLine);
      assertEquals(15, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertNotNull(token0);
      assertEquals((-2598), javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals((-2598), javaCharStream0.getBeginLine());
      assertEquals((-2598), javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals("f0b", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token1.endColumn);
      assertEquals(15, token1.beginColumn);
      assertEquals((-2598), token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals((-2598), token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-2598), javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals((-2598), javaCharStream0.getBeginLine());
      assertEquals((-2598), javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals("f0b", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token1.endColumn);
      assertEquals(15, token1.beginColumn);
      assertEquals((-2598), token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals((-2598), token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2598), javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals((-2598), javaCharStream0.getBeginLine());
      assertEquals((-2598), javaCharStream0.getLine());
      assertEquals(15, javaCharStream0.getBeginColumn());
      assertEquals("f0b", token1.toString());
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+CE&pPojb,");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("+CE&pPojb,");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 115, 2145388538, 2541);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 115, 104);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(101, token0.kind);
      assertEquals(104, token0.beginColumn);
      assertEquals(115, token0.endLine);
      assertEquals(104, token0.endColumn);
      assertEquals(115, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals(115, javaCharStream1.getEndLine());
      assertEquals(104, javaCharStream1.getEndColumn());
      assertEquals(115, javaCharStream1.getBeginLine());
      assertEquals(115, javaCharStream1.getLine());
      assertEquals(104, javaCharStream1.getBeginColumn());
      assertEquals(104, javaCharStream1.getColumn());
      assertEquals("+", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(101, token0.kind);
      assertEquals(104, token0.beginColumn);
      assertEquals(115, token0.endLine);
      assertEquals(104, token0.endColumn);
      assertEquals(115, token0.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(115, javaCharStream1.getEndLine());
      assertEquals(104, javaCharStream1.getEndColumn());
      assertEquals(115, javaCharStream1.getBeginLine());
      assertEquals(115, javaCharStream1.getLine());
      assertEquals(104, javaCharStream1.getBeginColumn());
      assertEquals(104, javaCharStream1.getColumn());
      assertEquals("+", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      stringReader0.mark((byte)0);
      int int0 = stringReader0.read();
      assertEquals(99, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("om", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("om", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(85, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(".", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(8, token2.endColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals("soops", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(8, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals("soops", token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(9, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(85, token4.kind);
      assertEquals(9, token4.endColumn);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertNotNull(token4);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(".", token4.toString());
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, javaCharStream0.bufpos);
      assertEquals(74, token5.kind);
      assertEquals(10, token5.beginColumn);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(16, token5.endColumn);
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertNotNull(token5);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(16, javaCharStream0.getColumn());
      assertEquals(16, javaCharStream0.getEndColumn());
      assertEquals("CEN4010", token5.toString());
      assertNotSame(token5, token0);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)55;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)55, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      StringReader stringReader0 = new StringReader("b>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-1), (byte)55);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1), token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-1), token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals("b", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals((-1), token1.endLine);
      assertEquals(124, token1.kind);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals((-1), token1.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token1);
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(">", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals((-1), token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-1), token2.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token3.endColumn);
      assertEquals((-1), token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals((-1), token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals("", token3.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      StringReader stringReader0 = new StringReader("?uc]0Y8.Y.#");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'g';
      charArray0[1] = 'f';
      charArray0[3] = '/';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'?', 'u', 'c', ']'}, charArray0);
      
      StringReader stringReader1 = new StringReader("^G'fx1A#Eh|B Q@");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int1 = stringReader1.read(charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(int1 == int0);
      assertEquals(4, int1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'^', 'G', '\'', 'f'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-3426), 1498, 558);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int2 = stringReader1.read(charArray0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(4, int2);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'x', '1', 'A', '#'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1498, token0.beginColumn);
      assertEquals((-3426), token0.beginLine);
      assertEquals(1499, token0.endColumn);
      assertEquals((-3426), token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      assertEquals((-3426), javaCharStream0.getLine());
      assertEquals(1499, javaCharStream0.getColumn());
      assertEquals((-3426), javaCharStream0.getBeginLine());
      assertEquals(1498, javaCharStream0.getBeginColumn());
      assertEquals((-3426), javaCharStream0.getEndLine());
      assertEquals(1499, javaCharStream0.getEndColumn());
      assertEquals("Eh", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1500, token1.endColumn);
      assertEquals((-3426), token1.beginLine);
      assertEquals(1500, token1.beginColumn);
      assertEquals(106, token1.kind);
      assertEquals((-3426), token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-3426), javaCharStream0.getLine());
      assertEquals((-3426), javaCharStream0.getBeginLine());
      assertEquals(1500, javaCharStream0.getColumn());
      assertEquals(1500, javaCharStream0.getEndColumn());
      assertEquals(1500, javaCharStream0.getBeginColumn());
      assertEquals((-3426), javaCharStream0.getEndLine());
      assertEquals("|", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-3426), javaCharStream0.getLine());
      assertEquals((-3426), javaCharStream0.getBeginLine());
      assertEquals(1500, javaCharStream0.getColumn());
      assertEquals(1500, javaCharStream0.getEndColumn());
      assertEquals(1500, javaCharStream0.getBeginColumn());
      assertEquals((-3426), javaCharStream0.getEndLine());
      assertNotSame(stringReader1, stringReader0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.552664431795947
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x$V>>*G6*:9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("x$V", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      byteArrayInputStream0.reset();
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte)47}, byteArray0);
      
      Token token1 = new Token();
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNull(token1.toString());
      
      token1.specialToken = token0;
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("x$V", token0.toString());
      assertNull(token1.toString());
      assertEquals("x$V", token1.specialToken.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"/\" (47), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.8477903378434717
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)28;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(18, byteArrayInputStream0.available());
      assertEquals(18, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("finK*al");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 2142);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2145, token0.endColumn);
      assertEquals(2142, token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(2145, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(2142, javaCharStream1.getBeginColumn());
      assertEquals(2145, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("finK", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedPos = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2145, token0.endColumn);
      assertEquals(2142, token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(2145, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(2142, javaCharStream1.getBeginColumn());
      assertEquals(2145, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("finK", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(2145, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(2142, javaCharStream1.getBeginColumn());
      assertEquals(2145, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2145, token0.endColumn);
      assertEquals(2142, token0.beginColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals(2145, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(2142, javaCharStream1.getBeginColumn());
      assertEquals(2145, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("finK", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader(")#l?62/d=z]hUy\u0006r5r");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(4);
      assertEquals(4L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, (byte)0, (byte)0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.beginLine);
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals("62", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      token0.next = null;
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals("62", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.beginLine);
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals("62", token0.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(104, token2.kind);
      assertEquals(4, token2.beginLine);
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals("/", token2.toString());
      assertNotSame(token2, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(4, token0.endLine);
      assertEquals(4, token0.beginLine);
      assertFalse(token0.equals((Object)token2));
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals("62", token0.toString());
      assertNotSame(token0, token2);
      
      Token token3 = token_GTToken0.specialToken;
      assertNull(token3);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getLine());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vEjkcBq5Z3");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("%Z0V3");
      assertNotNull(stringReader0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      StringReader stringReader1 = new StringReader("native");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2, 2048, 53);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader2 = new StringReader("native");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      stringReader2.reset();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token0.kind);
      assertEquals(2, token0.endLine);
      assertEquals(2048, token0.endColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(2048, token0.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2048, javaCharStream0.getBeginColumn());
      assertEquals(2048, javaCharStream0.getColumn());
      assertEquals(2048, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals("%", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(2049, token1.beginColumn);
      assertEquals(2, token1.beginLine);
      assertEquals(2, token1.endLine);
      assertEquals(2052, token1.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2052, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2049, javaCharStream0.getBeginColumn());
      assertEquals(2052, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals("Z0V3", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(2052, token2.endColumn);
      assertEquals(2, token2.endLine);
      assertEquals(2052, token2.beginColumn);
      assertEquals(2, token2.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(2052, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2052, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2052, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      try { 
        stringReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.8556166049335505
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vp");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("natGve");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, 18, 2368);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.endColumn);
      assertEquals(18, token0.endLine);
      assertEquals(18, token0.beginLine);
      assertEquals(18, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("natGve", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(23, token0.endColumn);
      assertEquals(18, token0.endLine);
      assertEquals(18, token0.beginLine);
      assertEquals(18, token0.beginColumn);
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("natGve", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(23, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(23, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.5522596904937909
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte) (-121);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-121), (byte)0}, byteArray0);
      
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-121), (byte) (-121), (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("!`HJ!z{`a@ItS-\"F_,h");
      assertNotNull(stringReader0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 17, (byte)0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager2.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(17, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(17, token0.beginLine);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("!", token0.toString());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      
      javaParserTokenManager2.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(17, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(17, token0.beginLine);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals("!", token0.toString());
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertEquals(17, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(17, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/QP+Zy?i");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)62;
      byteArray0[1] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)62, (byte)62, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader1 = new StringReader("\";F[?U2;M:V+ Vo%sq");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean0 = stringReader1.markSupported();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean0);
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-549), (byte)62);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(62, token0.beginColumn);
      assertEquals((-549), token0.endLine);
      assertEquals(62, token0.endColumn);
      assertEquals((-549), token0.beginLine);
      assertEquals(104, token0.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals((-549), javaCharStream0.getEndLine());
      assertEquals((-549), javaCharStream0.getLine());
      assertEquals((-549), javaCharStream0.getBeginLine());
      assertEquals("/", token0.toString());
      assertNotSame(stringReader0, stringReader1);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[5] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      StringReader stringReader0 = new StringReader("1kQd'cc|Tq.)HN=h{9");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 1338, 1338);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(124, token0.endLine);
      assertEquals(1341, token0.endColumn);
      assertEquals(124, token0.beginLine);
      assertEquals(1338, token0.beginColumn);
      assertNotNull(token0);
      assertEquals(1341, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(1341, javaCharStream0.getEndColumn());
      assertEquals(1338, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("1kQd", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(124, token0.endLine);
      assertEquals(1341, token0.endColumn);
      assertEquals(124, token0.beginLine);
      assertEquals(1338, token0.beginColumn);
      assertEquals(1341, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(1341, javaCharStream0.getEndColumn());
      assertEquals(1338, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals("1kQd", token0.toString());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)28;
      StringReader stringReader0 = new StringReader("int");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(40, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("int", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 465);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 465. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("6g(kwhLetGs@yC`");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(33, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("float", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token1.beginColumn);
      assertEquals(5, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken(1000);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertNull(token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token3.endColumn);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("", token3.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?,L6*=>{#3Fa[tY");
      assertNotNull(stringReader0);
      
      stringReader0.mark(16);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)76;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte) (-119);
      byteArray0[6] = (byte)76;
      byteArray0[7] = (byte)76;
      byteArray0[8] = (byte) (-119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)76, (byte) (-119), (byte)76, (byte) (-119), (byte) (-119), (byte)76, (byte)76, (byte) (-119)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-119), (byte)76, (byte) (-119), (byte)76, (byte) (-119), (byte) (-119), (byte)76, (byte)76, (byte) (-119)}, byteArray0);
      
      StringReader stringReader1 = new StringReader("{(4PC");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("const");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 101, (byte) (-119), 1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, token0.kind);
      assertEquals(101, token0.beginLine);
      assertEquals((-115), token0.endColumn);
      assertEquals(101, token0.endLine);
      assertEquals((-119), token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(token0);
      assertEquals(101, javaCharStream1.getLine());
      assertEquals(101, javaCharStream1.getEndLine());
      assertEquals(101, javaCharStream1.getBeginLine());
      assertEquals((-115), javaCharStream1.getColumn());
      assertEquals((-115), javaCharStream1.getEndColumn());
      assertEquals((-119), javaCharStream1.getBeginColumn());
      assertEquals("const", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      Token token1 = Token.newToken(2784);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      
      token0.next = token1;
      assertEquals(101, javaCharStream1.getLine());
      assertEquals(101, javaCharStream1.getEndLine());
      assertEquals(101, javaCharStream1.getBeginLine());
      assertEquals((-115), javaCharStream1.getColumn());
      assertEquals((-115), javaCharStream1.getEndColumn());
      assertEquals((-119), javaCharStream1.getBeginColumn());
      assertEquals("const", token0.toString());
      assertNull(token1.toString());
      assertNull(token0.next.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(101, token2.endLine);
      assertEquals((-115), token2.endColumn);
      assertEquals((-115), token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(101, token2.beginLine);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(token2);
      assertEquals(101, javaCharStream1.getLine());
      assertEquals(101, javaCharStream1.getEndLine());
      assertEquals((-115), javaCharStream1.getBeginColumn());
      assertEquals(101, javaCharStream1.getBeginLine());
      assertEquals((-115), javaCharStream1.getColumn());
      assertEquals((-115), javaCharStream1.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, token0.kind);
      assertEquals(101, token0.beginLine);
      assertEquals((-115), token0.endColumn);
      assertEquals(101, token0.endLine);
      assertEquals((-119), token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(101, javaCharStream1.getLine());
      assertEquals(101, javaCharStream1.getEndLine());
      assertEquals((-115), javaCharStream1.getBeginColumn());
      assertEquals(101, javaCharStream1.getBeginLine());
      assertEquals((-115), javaCharStream1.getColumn());
      assertEquals((-115), javaCharStream1.getEndColumn());
      assertEquals("const", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("Yf'_SqGy>I{3x+\"?x<\"");
      assertNotNull(stringReader0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"\r\"");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      StringReader stringReader1 = new StringReader("null");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("\"\r\"");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 19, 16);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 19, column 17.  Encountered: \"\\r\" (13), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)38;
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 20, (-432));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(45, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("null", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      javaParserTokenManager2.SkipLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Vp");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("<_94iT_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-1), 449);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(88, token1.kind);
      assertEquals(1, token1.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(7, token2.endColumn);
      assertEquals(74, token2.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals("_94iT_", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">>>=");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-123);
      byteArray0[6] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte) (-123), (byte)47}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte) (-123), (byte)47}, byteArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte) (-123), (byte)47}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte) (-123), (byte)47}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)47, (byte)47, (byte)47, (byte) (-123), (byte)47}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"/\" (47), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)101;
      byteArray0[5] = (byte)40;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("public");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101, (byte)0, (byte)0, (byte)0, (byte)0, (byte)40}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 104, (-539), 1998);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(104, token0.beginLine);
      assertEquals((-539), token0.beginColumn);
      assertEquals(104, token0.endLine);
      assertEquals((-534), token0.endColumn);
      assertEquals(49, token0.kind);
      assertNotNull(token0);
      assertEquals((-534), javaCharStream0.getEndColumn());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals((-534), javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals((-539), javaCharStream0.getBeginColumn());
      assertEquals("public", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token1.beginLine);
      assertEquals((-534), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-534), token1.beginColumn);
      assertEquals(104, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals((-534), javaCharStream0.getBeginColumn());
      assertEquals((-534), javaCharStream0.getEndColumn());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals((-534), javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token2.endLine);
      assertEquals(104, token2.beginLine);
      assertEquals((-534), token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals((-534), token2.endColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      assertEquals((-534), javaCharStream0.getBeginColumn());
      assertEquals((-534), javaCharStream0.getEndColumn());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals((-534), javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token2.endLine);
      assertEquals(104, token2.beginLine);
      assertEquals((-534), token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals((-534), token2.endColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-534), javaCharStream0.getBeginColumn());
      assertEquals((-534), javaCharStream0.getEndColumn());
      assertEquals(104, javaCharStream0.getEndLine());
      assertEquals((-534), javaCharStream0.getColumn());
      assertEquals(104, javaCharStream0.getLine());
      assertEquals(104, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("_#&~|x\"![");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)55, 108, 47);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '[';
      charArray0[1] = 'I';
      charArray0[2] = '!';
      int int0 = stringReader0.read(charArray0);
      assertEquals(3, int0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'_', '#', '&'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token0.beginColumn);
      assertEquals(108, token0.endColumn);
      assertEquals(55, token0.beginLine);
      assertEquals(55, token0.endLine);
      assertEquals(90, token0.kind);
      assertNotNull(token0);
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(55, javaCharStream0.getLine());
      assertEquals("~", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(55, javaCharStream0.getLine());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token0.beginColumn);
      assertEquals(108, token0.endColumn);
      assertEquals(55, token0.beginLine);
      assertEquals(55, token0.endLine);
      assertEquals(90, token0.kind);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(55, javaCharStream0.getLine());
      assertEquals("~", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(109, token1.beginColumn);
      assertEquals(109, token1.endColumn);
      assertEquals(55, token1.endLine);
      assertEquals(106, token1.kind);
      assertEquals(55, token1.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(55, javaCharStream0.getLine());
      assertEquals("|", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(55, token2.endLine);
      assertEquals(110, token2.endColumn);
      assertEquals(55, token2.beginLine);
      assertEquals(110, token2.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals(55, javaCharStream0.getLine());
      assertEquals("x", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.jjFillToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(55, token3.beginLine);
      assertEquals(106, token3.kind);
      assertEquals(55, token3.endLine);
      assertEquals(110, token3.beginColumn);
      assertEquals(110, token3.endColumn);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals(55, javaCharStream0.getLine());
      assertEquals("|", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals(55, javaCharStream0.getLine());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 1772);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1772. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
