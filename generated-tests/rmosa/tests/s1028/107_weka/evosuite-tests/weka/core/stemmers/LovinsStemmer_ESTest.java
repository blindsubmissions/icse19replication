/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:36:50 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8835134356018994
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("ier");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("$Revision: 8080 $");
      assertEquals("$revision: 8080 $", string1);
      
      String string2 = lovinsStemmer0.stem("null");
      assertEquals("nl", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8657884713304277
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("/&'5O>2`$7e=7>");
      assertEquals("/&'5o>2`$7e=7>", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stem("Zur=}jen");
      assertEquals("zur=}j", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8693306134102765
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lud");
      assertEquals("lus", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("ially");
      assertEquals("ial", string2);
      
      String string3 = lovinsStemmer0.stem("send");
      assertEquals("sens", string3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8835134356018994
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation");
      assertEquals("wek.cor.technicalinform", string0);
      
      lovinsStemmer0.stem("ier");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("$Revision: 8080 $");
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9783270667691762
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("mastersthesis");
      lovinsStemmer0.stem(">pA\";=");
      String string0 = lovinsStemmer0.stem("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      assertEquals("the database key of the entry being cross referenced. any fields that are missing from the current record are inherited from the field being cross referenced.", string0);
      
      String string1 = lovinsStemmer0.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      assertEquals("th databas key of th entr being cros refer. any field that ar mis from th cur record ar inherit from th field being cros refer.", string1);
      
      String string2 = lovinsStemmer0.stemString("mastersthesis");
      assertEquals("mastersthes", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0291129596490722
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("tyz");
      assertEquals("tys", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.stem("5 * log(5): ");
      String string3 = lovinsStemmer0.stemString("qlS<hJD`qHoar*");
      assertEquals("ql<hjd`qhoar*", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.975379945671551
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("iers");
      lovinsStemmer0.stemString("the language the document is in.end");
      lovinsStemmer0.stem("otide");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0714547180210465
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("9o3%$VmR'EzJ\"");
      assertEquals("9o3%$vmr'ezj\"", string0);
      
      String string1 = lovinsStemmer0.stemString("#m2zbg7yBUL^5Qze");
      assertEquals("#m2zbg7ybl^5qz", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9437577304274845
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Indices from sort (ints): ");
      String string0 = lovinsStemmer0.stem("Indices from sort (ints): ");
      assertEquals("indices from sort (ints): ", string0);
      
      String string1 = lovinsStemmer0.stemString("The Mathematigal Reviews number.");
      assertEquals("th mathematig review number.", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.032645169620696
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("How something strange has been published. The first word should be captalized.");
      assertEquals("how someth strang ha been publ. th first word should be captal.", string1);
      
      lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be captal.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("8034");
      String string2 = lovinsStemmer1.stemString("3hUm}\u0001FS");
      assertEquals("3hum}\u0001fs", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8835134356018994
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("$Revision: 8080 $");
      assertEquals("$revis: 8080 $", string0);
      
      lovinsStemmer0.stem("ier");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("$Revision: 8080 $");
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0178644513591197
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("");
      lovinsStemmer0.stem("Jv7rYS{:v`Fr:~+z&}L");
      lovinsStemmer0.stemString("linguet");
      lovinsStemmer0.stem("editor");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0291129596490722
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("tyz");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("lucuad");
      assertEquals("lucuas", string1);
      
      lovinsStemmer0.stem("5 * log(5): ");
      String string2 = lovinsStemmer0.stemString("qlS<hJD`qHoar*");
      assertEquals("ql<hjd`qhoar*", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0744065714234297
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("!)Xo");
      lovinsStemmer0.stemString("!)xo");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("lovinsstemmerdex");
      String string1 = lovinsStemmer0.stem("[S3[AL");
      assertEquals("[s3[", string1);
      
      String string2 = lovinsStemmer1.stemString("[S3[AL");
      assertEquals("[s3[al", string2);
      
      String string3 = lovinsStemmer0.stemString("lovinsstemmerdex");
      assertEquals("lovinsstemmerdic", string3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0304683495565856
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("cid");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer1.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer1.stemString("yob|'iis(dh5ticend");
      assertEquals("yob|'ii(dh5ticens", string1);
      
      lovinsStemmer1.stem("cis");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("yt");
      assertEquals("yt", string2);
      
      String string3 = lovinsStemmer2.stem("Ml`ZRCVLs$X#zlBTr");
      assertEquals("ml`zrcvls$x#zlbtr", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0253582635920284
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Partitioned options: ";
      stringArray0[1] = "[";
      lovinsStemmer0.getRevision();
      stringArray0[2] = "TITLE";
      stringArray0[3] = "mit";
      stringArray0[4] = "ul";
      String string0 = lovinsStemmer0.stem("mit");
      assertEquals("mis", string0);
      
      stringArray0[5] = "cid";
      stringArray0[6] = "Fatal error.";
      stringArray0[7] = ";QO6E1M=1Y4Z>x^";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0488026001566657
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("~F5f]HE.mw+&9");
      assertEquals("~f5f]he.mw+&9", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("ier");
      lovinsStemmer0.stemString("ier");
      lovinsStemmer0.stem("lovinsstemmerpex");
      lovinsStemmer0.stemString("lovinsstemmerpic");
      String string3 = lovinsStemmer0.stemString("lovinsstemmerpic");
      assertEquals("lovinsstemmerp", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0196485309290586
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("ioIus");
      assertEquals("ioius", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.044573530880314
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("appearix");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("r&Hefnn~+BCdAxm9");
      assertEquals("r&hefn~+bcdaxm9", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("Name(s) of editors), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of editor), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string2);
      
      lovinsStemmer0.stemString("edito");
      String string3 = lovinsStemmer0.stemString("nam(s) of editor), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      assertEquals("nam(s) of edit), typ as ind in th lat book. if ther is al an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string3);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8835134356018994
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ert");
      assertEquals("ers", string0);
      
      lovinsStemmer0.stem("ier");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("$Revision: 8080 $");
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.043567392552305
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ax");
      assertEquals("ax", string0);
      
      lovinsStemmer0.stemString("g9sflux");
      lovinsStemmer0.stemString("k_T)Xk50hCN>8");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("c4.5: Grograms for macLine learnet");
      assertEquals("c4.5: grogram for macl learnet", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0253582635920284
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Partitioned options: ";
      stringArray0[1] = "[";
      lovinsStemmer0.getRevision();
      stringArray0[2] = "TITLE";
      stringArray0[3] = "mit";
      stringArray0[4] = "ul";
      stringArray0[5] = "cid";
      String string0 = lovinsStemmer0.stemString("x7yluderid");
      assertEquals("x7yluderis", string0);
      
      stringArray0[6] = "Fatal error.";
      stringArray0[7] = ";QO6E1M=1Y4Z>x^";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.02738149429427
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ond");
      assertEquals("ons", string0);
      
      lovinsStemmer0.stem("Sorted array with NaN (doubles): ");
      lovinsStemmer0.stemString("Sorted array with NaN (doubles): ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ons";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      String string1 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.025001679144989
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      String string0 = lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufman publishes", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("c4.5: Grograms for macLine lMar-e1");
      assertEquals("c4.5: grogram for macl lmar-e1", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0367173356229251
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Sorted array(ints): ");
      assertEquals("sort arra(int): ", string0);
      
      lovinsStemmer0.stemString("rud");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("uIYgEyU\"G}&I =G");
      assertEquals("uiygeyu\"g}&i =g", string1);
      
      String string2 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.8930344495678257
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ier";
      stringArray0[1] = "$Revision: 8080 $";
      stringArray0[2] = "ier";
      stringArray0[3] = "ier";
      String string0 = lovinsStemmer0.stemString("$Revision: 8080 $");
      assertEquals("$revis: 8080 $", string0);
      
      String string1 = lovinsStemmer0.stemString("cid");
      assertEquals("cis", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ier");
      lovinsStemmer0.stem("ier");
      String string2 = lovinsStemmer0.stem("vsmxensherher");
      assertEquals("vsmxensherhes", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0362610332207762
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("invalid CVS revision - not enough parts separated by dots!");
      String string2 = lovinsStemmer0.stemString("invalis cv revis - not enough part separ by dot!");
      assertEquals("inval cv rev - not enough part separ by dot!", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8635429316629946
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tUses lowercase strings.";
      stringArray0[1] = "ki76(3)k?QI>Z";
      stringArray0[2] = "vhg`GL-P{y";
      stringArray0[3] = "!,zu}F[Z9*}~7*OF6k";
      stringArray0[4] = "invalid CVS revision - not dots!";
      stringArray0[5] = "itic";
      stringArray0[6] = "?_7T }5aTyuD7g'>";
      LovinsStemmer.main(stringArray0);
      stringArray0[7] = "k";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stem("1nympvad");
      assertEquals("1nympvas", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("1nympvas");
      assertEquals("1nympv", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9970855392113438
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "idine";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ical");
      String string0 = lovinsStemmer0.stemString("ical");
      assertEquals("ical", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("0U1^<>cNjpG>SDabB");
      assertEquals("0u1^<>cnjpg>sdab", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("0u1^<>cnjpg>sdab");
      lovinsStemmer0.stem("K\"l");
      String string1 = lovinsStemmer2.stemString("0U1^<>cNjpG>SDabB");
      assertEquals("0u1^<>cnjpg>sdbb", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0291129596490722
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("tyz");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("0huhfrusyt");
      assertEquals("0huhfrusys", string0);
      
      lovinsStemmer0.stem("5 * log(5): ");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("qlS<hJD`qHoar*");
      assertEquals("ql<hjd`qhoar*", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("locax");
      assertEquals("locac", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("8034ex");
      assertEquals("8034ec", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0919886316592082
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "X5U8-%G3";
      stringArray0[1] = "pand";
      stringArray0[2] = "idpand";
      stringArray0[3] = "JNsox#%5T|)V3nrIzA";
      stringArray0[4] = "fg[pKmryM";
      stringArray0[5] = "jf'K{DjaMCt>yht uB";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("yob|'iis(dh5ticend");
      String string0 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("yob|'iis(dh5ticens");
      String string2 = lovinsStemmer0.stemString("yob|'iis(dh5ticen");
      assertEquals("yob|'ii(dh5tic", string2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ier");
      String string0 = lovinsStemmer0.stem("r%dW&D9<VDM$BBHbpP");
      assertEquals("r%dw&d9<vdm$bbhbp", string0);
      
      String string1 = lovinsStemmer0.stem("CHAPTER");
      assertEquals("chapter", string1);
      
      String string2 = lovinsStemmer0.stemString("G]<9b;");
      assertEquals("g]<9b;", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0547997878634723
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      LovinsStemmer.main(stringArray0);
      stringArray0[2] = "amyt";
      stringArray0[2] = ";Z8Xl=s/HRKcs$5";
      lovinsStemmer0.stemString("et");
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[1];
      lovinsStemmer0.stemString("Problem eading user properties: ");
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("yt");
      assertEquals("yt", string0);
      
      lovinsStemmer0.stem("xRuKYUy-W5r6!");
      String string1 = lovinsStemmer0.stemString("acies");
      assertEquals("aci", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0350504050307636
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "her";
      stringArray0[1] = "her";
      stringArray0[2] = "her";
      stringArray0[3] = "her";
      stringArray0[4] = "her";
      stringArray0[5] = "her";
      stringArray0[6] = "her";
      stringArray0[7] = "her";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("her");
      String string0 = lovinsStemmer0.stemString("her");
      assertEquals("hes", string0);
      
      lovinsStemmer0.stemString("$Revision: 8080 $");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("wea.core.TechnicalInformaton");
      assertEquals("wea.core.technicalinformat", string1);
      
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ation");
      assertEquals("ation", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.074955519313606
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ious");
      assertEquals("ious", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("lovinsstemmerpex");
      assertEquals("lovinsstemmerpic", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer1.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string2);
      
      String string3 = lovinsStemmer1.stem("et");
      assertEquals("et", string3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0349094725342614
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("A part of a book having its own title.");
      assertEquals("a part of a book hav it own titl.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("f{3ogzlud");
      String string1 = lovinsStemmer0.stem("istically");
      assertEquals("ist", string1);
      
      String string2 = lovinsStemmer0.stemString("f{3ogzlus");
      assertEquals("f{3ogzlus", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Y<K8]]lcgg:VsOBql");
      String string0 = lovinsStemmer0.stemString("y<k8]]lcgg:vsobql");
      assertEquals("y<k8]]lcg:vsobql", string0);
      
      String string1 = lovinsStemmer0.stemString("y<k8]]lcg:vsobql");
      assertEquals("y<k8]]lcg:vsobql", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0714547180210465
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.TechnicalInformation");
      assertEquals("wek.cor.technicalinform", string0);
      
      lovinsStemmer0.stem("bex");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("#m2zbg7yBUL^5Qze");
      assertEquals("#m2zbg7ybl^5qz", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The volume of a journal or multi-volume book.");
      assertEquals("th volum of a journ or mult-volum book.", string0);
      
      String string1 = lovinsStemmer0.stemString("th volum of a journ or mult-volum book.");
      assertEquals("th vol of a journ or mult-vol book.", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("`B[&T> {(k9Urq+Qk");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("ement");
      String string0 = lovinsStemmer1.stemString("`B[&T> {(k9Urq+Qk");
      assertEquals("`b[&t> {(k9urq+qk", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9941814492125127
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("oidal");
      lovinsStemmer0.stemString("sib7VRhcf{ cwml% []");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("sib7vrhcf{ cwml% []");
      assertEquals("sib7vrhcf{ cwml% []", string0);
      
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("olv");
      assertEquals("olut", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("dex");
      assertEquals("dic", string0);
      
      String string1 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A#FDT,W\u0007Lyj[");
      assertEquals("a#fdt,w\u0007lyj[", string0);
      
      String string1 = lovinsStemmer0.stemString("aCiuL");
      assertEquals("aciul", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("(ulness");
      assertEquals("(l", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "jIg#RQmoLBod{~";
      stringArray0[2] = "VDlqm";
      lovinsStemmer0.stemString("obr7ZB");
      lovinsStemmer0.stemString("istr");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0173816391031623
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("[j~Gt>");
      assertEquals("[j~gt>", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string2);
      
      String string3 = lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      assertEquals("th year of publ or, for an unpubl work, th year it wa writ. gener it should con of four numer, such as 1984, although th standard styl can handl any year who last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string3);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("qlS<hJD`qHiar*");
      assertEquals("ql<hjd`qhi*", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ious");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("eless");
      lovinsStemmer1.stemString("ious");
      lovinsStemmer0.stemString("ious");
      lovinsStemmer1.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string0);
      
      lovinsStemmer0.stem("ier");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("ier");
      assertEquals("ier", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("r&Hefnn~+BCdAxm9");
      assertEquals("r&hefn~+bcdaxm9", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer1.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
      
      String string2 = lovinsStemmer0.stemString("metr");
      assertEquals("meter", string2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1285390239063615
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("&k(6}[l:Y;e <wd");
      assertEquals("&k(6}[l:y;e <wd", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("HRyL.jN2z+L*0!H");
      assertEquals("hr.jn2z+l*0!h", string2);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`B[&T> {(k9Urq+Qk";
      stringArray0[1] = "`B[&T> {(k9Urq+Qk";
      lovinsStemmer0.stem("`B[&T> {(k9Urq+Qk");
      stringArray0[4] = "`B[&T> {(k9Urq+Qk";
      String string0 = lovinsStemmer0.stemString("`B[&T> {(k9Urq+Qk");
      assertEquals("`b[&t> {(k9urq+qk", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("lovinsstemmerpher");
      assertEquals("lovinsstemmerpher", string1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer1.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer1.stemString("C!Eti?*`=-VHZl^ct");
      assertEquals("c!es?*`=-vhzl^ct", string1);
      
      lovinsStemmer0.stemString("c!es?*`=-vhzl^ct");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("C!Eti?*`=-VHZl^ct");
      String string2 = lovinsStemmer1.stemString("");
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("ioIcus");
      assertEquals("ioic", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("How something str7nge has been published. The first word shoul e capitalied.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("f 3oGZ");
      assertEquals("f 3ogz", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("|-}(pip/P@");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("How something str7nge has been published. The first word shoul e capitalied.");
      String[] stringArray0 = new String[17];
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      stringArray0[0] = "|-}(pip/p@";
      stringArray0[1] = "how someth str7ng ha been publ. th first word shoul e capital.";
      lovinsStemmer0.toString();
      stringArray0[3] = "f 3ogz";
      stringArray0[4] = "8034";
      stringArray0[5] = "How something str7nge has been published. The first word shoul e capitalied.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      String string0 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capital.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("f 3oGZ");
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("|-}(pip/P@");
      lovinsStemmer0.stemString("~");
      String string3 = lovinsStemmer0.stemString("n$xMum\"8");
      assertEquals("n$xm\"8", string3);
      
      String string4 = lovinsStemmer0.stem("morgan kaufman publilhuad");
      assertEquals("morgan kaufman publilhuas", string4);
  }
}
