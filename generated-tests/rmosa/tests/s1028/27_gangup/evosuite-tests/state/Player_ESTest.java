/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:13:09 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SyncFailedException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(10, "", 10);
      player0.gangStrength();
      player0.setY(10);
      player0.gangStrength();
      player0.setY(213.43724F);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "AG+P4B2wT";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AG+P4B2wT");
      int int0 = 4;
      Player player0 = new Player(4);
      Player player1 = new Player();
      player1.gangStrength();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((-923), (String) null, (String) null, (-923));
      byte[] byteArray0 = new byte[0];
      player0.unpack(byteArray0);
      player0.getTimeOfDeath();
      player0.getZ();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      Player player0 = new Player(1, "", 1);
      player0.setMoney(1);
      Player player1 = null;
      player0.next = (Party) null;
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(0, (String) null, 3006);
      boolean boolean0 = player0.isConnected();
      assertTrue(boolean0);
      assertEquals(3006, player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      
      Player player1 = new Player((short)4919, "", 606);
      String string0 = player1.getIP();
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("0.0.0.0", string0);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertTrue(player1.isConnected());
      assertEquals(1, player1.getStrength());
      assertEquals(606, player1.getPictureId());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(3);
      player0.setConnected(true);
      float float0 = player0.getY();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("Player3", player0.toString());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player0.getPictureId();
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)4919);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(0);
      player0.reset(true);
      player0.pack();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("Player0", player0.toString());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ((-487.24893F));
      player0.getX();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-115);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)107;
      player0.unpack(byteArray0);
      player0.setDead(5032L, false);
      int int0 = player0.getStrength();
      assertEquals((-487.24893F), player0.getZ(), 0.01F);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w/E~ArL+Zg?39\"V7");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0.0.0.0");
      System.setCurrentTimeMillis((-1951L));
      System.setCurrentTimeMillis((-1134L));
      System.setCurrentTimeMillis((-1134L));
      System.setCurrentTimeMillis((-1951L));
      System.setCurrentTimeMillis((-1696L));
      Player player0 = new Player((-5458));
      Player player1 = new Player(10);
      player0.reset(false);
      player0.isJoinOK(player1, false);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player2 = new Player(2570);
      player2.getSubparty();
      boolean boolean0 = player0.isJoinOK(player2, false);
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player2.getIP());
      assertFalse(boolean0);
      assertTrue(player2.isConnected());
      assertEquals(0, player2.getPictureId());
      assertEquals(1, player2.getStrength());
      assertEquals("Player2570", player2.toString());
      assertEquals(10.0F, player2.getX(), 0.01F);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)118;
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte) (-55);
      byteArray0[7] = (byte)4;
      player0.unpack(byteArray0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.toString());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getStrength();
      assertEquals(1, int0);
      
      Player player1 = new Player((byte) (-55), "state.Player", 1);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      assertTrue(player1.isConnected());
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(boolean0);
      assertEquals(1, player1.getPictureId());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((-2050));
      player0.isDead();
      MockFile mockFile0 = new MockFile("=e");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      // Undeclared exception!
      try { 
        mockPrintStream0.append((CharSequence) "=e", (int) (short)4919, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0, ";?bms>YyfM)e,O!~c", ";?bms>YyfM)e,O!~c", 0, 0);
      player0.setX((-4755.0F));
      byte[] byteArray0 = player0.pack();
      byte[] byteArray1 = player0.pack();
      player0.unpack(byteArray1);
      player0.getStrength();
      player0.getMoney();
      player0.type();
      player0.unpack(byteArray0);
      player0.reset(false);
      float float0 = Player.MOVE_DISTANCE;
      player0.setDead();
      player0.setY(0.0F);
      player0.setY(5);
      player0.unpack(byteArray1);
      player0.setMoney(475.13F);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(0, "&sb|';M7)R2It8$X", "&sb|';M7)R2It8$X", 0);
      Player player1 = new Player(0, "&sb|';M7)R2It8$X", "&sb|';M7)R2It8$X", 0, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player1.setDead((long) 0);
      player0.setJoinOK(player1, true);
      player0.getIP();
      Player player2 = new Player((-1513));
      player2.getName();
      player1.getZ();
      player1.setDead((long) (short)4919);
      boolean boolean0 = player1.isDead();
      assertEquals(4919L, player1.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player1.setJoinOK(player0, true);
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
      assertTrue(boolean0);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("Player-1", player1.toString());
      assertEquals(0, player1.getPictureId());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
      assertEquals(0, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals("Player-1", player1.getName());
      assertFalse(boolean0);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (short)4919);
      System.setCurrentTimeMillis(1392409296320L);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertFalse(boolean0);
      assertTrue(player1.isConnected());
      assertEquals(1, player1.getStrength());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1", player1.getName());
  }
}
