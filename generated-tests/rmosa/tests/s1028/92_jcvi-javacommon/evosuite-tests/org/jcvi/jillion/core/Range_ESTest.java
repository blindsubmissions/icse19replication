/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:45:39 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("Jg/QuK%?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Jg/QuK%? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(1581L, 1248L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.858006239667225
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals("Jg/QuK%?");
      long long0 = range0.getEnd();
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32769 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.702312508400661
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(4294967295L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range range1 = Range.ofLength(4294967294L);
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-21L), (-21L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1860L, (-9223372036854775792L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 1860, -9223372036854775792 are not valid Residue Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.915533637424272
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32774L, 32774L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 32774 .. 32773 ]/0B", range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem2);
      range1.equals(range0);
      range1.getBegin();
      range0.equals(range_CoordinateSystem1);
      range1.getBegin();
      Range range2 = Range.parseRange("[ 32774 .. 32773 ]/0B", range_CoordinateSystem2);
      range0.equals(range2);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 32774 .. 32773 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 32774 .. 32773 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7719278879609686
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      long long0 = 2147483646L;
      Range range0 = Range.of(2147483646L);
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("|f1@", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse |f1@ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      long long0 = range0.getEnd();
      assertEquals(4294967294L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      range0.equals(range_CoordinateSystem1);
      boolean boolean0 = range0.equals("0B");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0550323582838375
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      List<Range> list0 = range0.split(32767L);
      range0.complementFrom(list0);
      range0.equals(range_CoordinateSystem0);
      range0.equals("file can not be null");
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Long long0 = new Long((-246L));
      Long.divideUnsigned((-246L), (-246L));
      range0.equals(long0);
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.809783478004049
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, (-1L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      Object object0 = new Object();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      boolean boolean0 = range0.intersects(range0);
      assertFalse(boolean0);
      
      long long1 = range0.getEnd();
      assertEquals((-2L), long1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8253753384664115
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(255L);
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7646927366392897
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(9223372036854772072L);
      Range range1 = Range.of(9223372036854775026L);
      range1.startsBefore(range0);
      range1.toString();
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(2904L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(1L, 789L);
      long long0 = 340L;
      range_Builder0.shift(340L);
      Range.Builder range_Builder1 = new Range.Builder(789L, 789L);
      long long1 = (-1283L);
      range_Builder0.shift((-1247L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-892L), (-2553L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = range0.intersection(range0);
      long long0 = range1.getBegin();
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      long long0 = range0.getEnd();
      assertEquals(4294967294L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      range0.equals(range_CoordinateSystem1);
      boolean boolean1 = range0.equals("0B");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      Object object0 = new Object();
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      range_Builder0.copy();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.spliterator();
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      long long1 = range0.getEnd();
      assertEquals((-1L), long1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.expandEnd((-1944L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-1927L));
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0279358829204788
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(255L);
      range0.equals(range1);
      Object object0 = new Object();
      range1.equals(object0);
      range1.intersection(range0);
      range1.equals(range0);
      range0.getBegin();
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-69L), (-69L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-3194L));
      range_Builder0.contractEnd(1505L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(509L);
      assertSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      long long1 = range0.getEnd();
      assertEquals((-1L), long1);
      
      Long long2 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      boolean boolean1 = range0.intersects(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2225207356189296
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854774711L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem2);
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range0.intersects(range1);
      range0.getLength();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8444872614601695
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(829L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(830L);
      range0.isSubRangeOf(range1);
      range0.getEnd();
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of(830L);
      range0.equals(range2);
      range0.getBegin();
      range2.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("\u0001*(.X8zeHIl>xQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.\u0001*(.X8zeHIl>xQ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7722984534427955
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(255L);
      range0.startsBefore(range1);
      Object object0 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-2454L));
      Range range1 = Range.of((-2455L));
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      
      Range range2 = Range.of((-2455L));
      Object object0 = new Object();
      Range.Comparators.values();
      long long0 = range2.getBegin();
      assertSame(range2, range1);
      assertEquals((-2455L), long0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.897466606348258
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32774L, 32774L);
      String string0 = range0.toString();
      assertEquals("[ 32774 .. 32773 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 32774 .. 32773 ]/0B", range_CoordinateSystem1);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem2);
      assertEquals(32772L, long0);
      
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      
      range1.getBegin();
      boolean boolean2 = range0.equals(range_CoordinateSystem1);
      assertFalse(boolean2);
      
      long long1 = range1.getBegin();
      assertEquals(32773L, long1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7878762280875944
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(2904L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8492350266892
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-4L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-3L), long0);
      
      boolean boolean0 = range0.equals("Jg/QuK%?");
      assertFalse(boolean0);
      
      long long1 = range0.getEnd();
      assertEquals((-4L), long1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1934799700942107
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(9223372036854772101L, 9223372036854772101L);
      Range range1 = Range.of(9223372036854772101L, 9223372036854772101L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      range0.equals("SB");
      Object object0 = new Object();
      Long long0 = new Long(9223372036854772101L);
      range0.complement(range1);
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("9Yp8vn", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 9Yp8vn into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.382470987527148
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
      
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of(2147483646L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range2.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      range1.equals(range0);
      long long1 = range0.getBegin();
      assertEquals(2147483646L, long1);
      assertSame(range0, range2);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(814L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.23230568706266
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2904L);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 0L);
      range0.complement(range1);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("M42G7)]52->");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.M42G7)]52->
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      
      List<Range> list0 = range0.split(9223372036854775807L);
      assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.823416998397392
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(2147483646L);
      Long long0 = new Long((-1L));
      range0.equals(long0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967314L, 4294967314L);
      Long long0 = new Long(4294967314L);
      range0.getEnd();
      range0.getEnd();
      long long1 = range0.getEnd();
      assertEquals(4294967313L, long1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1134294978268238
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(3772L);
      range0.split(3772L);
      Object object0 = new Object();
      range0.getBegin();
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.of(2147483646L);
      Range range0 = Range.of(2147483647L);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.8147041867002995
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 32767L;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range0.equals(range_CoordinateSystem0);
      range0.equals("file can not be null");
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9865597700453046
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-639L), 4294967282L);
      Range range1 = Range.of(range_CoordinateSystem0, (-659L), 4294967282L);
      range1.getEnd();
      range1.endsBefore(range1);
      range1.equals(range0);
      range0.getBegin();
      range1.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967314L, 9223372036854774711L);
      range0.getEnd();
      long long0 = range0.getEnd();
      assertEquals(9223372036854774710L, long0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = new Long(0L);
      range0.getEnd();
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Vfuz@M#raj^!5RYR<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Vfuz@M#raj^!5RYR<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.969772702899915
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-132L), 32774L);
      Range range1 = Range.of(range_CoordinateSystem0, (-3290L), 32774L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.startsBefore(range0);
      range1.equals(range0);
      range0.equals(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.93453559666881
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-2454L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range range1 = Range.of((-2455L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2453 .. -2453 ]/RB", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.825781828196931
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      long long0 = 9223372036854775026L;
      Range range0 = Range.of(9223372036854772072L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.968952666853713
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
      
      Range range1 = Range.of(2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of(2147483646L);
      range2.getBegin();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      long long1 = range0.getBegin();
      assertSame(range0, range2);
      assertEquals(2147483646L, long1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.forEach(consumer0);
      range0.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(54L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 4294967295L);
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long((-103L));
      Long.compare((-1916L), (-103L));
      range0.equals((Object) null);
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.902823587955807
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = new Long((-2147483648L));
      Long.getLong("(LQA62_t#.stI(3=tao", (-2147483648L));
      Long.sum(456L, 2270L);
      Range range0 = Range.of((-2147483648L));
      range0.equals(long0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(782L);
      range0.equals((Object) null);
      long long0 = range0.getEnd();
      assertEquals(782L, long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(4630L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals((Object) null);
      long long0 = new Long((-32768L));
      assertEquals((-32768L), long0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(2017L);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("a7_86pA.5/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.a7_86pA.5/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8164699543164384
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32744L, 32744L);
      Range range1 = Range.of(range_CoordinateSystem0, 3258L, 3258L);
      range0.getBegin();
      range1.toString(range_CoordinateSystem0);
      Range.parseRange("[ 3258 .. 3258 ]/SB", range_CoordinateSystem0);
      range_CoordinateSystem0.getAbbreviatedName();
      range1.equals(range0);
      range0.equals("SB");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals(9223372036854775807L, long0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(797L, 797L);
      Object object0 = new Object();
      Range range1 = Range.of(560L, 560L);
      Object object1 = new Object();
      range0.equals(range1);
      range1.getBegin();
      Range range2 = Range.of(560L, 797L);
      Range.CoordinateSystem.values();
      long long0 = new Long(560L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(561L, long1);
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      assertNotSame(range2, range1);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4162L, 4294967295L);
      range0.toString();
      Range range1 = Range.parseRange("[ 4162 .. 4294967294 ]/0B", range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(4294967294L, long0);
      
      Range range2 = Range.parseRange("[ 4162 .. 4294967294 ]/0B", range_CoordinateSystem0);
      range2.equals(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      long long1 = range2.getBegin();
      assertSame(range2, range1);
      assertEquals(4162L, long1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8243659399169285
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
      
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      boolean boolean0 = range1.equals(range0);
      long long1 = range0.getBegin();
      assertEquals(2147483646L, long1);
      
      boolean boolean1 = range2.equals(range0);
      assertSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = new Long((-2147483648L));
      Range range0 = Range.ofLength(2072L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(65535L);
      range1.toString();
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.767923626502885
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.equals("");
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Long.getLong("");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(2014L);
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.of((-1L));
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      long long0 = range1.getEnd();
      assertSame(range1, range0);
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(4294967296L);
      Range range1 = Range.of(4294967296L);
      range1.equals(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.610917912644226
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32774L, 32774L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-9223372036854775808L), (-9223372036854775808L));
      range0.isSubRangeOf(range1);
      range1.equals(range0);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      String string0 = "5(F}x+*h)%!A";
      range0.equals("5(F}x+*h)%!A");
      List<Range> list0 = range1.split(1015L);
      range1.complementFrom(list0);
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("5(F}x+*h)%!A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.5(F}x+*h)%!A
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.929568618777601
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals("");
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.split(9223372036854775807L);
      range0.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-4L));
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range0.equals((Object) null);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.equals(range0);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.9765445167027456
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(2832L, 9223372036854775807L);
      range0.split(9223372036854775011L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      range0.equals(object0);
      long long0 = range0.getBegin();
      assertEquals(2832L, long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.9060854067790225
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32774L, 32774L);
      Range range1 = Range.of(range_CoordinateSystem0, 5294L, 5294L);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      long long0 = range0.getBegin();
      assertEquals(32774L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem.values();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.parseRange("'T1-5iF'5[A^=[j|g;", range_CoordinateSystem0);
      long long1 = range0.getEnd();
      assertEquals(4L, long1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(4294967319L);
      range0.equals(range0);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.8647385121905677
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      Object object0 = new Object();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1L), long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      range0.getEnd();
      long long1 = range0.getBegin();
      assertEquals((-1L), long1);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.9904214839013683
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1095L), 2147483646L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1095L), 32774L);
      range1.equals(range_CoordinateSystem0);
      range0.equals(range1);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("(d+)s*-s*(d+)", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (d+)s*-s*(d+) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.8754478444593765
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854774711L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854774710L, long0);
      
      long long1 = range0.getLength();
      assertEquals(9223372032559807416L, long1);
      
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32756L, 32756L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.offerFirst(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      range0.getBegin();
      range0.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.1064271929195773
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Long long0 = new Long((-2147483653L));
      Range range0 = Range.of((-2147483653L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long.compareUnsigned((-2147483653L), (-241L));
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483653L), 68L);
      range1.equals(long0);
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.908318357393279
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.getBegin();
      Range range1 = Range.of((-2147483648L));
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(9223372036854772101L, 9223372036854772101L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854772101L, 9223372036854772101L);
      range1.equals(range0);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-2147483675L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-4L));
      range0.toString();
      Long long0 = new Long((-4L));
      range0.endsBefore(range0);
      long long1 = new Long((-4L));
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 32744L, 32744L);
      Range range0 = Range.of(range_CoordinateSystem0, 3264L, 3264L);
      Long long0 = new Long(3264L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.0439485751584923
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-127L), long0);
      
      Range range2 = Range.of((-128L), (-127L));
      Range.of((-127L));
      range_CoordinateSystem0.getAbbreviatedName();
      boolean boolean0 = range1.equals(range2);
      long long1 = range2.getEnd();
      assertEquals((-127L), long1);
      
      Range range3 = Range.of((-127L));
      boolean boolean1 = range2.equals(range3);
      assertTrue(boolean1 == boolean0);
      assertFalse(range3.equals((Object)range2));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.0951180988836398
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-178L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-178L), (-177L));
      Range range2 = Range.of((-177L));
      range2.toString();
      Long long0 = new Long(32767L);
      range0.equals((Object) null);
      range1.equals(range2);
      range1.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getLength();
      range0.getEnd();
      Range range1 = Range.ofLength(2714L);
      range1.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("X0'Qg'78,5\"DWAt[u)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range range1 = Range.of(range_CoordinateSystem0, 3212L, 3212L);
      range0.equals(range1);
      range0.getBegin();
      range1.toString(range_CoordinateSystem0);
      range_CoordinateSystem0.getAbbreviatedName();
      range1.equals(range1);
      range0.equals("SB");
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854774711L);
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.toString();
      Range range1 = Range.ofLength(9223372036854774696L);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.0063936509154088
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getBegin();
      range0.spliterator();
      Long.compareUnsigned(9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 50L, 9223372036854775807L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("cEYJ.f=8hCF,_CQ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.cEYJ.f=8hCF,_CQ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.0523496301283437
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(2832L, 9223372036854775807L);
      Range range1 = Range.of(2832L, 9223372036854775807L);
      range1.spliterator();
      range1.getEnd();
      Long long0 = new Long(41L);
      Range range2 = Range.of(1101L, 9223372036854772976L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range3 = Range.of(1572L, 9223372036854775807L);
      range3.intersects(range2);
      range3.equals(range0);
      range1.getBegin();
      Long long1 = new Long(9223372036854775807L);
      Long.compare(2832L, 41L);
      range1.equals(long1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(9223372036854772101L, 9223372036854772101L);
      Range range1 = Range.of(9223372036854772101L, 9223372036854772101L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      boolean boolean0 = range0.equals("SB");
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(9223372036854772102L, long0);
      
      Range range2 = Range.of(9223372036854772102L);
      Range range3 = Range.of(9223372036854772101L);
      range2.equals(range0);
      assertSame(range0, range1);
      
      long long1 = range2.getBegin();
      assertTrue(range2.equals((Object)range3));
      assertEquals(9223372036854772102L, long1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(2147483646L, 2147483647L);
      range1.getLength();
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.3726053567376906
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(2832L, 9223372036854775807L);
      Range range1 = Range.of(2832L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      range0.spliterator();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2832L, 9223372036854775807L);
      long long0 = range2.getEnd();
      assertEquals(9223372036854775806L, long0);
      
      Range range3 = Range.of(2832L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range2.getBegin(range_CoordinateSystem1);
      assertEquals(2831L, long1);
      
      Range.of(9223372036854775807L);
      range2.equals(range0);
      long long2 = range3.getEnd();
      assertEquals(2832L, long2);
      assertSame(range3, range1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4965075614664793
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getBegin();
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B", range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range range2 = Range.of(9223372036854775805L);
      range1.equals(range2);
      range0.getBegin();
      range0.equals(range1);
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 0 .. 9223372036854775806 ]/0B", range_CoordinateSystem2);
      range2.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 9223372036854775806 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 9223372036854775806 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.931546329662285
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4162L, 4294967295L);
      range0.toString();
      Range range1 = Range.parseRange("[ 4162 .. 4294967294 ]/0B", range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(4294967294L, long0);
      
      Range.parseRange("[ 4162 .. 4294967294 ]/0B", range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      range1.getBegin();
      range1.equals("[ 4162 .. 4294967294 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 4162 .. 4294967294 ]/0B", range_CoordinateSystem2);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      
      long long1 = range0.getBegin();
      assertEquals(4162L, long1);
      
      Range.CoordinateSystem.values();
      range0.getEnd();
      range2.equals("[ 4162 .. 4294967294 ]/0B");
      long long2 = range0.getEnd();
      assertFalse(range0.equals((Object)range1));
      assertEquals(4294967294L, long2);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4162L, 4294967287L);
      String string0 = range0.toString();
      assertEquals("[ 4162 .. 4294967286 ]/0B", string0);
      
      long long0 = new Long(4294967287L);
      Range range1 = Range.of(4162L, 4294967287L);
      range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      
      long long1 = range0.getEnd();
      assertEquals(4294967286L, long1);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.637586159726386
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range range0 = Range.of(2832L, 9223372036854775807L);
      Range range1 = Range.of(2832L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      range0.spliterator();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2832L, 9223372036854775807L);
      long long0 = range2.getEnd();
      assertEquals(9223372036854775806L, long0);
      
      Range range3 = Range.of(2832L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range2.getBegin(range_CoordinateSystem1);
      Range.of(9223372036854775807L);
      range2.equals(range0);
      long long2 = range3.getEnd();
      assertTrue(long2 == long1);
      assertEquals(2832L, long2);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854774711L);
      range0.getLength();
      range0.getEnd();
      Range range1 = Range.of(4294967295L, 9223372034707292162L);
      range1.equals(range0);
      range0.equals(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("fgeH}sG<@0B&?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.fgeH}sG<@0B&?
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
