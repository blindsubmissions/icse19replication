/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:46:19 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.MenuBar;
import freemind.controller.NodeMotionListener;
import freemind.main.FreeMind;
import freemind.main.Resources;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.actions.NodeColorBlendAction;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.ColorModel;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import java.util.TreeSet;
import java.util.Vector;
import javax.help.ForwardAction;
import javax.help.JHelpTOCNavigator;
import javax.help.plaf.basic.BasicTOCNavigatorUI;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JRootPane;
import javax.swing.JTabbedPane;
import javax.swing.JToolBar;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.LineBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.basic.BasicLabelUI;
import javax.swing.text.AsyncBoxView;
import javax.swing.text.Element;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.dom.GenericDOMImplementation;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemCopyOf;
import org.apache.xalan.templates.ElemFallback;
import org.apache.xalan.templates.KeyDeclaration;
import org.apache.xalan.templates.Stylesheet;
import org.apache.xerces.dom.CoreDocumentImpl;
import org.apache.xerces.dom.DOMImplementationImpl;
import org.apache.xerces.dom.DocumentTypeImpl;
import org.apache.xml.serializer.EmptySerializer;
import org.apache.xpath.XPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.DOMImplementation;
import org.w3c.dom.DocumentType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5703209512407335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775785L));
      JDayChooser jDayChooser0 = new JDayChooser();
      CoreDocumentImpl coreDocumentImpl0 = new CoreDocumentImpl();
      DocumentTypeImpl documentTypeImpl0 = new DocumentTypeImpl(coreDocumentImpl0, "t");
      boolean boolean0 = false;
      coreDocumentImpl0.loadXML("day");
      DOMImplementationImpl dOMImplementationImpl0 = new DOMImplementationImpl();
      GenericDocument genericDocument0 = null;
      try {
        genericDocument0 = new GenericDocument(documentTypeImpl0, dOMImplementationImpl0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
         //
         // The given node (type: 9, name: #document) was not created by the current document.
         //
         verifyException("org.apache.batik.dom.AbstractNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      JComponent.getDefaultLocale();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1082, 120L, 732, 1082, '`', 1082);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.729383583881077
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getInheritsPopupMenu();
      System.setCurrentTimeMillis((-2605L));
      jDayChooser0.setMaxDayCharacters(9);
      JTabbedPane jTabbedPane0 = new JTabbedPane();
      // Undeclared exception!
      try { 
        jTabbedPane0.getForegroundAt(1623);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1623, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.729383583881077
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setMonth(19);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "_IC4=oZ$MM{(t";
      jDayChooser0.dayNames = stringArray0;
      System.setCurrentTimeMillis((-2605L));
      jDayChooser0.setMaxDayCharacters(9);
      jDayChooser0.setEnabled(true);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.886269009276871
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.putClientProperty((Object) null, (Object) null);
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.isDecorationBackgroundVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.addListeners(9);
      jDayChooser_DecoratorButton0.getActionListeners();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.createVolatileImage(8240, 8240);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser0.focusGained((FocusEvent) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-3237), 8240, 'M', 40, 'M');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser1.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(true);
      boolean boolean0 = new Boolean(false);
      System.setCurrentTimeMillis((-2605L));
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.762209104506706
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getInheritsPopupMenu();
      System.setCurrentTimeMillis((-2605L));
      jDayChooser0.setMaxDayCharacters(9);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.794384563563956
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getInheritsPopupMenu();
      System.setCurrentTimeMillis((-2605L));
      jDayChooser0.setMaxDayCharacters(9);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6691033443253644
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HJH%");
      System.setCurrentTimeMillis((-2605L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%50gYR|A5YXIE{\"");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-23);
      jDayChooser0.repaint();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 34, 2172.982);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1117, (byte)40, 34, (byte)40, 'y');
      jDayChooser0.keyPressed(keyEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      System.setCurrentTimeMillis((-2605L));
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.windowText;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekdayForeground(systemColor0);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1804;
      floatArray0[1] = (float) 1441;
      // Undeclared exception!
      try { 
        systemColor0.getColorComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.695885269385701
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      jDayChooser0.removePropertyChangeListener((PropertyChangeListener) basicLabelUI0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getInheritsPopupMenu();
      System.setCurrentTimeMillis((-2605L));
      jDayChooser0.setMaxDayCharacters(9);
      jDayChooser0.setDay((-2681));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 8832, false, jDayChooser0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      ColorModel colorModel0 = jDayChooser0.getColorModel();
      HierarchyBoundsListener hierarchyBoundsListener0 = null;
      AsyncBoxView asyncBoxView0 = new AsyncBoxView((Element) null, 8832);
      asyncBoxView0.getContainer();
      // Undeclared exception!
      try { 
        jDayChooser0.add((Component) null, (Object) colorModel0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      JYearChooser jYearChooser0 = new JYearChooser();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getVisibleRect();
      JButton[] jButtonArray0 = new JButton[0];
      jDayChooser0.weeks = jButtonArray0;
      // Undeclared exception!
      try { 
        jDayChooser0.drawDays();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      Polygon polygon0 = new Polygon();
      System.setCurrentTimeMillis(0);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1222), "_.N");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis((-2605L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "11");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2, 1117, 2, (-3754), 'd');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.804506987817414
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, (-2050L), 0, 1617, '2', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(872);
      JButton[] jButtonArray0 = new JButton[9];
      JButton jButton0 = jDayChooser0.getSelectedDay();
      jButtonArray0[0] = null;
      JColorChooser jColorChooser0 = Controller.getCommonJColorChooser();
      try { 
        JColorChooser.createDialog(jButton0, "day", false, jColorChooser0, jDayChooser0, jDayChooser0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getDayPanel();
      TreeSet<AWTKeyStroke> treeSet0 = new TreeSet<AWTKeyStroke>();
      treeSet0.size();
      // Undeclared exception!
      try { 
        treeSet0.add((AWTKeyStroke) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isWeekOfYearVisible();
      Resources resources0 = Resources.getInstance();
      Properties properties0 = resources0.getProperties();
      MockFile mockFile0 = new MockFile("M/M<|.T", "R");
      FreeMind freeMind0 = null;
      try {
        freeMind0 = new FreeMind(properties0, properties0, mockFile0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(64);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7736275476159054
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, (-2050L), 0, 1617, '2', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setMonth(872);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 159, (-4691L), 159, 159, '9', (-1699));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.drawWeeks();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = (JDayChooser)jYearChooser0.add((Component) jDayChooser0);
      jDayChooser1.updateUI();
      jDayChooser1.updateUI();
      System.setCurrentTimeMillis((-213L));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7126246565920478
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getInheritsPopupMenu();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      System.setCurrentTimeMillis((-2605L));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1386), (-2605L), (-1386), 3, 'R');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("25", 46);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.firePropertyChange("15", false, false);
      JDayChooser jDayChooser1 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser1.getGraphicsConfiguration();
      jDayChooser0.setMaxSelectableDate(date0);
      try { 
        Color.decode("day");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"day\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 3, 3, 3, 3, 3, 3, 3, 3, false, 3, 3, 3);
      jDayChooser0.getToolTipText((MouseEvent) mouseWheelEvent0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)79;
      byteArray0[7] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Color.getColor("day", 3);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      java.sql.Date date1 = new java.sql.Date((byte)79);
      jDayChooser0.setSelectableDateRange(date0, date1);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 1117, 3, 3, 3, 3, 1117, 1117, 1117, false, 1117, 3, 3);
      jDayChooser0.getToolTipText((MouseEvent) mouseWheelEvent0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)35;
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      Color color0 = Color.getColor("day", 3);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.770581544706131
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 1117, 3, 3, 3, 3, 1117, 1117, 1117, false, 1117, 3, 3);
      jDayChooser0.getToolTipText((MouseEvent) mouseWheelEvent0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      Color color0 = Color.getColor("day", 3);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 100, (byte)11, 86, 10, ':');
      jDayChooser0.keyPressed(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      System.setCurrentTimeMillis((-2598L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      byte[] byteArray0 = new byte[2];
      jDayChooser0.repaint();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 1117, (double) 1117);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      jDayChooser0.setMonth(37);
      jDayChooser0.setDay((-940));
      KeyDeclaration keyDeclaration0 = new KeyDeclaration((Stylesheet) null, (-719));
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      ElemCopyOf elemCopyOf0 = new ElemCopyOf();
      XPath xPath0 = elemCopyOf0.m_selectExpression;
      keyDeclaration0.setMatch((XPath) null);
      assertNull(keyDeclaration0.getBaseIdentifier());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      Timestamp timestamp0 = new Timestamp(185L);
      jDayChooser0.setMinSelectableDate(timestamp0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getWidth();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setWeekOfYearVisible(true);
      SystemColor systemColor0 = SystemColor.windowText;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 185L;
      floatArray0[2] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      systemColor0.getColorComponents(floatArray0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setRequestFocusEnabled(false);
      jDayChooser1.setWeekOfYearVisible(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, (-1), false, jDayChooser1);
      JButton jButton0 = new JButton();
      JDayChooser jDayChooser2 = (JDayChooser)focusEvent0.getOppositeComponent();
      jDayChooser2.updateUI();
      jDayChooser1.setDayBordersVisible(false);
      assertFalse(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DOMImplementation dOMImplementation0 = GenericDOMImplementation.getDOMImplementation();
      XmlDocument xmlDocument0 = new XmlDocument();
      xmlDocument0.getDoctype();
      GenericDocument genericDocument0 = new GenericDocument((DocumentType) null, dOMImplementation0);
      GenericDocument genericDocument1 = new GenericDocument((DocumentType) null, dOMImplementation0);
      genericDocument1.getLocale();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverSelectedIcon();
      JCheckBox jCheckBox0 = new JCheckBox((Icon) null);
      KeyEvent keyEvent0 = new KeyEvent(jCheckBox0, (-3754), 5L, 'd', 35, 'd');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      System.setCurrentTimeMillis((-3754));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = new Boolean(false);
      jDayChooser0.setMaxDayCharacters((-9));
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.770581544706131
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 1117, 3, 3, 3, 3, 1117, 1117, 1117, false, 1117, 3, 3);
      jDayChooser0.getToolTipText((MouseEvent) mouseWheelEvent0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)35;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)79;
      byteArray0[6] = (byte)124;
      byteArray0[7] = (byte) (-108);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      Color color0 = Color.getColor("day", 3);
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-511), (byte)15, (byte)15, 36, '#');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7876705827345014
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HJH%");
      System.setCurrentTimeMillis((-2605L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%50gYR|A5YXIE{\"");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte) (-23);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.repaint();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 34, 2172.982);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      Color color0 = graphicContext0.getColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1117, (-3721L), 13, 34, '4');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton[] jButtonArray0 = new JButton[3];
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverIcon();
      JButton jButton0 = new JButton("stroke-linecap", (Icon) null);
      jButtonArray0[0] = jButton0;
      JButton jButton1 = jDayChooser0.selectedDay;
      jButtonArray0[1] = null;
      JButton jButton2 = new JButton("stroke-linecap", (Icon) null);
      jButtonArray0[2] = jButton2;
      jDayChooser0.weeks = jButtonArray0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0L, 41, 39, 'p');
      jDayChooser0.keyPressed(keyEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HJH%");
      System.setCurrentTimeMillis((-2605L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%50gYR|A5YXIE{\"");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)40;
      jDayChooser0.repaint();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 34, 2172.982);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 909, 1L, (byte)40, 37, 'y');
      jDayChooser0.keyPressed(keyEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      System.setCurrentTimeMillis((byte)40);
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton[] jButtonArray0 = new JButton[2];
      JButton jButton0 = jDayChooser0.selectedDay;
      jButtonArray0[1] = null;
      jDayChooser0.weeks = jButtonArray0;
      jDayChooser0.setEnabled(true);
      System.setCurrentTimeMillis(2192L);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      System.setCurrentTimeMillis((-2605L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%50gYR|A5YXIE{\"");
      jDayChooser0.getInheritsPopupMenu();
      System.setCurrentTimeMillis(34);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.maxDayCharacters = 2856;
      Locale locale0 = Locale.ITALIAN;
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayName(locale1);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawDays();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, 86400000L, 2762, 38, 'G');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HJH%");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.repaint();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 2205L, 1215, 33, 'h');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis(2075L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-786), (-786), 3948, 160, 'n');
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Color color0 = Color.gray;
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser_DecoratorButton0, 85, 160, 85, 1143, 'n');
      jDayChooser0.keyPressed(keyEvent1);
      JYearChooser jYearChooser0 = new JYearChooser();
      System.setCurrentTimeMillis(62135596800000L);
      JDayChooser jDayChooser1 = new JDayChooser();
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser1.oldDayBackgroundColor;
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setLocale(locale0);
      jDayChooser1.setLocale(locale0);
      BasicTOCNavigatorUI basicTOCNavigatorUI0 = null;
      try {
        basicTOCNavigatorUI0 = new BasicTOCNavigatorUI((JHelpTOCNavigator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.help.plaf.basic.BasicTOCNavigatorUI", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6765847972438808
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("16", 38);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser2.oldDayBackgroundColor;
      jDayChooser2.getInheritsPopupMenu();
      System.setCurrentTimeMillis(9223372036854775807L);
      jDayChooser0.setMaxDayCharacters(21);
      Locale locale0 = Locale.CHINESE;
      jDayChooser1.setLocale(locale0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis(2083L);
      Color color0 = Color.lightGray;
      LineBorder lineBorder0 = new LineBorder(color0, 1948);
      JYearChooser jYearChooser0 = new JYearChooser();
      System.setCurrentTimeMillis(9223372036854775788L);
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("16", 38);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Locale locale0 = Locale.UK;
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, containerListener0);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.setDay((-2056));
      jDayChooser1.drawDays();
      JDayChooser jDayChooser2 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser2.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.updateUI();
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis(2075L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-785), (-785), (-785), 160, 'n');
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Color color0 = Color.gray;
      jDayChooser0.keyPressed(keyEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser jDayChooser2 = new JDayChooser();
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser2.oldDayBackgroundColor;
      Locale locale0 = Locale.UK;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser1.setDecorationBackgroundColor(colorUIResource0);
      jDayChooser1.setDay((-2056));
      jDayChooser1.keyPressed(keyEvent0);
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.updateUI();
      jDayChooser3.keyPressed(keyEvent0);
      JYearChooser jYearChooser1 = new JYearChooser();
      JDayChooser jDayChooser4 = jYearChooser0.dayChooser;
  }
}
