/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:34:19 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1001831346990771
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"^\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 28, (-395));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, (-1189));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1189. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      StringReader stringReader0 = new StringReader("while");
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, 23, 23);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo((-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.995297673864066
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("04B2%AR0'");
      StringReader stringReader1 = new StringReader("zj0'DVQjj\"h");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-600), (-600));
      javaCharStream0.inputStream = (Reader) stringReader0;
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 5637, (-3345));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-598), javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.bufpos);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9106860237635703
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'W _/Wq\"?$^d{V)");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 51);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 53.  Encountered: \" \" (32), after : \"\\'W\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0124542438643769
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"^\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 28, (-395));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.GetImage();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-393), javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.003134345610714
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1298), 76);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjimageLen = 23;
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(77, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3171794888140134
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("for");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.curLexState = 2162;
      javaParserTokenManager0.getNextToken();
      try { 
        stringReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7012129104302849
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 76, 87);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.GetImage();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8779941968653668
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"false\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 31, 31);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.readChar();
      Token token0 = javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.specialToken;
      token0.specialToken = null;
      Token token2 = new Token();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals("false", token0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0061742195272536
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("--");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2961, 25);
      javaCharStream0.ReInit((Reader) stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(100, token0.kind);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7691152632348248
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("break");
      stringReader1.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 45, 45);
      stringReader1.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjnewStateCnt = 45;
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("", token1.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2195745472732102
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<<");
      stringReader0.mark(32);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 406, 406);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(407, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3171794888140134
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iE/");
      StringReader stringReader1 = new StringReader("<<=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken(36);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endColumn = 36;
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.551618916818454
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("long");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(4, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token1.kind);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7129309526044174
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("class");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(49, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9121909459199803
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1170, (byte) (-61));
      byteArrayInputStream0.close();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1170, column -60.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0844935189227891
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 59);
      byteArrayInputStream0.close();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 62.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.083013736913877
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A/*p");
      StringReader stringReader1 = new StringReader("byte");
      StringReader stringReader2 = new StringReader("~6+{gQER0p5*=*.[7YP");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\u0014\" (20), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0491480528290853
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'W _/Wq\"?$^d{V)");
      stringReader0.markSupported();
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 51);
      javaCharStream0.bufpos = 76;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.bufpos);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5827841550674437
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d<|%EI.QaL,}E");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader0.read();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 3);
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 13.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.468237924339109
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("mo'6{d7_:lu5{Y$),");
      StringReader stringReader1 = new StringReader("mo'6{d7_:lu5{Y$),");
      StringReader stringReader2 = new StringReader(">/f~6YuA*Es,");
      stringReader2.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer(72);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaCharStream0.BeginToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(124, token0.kind);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4777287678056665
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("|^FB47?(<Tf-<l$&9PYY");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 45, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjnewStateCnt = 45;
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals("^", token0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4363043615968092
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("mo'6{d7_:lu5{Y$),");
      StringReader stringReader1 = new StringReader("mo'6{d7_:lu5{Y$),");
      StringReader stringReader2 = new StringReader(">/f~6YuA*Es,");
      stringReader2.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer(72);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("/", token0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0455038617865988
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AsGir>NpMgYAN{H%$j2");
      StringReader stringReader1 = new StringReader("\"@\"");
      stringReader1.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 0, 51);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.inputStream = (Reader) stringReader0;
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals("AsGir", token0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0162477515808332
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mo'6{d7_:lu5{Y$),");
      StringReader stringReader1 = new StringReader("mo'6{d7_:lu5{Y$),");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-4901), 405);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -4901, column 409.  Encountered: \"{\" (123), after : \"\\'6\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.530965739941584
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%=?]-x{@/0jen&HlE");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2287, 2287);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2287, 2287);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      stringReader0.reset();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2288, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.449113452859013
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q1<KNA!/rR");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-3701));
      javaCharStream0.available = (-3701);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedPos = 103;
      javaParserTokenManager0.getNextToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      PrintStream printStream0 = mockPrintStream0.append('8');
      javaParserTokenManager0.debugStream = printStream0;
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals((-3698), javaCharStream0.getBeginColumn());
      assertEquals((-3696), javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4754526249481243
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b.G]1#k>'PYlyY");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 13, 96, 672);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1453, 1453);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer(34);
      javaParserTokenManager0.image = stringBuffer0;
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.image = "b.G]1#k>'PYlyY";
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(74, token1.kind);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.062969914751173
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%=?]-x{@/0jen&HlE");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2287, 2287);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endColumn = 1958;
      token0.beginLine = 51;
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2288, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)122;
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte)84;
      StringReader stringReader0 = new StringReader("^=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)20, (byte)105);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader0.markSupported();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y4n'T");
      StringReader stringReader1 = new StringReader("Y4n'T");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 4, 4);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(6, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"super\"");
      StringReader stringReader1 = new StringReader("\"false*");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.newToken(25);
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 8.  Encountered: <EOF> after : \"\\\"false*\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("||");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 76, 76);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      MockFile mockFile0 = new MockFile("final");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.512773677469688
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GF^uTWrJ9CR8}");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 96, 96);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.defaultLexState = 96;
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = new Token();
      Token token2 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token2);
      javaParserTokenManager0.TokenLexicalActions(token2);
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.bufpos);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7576263953940359
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 76, 87);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.GetImage();
      javaCharStream0.ReadByte();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4571409716660293
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".6C>");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1234), 76);
      javaCharStream0.FillBuff();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(77, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.3177937305360579
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("...");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-669), (-669));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = new Token();
      Token token1 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager1.TokenLexicalActions(token1);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-667), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5238327415004886
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".9-@:Qs");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 19, 65);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = new Token();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token2 = token_GTToken0.specialToken;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(66, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" )kz-(");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 16, 2419);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(")", token0.toString());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.47312395033021
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AsGir>NpMgYAN{H%$j2");
      StringReader stringReader1 = new StringReader("\"@\"");
      stringReader1.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaCharStream0.inputStream = (Reader) stringReader0;
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(12, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+7]b7YrT");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 96, 96);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(96, javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7P.");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 23, 23);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(66, token0.kind);
      assertEquals("7", token0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3718238514763048
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (-1619), 2);
      StringReader stringReader0 = new StringReader("SHCdG,)_+7>(*EdH");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1, 2);
      javaParserTokenManager0.MoreLexicalActions();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 17.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[P:$/1kLm2,y`8~");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 26, 96);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals("P", token0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8og6:V");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 76, 26);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8og6:V");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(30, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y&8ca?2O[]Kd4%8[sG?");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1400, 1400);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(105, token0.kind);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4777749303895031
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t>8VX5u");
      StringReader stringReader1 = new StringReader("t>8VX5u");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 20, 20);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaCharStream0.column = 20;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(20, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3177937305360579
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("try");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1400, 1400);
      stringReader0.ready();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6616859190732756
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, (-1298));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1296), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(]`[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 614, (-1424));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("(", token0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d<|%EI.QaL,}E");
      StringReader stringReader1 = new StringReader("$QS,>7jG/w11yH");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getLine());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<<");
      StringReader stringReader1 = new StringReader(":<4d");
      StringReader stringReader2 = new StringReader(":<4d");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 76, 76);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      stringReader1.read();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      stringReader1.reset();
      char[] charArray0 = new char[3];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      stringReader2.read(charArray0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(74, token0.kind);
      assertEquals("d", token0.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4810027589652939
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^q0T,E=iYkh\"j^7l +");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-812), 76);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.jjmatchedKind = 107;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(80, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5328381707542438
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w.(Bp@n)4CE@hjy)2H");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 96, 953);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(954, javaCharStream0.getBeginColumn());
      assertEquals("w", token0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.2092302515036217
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      StringReader stringReader1 = new StringReader("synchronized");
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = 'P';
      charArray0[2] = '7';
      charArray0[3] = '|';
      charArray0[4] = 'J';
      charArray0[5] = '#';
      charArray0[6] = ')';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader1.read(charBuffer0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-669), 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = (-1);
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(49, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" CsO>&O=");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-3701));
      javaCharStream0.available = (-3701);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager3.getNextToken();
      javaParserTokenManager1.TokenLexicalActions(token0);
      javaParserTokenManager2.TokenLexicalActions(token0);
      assertEquals((-3700), javaCharStream0.getBeginColumn());
      assertEquals((-3698), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<SINGLE_LINE_COMMENT>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 96, 96, 56);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjnewStateCnt = 12;
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'h';
      charArray0[2] = ',';
      charArray0[3] = ';';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      javaCharStream0.ReInit((Reader) stringReader0, 81, 6028, 151);
      charArray0[4] = 'O';
      stringReader0.reset();
      charArray0[5] = 'K';
      charArray0[6] = '\\';
      charArray0[7] = 'O';
      stringReader0.read(charArray0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals("LINE_COMMENT", token0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4482611572757433
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/Vi;,E=?^`2L)2>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 72, 76);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = Token.newToken(72);
      token0.beginColumn = 0;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(79, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B`IZriy&f)D3p");
      StringReader stringReader1 = new StringReader("};/RPB^G`ZXx");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 29, 82);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(";", token0.toString());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i@R$`^WAX\"s+Rg5_t/");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1406, (-1234));
      javaCharStream0.FillBuff();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0855200394368334
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2Eci1h+4N(^%P");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 58, 90, 98);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(101, token0.kind);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4777749303895031
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c&\"i\"&`(tWx|h\"t?");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 23, 23);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals("&", token1.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y4n'T");
      StringReader stringReader1 = new StringReader("y6+#ApH+");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 4, 4);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(5, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("instanceof");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 614, (-1424));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals((-1415), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.156796498061095
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      StringReader stringReader1 = new StringReader("synchronized");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-669), 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = (-1);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(58, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8572786095668727
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("transient");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 51, (-1200));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.beginLine = (-170);
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals((-1200), javaCharStream0.getBeginColumn());
      assertEquals(60, token0.kind);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.007328105099405
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("volatile");
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("volatile");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 52, 52);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      try { 
        stringReader2.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.067137915098712
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("instaveof");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1424), (-1424));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      MockFile mockFile0 = new MockFile("8Y|7rOg x");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.CHINESE;
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "8Y|7rOg x", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      javaParserTokenManager0.setDebugStream(printStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token1 = token_GTToken0.next;
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals((-1416), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7127030314396225
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("break");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 45, 45);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjnewStateCnt = 45;
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8348016014957191
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("final");
      stringReader0.mark(32);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 406, 406);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 8, 8, 1731);
      javaParserTokenManager0.input_stream = javaCharStream1;
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.8453123575867036
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-61);
      StringReader stringReader0 = new StringReader("return");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)43, (byte)43);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(48, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("continue");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-61), (byte)43);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.9448888408192901
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      StringReader stringReader1 = new StringReader("finally");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2287, 2147483643);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2147483647), javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":<d");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4901), 17);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(88, token0.kind);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5227988731413602
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A/*p");
      StringReader stringReader1 = new StringReader("byte");
      StringReader stringReader2 = new StringReader("~6+{gQER0p5*=*.[7YP");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (-314), (-314));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 1837, (-1));
      javaCharStream1.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(2, javaCharStream1.getEndColumn());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4303184257996975
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A/*p");
      StringReader stringReader1 = new StringReader("byte");
      StringReader stringReader2 = new StringReader("~6+{gQER0p5*=*.[7YP");
      stringReader2.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-314), 51);
      javaCharStream0.readChar();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -314, column 55.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.503230903596513
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~/mA");
      stringReader0.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 51, (-1200));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(51, javaCharStream0.getLine());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("zw7~MoP)/8R1l+lKW[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 54, 1651);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1653, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.3605030871085633
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Zh:N~vBi;B8");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 12.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r=sr}R*f^X'Q-$-1v)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 6, (-2242));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2242), token0.endColumn);
      assertEquals(6, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(6, token0.beginLine);
      assertEquals((-2242), token0.beginColumn);
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals((-2242), javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals((-2242), javaCharStream0.getBeginColumn());
      assertEquals((-2242), javaCharStream0.getEndColumn());
      assertEquals("r", token0.toString());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.4965126808523719
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<<");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(":<4d");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader(":<4d");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 76, 76);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(92, token0.kind);
      assertEquals(76, token0.beginLine);
      assertEquals(76, token0.beginColumn);
      assertEquals(76, token0.endColumn);
      assertEquals(76, token0.endLine);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(":", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      
      javaParserTokenManager2.curChar = '&';
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token1.kind);
      assertEquals(77, token1.beginColumn);
      assertEquals(76, token1.endLine);
      assertEquals(77, token1.endColumn);
      assertEquals(76, token1.beginLine);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(79, token2.endColumn);
      assertEquals(70, token2.kind);
      assertEquals(76, token2.beginLine);
      assertEquals(76, token2.endLine);
      assertEquals(78, token2.beginColumn);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals("4d", token2.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("GF^uTWrJ9CR8}");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 50, 34);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals('G', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, token0.beginLine);
      assertEquals(35, token0.beginColumn);
      assertEquals(35, token0.endColumn);
      assertEquals(50, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
      assertEquals("F", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(50, javaCharStream0.getLine());
      assertEquals(35, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getBeginLine());
      assertEquals(35, javaCharStream0.getEndColumn());
      assertEquals(35, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.483331824316525
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<HEX_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 18, 454);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.bufpos = 18;
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.kind);
      assertEquals(454, token0.beginColumn);
      assertEquals(454, token0.endColumn);
      assertEquals(18, token0.endLine);
      assertEquals(18, token0.beginLine);
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(454, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(454, javaCharStream0.getEndColumn());
      assertEquals(454, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.kind);
      assertEquals(454, token0.beginColumn);
      assertEquals(454, token0.endColumn);
      assertEquals(18, token0.endLine);
      assertEquals(18, token0.beginLine);
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(454, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(454, javaCharStream0.getEndColumn());
      assertEquals(454, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.kind);
      assertEquals(454, token0.beginColumn);
      assertEquals(454, token0.endColumn);
      assertEquals(18, token0.endLine);
      assertEquals(18, token0.beginLine);
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(454, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(454, javaCharStream0.getEndColumn());
      assertEquals(454, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(11, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(455, token1.beginColumn);
      assertEquals(465, token1.endColumn);
      assertEquals(18, token1.endLine);
      assertEquals(18, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(18, javaCharStream0.getLine());
      assertEquals(465, javaCharStream0.getEndColumn());
      assertEquals(465, javaCharStream0.getColumn());
      assertEquals(18, javaCharStream0.getEndLine());
      assertEquals(455, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getBeginLine());
      assertEquals("HEX_LITERAL", token1.toString());
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<HEX_LITERAL>");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74, (byte)74}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74, (byte)74}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(4, byteArrayInputStream1.available());
      assertEquals(4, byteArray0.length);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1, (-700), 43);
      assertNotNull(javaCharStream1);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74, (byte)74}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(4, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74, (byte)74}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(4, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(4, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)74, (byte)74, (byte)74, (byte)74}, byteArray0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-700), token0.beginLine);
      assertEquals((-700), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(43, token0.beginColumn);
      assertEquals(46, token0.endColumn);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, byteArrayInputStream1.available());
      assertEquals(46, javaCharStream1.getColumn());
      assertEquals(46, javaCharStream1.getEndColumn());
      assertEquals((-700), javaCharStream1.getBeginLine());
      assertEquals((-700), javaCharStream1.getLine());
      assertEquals((-700), javaCharStream1.getEndLine());
      assertEquals(43, javaCharStream1.getBeginColumn());
      assertEquals("JJJJ", token0.toString());
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(4, byteArray0.length);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&Q|,:Uxip7/-<]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = Token.newToken(120);
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(105, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("&", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("Q", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.4564062561525917
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AsGir>NpMgYAN{H%$j2");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("eACP=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 96, 26);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 96, 43);
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream1);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(1, byteArray0.length);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream1, 95, (-1123));
      assertNotNull(javaCharStream2);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(1, byteArrayInputStream1.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(1, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, token0.beginLine);
      assertEquals(29, token0.endColumn);
      assertEquals(26, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(96, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals("eACP", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, token0.beginLine);
      assertEquals(29, token0.endColumn);
      assertEquals(26, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(96, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals("eACP", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(87, token1.kind);
      assertEquals(96, token1.endLine);
      assertEquals(96, token1.beginLine);
      assertEquals(30, token1.endColumn);
      assertEquals(30, token1.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals("=", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(30, javaCharStream0.getColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aCdN)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1400, 1400);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1400, token0.beginLine);
      assertEquals(1400, token0.endLine);
      assertEquals(1401, token0.endColumn);
      assertEquals(1400, token0.beginColumn);
      assertEquals(1400, javaCharStream0.getEndLine());
      assertEquals(1401, javaCharStream0.getColumn());
      assertEquals(1401, javaCharStream0.getEndColumn());
      assertEquals(1400, javaCharStream0.getLine());
      assertEquals(1400, javaCharStream0.getBeginColumn());
      assertEquals(1400, javaCharStream0.getBeginLine());
      assertEquals("aC", token0.toString());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.488647148816688
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".6C>");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1234), 76);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getColumn());
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getEndColumn());
      assertEquals('.', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getColumn());
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getEndColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getColumn());
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getEndColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(77, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1234), token0.endLine);
      assertEquals(78, token0.endColumn);
      assertEquals((-1234), token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals("6C", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(77, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1234), token0.endLine);
      assertEquals(78, token0.endColumn);
      assertEquals((-1234), token0.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals("6C", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(77, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1234), token0.endLine);
      assertEquals(78, token0.endColumn);
      assertEquals((-1234), token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals("6C", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1605458404079743
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q1<KNA!/rR");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)117;
      byteArray0[1] = (byte) (-117);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)24;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-117), (byte)25, (byte)24, (byte) (-41), (byte)42, (byte)119}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-117), (byte)25, (byte)24, (byte) (-41), (byte)42, (byte)119}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(7, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(bufferedInputStream0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-117), (byte)25, (byte)24, (byte) (-41), (byte)42, (byte)119}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-117), (byte)25, (byte)24, (byte) (-41), (byte)42, (byte)119}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(7, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)117, (byte) (-117), (byte)25, (byte)24, (byte) (-41), (byte)42, (byte)119}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("u", token0.toString());
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<OCTAL_LITERAL>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      assertNotSame(stringReader0, stringReader1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.48758929191037
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5+sN/#~e3J@O?");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 51, 0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1956, 0);
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(51, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(51, token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getLine());
      assertEquals("5", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(51, token1.endLine);
      assertEquals(101, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(51, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("+", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(2, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(51, token2.endLine);
      assertEquals(3, token2.endColumn);
      assertEquals(51, token2.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("sN", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3sL(");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 76, 76);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      javaCharStream0.prevCharIsLF = false;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(76, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(76, token0.beginLine);
      assertEquals(78, token0.endColumn);
      assertEquals(76, token0.beginColumn);
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals("3sL", token0.toString());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1433, 1433);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1433, token0.endLine);
      assertEquals(1433, token0.beginLine);
      assertEquals(1433, token0.beginColumn);
      assertEquals(1434, token0.endColumn);
      assertEquals(110, token0.kind);
      assertEquals(1433, javaCharStream0.getBeginColumn());
      assertEquals(1433, javaCharStream0.getLine());
      assertEquals(1434, javaCharStream0.getEndColumn());
      assertEquals(1434, javaCharStream0.getColumn());
      assertEquals(1433, javaCharStream0.getBeginLine());
      assertEquals(1433, javaCharStream0.getEndLine());
      assertEquals("+=", token0.toString());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5455966894566449
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e[D:T!jB7qOdD-A");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("e[D:T!jB7qOdD-A");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      long long0 = stringReader1.skip((-879L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 0, 51);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = stringReader0.ready();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertTrue(boolean0);
      
      javaCharStream0.inputStream = (Reader) stringReader1;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(51, token0.endColumn);
      assertEquals(51, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("e", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(81, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(52, token1.endColumn);
      assertEquals(52, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertNotSame(stringReader1, stringReader0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(53, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(53, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("D", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token3.beginLine);
      assertEquals(92, token3.kind);
      assertEquals(54, token3.endColumn);
      assertEquals(54, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(":", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1639463470499736
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("@pX+XrY$74@\"-k9Bp ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("@", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      javaParserTokenManager1.jjround = 918;
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 19.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4943224157044812
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@pX+XrY$74@\"-k9Bp ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("@pX+XrY$74@\"-k9Bp ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("@", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("pX", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(101, token2.kind);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("+", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("pX", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.4619819199349096
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A/*p");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("byte");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("~6+{gQER0p5*=*.[7YP");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      boolean boolean0 = stringReader2.markSupported();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-314), 51);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertEquals('A', char0);
      
      char char1 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(char1 == char0);
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals((-314), javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertEquals('/', char1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals((-314), javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(52, token0.endColumn);
      assertEquals((-314), token0.beginLine);
      assertEquals(52, token0.beginColumn);
      assertEquals((-314), token0.endLine);
      assertEquals(103, token0.kind);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals((-314), javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      assertEquals("*", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals((-314), javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(53, token1.endColumn);
      assertEquals((-314), token1.beginLine);
      assertEquals(53, token1.beginColumn);
      assertEquals((-314), token1.endLine);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals((-314), javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      assertEquals("p", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(53, token1.endColumn);
      assertEquals((-314), token1.beginLine);
      assertEquals(53, token1.beginColumn);
      assertEquals((-314), token1.endLine);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals((-314), javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      assertEquals("p", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("this");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 825, 825, 825);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(825, token0.beginColumn);
      assertEquals(57, token0.kind);
      assertEquals(825, token0.beginLine);
      assertEquals(825, token0.endLine);
      assertEquals(828, token0.endColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(825, javaCharStream0.getBeginLine());
      assertEquals(828, javaCharStream0.getColumn());
      assertEquals(825, javaCharStream0.getEndLine());
      assertEquals(825, javaCharStream0.getBeginColumn());
      assertEquals(825, javaCharStream0.getLine());
      assertEquals(828, javaCharStream0.getEndColumn());
      assertEquals("this", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kyeaMa>Nz@]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      javaCharStream0.prevCharIsCR = false;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      charArray0[1] = 'c';
      stringReader0.reset();
      javaCharStream0.buffer = charArray0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringBuffer stringBuffer0 = new StringBuffer(2048);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      javaParserTokenManager0.image = stringBuffer0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", javaParserTokenManager0.image.toString());
      assertEquals(0, javaParserTokenManager0.image.length());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 36, 36);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(37, token0.endColumn);
      assertEquals(93, token0.kind);
      assertEquals(36, token0.endLine);
      assertEquals(36, token0.beginLine);
      assertEquals(36, token0.beginColumn);
      assertEquals(37, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals(37, javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals("==", token0.toString());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.1219216114312864
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-84), (byte)96, (byte)61, (byte)89, (byte) (-61), (byte)0, (byte)103}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)103, (byte)0);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-84), (byte)96, (byte)61, (byte)89, (byte) (-61), (byte)0, (byte)103}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-84), (byte)96, (byte)61, (byte)89, (byte) (-61), (byte)0, (byte)103}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-84), (byte)96, (byte)61, (byte)89, (byte) (-61), (byte)0, (byte)103}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(103, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(103, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("1", token0.toString());
      assertEquals(8, byteArray0.length);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertArrayEquals(new byte[] {(byte)49, (byte) (-84), (byte)96, (byte)61, (byte)89, (byte) (-61), (byte)0, (byte)103}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(103, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(103, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("1", token0.toString());
      assertEquals(8, byteArray0.length);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)49, (byte) (-84), (byte)96, (byte)61, (byte)89, (byte) (-61), (byte)0, (byte)103}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(103, javaCharStream0.getBeginLine());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(8, byteArray0.length);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.9131893659176967
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'Ehi$x");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"h\" (104), after : \"\\'E\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.1640708504432875
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte) (-114);
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)120;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-114), (byte) (-51), (byte)120}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1781), (-2347));
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-114), (byte) (-51), (byte)120}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-114), (byte) (-51), (byte)120}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-114), (byte) (-51), (byte)120}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, byteArray0.length);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-114), (byte) (-51), (byte)120}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2347), token0.beginColumn);
      assertEquals((-1781), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1781), token0.beginLine);
      assertEquals((-2347), token0.endColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1781), javaCharStream0.getEndLine());
      assertEquals((-1781), javaCharStream0.getLine());
      assertEquals((-2347), javaCharStream0.getEndColumn());
      assertEquals((-2347), javaCharStream0.getBeginColumn());
      assertEquals((-2347), javaCharStream0.getColumn());
      assertEquals((-1781), javaCharStream0.getBeginLine());
      assertEquals("\u034E", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(4, byteArray0.length);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte) (-51), (byte) (-114), (byte) (-51), (byte)120}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1781), javaCharStream0.getEndLine());
      assertEquals((-1781), javaCharStream0.getLine());
      assertEquals((-2347), javaCharStream0.getEndColumn());
      assertEquals((-2347), javaCharStream0.getBeginColumn());
      assertEquals((-2347), javaCharStream0.getColumn());
      assertEquals((-1781), javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(4, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1781, column -2346.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("O R6F#taM3xD{x>Dk");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 96, (-2926));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-2926), token0.beginColumn);
      assertEquals(96, token0.endLine);
      assertEquals((-2926), token0.endColumn);
      assertEquals(96, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-2926), javaCharStream0.getBeginColumn());
      assertEquals((-2926), javaCharStream0.getColumn());
      assertEquals((-2926), javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals("O", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = new Token();
      assertNotNull(token1);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      token1.image = "";
      assertEquals("", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-2922), token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals((-2924), token2.beginColumn);
      assertEquals(96, token2.beginLine);
      assertEquals(96, token2.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(96, javaCharStream0.getLine());
      assertEquals((-2924), javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals((-2922), javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals((-2922), javaCharStream0.getColumn());
      assertEquals("R6F", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-2926), token0.beginColumn);
      assertEquals(96, token0.endLine);
      assertEquals((-2926), token0.endColumn);
      assertEquals(96, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals(96, javaCharStream0.getLine());
      assertEquals((-2924), javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals((-2922), javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals((-2922), javaCharStream0.getColumn());
      assertEquals("O", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(96, javaCharStream0.getLine());
      assertEquals((-2924), javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals((-2922), javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals((-2922), javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(96, javaCharStream0.getLine());
      assertEquals((-2924), javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals((-2922), javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals((-2922), javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A/*p");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("byte");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("~6+{gQER0p5*=*.[7YP");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      StringReader stringReader3 = new StringReader("d");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      StringReader stringReader4 = new StringReader("xb`S2.7");
      assertNotNull(stringReader4);
      assertFalse(stringReader4.equals((Object)stringReader2));
      assertFalse(stringReader4.equals((Object)stringReader0));
      assertFalse(stringReader4.equals((Object)stringReader3));
      assertFalse(stringReader4.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader4, 3, 108);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader4.equals((Object)stringReader2));
      assertFalse(stringReader4.equals((Object)stringReader0));
      assertFalse(stringReader4.equals((Object)stringReader3));
      assertFalse(stringReader4.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader4.equals((Object)stringReader2));
      assertFalse(stringReader4.equals((Object)stringReader0));
      assertFalse(stringReader4.equals((Object)stringReader3));
      assertFalse(stringReader4.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3, token0.beginLine);
      assertEquals(109, token0.endColumn);
      assertEquals(108, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endLine);
      assertFalse(stringReader4.equals((Object)stringReader2));
      assertFalse(stringReader4.equals((Object)stringReader0));
      assertFalse(stringReader4.equals((Object)stringReader3));
      assertFalse(stringReader4.equals((Object)stringReader1));
      assertEquals(3, javaCharStream0.getBeginLine());
      assertEquals(108, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getEndLine());
      assertEquals("xb", token0.toString());
      assertNotSame(stringReader4, stringReader2);
      assertNotSame(stringReader4, stringReader0);
      assertNotSame(stringReader4, stringReader3);
      assertNotSame(stringReader4, stringReader1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3, column 110.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=WTjB-:3GX");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("=", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("WTjB", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token2.kind);
      assertEquals(6, token2.beginColumn);
      assertEquals(6, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("WTjB", token1.toString());
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8601056457895542
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("whie");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 76, 87);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      String string0 = javaCharStream0.GetImage();
      assertNotNull(string0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(76, token0.endLine);
      assertEquals(76, token0.beginLine);
      assertEquals(90, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(87, token0.beginColumn);
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals("whie", token0.toString());
      
      Token token1 = Token.newToken(1837);
      assertNotNull(token1);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = Token.newToken(79);
      assertNotNull(token2);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNull(token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      token0.specialToken = token1;
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals("whie", token0.toString());
      assertNull(token1.toString());
      assertNull(token0.specialToken.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(76, token0.endLine);
      assertEquals(76, token0.beginLine);
      assertEquals(90, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(87, token0.beginColumn);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals("whie", token0.toString());
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A/*p");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("byte");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("~6+{gQER0p5*=*.[7YP");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1424), 102);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token0.beginColumn);
      assertEquals((-1424), token0.beginLine);
      assertEquals(17, token0.kind);
      assertEquals(105, token0.endColumn);
      assertEquals((-1424), token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals((-1424), javaCharStream0.getBeginLine());
      assertEquals(105, javaCharStream0.getEndColumn());
      assertEquals(105, javaCharStream0.getColumn());
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals((-1424), javaCharStream0.getLine());
      assertEquals((-1424), javaCharStream0.getEndLine());
      assertEquals("byte", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rP5H%");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 6, (-2242));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(6, token0.endLine);
      assertEquals(6, token0.beginLine);
      assertEquals((-2239), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-2242), token0.beginColumn);
      assertEquals((-2239), javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getLine());
      assertEquals((-2239), javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginLine());
      assertEquals((-2242), javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndLine());
      assertEquals("rP5H", token0.toString());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.1703073013916416
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"interface\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      byte[] byteArray0 = new byte[1];
      javaCharStream1.ReInit((Reader) stringReader0, (-1), 822);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      byteArray0[0] = (byte)71;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(sequenceInputStream0, (byte)71, 1243);
      assertNotNull(javaCharStream2);
      assertArrayEquals(new byte[] {(byte)71}, byteArray0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(1, byteArray0.length);
      
      byte[] byteArray1 = new byte[21];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)71;
      byteArray1[1] = (byte)71;
      byteArray1[2] = (byte)71;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      assertNotNull(byteArrayInputStream1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(21, byteArrayInputStream1.available());
      assertEquals(21, byteArray1.length);
      
      boolean boolean0 = byteArrayInputStream1.markSupported();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(21, byteArrayInputStream1.available());
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertTrue(boolean0);
      assertEquals(21, byteArray1.length);
      
      byteArrayInputStream1.close();
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals(21, byteArrayInputStream1.available());
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArrayInputStream1, byteArrayInputStream0);
      assertEquals(21, byteArray1.length);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(41, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(9, token0.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("interface", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals(821, token1.beginColumn);
      assertEquals(821, token1.endColumn);
      assertEquals((-1), token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals((-1), token1.beginLine);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertEquals("", token1.toString());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals(821, javaCharStream1.getBeginColumn());
      assertEquals(821, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(821, javaCharStream1.getEndColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.2459949225301634
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("synchroned");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 108, (-669));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(108, token1.beginLine);
      assertEquals((-660), token1.endColumn);
      assertEquals((-669), token1.beginColumn);
      assertEquals(108, token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-669), javaCharStream0.getBeginColumn());
      assertEquals((-660), javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals((-660), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals("synchroned", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      token0.next = token1;
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-669), javaCharStream0.getBeginColumn());
      assertEquals((-660), javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals((-660), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertNull(token0.toString());
      assertEquals("synchroned", token1.toString());
      assertEquals("synchroned", token0.next.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-669), javaCharStream0.getBeginColumn());
      assertEquals((-660), javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals((-660), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertNull(token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token2.endLine);
      assertEquals(108, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals((-660), token2.endColumn);
      assertEquals((-660), token2.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-660), javaCharStream0.getEndColumn());
      assertEquals((-660), javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals((-660), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("jQRs!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 58, 89, 89);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(58, token0.beginLine);
      assertEquals(89, token0.beginColumn);
      assertEquals(92, token0.endColumn);
      assertEquals(58, token0.endLine);
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals("jQRs", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(58, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/Vi;,E=?^`2L)2>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 72, 76);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(76, token0.endColumn);
      assertEquals(76, token0.beginColumn);
      assertEquals(72, token0.endLine);
      assertEquals(72, token0.beginLine);
      assertEquals(104, token0.kind);
      assertEquals(76, javaCharStream0.getBeginColumn());
      assertEquals(72, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getBeginLine());
      assertEquals(76, javaCharStream0.getEndColumn());
      assertEquals("/", token0.toString());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(72, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getBeginLine());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals('V', char0);
      
      Token token1 = Token.newToken(72);
      assertNotNull(token1);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      
      token1.endLine = 688;
      assertNull(token1.toString());
      
      token1.beginColumn = 1;
      assertNull(token1.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(688, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(72, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getBeginLine());
      assertEquals(77, javaCharStream0.getBeginColumn());
      assertEquals(77, javaCharStream0.getEndColumn());
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(78, token2.endColumn);
      assertEquals(78, token2.beginColumn);
      assertEquals(72, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(72, token2.beginLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(72, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getLine());
      assertEquals(78, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getBeginLine());
      assertEquals(78, javaCharStream0.getBeginColumn());
      assertEquals(78, javaCharStream0.getEndColumn());
      assertEquals("i", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("X`");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-669), (-669));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-669), token1.beginLine);
      assertEquals((-669), token1.beginColumn);
      assertEquals((-669), token1.endColumn);
      assertEquals((-669), token1.endLine);
      assertEquals(74, token1.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-669), javaCharStream0.getBeginLine());
      assertEquals((-669), javaCharStream0.getBeginColumn());
      assertEquals((-669), javaCharStream0.getColumn());
      assertEquals((-669), javaCharStream0.getEndColumn());
      assertEquals((-669), javaCharStream0.getEndLine());
      assertEquals((-669), javaCharStream0.getLine());
      assertEquals("X", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-669), token1.beginLine);
      assertEquals((-669), token1.beginColumn);
      assertEquals((-669), token1.endColumn);
      assertEquals((-669), token1.endLine);
      assertEquals(74, token1.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-669), javaCharStream0.getBeginLine());
      assertEquals((-669), javaCharStream0.getBeginColumn());
      assertEquals((-669), javaCharStream0.getColumn());
      assertEquals((-669), javaCharStream0.getEndColumn());
      assertEquals((-669), javaCharStream0.getEndLine());
      assertEquals((-669), javaCharStream0.getLine());
      assertEquals("X", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -669, column -667.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"^\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 28, (-395));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.curLexState = 28;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-395), token0.beginColumn);
      assertEquals((-395), token0.endColumn);
      assertEquals(28, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(28, token0.beginLine);
      assertEquals((-395), javaCharStream0.getBeginColumn());
      assertEquals((-395), javaCharStream0.getEndColumn());
      assertEquals(28, javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getBeginLine());
      assertEquals((-395), javaCharStream0.getColumn());
      assertEquals(28, javaCharStream0.getLine());
      assertEquals("", token0.toString());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("h");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 111, 111);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader1.reset();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(111, token0.beginColumn);
      assertEquals(111, token0.beginLine);
      assertEquals(111, token0.endLine);
      assertEquals(111, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(111, javaCharStream0.getLine());
      assertEquals(111, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getEndLine());
      assertEquals("h", token0.toString());
      assertNotSame(stringReader1, stringReader0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.479516827443026
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<SINGLE_LINE_COMMENT>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 96, 96, 56);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, token0.endColumn);
      assertEquals(96, token0.beginLine);
      assertEquals(96, token0.beginColumn);
      assertEquals(96, token0.endLine);
      assertEquals(88, token0.kind);
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'h';
      charArray0[2] = ',';
      charArray0[3] = ';';
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      charArray0[4] = 'O';
      stringReader0.reset();
      charArray0[5] = 'K';
      charArray0[6] = '\\';
      charArray0[7] = 'O';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'<', 'S', 'I', 'N', 'G', 'L', 'E', '_'}, charArray0);
      assertEquals(8, int0);
      assertEquals(8, charArray0.length);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(115, token1.endColumn);
      assertEquals(97, token1.beginColumn);
      assertEquals(96, token1.beginLine);
      assertEquals(96, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(19, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token1.equals((Object)token0));
      assertEquals("SINGLE_LINE_COMMENT", token1.toString());
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(19, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(19, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(115, javaCharStream0.getEndColumn());
      assertEquals(115, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(20, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, token2.endLine);
      assertEquals(96, token2.beginLine);
      assertEquals(124, token2.kind);
      assertEquals(116, token2.beginColumn);
      assertEquals(116, token2.endColumn);
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals(">", token2.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(20, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, token0.endColumn);
      assertEquals(96, token0.beginLine);
      assertEquals(96, token0.beginColumn);
      assertEquals(96, token0.endLine);
      assertEquals(88, token0.kind);
      assertFalse(token0.equals((Object)token1));
      assertEquals(96, javaCharStream0.getLine());
      assertEquals(116, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getBeginLine());
      assertEquals(116, javaCharStream0.getEndColumn());
      assertEquals(116, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndLine());
      assertEquals("<", token0.toString());
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.8435296957803133
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tra:sien,");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("tra:sien,");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1298), (-1298));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1297), token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals((-1297), token0.endLine);
      assertEquals(3, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1297), javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-1297), javaCharStream0.getEndLine());
      assertEquals((-1297), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("tra", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1297), javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-1297), javaCharStream0.getEndLine());
      assertEquals((-1297), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1297), token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals((-1297), token0.endLine);
      assertEquals(3, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1297), javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals((-1297), javaCharStream0.getEndLine());
      assertEquals((-1297), javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("tra", token0.toString());
      assertNotSame(stringReader0, stringReader1);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9DS3vD");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-344), (-344));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      MockFile mockFile0 = new MockFile("<SINGLE_LINE_COMMENT>", "9DS3vD");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Locale locale1 = new Locale("<SINGLE_LINE_COMMENT>");
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("<single_line_comment>", locale1.getLanguage());
      assertEquals("<single_line_comment>", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      
      PrintStream printStream0 = mockPrintStream0.printf(locale1, "I>~", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      assertNotNull(printStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/19_jmca/<SINGLE_LINE_COMMENT>/9DS3vD", mockFile0.toString());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/19_jmca/<SINGLE_LINE_COMMENT>", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("9DS3vD", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals("", locale1.getISO3Country());
      assertEquals("<single_line_comment>", locale1.getLanguage());
      assertEquals("<single_line_comment>", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertSame(mockPrintStream0, printStream0);
      assertNotSame(locale1, locale0);
      assertSame(printStream0, mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(3L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isDirectory());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/19_jmca/<SINGLE_LINE_COMMENT>/9DS3vD", mockFile0.toString());
      assertEquals("/home/ubuntu/evosuite_readability_gen/projects/19_jmca/<SINGLE_LINE_COMMENT>", mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals("9DS3vD", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertSame(mockPrintStream0, printStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 21);
      assertNotNull(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      javaCharStream1.buffer = charArray0;
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0428215475133278
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("|^FB47?(<Tf-<l$&9PYY");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 4561);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4561, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(4561, token0.beginColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(45, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(4561, javaCharStream0.getBeginColumn());
      assertEquals(4561, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(4561, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals("$", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      
      try { 
        stringReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&bjKJQ!W]&OJ:");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 2961);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2961, token0.beginColumn);
      assertEquals(105, token0.kind);
      assertEquals(71, token0.beginLine);
      assertEquals(2961, token0.endColumn);
      assertEquals(71, token0.endLine);
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(2961, javaCharStream0.getEndColumn());
      assertEquals(2961, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(2961, javaCharStream0.getColumn());
      assertEquals("&", token0.toString());
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(2966, token1.endColumn);
      assertEquals(71, token1.endLine);
      assertEquals(71, token1.beginLine);
      assertEquals(2962, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(2962, javaCharStream0.getBeginColumn());
      assertEquals(2966, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(2966, javaCharStream0.getEndColumn());
      assertEquals("bjKJQ", token1.toString());
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(2962, javaCharStream0.getBeginColumn());
      assertEquals(2966, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(2966, javaCharStream0.getEndColumn());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      Token token2 = token_GTToken0.next;
      assertNull(token2);
      
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(2962, javaCharStream0.getBeginColumn());
      assertEquals(2966, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(2966, javaCharStream0.getEndColumn());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(2961, token0.beginColumn);
      assertEquals(105, token0.kind);
      assertEquals(71, token0.beginLine);
      assertEquals(2961, token0.endColumn);
      assertEquals(71, token0.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(2962, javaCharStream0.getBeginColumn());
      assertEquals(2966, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(2966, javaCharStream0.getEndColumn());
      assertEquals("&", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c&\"i\"&`(tWx|h\"t?");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("c", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(105, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("&", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token2.endColumn);
      assertEquals(73, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("\"i\"", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = Token.newToken((-1437));
      assertNotNull(token3);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.kind);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNull(token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      token3.beginColumn = 46;
      assertNull(token3.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token3.beginLine);
      assertEquals(46, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.kind);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertNull(token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(6, token4.endColumn);
      assertEquals(6, token4.beginColumn);
      assertEquals(105, token4.kind);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("&", token4.toString());
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iE/");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("M=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("M", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = new Token();
      assertNotNull(token1);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      token1.endColumn = 42;
      assertNull(token1.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(42, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNull(token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#-evdU0hsEz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 45);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 45, column 45.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TQ5~'jai|XMaO<R");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 88, 88);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 88, (byte) (-61), 1509);
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      javaCharStream1.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(javaCharStream1, javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals((-61), token0.beginColumn);
      assertEquals(88, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(88, token0.beginLine);
      assertEquals((-59), token0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(88, javaCharStream1.getEndLine());
      assertEquals(88, javaCharStream1.getBeginLine());
      assertEquals(88, javaCharStream1.getLine());
      assertEquals((-59), javaCharStream1.getColumn());
      assertEquals((-59), javaCharStream1.getEndColumn());
      assertEquals((-61), javaCharStream1.getBeginColumn());
      assertEquals("TQ5", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals((-61), token0.beginColumn);
      assertEquals(88, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(88, token0.beginLine);
      assertEquals((-59), token0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(88, javaCharStream1.getEndLine());
      assertEquals(88, javaCharStream1.getBeginLine());
      assertEquals(88, javaCharStream1.getLine());
      assertEquals((-59), javaCharStream1.getColumn());
      assertEquals((-59), javaCharStream1.getEndColumn());
      assertEquals((-61), javaCharStream1.getBeginColumn());
      assertEquals("TQ5", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("snchronized");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-669), 47);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(47, token0.beginColumn);
      assertEquals(48, token0.endColumn);
      assertEquals((-669), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-669), token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals((-669), javaCharStream0.getEndLine());
      assertEquals((-669), javaCharStream0.getBeginLine());
      assertEquals((-669), javaCharStream0.getLine());
      assertEquals("sn", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(47, token0.beginColumn);
      assertEquals(48, token0.endColumn);
      assertEquals((-669), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-669), token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals((-669), javaCharStream0.getEndLine());
      assertEquals((-669), javaCharStream0.getBeginLine());
      assertEquals((-669), javaCharStream0.getLine());
      assertEquals("sn", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-669), token1.endLine);
      assertEquals(49, token1.beginColumn);
      assertEquals((-669), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(57, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals((-669), javaCharStream0.getEndLine());
      assertEquals((-669), javaCharStream0.getBeginLine());
      assertEquals((-669), javaCharStream0.getLine());
      assertEquals("chronized", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(57, javaCharStream0.getEndColumn());
      assertEquals(57, javaCharStream0.getColumn());
      assertEquals((-669), javaCharStream0.getEndLine());
      assertEquals((-669), javaCharStream0.getBeginLine());
      assertEquals((-669), javaCharStream0.getLine());
      assertNotSame(stringReader1, stringReader0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.4203670941063393
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-61);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 0, 59);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, byteArray0.length);
      
      byteArrayInputStream0.close();
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(3, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, byteArray0.length);
      
      StringReader stringReader0 = new StringReader("*_*!~H@9`o_^");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(3, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*", token0.toString());
      assertEquals(3, byteArray0.length);
      
      token0.image = "0T/Ulk|xl<5[}J3w1m";
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("0T/Ulk|xl<5[}J3w1m", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("0T/Ulk|xl<5[}J3w1m", token0.toString());
      assertEquals(3, byteArray0.length);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("0T/Ulk|xl<5[}J3w1m", token0.toString());
      assertEquals(3, byteArray0.length);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("_", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(3, byteArray0.length);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertArrayEquals(new byte[] {(byte)43, (byte)43, (byte) (-61)}, byteArray0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, byteArray0.length);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("<HEX_LITERAL>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("<HEX_LITERAL>");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      byte byte0 = (byte)103;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)103;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)103;
      byteArray0[3] = (byte)103;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)103, (byte)103}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)103, (byte)103);
      assertNotNull(javaCharStream0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)103, (byte)103}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)103, (byte)103}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(4, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertArrayEquals(new byte[] {(byte)103, (byte)103, (byte)103, (byte)103}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(103, token0.beginColumn);
      assertEquals(103, token0.beginLine);
      assertEquals(103, token0.endLine);
      assertEquals(106, token0.endColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(103, javaCharStream0.getLine());
      assertEquals(103, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals(103, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals(103, javaCharStream0.getBeginColumn());
      assertEquals("gggg", token0.toString());
      assertEquals(4, byteArray0.length);
      
      try { 
        javaCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("AsGir>NpMgYAN{H%$j2");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"@\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertTrue(boolean0);
      
      long long0 = stringReader1.skip((-859L));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0L, long0);
      
      StringReader stringReader2 = new StringReader("/=");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 122, 122);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean1 = stringReader1.ready();
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertTrue(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(113, token0.kind);
      assertEquals(123, token0.endColumn);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.beginColumn);
      assertEquals(122, token0.endLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals(123, javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals(123, javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals("/=", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      Token token1 = Token.newToken(122);
      assertNotNull(token1);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 122);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 122. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(95, token0.kind);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(">=", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      try { 
        stringReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.4954238094149472
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/1j^0,I@nEs");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 65, 19);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(19, token0.beginColumn);
      assertEquals(19, token0.endColumn);
      assertEquals(65, token0.endLine);
      assertEquals(104, token0.kind);
      assertEquals(65, token0.beginLine);
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getLine());
      assertEquals("/", token0.toString());
      
      Token token1 = new Token();
      assertNotNull(token1);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      
      Token token2 = token_GTToken0.specialToken;
      assertNull(token2);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(65, javaCharStream0.getEndLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(65, javaCharStream0.getBeginLine());
      assertEquals(65, javaCharStream0.getLine());
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2183));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2183. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\":GlL");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1424), (-1424));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      MockFile mockFile0 = new MockFile("8Y|7rOg x");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "8Y|7rOg x", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      assertNotNull(printStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("8Y|7rOg x", mockFile0.toString());
      assertEquals("8Y|7rOg x", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(9L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("8Y|7rOg x", mockFile0.toString());
      assertEquals("8Y|7rOg x", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertEquals(9L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1424, column -1419.  Encountered: <EOF> after : \"\\\":GlL\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("A/*p");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("s?RL7fhh&wrB9)P~qM");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1747, 1747);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1747, token0.beginLine);
      assertEquals(1747, token0.endLine);
      assertEquals(1747, token0.beginColumn);
      assertEquals(1747, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1747, javaCharStream0.getEndColumn());
      assertEquals(1747, javaCharStream0.getLine());
      assertEquals(1747, javaCharStream0.getBeginColumn());
      assertEquals(1747, javaCharStream0.getEndLine());
      assertEquals(1747, javaCharStream0.getBeginLine());
      assertEquals(1747, javaCharStream0.getColumn());
      assertEquals("s", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1748, token1.beginColumn);
      assertEquals(1747, token1.beginLine);
      assertEquals(91, token1.kind);
      assertEquals(1747, token1.endLine);
      assertEquals(1748, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1748, javaCharStream0.getBeginColumn());
      assertEquals(1748, javaCharStream0.getColumn());
      assertEquals(1747, javaCharStream0.getLine());
      assertEquals(1748, javaCharStream0.getEndColumn());
      assertEquals(1747, javaCharStream0.getEndLine());
      assertEquals(1747, javaCharStream0.getBeginLine());
      assertEquals("?", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1747, token0.beginLine);
      assertEquals(1747, token0.endLine);
      assertEquals(1747, token0.beginColumn);
      assertEquals(1747, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(1748, javaCharStream0.getBeginColumn());
      assertEquals(1748, javaCharStream0.getColumn());
      assertEquals(1747, javaCharStream0.getLine());
      assertEquals(1748, javaCharStream0.getEndColumn());
      assertEquals(1747, javaCharStream0.getEndLine());
      assertEquals(1747, javaCharStream0.getBeginLine());
      assertEquals("s", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Q1<KNA!/rR");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("r9|t3lS+j");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 45, (-2657));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2657), token0.beginColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(45, token0.endLine);
      assertEquals((-2656), token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals((-2656), javaCharStream0.getEndColumn());
      assertEquals((-2657), javaCharStream0.getBeginColumn());
      assertEquals((-2656), javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals("r9", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token1.endLine);
      assertEquals((-2655), token1.beginColumn);
      assertEquals(45, token1.beginLine);
      assertEquals((-2655), token1.endColumn);
      assertEquals(106, token1.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals((-2655), javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals((-2655), javaCharStream0.getBeginColumn());
      assertEquals((-2655), javaCharStream0.getColumn());
      assertEquals("|", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2657), token0.beginColumn);
      assertEquals(45, token0.beginLine);
      assertEquals(45, token0.endLine);
      assertEquals((-2656), token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals((-2655), javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals((-2655), javaCharStream0.getBeginColumn());
      assertEquals((-2655), javaCharStream0.getColumn());
      assertEquals("r9", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tcy");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1400, 1400);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1402, token0.endColumn);
      assertEquals(1400, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1400, token0.beginLine);
      assertEquals(1400, token0.endLine);
      assertEquals(1400, javaCharStream0.getLine());
      assertEquals(1400, javaCharStream0.getBeginLine());
      assertEquals(1402, javaCharStream0.getEndColumn());
      assertEquals(1400, javaCharStream0.getEndLine());
      assertEquals(1400, javaCharStream0.getBeginColumn());
      assertEquals(1402, javaCharStream0.getColumn());
      assertEquals("tcy", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1400, token1.endLine);
      assertEquals(1400, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1402, token1.endColumn);
      assertEquals(1402, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1400, javaCharStream0.getLine());
      assertEquals(1400, javaCharStream0.getBeginLine());
      assertEquals(1402, javaCharStream0.getEndColumn());
      assertEquals(1400, javaCharStream0.getEndLine());
      assertEquals(1402, javaCharStream0.getBeginColumn());
      assertEquals(1402, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("if");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-2124));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals((-2124), token0.beginColumn);
      assertEquals((-2123), token0.endColumn);
      assertEquals(36, token0.kind);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-2124), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-2123), javaCharStream0.getColumn());
      assertEquals((-2123), javaCharStream0.getEndColumn());
      assertEquals("if", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals((-2124), token0.beginColumn);
      assertEquals((-2123), token0.endColumn);
      assertEquals(36, token0.kind);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-2124), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-2123), javaCharStream0.getColumn());
      assertEquals((-2123), javaCharStream0.getEndColumn());
      assertEquals("if", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2123), token1.beginColumn);
      assertEquals((-2123), token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals((-2123), javaCharStream0.getBeginColumn());
      assertEquals((-2123), javaCharStream0.getColumn());
      assertEquals((-2123), javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fz0WIRsIm");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 20, 69);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, token0.endLine);
      assertEquals(20, token0.beginLine);
      assertEquals(77, token0.endColumn);
      assertEquals(69, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(77, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(77, javaCharStream0.getEndColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals("fz0WIRsIm", token0.toString());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("b-eG#2HD&Ci!\" n4b");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("b", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("b", token0.toString());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("null");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1224), (-1224));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1221), token0.endColumn);
      assertEquals(45, token0.kind);
      assertEquals((-1224), token0.endLine);
      assertEquals((-1224), token0.beginColumn);
      assertEquals((-1224), token0.beginLine);
      assertEquals((-1224), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getColumn());
      assertEquals((-1224), javaCharStream0.getEndLine());
      assertEquals((-1224), javaCharStream0.getBeginColumn());
      assertEquals((-1224), javaCharStream0.getBeginLine());
      assertEquals((-1221), javaCharStream0.getEndColumn());
      assertEquals("null", token0.toString());
      
      Token token1 = new Token();
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1224), token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals((-1221), token2.beginColumn);
      assertEquals((-1224), token2.endLine);
      assertEquals((-1221), token2.endColumn);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-1224), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getColumn());
      assertEquals((-1224), javaCharStream0.getEndLine());
      assertEquals((-1221), javaCharStream0.getBeginColumn());
      assertEquals((-1224), javaCharStream0.getBeginLine());
      assertEquals((-1221), javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1224), token3.beginLine);
      assertEquals((-1221), token3.beginColumn);
      assertEquals((-1224), token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals((-1221), token3.endColumn);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals((-1224), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getColumn());
      assertEquals((-1224), javaCharStream0.getEndLine());
      assertEquals((-1221), javaCharStream0.getBeginColumn());
      assertEquals((-1224), javaCharStream0.getBeginLine());
      assertEquals((-1221), javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1224), token3.beginLine);
      assertEquals((-1221), token3.beginColumn);
      assertEquals((-1224), token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals((-1221), token3.endColumn);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals((-1224), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getColumn());
      assertEquals((-1224), javaCharStream0.getEndLine());
      assertEquals((-1221), javaCharStream0.getBeginColumn());
      assertEquals((-1224), javaCharStream0.getBeginLine());
      assertEquals((-1221), javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1224), token3.beginLine);
      assertEquals((-1221), token3.beginColumn);
      assertEquals((-1224), token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals((-1221), token3.endColumn);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals((-1224), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getColumn());
      assertEquals((-1224), javaCharStream0.getEndLine());
      assertEquals((-1221), javaCharStream0.getBeginColumn());
      assertEquals((-1224), javaCharStream0.getBeginLine());
      assertEquals((-1221), javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1224), token3.beginLine);
      assertEquals((-1221), token3.beginColumn);
      assertEquals((-1224), token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals((-1221), token3.endColumn);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals((-1224), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getColumn());
      assertEquals((-1224), javaCharStream0.getEndLine());
      assertEquals((-1221), javaCharStream0.getBeginColumn());
      assertEquals((-1224), javaCharStream0.getBeginLine());
      assertEquals((-1221), javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1221), token0.endColumn);
      assertEquals(45, token0.kind);
      assertEquals((-1224), token0.endLine);
      assertEquals((-1224), token0.beginColumn);
      assertEquals((-1224), token0.beginLine);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token3));
      assertEquals((-1224), javaCharStream0.getLine());
      assertEquals((-1221), javaCharStream0.getColumn());
      assertEquals((-1224), javaCharStream0.getEndLine());
      assertEquals((-1221), javaCharStream0.getBeginColumn());
      assertEquals((-1224), javaCharStream0.getBeginLine());
      assertEquals((-1221), javaCharStream0.getEndColumn());
      assertEquals("null", token0.toString());
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertNotSame(token0, token3);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@pX+XrY$74@\"-k9Bp ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("@pX+XrY$74@\"-k9Bp ");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(86, token0.kind);
      assertEquals(1, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("@", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      javaParserTokenManager1.jjround = 918;
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("pX", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token2.endColumn);
      assertEquals(101, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(4, token2.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("+", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("pX", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token3.kind);
      assertEquals(10, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("XrY$74", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(11, token4.beginColumn);
      assertEquals(11, token4.endColumn);
      assertEquals(86, token4.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals("@", token4.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 19.  Encountered: <EOF> after : \"\\\"-k9Bp \"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.162677803056238
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("synchrIaRoed");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 108, (-669));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = new Token();
      assertNotNull(token0);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(108, token1.endLine);
      assertEquals(108, token1.beginLine);
      assertEquals((-658), token1.endColumn);
      assertEquals((-669), token1.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-658), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals((-669), javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-658), javaCharStream0.getEndColumn());
      assertEquals("synchrIaRoed", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token2.endLine);
      assertEquals(108, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals((-658), token2.beginColumn);
      assertEquals((-658), token2.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-658), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals((-658), javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-658), javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.jjimageLen = (-1675);
      assertEquals((-658), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals((-658), javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-658), javaCharStream0.getEndColumn());
      
      token0.next = token2;
      assertEquals((-658), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals((-658), javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-658), javaCharStream0.getEndColumn());
      assertNull(token0.toString());
      assertEquals("", token2.toString());
      assertEquals("", token0.next.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals((-658), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals((-658), javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-658), javaCharStream0.getEndColumn());
      assertNull(token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token3.beginLine);
      assertEquals(108, token3.endLine);
      assertEquals((-658), token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals((-658), token3.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals((-658), javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals((-658), javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals((-658), javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("W+WYAq");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("W", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(101, token1.kind);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("+", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(6, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("WYAq", token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(101, token1.kind);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("+", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(6, token3.beginColumn);
      assertEquals(6, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(0, token4.kind);
      assertEquals(6, token4.beginColumn);
      assertEquals(6, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals("", token4.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      
      Token token5 = javaParserTokenManager1.getNextToken();
      assertNotNull(token5);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(6, token5.beginColumn);
      assertEquals(6, token5.endColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals("", token5.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":asps");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 45, 45);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(45, token0.beginLine);
      assertEquals(92, token0.kind);
      assertEquals(45, token0.endColumn);
      assertEquals(45, token0.beginColumn);
      assertEquals(45, token0.endLine);
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(":", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(46, token1.beginColumn);
      assertEquals(45, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(45, token1.endLine);
      assertEquals(49, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals("asps", token1.toString());
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(46, token1.beginColumn);
      assertEquals(45, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(45, token1.endLine);
      assertEquals(49, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals("asps", token1.toString());
      assertNotSame(token1, token0);
      
      char[] charArray0 = new char[0];
      javaCharStream0.buffer = charArray0;
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getEndColumn());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(45, token2.beginLine);
      assertEquals(45, token2.endLine);
      assertEquals(49, token2.endColumn);
      assertEquals(49, token2.beginColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(49, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Zh:N~vBi;B8");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("R&D#-W*NK");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1507, 45);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1507, token0.endLine);
      assertEquals(45, token0.endColumn);
      assertEquals(1507, token0.beginLine);
      assertEquals(45, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(1507, javaCharStream0.getBeginLine());
      assertEquals(1507, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals(1507, javaCharStream0.getEndLine());
      assertEquals("R", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1507, token1.endLine);
      assertEquals(105, token1.kind);
      assertEquals(46, token1.beginColumn);
      assertEquals(1507, token1.beginLine);
      assertEquals(46, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1507, javaCharStream0.getBeginLine());
      assertEquals(1507, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(1507, javaCharStream0.getEndLine());
      assertEquals("&", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1507, token1.endLine);
      assertEquals(105, token1.kind);
      assertEquals(46, token1.beginColumn);
      assertEquals(1507, token1.beginLine);
      assertEquals(46, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1507, javaCharStream0.getBeginLine());
      assertEquals(1507, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(1507, javaCharStream0.getEndLine());
      assertEquals("&", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2287, 2287);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1585), 82);
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-6020), 3);
      assertNotNull(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.kind);
      assertEquals((-1585), token0.endLine);
      assertEquals((-1585), token0.beginLine);
      assertEquals(82, token0.beginColumn);
      assertEquals(88, token0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(88, javaCharStream1.getEndColumn());
      assertEquals((-1585), javaCharStream1.getEndLine());
      assertEquals((-1585), javaCharStream1.getBeginLine());
      assertEquals((-1585), javaCharStream1.getLine());
      assertEquals(82, javaCharStream1.getBeginColumn());
      assertEquals(88, javaCharStream1.getColumn());
      assertEquals("boolean", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, token0.kind);
      assertEquals((-1585), token0.endLine);
      assertEquals((-1585), token0.beginLine);
      assertEquals(82, token0.beginColumn);
      assertEquals(88, token0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(88, javaCharStream1.getEndColumn());
      assertEquals((-1585), javaCharStream1.getEndLine());
      assertEquals((-1585), javaCharStream1.getBeginLine());
      assertEquals((-1585), javaCharStream1.getLine());
      assertEquals(82, javaCharStream1.getBeginColumn());
      assertEquals(88, javaCharStream1.getColumn());
      assertEquals("boolean", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.7319037190022348
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("short");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(51, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(5, token0.endColumn);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("short", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(5, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1617);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1617. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"native\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("~6+{gQER0p5*=*.[7YP");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      boolean boolean0 = stringReader2.markSupported();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-2304), (-314));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals((-314), javaCharStream0.getColumn());
      assertEquals((-2304), javaCharStream0.getBeginLine());
      assertEquals((-314), javaCharStream0.getBeginColumn());
      assertEquals((-2304), javaCharStream0.getEndLine());
      assertEquals((-2304), javaCharStream0.getLine());
      assertEquals((-314), javaCharStream0.getEndColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertEquals('\"', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals((-314), javaCharStream0.getColumn());
      assertEquals((-2304), javaCharStream0.getBeginLine());
      assertEquals((-314), javaCharStream0.getBeginColumn());
      assertEquals((-2304), javaCharStream0.getEndLine());
      assertEquals((-2304), javaCharStream0.getLine());
      assertEquals((-314), javaCharStream0.getEndColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(43, token0.kind);
      assertEquals((-313), token0.beginColumn);
      assertEquals((-2304), token0.beginLine);
      assertEquals((-308), token0.endColumn);
      assertEquals((-2304), token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals((-313), javaCharStream0.getBeginColumn());
      assertEquals((-2304), javaCharStream0.getBeginLine());
      assertEquals((-2304), javaCharStream0.getEndLine());
      assertEquals((-308), javaCharStream0.getEndColumn());
      assertEquals((-308), javaCharStream0.getColumn());
      assertEquals((-2304), javaCharStream0.getLine());
      assertEquals("native", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(43, token0.kind);
      assertEquals((-313), token0.beginColumn);
      assertEquals((-2304), token0.beginLine);
      assertEquals((-308), token0.endColumn);
      assertEquals((-2304), token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals((-313), javaCharStream0.getBeginColumn());
      assertEquals((-2304), javaCharStream0.getBeginLine());
      assertEquals((-2304), javaCharStream0.getEndLine());
      assertEquals((-308), javaCharStream0.getEndColumn());
      assertEquals((-308), javaCharStream0.getColumn());
      assertEquals((-2304), javaCharStream0.getLine());
      assertEquals("native", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wYF.|397");
      assertNotNull(stringReader0);
      
      stringReader0.mark(406);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 40, 115);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(117, token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(115, token0.beginColumn);
      assertEquals(40, token0.beginLine);
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(115, javaCharStream0.getBeginColumn());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals("wYF", token0.toString());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StringReader stringReader0 = new StringReader("OIz.TTa+6");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = stringReader0.read();
      assertEquals(79, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("Iz", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(85, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(".", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(6, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("TTa", token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 79);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 79. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("i|whRq{r!iQY1S%+p*/");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1234), (-3574));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.FillBuff();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaParserTokenManager1.ReInit(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-3574), token0.endColumn);
      assertEquals((-1234), token0.beginLine);
      assertEquals((-3574), token0.beginColumn);
      assertEquals((-1234), token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals((-3574), javaCharStream0.getColumn());
      assertEquals((-3574), javaCharStream0.getEndColumn());
      assertEquals((-3574), javaCharStream0.getBeginColumn());
      assertEquals("i", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-3574), token0.endColumn);
      assertEquals((-1234), token0.beginLine);
      assertEquals((-3574), token0.beginColumn);
      assertEquals((-1234), token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals((-3574), javaCharStream0.getColumn());
      assertEquals((-3574), javaCharStream0.getEndColumn());
      assertEquals((-3574), javaCharStream0.getBeginColumn());
      assertEquals("i", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3573), token1.endColumn);
      assertEquals((-1234), token1.endLine);
      assertEquals((-3573), token1.beginColumn);
      assertEquals((-1234), token1.beginLine);
      assertEquals(106, token1.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getEndColumn());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3573), javaCharStream0.getColumn());
      assertEquals("|", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-3574), token0.endColumn);
      assertEquals((-1234), token0.beginLine);
      assertEquals((-3574), token0.beginColumn);
      assertEquals((-1234), token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      assertEquals((-1234), javaCharStream0.getEndLine());
      assertEquals((-1234), javaCharStream0.getLine());
      assertEquals((-1234), javaCharStream0.getBeginLine());
      assertEquals((-3573), javaCharStream0.getEndColumn());
      assertEquals((-3573), javaCharStream0.getBeginColumn());
      assertEquals((-3573), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals("i", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("104B2%AR0'");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("zj0'DVQjj\"h");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-600), (-600));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 5637, (-3345));
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)74;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)74}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(1, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-600), token0.endLine);
      assertEquals((-600), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-600), token0.beginLine);
      assertEquals((-596), token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-600), javaCharStream0.getEndLine());
      assertEquals((-600), javaCharStream0.getLine());
      assertEquals((-596), javaCharStream0.getEndColumn());
      assertEquals((-600), javaCharStream0.getBeginLine());
      assertEquals((-596), javaCharStream0.getColumn());
      assertEquals((-600), javaCharStream0.getBeginColumn());
      assertEquals("104B2", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals((-595), token1.endColumn);
      assertEquals((-600), token1.beginLine);
      assertEquals(108, token1.kind);
      assertEquals((-595), token1.beginColumn);
      assertEquals((-600), token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-600), javaCharStream0.getEndLine());
      assertEquals((-600), javaCharStream0.getLine());
      assertEquals((-595), javaCharStream0.getBeginColumn());
      assertEquals((-595), javaCharStream0.getEndColumn());
      assertEquals((-600), javaCharStream0.getBeginLine());
      assertEquals((-595), javaCharStream0.getColumn());
      assertEquals("%", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ZhZN~vBi;B8");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("ZhZN", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(5, token1.beginColumn);
      assertEquals(90, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals("~", token1.toString());
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(8, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(6, token2.beginColumn);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals("vBi", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(5, token1.beginColumn);
      assertEquals(90, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals("~", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"const\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("!=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.markSupported();
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-314), 91);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      assertEquals((-314), javaCharStream0.getLine());
      assertNotSame(stringReader0, stringReader1);
      assertEquals('\"', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(91, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream0.getEndColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      assertEquals((-314), javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token0.beginColumn);
      assertEquals(96, token0.endColumn);
      assertEquals((-314), token0.beginLine);
      assertEquals(22, token0.kind);
      assertEquals((-314), token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      assertEquals((-314), javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals("const", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token0.beginColumn);
      assertEquals(96, token0.endColumn);
      assertEquals((-314), token0.beginLine);
      assertEquals(22, token0.kind);
      assertEquals((-314), token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-314), javaCharStream0.getEndLine());
      assertEquals(92, javaCharStream0.getBeginColumn());
      assertEquals((-314), javaCharStream0.getBeginLine());
      assertEquals((-314), javaCharStream0.getLine());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals("const", token0.toString());
      assertNotSame(stringReader0, stringReader1);
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("true");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-634), 107);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(107, token0.beginColumn);
      assertEquals(110, token0.endColumn);
      assertEquals((-634), token0.endLine);
      assertEquals(61, token0.kind);
      assertEquals((-634), token0.beginLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals((-634), javaCharStream0.getEndLine());
      assertEquals((-634), javaCharStream0.getBeginLine());
      assertEquals((-634), javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals("true", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("synchrIaRoed");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      byte[] byteArray0 = new byte[25];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)34;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-71);
      byteArray0[13] = (byte)88;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(25, byteArrayInputStream0.available());
      assertEquals(25, byteArray0.length);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(25, byteArrayInputStream0.available());
      assertEquals(25, byteArray0.length);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)85, (-506));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(25, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(25, byteArray0.length);
      
      byteArrayInputStream0.close();
      assertEquals(25, byteArrayInputStream0.available());
      assertEquals(25, byteArray0.length);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(25, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(25, byteArray0.length);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-506), token0.endColumn);
      assertEquals((-506), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(85, token0.endLine);
      assertEquals(85, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals((-506), javaCharStream0.getColumn());
      assertEquals((-506), javaCharStream0.getBeginColumn());
      assertEquals((-506), javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(")", token0.toString());
      assertEquals(25, byteArray0.length);
      
      token0.endLine = 80;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals((-506), javaCharStream0.getColumn());
      assertEquals((-506), javaCharStream0.getBeginColumn());
      assertEquals((-506), javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(")", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-506), token0.endColumn);
      assertEquals((-506), token0.beginColumn);
      assertEquals(78, token0.kind);
      assertEquals(80, token0.endLine);
      assertEquals(85, token0.beginLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals((-506), javaCharStream0.getColumn());
      assertEquals((-506), javaCharStream0.getBeginColumn());
      assertEquals((-506), javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(")", token0.toString());
      assertEquals(25, byteArray0.length);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 85, column -481.  Encountered: <EOF> after : \"\\\"U\\u0014\\ufffdX\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&&i`$1'{#IQ{uv#");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 49, 1708);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(49, token0.endLine);
      assertEquals(98, token0.kind);
      assertEquals(49, token0.beginLine);
      assertEquals(1709, token0.endColumn);
      assertEquals(1708, token0.beginColumn);
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(1709, javaCharStream0.getEndColumn());
      assertEquals(1708, javaCharStream0.getBeginColumn());
      assertEquals(1709, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals("&&", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals(1709, javaCharStream0.getEndColumn());
      assertEquals(1708, javaCharStream0.getBeginColumn());
      assertEquals(1709, javaCharStream0.getColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t]638");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 51, (-1200));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1200), token0.beginColumn);
      assertEquals(51, token0.beginLine);
      assertEquals((-1200), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(51, token0.endLine);
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getLine());
      assertEquals((-1200), javaCharStream0.getEndColumn());
      assertEquals((-1200), javaCharStream0.getColumn());
      assertEquals((-1200), javaCharStream0.getBeginColumn());
      assertEquals("t", token0.toString());
      
      token0.beginLine = (-170);
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getLine());
      assertEquals((-1200), javaCharStream0.getEndColumn());
      assertEquals((-1200), javaCharStream0.getColumn());
      assertEquals((-1200), javaCharStream0.getBeginColumn());
      assertEquals("t", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getLine());
      assertEquals((-1200), javaCharStream0.getEndColumn());
      assertEquals((-1200), javaCharStream0.getColumn());
      assertEquals((-1200), javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(51, token1.beginLine);
      assertEquals(82, token1.kind);
      assertEquals((-1199), token1.beginColumn);
      assertEquals((-1199), token1.endColumn);
      assertEquals(51, token1.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(51, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getLine());
      assertEquals((-1199), javaCharStream0.getEndColumn());
      assertEquals((-1199), javaCharStream0.getBeginColumn());
      assertEquals((-1199), javaCharStream0.getColumn());
      assertEquals("]", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r,`j+<,=aT'T3Sop");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("r", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1103));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1103. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("xEb)<<|JV8_uHd@D_R");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 45, 45);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjnewStateCnt = 45;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(45, token0.beginLine);
      assertEquals(45, token0.beginColumn);
      assertEquals(47, token0.endColumn);
      assertEquals(45, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getColumn());
      assertEquals(47, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals("xEb", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token1.endLine);
      assertEquals(48, token1.endColumn);
      assertEquals(48, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(45, token1.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(48, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(48, javaCharStream0.getBeginColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(48, javaCharStream0.getColumn());
      assertEquals(")", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token2.endLine);
      assertEquals(45, token2.beginLine);
      assertEquals(50, token2.endColumn);
      assertEquals(109, token2.kind);
      assertEquals(49, token2.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals("<<", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(45, token1.endLine);
      assertEquals(48, token1.endColumn);
      assertEquals(48, token1.beginColumn);
      assertEquals(78, token1.kind);
      assertEquals(45, token1.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(")", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token3.kind);
      assertEquals(51, token3.endColumn);
      assertEquals(45, token3.endLine);
      assertEquals(51, token3.beginColumn);
      assertEquals(45, token3.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals("|", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      StringReader stringReader0 = new StringReader("vo~atBil,");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("vo~atBil,");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 52, 52);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(52, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(53, token0.endColumn);
      assertEquals(52, token0.beginColumn);
      assertEquals(52, token0.beginLine);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals("vo", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      int int0 = stringReader2.read();
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals((-1), int0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      token_GTToken0.realKind = (-1);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token2.kind);
      assertEquals(54, token2.beginColumn);
      assertEquals(52, token2.beginLine);
      assertEquals(54, token2.endColumn);
      assertEquals(52, token2.endLine);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals("~", token2.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token2, token0);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(59, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(55, token3.beginColumn);
      assertEquals(52, token3.endLine);
      assertEquals(52, token3.beginLine);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(55, javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(59, javaCharStream0.getEndColumn());
      assertEquals(59, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals("atBil", token3.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(".)1");
      assertNotNull(stringReader0);
      
      stringReader0.mark(955);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 106, 955);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 8, 87, 18);
      assertNotNull(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      javaParserTokenManager0.lengthOfMatch = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) ".)1");
      assertNotNull(printStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(955, token0.beginColumn);
      assertEquals(955, token0.endColumn);
      assertEquals(106, token0.endLine);
      assertEquals(85, token0.kind);
      assertEquals(106, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(955, javaCharStream0.getColumn());
      assertEquals(955, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(955, javaCharStream0.getEndColumn());
      assertEquals(".", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(955, javaCharStream0.getColumn());
      assertEquals(955, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(955, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(955, javaCharStream0.getColumn());
      assertEquals(955, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(955, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token1.endLine);
      assertEquals(956, token1.beginColumn);
      assertEquals(106, token1.beginLine);
      assertEquals(956, token1.endColumn);
      assertEquals(78, token1.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(956, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(956, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(956, javaCharStream0.getBeginColumn());
      assertEquals(")", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("RyM6XGMf}0:xO`*(2");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"@\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.markSupported();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals("RyM6XGMf", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(0, token1.endLine);
      assertEquals(8, token1.endColumn);
      assertEquals(8, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(80, token1.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("}", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("RyM6XGMf", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(9, token2.beginColumn);
      assertEquals(66, token2.kind);
      assertEquals(0, token2.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals("0", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      
      javaParserTokenManager1.SkipLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.endLine);
      assertEquals(8, token1.endColumn);
      assertEquals(8, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(80, token1.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals("}", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("byte");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("~6+{gQER0p5*=*.[7YP");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte)66;
      StringReader stringReader2 = new StringReader("bogG[[*Wx");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 20, 28);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(20, token0.endLine);
      assertEquals(31, token0.endColumn);
      assertEquals(28, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(20, token0.beginLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals("bogG", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, token1.beginColumn);
      assertEquals(20, token1.beginLine);
      assertEquals(32, token1.endColumn);
      assertEquals(81, token1.kind);
      assertEquals(20, token1.endLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals("[", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token1, token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(32, javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getLine());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a +UFTn");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-634), 107);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "a +UFTn");
      assertFalse(boolean0);
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-634), token0.endLine);
      assertEquals(107, token0.endColumn);
      assertEquals(107, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-634), token0.beginLine);
      assertEquals((-634), javaCharStream0.getLine());
      assertEquals((-634), javaCharStream0.getBeginLine());
      assertEquals(107, javaCharStream0.getBeginColumn());
      assertEquals(107, javaCharStream0.getColumn());
      assertEquals(107, javaCharStream0.getEndColumn());
      assertEquals((-634), javaCharStream0.getEndLine());
      assertEquals("a", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-634), token1.beginLine);
      assertEquals(101, token1.kind);
      assertEquals(109, token1.endColumn);
      assertEquals(109, token1.beginColumn);
      assertEquals((-634), token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-634), javaCharStream0.getLine());
      assertEquals((-634), javaCharStream0.getBeginLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals(109, javaCharStream0.getColumn());
      assertEquals(109, javaCharStream0.getEndColumn());
      assertEquals((-634), javaCharStream0.getEndLine());
      assertEquals("+", token1.toString());
      assertNotSame(token1, token0);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(110, token2.beginColumn);
      assertEquals(113, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals((-634), token2.beginLine);
      assertEquals((-634), token2.endLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals((-634), javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals((-634), javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals((-634), javaCharStream0.getEndLine());
      assertEquals("UFTn", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.kind);
      assertEquals(113, token3.endColumn);
      assertEquals((-634), token3.beginLine);
      assertEquals(113, token3.beginColumn);
      assertEquals((-634), token3.endLine);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals((-634), javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals((-634), javaCharStream0.getBeginLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals((-634), javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
  }
}
