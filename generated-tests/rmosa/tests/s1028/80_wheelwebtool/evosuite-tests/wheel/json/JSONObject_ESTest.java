/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:23:23 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject.quote(" t\"2>\n");
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean(" t\"2>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" t\\\"2>\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote("%]3 ~{Pa ~y+");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray((String) null);
      jSONObject0.toJSONArray((JSONArray) null);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("TX2*w[,5j)nzg^[M$");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("wheel.json.JSONObject", 0.0);
      String string0 = "gettoString";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      hashMap0.put(boolean0, "x<hjG:gt");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JSONObject.quote(">\n");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gettoJSONArray";
      stringArray0[1] = "\">\n\"";
      stringArray0[2] = "\">\n\"";
      JSONObject jSONObject0 = new JSONObject("\">\n\"", stringArray0);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString("A JSONObject text must begin with '{'");
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3175781251431864
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Short short0 = new Short((short)44);
      String[] stringArray0 = new String[4];
      Short.compare((short)627, (short)1137);
      stringArray0[0] = "n-t^D*vKq>u(zv";
      stringArray0[1] = "w.2=B2l1&r/Iz$aa<";
      stringArray0[2] = "";
      stringArray0[3] = "?+(@vFn-";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string0 = "N]Sz";
      jSONObject0.remove("Y-kF+yrqCfB7pw");
      jSONObject0.optBoolean("I6CCE_");
      try { 
        jSONObject0.getBoolean("Dn=h~qC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Dn=h~qC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "\"x>\n";
      JSONObject.quote("\"x>\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"x>\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"x>
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1063911301690834
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.quote("aytF}=/U+<xZ#E");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("F`O");
      try { 
        jSONObject0.getBoolean("no");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"no\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1414.219112);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject.quote("%]3 ~{Pa ~y+");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("\"%]3 ~{Pa ~y+\\\"", 2744);
      try { 
        jSONObject0.getBoolean("\"%]3 ~{Pa ~y+\\\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"%]3 ~{Pa ~y+\\\\\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = JSONObject.quote("%]3_~{P_ ~y+");
      assertEquals("\"%]3_~{P_ ~y+\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(121, 121);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = JSONObject.quote(">\n");
      assertEquals("\">\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\">\n\"");
      assertEquals(0, int0);
      
      String string1 = jSONObject0.toString(582, 10);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JSONObject.quote("7m/@v]6q<?}l!r");
      Double double0 = new Double(0.0);
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3396091171567721
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject.quote("aytF}=/UW+<xZ#E");
      JSONObject jSONObject0 = new JSONObject((Object) "aytF}=/UW+<xZ#E");
      Double double0 = new Double((-2305.2672929342207));
      Double.min((-2305.2672929342207), 2153.122888);
      jSONObject0.accumulate("\"aytF}=/UW+<xZ#E\"", double0);
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("aytF}=/UW+<xZ#E");
      assertEquals("\"aytF}=/UW+<xZ#E\"", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6113482429121737
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(684.32);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.toString();
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = JSONObject.quote("\"x>\n");
      Integer integer0 = new Integer((-574));
      String string1 = JSONObject.valueToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-581L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 10;
      String string0 = "null";
      JSONObject jSONObject1 = jSONObject0.put("null", (-814.0));
      jSONObject1.optLong("null");
      String string1 = null;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject.quote(" t\"2>\n");
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject0.putOpt(" t\"2>\n", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Float float0 = new Float(1.0);
      JSONObject.quote(",\n");
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = Integer.getInteger("isaccumulate", 16);
      Integer integer1 = new Integer(16);
      hashMap0.putIfAbsent(integer1, (Integer) null);
      Integer integer2 = new Integer(16);
      hashMap0.put(integer0, integer2);
      jSONObject0.append("@,lr)0N:", "@,lr)0N:");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4633618733607612
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      String string0 = "9G'']22@\\C/m";
      JSONObject jSONObject1 = jSONObject0.put("9G'']22@C/m", (Map) hashMap0);
      try { 
        jSONObject1.getBoolean("9G'']22@C/m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9G'']22@C/m\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject.quote(" t\"2>\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = " t\"2>\n";
      stringArray0[1] = " t\"2>\n";
      stringArray0[2] = "\" t\"2>\n\"";
      stringArray0[3] = " t\"2>\n";
      stringArray0[4] = "\" t\"2>\n\"";
      stringArray0[5] = "\" t\"2>\n\"";
      stringArray0[6] = " t\"2>\n";
      stringArray0[7] = " t\"2>\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = JSONObject.quote("\"~x>\n");
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"~x>\n";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = JSONObject.valueToString(jSONObject1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = JSONObject.quote("aytF}=/UW+<xZ#E");
      Short short0 = new Short((short)9);
      JSONObject.numberToString(short0);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Float float0 = new Float(1.0);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JSONObject.quote("\"x>\n");
      assertEquals("\"\\\"x>\\n\"", string0);
      
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(4, 4);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = JSONObject.quote(">\n");
      assertEquals("\">\\n\"", string0);
      
      Short short0 = new Short((short) (-856));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString((int) (short) (-856), 164);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 1443, 1443);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ",\n";
      stringArray0[1] = "\",\n\"";
      stringArray0[2] = "\",\n\"";
      JSONObject jSONObject0 = new JSONObject("\",\n\"", stringArray0);
      String string1 = JSONObject.valueToString(jSONObject0, (-2182), 1194);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = JSONObject.quote("\"x>\n");
      Integer integer0 = new Integer((-1722));
      String string1 = JSONObject.valueToString(integer0, (-1722), (-1722));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject.quote("] is not a Boolean.");
      JSONObject jSONObject0 = new JSONObject((Object) "\"] is not a Boolean.\"");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      int int0 = 118;
      try { 
        jSONObject0.getString("qI >Fk+hb1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qI >Fk+hb1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{]T:z/W#%z", 2365L);
      String string0 = "V*svVXbzn?";
      jSONObject0.optDouble("{]T:z/W#%z", Double.NaN);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3545061457128476
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject.quote("%]3 ~{Pa ~y+");
      Double double0 = new Double(2465.93658);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.names();
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      String string0 = JSONObject.quote(")) Fx'qlf>");
      assertEquals("\")) Fx'qlf>\"", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      linkedList0.retainAll(linkedList1);
      String string0 = JSONObject.valueToString(linkedList1, (byte)9, 72);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = JSONObject.quote("\"x>\n");
      assertEquals("\"\\\"x>\\n\"", string0);
      
      String string1 = JSONObject.valueToString("\"x>\n");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-258));
      String string0 = jSONObject0.toString((-1), (-1));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Double double0 = new Double((-3286.668));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("{]Turz/7#%z", 1L);
      jSONObject0.getDouble("{]Turz/7#%z");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"aoK(AstCH", 0L);
      jSONObject1.optInt("\"aoK(AstCH");
      try { 
        jSONObject1.append("\"aoK(AstCH", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"aoK(AstCH] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8073365769337295
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "`.F9G#05)";
      JSONObject jSONObject1 = jSONObject0.accumulate("`.F9G#05)", "sQQK");
      try { 
        jSONObject1.getJSONArray("`.F9G#05)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`.F9G#05)\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      int int0 = 536;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote("");
      jSONObject0.has("\"\"");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.poll();
      jSONObject0.put("\"\"", (Collection) linkedList0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("\"aoK(AstCH");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0880208245128347
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("toH", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("Unterminated string", (Map) hashMap0);
      JSONObject.quote("Unterminated string");
      jSONObject2.optLong("Unterminated string", 0L);
      jSONObject0.toString((-1062), (-1062));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "`'.F9G#05)";
      jSONObject0.accumulate("`'.F9G#05)", "QQQK");
      try { 
        jSONObject0.getDouble("`'.F9G#05)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`'.F9G#05)\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{jC=1er~%6s<(rj;$T1");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 19 of {jC=1er~%6s<(rj;$T1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{+:u39W!,vpQ^=");
      jSONTokener0.syntaxError("{+:u39W!,vpQ^=");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 13 of {+:u39W!,vpQ^=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{jC=ser~%6s<(r};|T1");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 16 of {jC=ser~%6s<(r};|T1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.5297061990576545
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put((double) 1443);
      JSONArray jSONArray1 = jSONArray0.put(1443, (long) 1443);
      jSONArray0.optBoolean(57, true);
      int int0 = 4;
      jSONArray1.put(4, (Object) null);
      try { 
        jSONArray0.getJSONArray((-2242));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-2242] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject.quote("Missing value");
      JSONObject jSONObject0 = new JSONObject((Object) "\"Missing value\"");
      JSONObject.quote("{6eq_[p5<.Z_2r");
      // Undeclared exception!
      jSONObject0.toString(4236, 4236);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("");
      JSONObject jSONObject1 = new JSONObject((Object) "");
      jSONObject1.toString(13, 13);
      jSONObject1.toString(13, (-2093064));
      Short short0 = new Short((short)3433);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("ishashCode", (Map) hashMap1);
      try { 
        jSONObject0.getInt("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7184221902528398
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject.quote("\"x>\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\"\"x>\n\"");
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("\"x>\n", (-1176), 11);
      try { 
        jSONObject0.getBoolean("gS''. z9St|@b,_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gS''. z9St|@b,_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5358551955461084
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Double double0 = new Double((-3286.668));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("{]T:z/W#%z", 1L);
      Double double1 = new Double(2663.0489177335);
      Integer integer0 = new Integer((-1564));
      Integer.toUnsignedLong((-1564));
      jSONObject1.accumulate("{]T:z/W#%z", integer0);
      assertEquals(4, jSONObject0.length());
      
      Long long0 = new Long(0L);
      String[] stringArray0 = JSONObject.getNames((Object) long0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("}gT%vp<R'", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "}gT%vp<R'");
      Long long0 = new Long(0L);
      try { 
        Long.parseUnsignedLong("JSONObject[", 4485);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 4485 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("\"aoK(AstCH", 0L);
      Double double0 = new Double(0L);
      jSONObject2.optString("\"aoK(AstCH", "\"aoK(AstCH");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)1189);
      JSONObject jSONObject1 = jSONObject0.put("\b", (Object) short0);
      try { 
        jSONObject1.getJSONObject("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Boolean.compare(true, true);
      Double.min(1590.8015400694421, 0);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5088198909642436
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.isFinite(684.32);
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('i');
      jSONObject0.write(stringWriter1);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      Float float0 = new Float((float) 92);
      JSONObject.testValidity("");
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7269369375735457
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("`.F9G#05)", "QQQK");
      jSONObject1.optBoolean("`.F9G#05)");
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject.testValidity(jSONObject1);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote("QQQK");
      assertEquals("\"QQQK\"", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(59);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>(59);
      String string0 = JSONObject.valueToString(hashMap0, 59, 4120);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      HashMap<JSONObject, JSONObject> hashMap1 = new HashMap<JSONObject, JSONObject>();
      jSONObject0.put("{x,f", (Map) hashMap0);
      jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("");
      JSONObject jSONObject3 = jSONObject2.optJSONObject("{x,f");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("iscopyValueOf", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("");
      jSONObject3.put("", (Map) hashMap0);
      int int0 = 92;
      try { 
        jSONObject1.getJSONObject("T6TUcoG$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"T6TUcoG$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject.quote("%]3 ~{Pa ~y+");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 1817, 1817);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optJSONObject(120);
      int int0 = (-1499);
      try { 
        jSONArray0.get(1817);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1817] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\"aoK(AstCH", jSONObject0);
      jSONObject0.getJSONArray("\"aoK(AstCH");
      String string0 = JSONObject.quote("\"aoK(AstCH");
      assertEquals("\"\\\"aoK(AstCH\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "de=JZ3Lv)`4=34WH p");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.put((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      
      String string0 = JSONObject.valueToString(jSONArray1);
      assertEquals(1, jSONArray1.length());
      
      String string1 = JSONObject.valueToString(jSONArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 48, 48);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("`.F9G#05)", "Expected '");
      jSONObject0.accumulate("`.F9G#05)", "YQQK");
      String string0 = JSONObject.doubleToString(1239.81231);
      assertEquals("1239.81231", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("false", "false");
      boolean boolean0 = jSONObject1.optBoolean("false");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject.doubleToString((-1.0));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("-1", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('b');
      jSONObject1.write(stringWriter1);
      try { 
        jSONObject0.getBoolean("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("5E|r(", false);
      jSONObject0.getBoolean("5E|r(");
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"aoK(AstCH", 0L);
      jSONObject1.put("\"aoK(AstCH", (Collection) null);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("\"aoK(AstCH");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object1);
      String string0 = "\\n";
      JSONObject jSONObject1 = jSONObject0.append("\n", object1);
      JSONObject jSONObject2 = jSONObject1.put("G@N2BM", true);
      jSONObject2.append("\n", object1);
      Short short0 = new Short((short)70);
      JSONTokener jSONTokener0 = new JSONTokener("\n");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("5E|r(", true);
      jSONObject0.getBoolean("5E|r(");
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.quote("oxmH</gF.*8~ ;sV");
      assertEquals("\"oxmH<\\/gF.*8~ ;sV\"", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("c+cJVAd:+ L%bY2ah!S");
      assertEquals("\"c+cJVAd:+ L%bY2ah!S\"", string0);
      
      String string1 = JSONObject.doubleToString((-20652918));
      assertEquals("-2.0652918E7", string1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      String string1 = JSONObject.quote("[]");
      assertEquals("\"[]\"", string1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 57;
      jSONArray0.optBoolean(57, true);
      JSONTokener jSONTokener0 = new JSONTokener("{+:u39W!vpQ^=");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {+:u39W!vpQ^=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
