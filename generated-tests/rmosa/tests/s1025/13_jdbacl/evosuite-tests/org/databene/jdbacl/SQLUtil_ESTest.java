/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:08:58 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.apache.derby.impl.sql.compile.Predicate;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.tools.Recover;
import org.h2.value.Value;
import org.h2.value.ValueArray;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[16];
      charArray0[2] = '~';
      stringReader0.read();
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = '#';
      stringReader0.read(charArray0, 0, 0);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTables();
      dBCatalog0.getSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isQuery("select intoselect into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "6gUg";
      SQLUtil.join("6gUg", "6gUg", stringArray0, "6gUg", stringArray0[1], stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[3];
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("", stringBuilder0);
      String string0 = "org.databene.commons.filter.RegexBasedFilter";
      VersionNumber versionNumber0 = VersionNumber.valueOf("org.databene.commons.filter.RegexBasedFilter");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("org.databene.commons.filter.RegexBasedFilter", "org.databene.commons.filter.RegexBasedFilter", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("org.databene.commons.filter.RegexBasedFilter");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'org.databene.commons.filter.RegexBasedFilter'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("renaO|me");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.012845336286074
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[19];
      SQLUtil.normalize("-f/*GE ~05", false);
      SQLUtil.normalize("org.apache.derby.impl.sql.compile.UserDefinedTypeCompiler", true);
      SQLUtil.mutatesDataOrStructure("CLOB");
      String string0 = "org.apache.derby.impl.io.URLFile";
      int int0 = (-995);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.io.URLFile", (DBTable) null, (-995), "- f /* GE ~ 05");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "- f /* GE ~ 05", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.7990591844756405
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.normalize("aac ; ", true);
      assertEquals("aac ;", string0);
      
      DBSchema dBSchema0 = new DBSchema("aac ; ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.firebirdsql.jdbc.FBResultSet", dBSchema0);
      dBSchema0.setName("org.firebirdsql.jdbc.FBResultSet");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.firebirdsql.jdbc.FBResultSet", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("trunca@te", false);
      assertEquals("trunca @ te", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("trunca @ te", true, "trunca @ te", "inner");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK inner", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("tX\"2}'>", dBCatalog0);
      dBSchema0.getTable("tX\"2}'>");
      String[] stringArray0 = new String[18];
      dBCatalog0.isIdentical((DBObject) null);
      stringArray0[0] = "tX\"2}'>";
      stringArray0[1] = "tX\"2}'>";
      stringArray0[2] = "tX\"2}'>";
      stringArray0[3] = "tX\"2}'>";
      stringArray0[16] = "tX\"2}'>";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "Z\\u/zkBZf:!DZ}]$7";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(string0, dBCatalog0);
      DBPackage dBPackage0 = new DBPackage(string0, dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("bH>}mdKymzMJbP>q", dBPackage0);
      SQLUtil.ownerDotComponent(dBPackage0);
      String string1 = "c`wiseTV:56";
      String string2 = "Ob |#AlWqpTy9ICRb";
      boolean boolean0 = true;
      String string3 = "delete";
      String string4 = "$;{AYV{:#X|!vG";
      // Undeclared exception!
      try { 
        dBCatalog0.removeTable("}R5>>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '}R5>>'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter indextruncate", true);
      assertEquals("alter indextruncate", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("DES/CBC/NoPadding", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Tm/WYA(F?up@9[?", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DES/CBC/NoPadding";
      stringArray0[1] = "alter indextruncate";
      stringArray0[2] = "alter indextruncate";
      stringArray0[3] = "DES/CBC/NoPadding";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter indextruncate", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertTrue(string2.equals((Object)string1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("7G|q>c_w<bu+V7C0", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("7G|q>c_w<bu+V7C0", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("7G|q>c_w<bu+V7C0", dBPackage0);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "7G|q>c_w<bu+V7C0";
      stringArray0[3] = "7G|q>c_w<bu+V7C0";
      stringArray0[4] = "7G|q>c_w<bu+V7C0";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND 7G|q>c_w<bu+V7C0 = '7G|q>c_w<bu+V7C0' AND null = null AND 7G|q>c_w<bu+V7C0 = '7G|q>c_w<bu+V7C0' AND 7G|q>c_w<bu+V7C0 = '7G|q>c_w<bu+V7C0'", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6425990774875225
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBDataType.getInstance((-1265), "[^JD`Wfr*,x,k");
      Integer integer0 = new Integer(65);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = new Integer(65);
      SQLUtil.removeComments("Ud#");
      boolean boolean0 = SQLUtil.isQuery("QqY0^$IZV");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("*'@x}L/=w", false);
      assertEquals("* '@x}L/=w'", string0);
      
      System.setCurrentTimeMillis((-106330770));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QqY0^$IZV");
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table QqY0^$IZV", string1);
      assertNotNull(string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[5] = "T</]`x W(2i<";
      stringArray0[2] = "T</]`x W(2i<";
      stringArray0[5] = "T</]`x W(2i<";
      stringArray0[6] = "T</]`x W(2i<";
      SQLUtil.renderColumnListWithTableName("T</]`x W(2i<", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9%.");
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.substituteMarkers("dJDCW$ODI=xNq", "bdZ9!E[x@DydzH.", "bdZ9!E[x@DydzH.");
      Character character0 = new Character('l');
      assertEquals('l', (char)character0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3068291534409705
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.normalize("4/-/)I-4|ZBvtTJ>", false);
      assertEquals("4 / - /) I - 4 | ZBvtTJ >", string0);
      
      StringReader stringReader0 = new StringReader("4/-/)I-4|ZBvtTJ>");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "g9_)^_'4iyM_", true, (String[]) null);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setCompatible((String) null);
      pGConnectionPoolDataSource0.getLogWriter();
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT g9_)^_'4iyM_ ", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.mutatesStructure("PRIMARY KEY ");
      SQLUtil.removeComments(" and ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]d~n$+?:DC}n]Cc";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]d~n$+?:DC}n]Cc", true, stringArray0);
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop tablefilename", defaultDBTable0, 58, " and ");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      DBDataType.getInstance(58, "alter materialized viewprimary key");
      Integer integer0 = RawTransaction.COMMIT;
      defaultDBColumn0.setOwner(defaultDBTable0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      System.setCurrentTimeMillis((-4L));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.normalize("?&\"czLm&FRC10y!*?", false);
      assertEquals("? & \"czLm&FRC10y!*?\"", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("XYGTuV!bwq K_MT<)Nn", true);
      assertEquals("XYGTuV ! bwq K_MT <) Nn", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = SQLUtil.normalize("O,(jM1vxJ.1RhqU:x", false);
      assertEquals("O, (jM1vxJ.1RhqU : x", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.880524555284045
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("`vjO:2Am[}<C.!u4.", true);
      assertEquals("` vjO : 2Am [ } < C.! u4.", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`vjO:2Am[}<C.!u4.");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "5[otepx1";
      stringArray0[1] = "5[otepx1";
      stringArray0[2] = "~!&].6k-P/'jC<Y2o";
      stringArray0[3] = "5[otepx1";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "5[otepx1", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 5[otepx1 UNIQUE (5[otepx1, 5[otepx1, ~!&].6k-P/'jC<Y2o, 5[otepx1)", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("", (DBCatalog) null);
      DBPackage dBPackage0 = new DBPackage("", dBSchema0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder(836);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("org.h2.command.ddl.DropSchema", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 836);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(836, "org.apache.derby.impl.store.raw.data.EncryptContainerOperation");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 836
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("g9_)^_'4iyM_", (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("alter materialized viewexecinsert[^jd`wfr*,x,k", true);
      assertEquals("alter materialized viewexecinsert [ ^ jd ` wfr *, x, k", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized viewexecinsert [ ^ jd ` wfr *, x, k");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("position(String,long)", defaultDBTable0, 0, "position(String,long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("abH5-#_[Vc(r;dcA", "[^JD`Wfr*,x,k", (VersionNumber) null);
      DBCatalog dBCatalog0 = new DBCatalog("[^JD`Wfr*,x,k", defaultDatabase0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("7hWe", defaultDBTable0, 831, "abH5-#_[Vc(r;dcA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: abH5-#_[Vc(r;dcA
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.49875846591288275
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*'@x}L/=w");
      String string0 = SQLUtil.normalize("*'@x}L/=w", true);
      assertEquals("* '@x}L/=w'", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(90022, "* '@x}L/=w'");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("insert * '@X}L/=W' NULL", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column insert", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getForeignKeyConstraints();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("y0;2K9%*j");
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary((-3066));
      DataOutputStream dataOutputStream0 = new DataOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dataOutputStream0, true);
      mockPrintWriter1.append((CharSequence) "- 0");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("KBTR?f(n~Y$)raG", defaultDBTable0, (-4), "KBTR?f(n~Y$)raG");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"n~Y$\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("$(5'2c=V:-", false);
      assertEquals("$ (5 '2c=V:-'", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder("select intop>");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("select intop>", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(false);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append(stringBuffer0);
      // Undeclared exception!
      try { 
        stringBuilder3.insert((-281), 2.0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -281
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop index", false, (String[]) null);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setCompatible("6~:\"N->}Ta'");
      pGConnectionPoolDataSource0.getLogWriter();
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT \"drop index\" ", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(569L);
      SQLUtil.addOptionalCondition("", stringBuilder0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("update");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromBaseTable fromBaseTable0 = new FromBaseTable();
      fromBaseTable0.getTableDescriptor();
      Predicate predicate0 = new Predicate();
      // Undeclared exception!
      try { 
        fromBaseTable0.pushOptPredicate(predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.FromBaseTable", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[0];
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "-q3dhnQ@LRgORL?ss!7", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "Ud#";
      DBDataType dBDataType0 = DBDataType.getInstance(1906, "Ud#");
      Integer integer0 = new Integer(1906);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = new Integer((-552935807));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("!IXJ/=1,DXUB", (DBTable) null, dBDataType0, integer2, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "!IXJ/=1,DXUB UD#(-552935807,3) NULL");
      int int0 = (-106330770);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-106330770), (-1444.7983042));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -106330770
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execute");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "g9_)^_'4iyM_", true, (String[]) null);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.setCompatible((String) null);
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "g9_)^_'4iyM_", (String[]) null, "g9_)^_'4iyM_", "g9_)^_'4iyM_", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("[^JD`Wfr*,x,k");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "[^JD`Wfr*,x,k";
      stringArray0[1] = "[^JD`Wfr*,x,k";
      stringArray0[2] = "[^JD`Wfr*,x,k";
      stringArray0[3] = "[^JD`Wfr*,x,k";
      stringArray0[4] = "[^JD`Wfr*,x,k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[^JD`Wfr*,x,k", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("[^JD`Wfr*,x,k", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("0#7se$t{n!", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("select into[^jd`wfr*,x,k", 40);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.typeAndName(dBTable0);
      Integer.valueOf(823);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBForeignKeyConstraint dBForeignKeyConstraint1 = dBTable0.getForeignKeyConstraint(stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint1.setDeleteRule(fKChangeRule0);
      MockFile mockFile0 = new MockFile(" REFERENCES ");
      MockFile mockFile1 = new MockFile(mockFile0, "GgQyJ7Hhi-i5o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint1, nameSpec0, mockPrintWriter0);
      assertEquals("0#7se$t{n!", dBForeignKeyConstraint1.getName());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("N-EtkU<A/5Ph", true);
      assertEquals("N - EtkU < A / 5Ph", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Character character0 = new Character('X');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'X'", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(3388, "-8-)'DGP8us4eP6");
      Integer integer0 = new Integer(3388);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = new Integer(3388);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("c['4Wd6_", (DBTable) null, dBDataType0, integer1, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "c['4Wd6_ -8-)'DGP8US4EP6(3) NULL");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1), (double) 3388);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selectselect intop>i2b");
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      FromBaseTable fromBaseTable0 = new FromBaseTable();
      fromBaseTable0.getTableDescriptor();
      Predicate predicate0 = new Predicate();
      predicate0.markStartKey();
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        fromBaseTable0.pushOptPredicate(predicate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.FromBaseTable", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2285849719085145
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("-f/*GE ~05", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "insert", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      defaultDBTable0.getComponents();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-f/*GE ~05");
      mockPrintWriter0.print(0.0F);
      mockPrintWriter0.append((CharSequence) "insert");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.removeComments("alter sessionexecinsert[^jd`wfr*,x,k");
      assertEquals("alter sessionexecinsert[^jd`wfr*,x,k", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("BLOB");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "BLOB";
      DBDataType dBDataType0 = DBDataType.getInstance(508, "BLOB");
      Integer integer0 = new Integer(508);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" and ", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" and  BLOB NULL", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop tableclb");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("select into");
      DBDataType dBDataType0 = DBDataType.getInstance(913, "/*");
      dBDataType0.isNumber();
      mockPrintWriter0.print((-2.55561F));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(":qrp|lm1GeKU34%", defaultDBTable0, dBDataType0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("/*");
      defaultDBColumn0.setNullable(false);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable(":qrp|lm1GeKU34%");
      defaultDBTable2.addColumn(defaultDBColumn0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "org.h2.table.MetaTable");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.h2.table.MetaTable";
      stringArray0[1] = "select into";
      stringArray0[2] = "org.h2.table.MetaTable";
      stringArray0[1] = "clob";
      stringArray0[4] = "/*";
      stringArray0[5] = "create unique index";
      defaultDBTable1.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      ValueArray valueArray0 = ValueArray.get((Value[]) null);
      // Undeclared exception!
      try { 
        valueArray0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.value.ValueArray", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1 $C4+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Vector<DefaultDBColumn> vector0 = new Vector<DefaultDBColumn>();
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>(vector0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "abH5-#_[Vc(r;dcA";
      stringArray0[0] = "-q3dhnQ@LRgORL?ss!7";
      stringArray0[3] = "abH5-#_[Vc(r;dcA";
      stringArray0[4] = "-q3dhnQ@LRgORL?ss!7";
      stringArray0[5] = "abH5-#_[Vc(r;dcA";
      stringArray0[6] = "-q3dhnQ@LRgORL?ss!7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("abH5-#_[Vc(r;dcA");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Random.setNextRandom(90084);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(3388, "-8-)'DGP8us4eP6");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer(3388);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table", (DBTable) null, dBDataType0, integer0, (Integer) null);
      defaultDBColumn0.setDefaultValue("create table");
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create table -8-)'DGP8US4EP6(3) DEFAULT create table NULL");
      int int0 = (-1);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1), (double) 3388);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5604708378244132
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("insert");
      mockPrintWriter0.println((-287.4F));
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "insert");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "insert";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      mockPrintWriter0.printf("insert", objectArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "JIS|f/'{V+?";
      stringArray0[1] = "JIS|f/'{V+?";
      stringArray0[2] = "JIS|f/'{V+?";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("JIS|f/'{V+?", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getIndex("_r<P: tOM'hI");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("drop indexclob", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop materialized viewderby.product.technology.name", true, defaultDBTable0, "insert");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.normalize("1+`s|{LU-Wr1t]')q", true);
      SQLUtil.removeComments("c&A8");
      Random.setNextRandom(90076);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop materialized viewderby.product.technology.name", true, defaultDBTable0, "insert");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1 $C4+");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CREATE MATERIALIZED VIEW,+ADPW", (DBTable) null, (-741), "1 $C4+");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance(0, "CREATE MATERIALIZED VIEW,+ADPW");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("CREATE MATERIALIZED VIEW,+ADPW", (DBTable) null, dBDataType0);
      arrayList0.add((DBColumn) defaultDBColumn1);
      arrayList0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      assertEquals("CREATE MATERIALIZED VIEW,+ADPW, CREATE MATERIALIZED VIEW,+ADPW", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[2] = null;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      stringArray0[3] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.typeAndName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        Recover.readClob((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.store.fs.FileSystem", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4/-/)I-4|ZBvtTJ>");
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '_';
      stringReader0.read();
      stringReader0.mark(512);
      charArray0[2] = 'c';
      charArray0[3] = '=';
      charArray0[4] = 'X';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.compact();
      stringReader0.read(charBuffer0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 6034.13136959677;
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.removeComments("Y*%vJd>@");
      stringReader0.markSupported();
      System.setCurrentTimeMillis(512);
      SQLUtil.normalize("(+FE;LPRea'/(", true);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.8018185525433373
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop tableclb");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("clob");
      DBDataType dBDataType0 = DBDataType.getInstance(913, "select into");
      dBDataType0.isNumber();
      mockPrintWriter0.print((float) 913);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jWw`6b-['D", defaultDBTable0, dBDataType0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("4/-/)I-4|ZBvtTJ>");
      defaultDBTable1.addColumn(defaultDBColumn0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "org.h2.table.MetaTable");
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      ValueArray valueArray0 = ValueArray.get((Value[]) null);
      // Undeclared exception!
      try { 
        valueArray0.getReader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.value.ValueArray", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("deleteexecute");
      int int0 = (-421);
      DBDataType dBDataType0 = DBDataType.getInstance((-421), "4/-/)I-4|ZBvtTJ>");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selecty*%vjd>@", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("4/-/)I-4|ZBvtTJ>", defaultDBTable0, dBDataType0);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, (String) null, "yjZbx$S6J}K'{r", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("4/-/)I-4|ZBvtTJ>");
      char[] charArray0 = new char[5];
      charArray0[1] = '_';
      stringReader0.read();
      stringReader0.mark(512);
      charArray0[0] = '_';
      charArray0[3] = '_';
      charArray0[4] = '_';
      CharBuffer charBuffer0 = CharBuffer.allocate('_');
      charBuffer0.compact();
      stringReader0.read(charBuffer0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.nval = (-3762.84949);
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis(512);
      SQLUtil.normalize("- 3762.84949", true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
