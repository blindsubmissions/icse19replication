/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:48:07 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9608919796672831
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-trimText");
      outputFormat0.setEncoding("Z");
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "wv3tnC}g5U]*T~";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-trimText";
      stringArray0[5] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "-trimText";
      stringArray1[1] = "wv3tnC}g5U]*T~";
      stringArray1[2] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-1457380450));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1457380450
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[17];
      int int0 = 368;
      outputFormat0.getNewLineAfterNTags();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      String[] stringArray0 = new String[2];
      outputFormat0.setSuppressDeclaration(false);
      stringArray0[0] = "";
      stringArray0[1] = "";
      int int0 = 121;
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('=');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (=)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2592004731479975
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[8];
      stringArray0[2] = "6v3t_C}gXU]*ci";
      stringArray0[1] = "6v3t_C}gXU]*ci";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(1, int0);
      
      String[] stringArray1 = new String[17];
      outputFormat0.parseOptions(stringArray1, 368);
      outputFormat0.parseOptions(stringArray1, 368);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.parseOptions(stringArray1, 368);
      assertEquals("  ", outputFormat1.getIndent());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewlines());
      
      int int1 = outputFormat0.parseOptions(stringArray0, 368);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(368, int1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterNTags(5540);
      outputFormat0.setIndent((String) null);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent("^]*]^4q$'l}tA.");
      outputFormat0.isNewLineAfterDeclaration();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ZG>^f";
      stringArray0[1] = "^]*]^4q$'l}tA.";
      stringArray0[2] = "^]*]^4q$'l}tA.";
      stringArray0[3] = "^]*]^4q$'l}tA.";
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1842534121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1842534121
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      int int0 = (-2260);
      outputFormat0.setNewlines(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (&)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("?:DC}n]Cc~gsiRJ95l/");
      outputFormat0.setNewLineAfterNTags(0);
      assertEquals("?:DC}n]Cc~gsiRJ95l/", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 1;
      String[] stringArray0 = new String[8];
      stringArray0[1] = stringArray0[0];
      outputFormat0.setIndent((String) null);
      stringArray0[2] = "6j3t_C}gXU]*ci";
      stringArray0[1] = "6j3t_C}gXU]*ci";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-235883544));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -235883544
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("i", false);
      String[] stringArray0 = new String[8];
      stringArray0[2] = "i";
      stringArray0[3] = "i";
      outputFormat0.setIndent("");
      stringArray0[4] = "-encoding";
      stringArray0[5] = "i";
      stringArray0[6] = "i";
      stringArray0[7] = "i";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1388));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1388
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Z8/Ve'K|[B,H]c'uK", false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('8');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (8)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setNewLineAfterNTags((-1));
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals((-1), outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("Z");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getNewLineAfterNTags();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('v');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (v)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("a`#");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "a`#";
      stringArray0[1] = "a`#";
      stringArray0[2] = "a`#";
      stringArray0[3] = "a`#";
      stringArray0[4] = "a`#";
      outputFormat0.setOmitEncoding(false);
      stringArray0[5] = "a`#";
      stringArray0[6] = "a`#";
      stringArray0[7] = "a`#";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1349));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1349
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("qLo");
      outputFormat0.setLineSeparator("qLo");
      assertEquals("qLo", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`'`W?L['+/", true, (String) null);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setSuppressDeclaration(false);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "l'T/28";
      int int0 = outputFormat0.parseOptions(stringArray0, 508);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("`'`W?L['+/", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(508, int0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      outputFormat0.setNewLineAfterDeclaration(false);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      boolean boolean0 = outputFormat0.isPadText();
      assertFalse(boolean0);
      
      outputFormat0.setTrimText(false);
      outputFormat0.setEncoding("");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setTrimText(false);
      boolean boolean1 = outputFormat0.isSuppressDeclaration();
      boolean boolean2 = outputFormat0.isOmitEncoding();
      assertEquals("", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(boolean2 == boolean1);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&x@C/A_e,BO]o");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&x@C/A_e,BO]o";
      stringArray0[1] = "&x@C/A_e,BO]o";
      stringArray0[2] = "Fp)d,_H|";
      stringArray0[3] = "&x@C/A_e,BO]o";
      stringArray0[4] = "&x@C/A_e,BO]o";
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(2, int0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("&x@C/A_e,BO]o", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = outputFormat0.getIndent();
      assertNull(string0);
      
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertFalse(boolean0);
      
      String string1 = OutputFormat.STANDARD_INDENT;
      boolean boolean1 = outputFormat0.isXHTML();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent((String) null);
      boolean boolean2 = outputFormat0.isPadText();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(boolean2 == boolean1);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, (String) null);
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterNTags((-1));
      outputFormat0.isTrimText();
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals((-1), outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.getIndent();
      outputFormat0.isOmitEncoding();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -268
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = "-encoding";
      String string1 = "-trimText";
      outputFormat0.setIndent("-trimText");
      String string2 = "Z";
      outputFormat0.setEncoding("Z");
      boolean boolean0 = false;
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Z";
      stringArray0[1] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(">EaX.]U4reTAiZ", true);
      outputFormat0.setNewLineAfterNTags(1339);
      outputFormat0.setIndent("");
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setPadText(true);
      outputFormat0.setIndent(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndent(true);
      outputFormat0.setIndentSize(3813);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setXHTML(true);
      outputFormat0.getEncoding();
      outputFormat0.isNewlines();
      outputFormat0.getEncoding();
      outputFormat0.isOmitEncoding();
      outputFormat0.isNewLineAfterDeclaration();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 1;
      outputFormat0.setAttributeQuoteCharacter('\"');
      String[] stringArray0 = new String[8];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "6v3t_C}gXU]*ci";
      stringArray0[1] = "6v3t_C}gXU]*ci";
      outputFormat0.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1852893729));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1852893729
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "6v3t_C}gXU]*ci";
      stringArray0[1] = "-expandEmpty>509G7";
      stringArray0[2] = "Invalid attribute quote character (";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 982);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("D)q-9]~2vConsD $", true, "D)q-9]~2vConsD $");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "D)q-9]~2vConsD $";
      stringArray0[1] = "D)q-9]~2vConsD $";
      stringArray0[2] = "D)q-9]~2vConsD $";
      outputFormat0.setEncoding("-encodn");
      stringArray0[3] = "D)q-9]~2vConsD $";
      stringArray0[2] = "D)q-9]~2vConsD $";
      stringArray0[5] = "D)q-9]~2vConsD $";
      outputFormat0.setEncoding((String) null);
      stringArray0[6] = "D)q-9]~2vConsD $";
      stringArray0[7] = "-lineSeparator";
      stringArray0[8] = "D)q-9]~2vConsD $";
      outputFormat0.parseOptions(stringArray0, 34);
      outputFormat0.parseOptions(stringArray0, 34);
      outputFormat0.parseOptions(stringArray0, 34);
      outputFormat0.parseOptions(stringArray0, 34);
      outputFormat0.parseOptions(stringArray0, 34);
      outputFormat0.parseOptions(stringArray0, 14);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1804393051));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1804393051
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("{D*~EJ+&]UzW2", false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewLineAfterNTags(1339);
      outputFormat0.setIndent("-encoding");
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat2.setAttributeQuoteCharacter('\'');
      outputFormat2.setPadText(false);
      outputFormat2.setExpandEmptyElements(false);
      OutputFormat outputFormat3 = new OutputFormat("", false, "-encoding");
      outputFormat2.setIndentSize(39);
      outputFormat2.setNewLineAfterNTags(1);
      outputFormat2.setIndent("{D*~EJ+&]UzW2");
      assertEquals('\'', outputFormat2.getAttributeQuoteCharacter());
      
      OutputFormat outputFormat4 = OutputFormat.createPrettyPrint();
      outputFormat4.isXHTML();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "jf$KDK|j g";
      outputFormat4.parseOptions(stringArray0, 1);
      outputFormat4.setIndentSize(39);
      assertEquals("                                       ", outputFormat4.getIndent());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      outputFormat0.setEncoding("Z");
      outputFormat0.isPadText();
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndentSize(0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-indent";
      stringArray0[2] = "Z";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "Z";
      stringArray0[5] = "Z";
      stringArray0[6] = "-encoding";
      stringArray0[7] = "Z";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndent("-indent");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals("-indent", outputFormat0.getIndent());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding("-expandEmpty-trimText");
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-expandEmpty-trimText";
      outputFormat0.parseOptions(stringArray0, 1943);
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "-suppressDeclaration";
      stringArray1[1] = "Z";
      stringArray1[2] = "-expandEmpty-trimText";
      stringArray1[3] = "C";
      stringArray1[4] = "Z";
      stringArray1[5] = "wvPtnC}g5U]*T~";
      stringArray1[6] = "wvPtnC}g5U]*T~";
      outputFormat0.parseOptions(stringArray1, 0);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1849465783));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1849465783
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-padText", true, "Z");
      String[] stringArray0 = new String[2];
      outputFormat0.setEncoding("Z");
      stringArray0[0] = "Z";
      stringArray0[1] = "-padText";
      outputFormat0.setEncoding("-padText");
      outputFormat0.parseOptions(stringArray0, 1631);
      outputFormat0.parseOptions(stringArray0, 1631);
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 666);
      assertEquals("-padText", outputFormat0.getEncoding());
      assertEquals(666, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-xhtml6v3t_C}gXU]*ci";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String string0 = "-encoding";
      outputFormat0.setNewLineAfterNTags((-1));
      outputFormat0.setIndentSize(0);
      int int0 = 9;
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "-encoding";
      stringArray0[3] = "-encoding";
      stringArray0[4] = "-encoding";
      stringArray0[5] = "-encoding";
      String string1 = "-indentSize";
      stringArray0[6] = "-indentSize";
      stringArray0[7] = "-encoding";
      stringArray0[8] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-encoding\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-trimText");
      outputFormat0.setIndent(true);
      outputFormat0.setEncoding("Z");
      outputFormat0.setTrimText(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-omitEncoding";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-trimText";
      stringArray0[5] = "-trimText";
      outputFormat0.parseOptions(stringArray0, 666);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 6);
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "";
      stringArray0[2] = "cG74IS1Nu$";
      stringArray0[3] = "e?:wq'K";
      stringArray0[4] = "-encoding";
      stringArray0[5] = ";op9c#<4y';;8n";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(1, int0);
  }
}
