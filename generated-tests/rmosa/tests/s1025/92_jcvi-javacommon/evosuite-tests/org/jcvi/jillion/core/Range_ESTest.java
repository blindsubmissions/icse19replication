/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:12:29 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775446L, (-2892L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2892 would make range [9223372036854775446 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.814359184750864
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.of((-32768L));
      Range.of((-1125L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(544L);
      boolean boolean0 = range0.equals("< Mv(^}gF%yV");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 653L, (-9223372036854775806L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 653, -9223372036854775806 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractEnd(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift(0L);
      long long1 = 25L;
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(25L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      long long1 = (-328L);
      range_Builder0.contractBegin(4294967295L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1291L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 653L, 653L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.737234329113671
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292139L);
      range0.getEnd();
      Range range1 = Range.ofLength(9223372034707292138L);
      range1.equals(range0);
      range1.equals((Object) null);
      range0.intersects(range1);
      String string0 = "iY;|yo3[=";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("iY;|yo3[=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.iY;|yo3[=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6812194104449634
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292139L);
      range0.getEnd();
      Range range1 = Range.ofLength(9223372034707292138L);
      range1.equals(range0);
      range0.endsBefore(range1);
      range1.equals((Object) null);
      String string0 = "iY;|yo3[=";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("iY;|yo3[=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.iY;|yo3[=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1 .. 0 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1 .. 0 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0008004527068843
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(12300L, 12300L);
      range0.getEnd(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(12301L, 12301L);
      range1.intersects(range0);
      range0.equals(range1);
      range1.equals(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6812194104449634
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292139L);
      range0.getEnd();
      Range range1 = Range.ofLength(9223372034707292138L);
      range1.equals(range0);
      range1.equals((Object) null);
      range1.isSubRangeOf(range0);
      String string0 = "iY;|yo3[=";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("iY;|yo3[=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.iY;|yo3[=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(4294967311L);
      range0.getEnd();
      Range range1 = Range.ofLength(4294967310L);
      range0.isSubRangeOf(range1);
      Range.Comparators.values();
      Range.Comparators.values();
      long long0 = range0.getEnd();
      assertEquals(4294967310L, long0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-328L);
      range_Builder0.expandEnd(4294967295L);
      range_Builder0.contractEnd(4294967295L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.split(127L);
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. -1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. -1 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7907565547836093
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292139L);
      range0.getEnd();
      Range range1 = Range.ofLength(9223372034707292138L);
      range1.equals(range0);
      range1.equals((Object) null);
      String string0 = "iY;|yo3[=";
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("iY;|yo3[=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.iY;|yo3[=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.toString();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.ofLength(0L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. -1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. -1 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8243659399169285
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 653L, 2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 653L, 4294967295L);
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      long long1 = range0.getBegin();
      assertEquals(653L, long1);
      
      range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      
      range0.getEnd();
      long long2 = range0.getEnd();
      assertEquals(2147483646L, long2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(804L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.809783478004049
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1011L), (-1011L));
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.contractEnd(0L);
      range_Builder0.contractEnd(0L);
      range_Builder0.expandBegin((-1012L));
      long long1 = 31L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(31L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2050L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2050L, 2741L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.expandBegin((-2092L));
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.of((-1739L));
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.equals(object1);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.24663267155535
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775456L, 9223372036854775456L);
      Range range1 = Range.of(9223372036854775456L);
      range1.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      boolean boolean1 = range0.startsBefore(range1);
      assertFalse(boolean1);
      
      long long0 = range1.getEnd();
      assertEquals(9223372036854775456L, long0);
      
      Range.Comparators.values();
      range0.getBegin();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.382470987527148
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      List<Range> list0 = range0.split(9223372036854775807L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.equals(range0);
      Range.of(2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("0N_#hXN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.0N_#hXN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2785017388158746
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      long long0 = range0.getEnd();
      assertEquals(4294967294L, long0);
      
      Range range1 = Range.of(80L, 80L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(2, list0.size());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.950425863741884
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.getEnd();
      Range range1 = Range.ofLength(4294967294L);
      range0.equals(range1);
      String string0 = "";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. -1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. -1 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6812194104449634
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292139L);
      range0.getEnd();
      Range.ofLength(9223372034707292138L);
      // Undeclared exception!
      try { 
        range0.split((-2235L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.803374042989372
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 12300L, 12300L);
      String string0 = "Of]O'TLF;\\9;*Xy8<S";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Object object0 = new Object();
      range0.equals("Of]O'TLF;9;*Xy8<S");
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("~ o3r7aHpn9ehGP0G4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.~ o3r7aHpn9ehGP0G4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 12300L, 12300L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Object object0 = new Object();
      range0.isEmpty();
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("~ o3r7aHpn9ehGP0G4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.~ o3r7aHpn9ehGP0G4
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.of(5753108694535L, 9223372036854773410L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854773410L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.983537295775117
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292139L);
      range0.getEnd();
      Range range1 = Range.ofLength(9223372034707292138L);
      range1.equals(range0);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        range1.split(9223372034707292138L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4294967341 would make range [9223372034707292138 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.100999862736636
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
      
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      Range range1 = Range.of(0L);
      range1.equals(range0);
      long long1 = range1.getEnd();
      assertEquals(0L, long1);
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      long long2 = range1.getBegin();
      assertEquals(0L, long2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(4294967311L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.876143157594077
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(1L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
      
      Range range1 = Range.of(0L);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range1.intersects(range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long1 = range1.getBegin();
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      long long2 = range1.getBegin();
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals(0L, long2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.846720212074426
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Range range0 = Range.of((-3268L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals((-3268L), long0);
      
      boolean boolean0 = range0.equals(object1);
      assertNotSame(object1, object0);
      assertFalse(range0.isEmpty());
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean0);
      
      long long1 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertTrue(long1 == long0);
      assertEquals((-3268L), long1);
      
      long long2 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
      assertEquals((-3268L), long2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.307419963759806
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(12300L, 12300L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(12301L, long0);
      
      Range range1 = Range.of(32768L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = range0.intersection(range1);
      assertNotNull(range2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(boolean0);
      
      Range range3 = Range.of(12301L, 12301L);
      assertNotNull(range3);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertFalse(range3.isEmpty());
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      
      boolean boolean1 = range0.equals(range3);
      assertNotSame(range0, range3);
      assertNotSame(range0, range1);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range3.isEmpty());
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = range3.equals(range_CoordinateSystem0);
      assertNotSame(range3, range0);
      assertNotSame(range3, range1);
      assertFalse(range3.isEmpty());
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1797932398070605
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(1L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
      
      Range range1 = Range.ofLength(0L);
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = range0.intersection(range1);
      assertNotNull(range2);
      assertSame(range1, range2);
      assertSame(range2, range1);
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        Range.parseRange("A$*6NR5p", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse A$*6NR5p into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-13L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      String string0 = "coordinateSystem can not be null";
      Long long0 = Long.getLong("coordinateSystem can not be null", (-13L));
      assertNotNull(long0);
      assertEquals((-13L), (long)long0);
      
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("coordinateSystem can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.coordinateSystem can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(range0));
      
      Range range1 = Range.ofLength(0L);
      assertNotNull(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = linkedList0.add(range1);
      assertSame(range1, range0);
      assertEquals(1, linkedList0.size());
      assertTrue(range1.isEmpty());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(range1));
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertNotNull(list0);
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(range1));
      assertTrue(list0.contains(range1));
      
      long long0 = range0.getLength();
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
      
      long long1 = range0.getEnd();
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
      assertEquals("[ 1 .. 0 ]/RB", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0064053887531395
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-2203L), 5738076309064L);
      assertNotNull(range0);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertTrue(boolean0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-2203L), 5738076309064L);
      assertNotNull(range1);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean1 = range0.equals(range1);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long0 = range0.getEnd();
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range0.equals((Object)range1));
      assertEquals(5738076309063L, long0);
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.754331703559254
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals((-1L), long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = range0.equals(object1);
      assertNotSame(object1, object0);
      assertTrue(range0.isEmpty());
      assertFalse(object1.equals((Object)object0));
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range range0 = Range.ofLength(1782L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9993L, 9976L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      
      List<Range> list0 = range0.complement(range1);
      assertNotNull(list0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = range1.equals((Object) null);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long0 = range1.getBegin();
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      assertEquals(2147483647L, long0);
      
      long long1 = range0.getBegin();
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
      assertTrue(long1 == long0);
      assertEquals(2147483647L, long1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertTrue(range0.isEmpty());
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of((-4889L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range range0 = Range.of(9223372036854775446L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 142L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8635991844539275
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2147483647L, 5738076309019L);
      assertNotNull(range0);
      assertSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(2147483647L, long0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      long long1 = range0.getBegin();
      assertSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertTrue(long1 == long0);
      assertEquals(2147483647L, long1);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range range0 = Range.ofLength(1798L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-1L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range1 = Range.of((-2147483648L), (-1L));
      assertNotNull(range1);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("0N_#hXN");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.0N_#hXN
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.7379755558057863
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(4294967294L, long0);
      
      Range range1 = Range.ofLength(4294967294L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range0.equals(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
      
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray1);
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray1.length);
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
      
      Range.Comparators[] range_ComparatorsArray2 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray2);
      assertNotSame(range_ComparatorsArray2, range_ComparatorsArray0);
      assertNotSame(range_ComparatorsArray2, range_ComparatorsArray1);
      assertEquals(4, range_ComparatorsArray2.length);
      assertFalse(range_ComparatorsArray2.equals((Object)range_ComparatorsArray0));
      assertFalse(range_ComparatorsArray2.equals((Object)range_ComparatorsArray1));
      
      long long1 = range1.getEnd();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(long1 == long0);
      assertEquals(4294967293L, long1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = range1.equals(object0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long2 = range1.getBegin();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(0L, long2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1011L), (-1011L));
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.isEmpty();
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
      
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray1);
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray1.length);
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
      
      long long0 = range0.getEnd();
      assertTrue(range0.isEmpty());
      assertEquals((-1012L), long0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.938859210866307
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-95L), (-95L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals((-96L), long0);
      
      long long1 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertTrue(long1 == long0);
      assertEquals((-96L), long1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertNotNull(string0);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertEquals("[ -96 .. -96 ]/0B", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-96L), (-95L));
      assertNotNull(range1);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string1 = range1.toString(range_CoordinateSystem2);
      assertNotNull(string1);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range1, range0);
      assertNotSame(range_CoordinateSystem2, range_CoordinateSystem1);
      assertSame(range_CoordinateSystem2, range_CoordinateSystem0);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range_CoordinateSystem2.equals((Object)range_CoordinateSystem1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[ -96 .. -95 ]/RB", string1);
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Range.parseRange("[ -96 .. -96 ]/0B", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -96 .. -96 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("ghc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.ghc
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.622491032175586
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292139L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Long long0 = Long.valueOf(9223372034707292139L);
      assertNotNull(long0);
      assertEquals(9223372034707292139L, (long)long0);
      
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      long long1 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(9223372034707292138L, long1);
      
      Range range1 = Range.ofLength(9223372034707292138L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertTrue(range1.equals((Object)range0));
      
      boolean boolean1 = range1.equals(range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = range1.equals((Object) null);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertTrue(range1.equals((Object)range0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = "iY;|yo3[=";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("iY;|yo3[=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.iY;|yo3[=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Range range1 = Range.ofLength(0L);
      assertNotNull(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range1.equals((Object) null);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-32765L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range range0 = Range.of(1798L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8647385121905686
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-1L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals((-1L), long0);
      
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
      
      // Undeclared exception!
      try { 
        Range.parseRange("0Nr5,3VGtJ=f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.062463874143123
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(5753108694535L, 9223372036854773410L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertFalse(range0.isEmpty());
      assertEquals("[ 5753108694535 .. 9223372036854773410 ]/0B", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 5753108694535 .. 9223372036854773410 ]/0B", range_CoordinateSystem1);
      assertNotNull(range1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertTrue(range1.equals((Object)range0));
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertNotSame(range0, range1);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertFalse(range0.isEmpty());
      assertTrue(range0.equals((Object)range1));
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertEquals(9223372036854773411L, long0);
      
      long long1 = range0.getEnd();
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertTrue(range0.equals((Object)range1));
      assertFalse(long1 == long0);
      assertEquals(9223372036854773410L, long1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.909364480881688
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(12300L, 12300L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(12301L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range1 = Range.of(12301L, 12301L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean1 = range1.equals((Object) null);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.equals(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = range1.equals(range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.7920474405363453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(81L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(81L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      long long0 = range1.getEnd();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertEquals(81L, long0);
      
      boolean boolean0 = range0.equals(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      Range range2 = Range.of(81L);
      assertNotNull(range2);
      assertSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range0));
      
      long long1 = range0.getEnd();
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(long1 == long0);
      assertEquals(79L, long1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8979325974734658
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Range range0 = Range.ofLength(9223372036854775446L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(9223372036854775445L, long0);
      
      long long1 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of(0L);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range1.intersects(range0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertTrue(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertEquals((-1L), long0);
      
      Range range2 = Range.of(0L);
      assertNotNull(range2);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range0));
      
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(98L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(98L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      long long0 = range1.getEnd();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertEquals(98L, long0);
      
      boolean boolean0 = range0.startsBefore(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      Range range2 = Range.of(98L);
      assertNotNull(range2);
      assertNotSame(range2, range0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(9223372034707292191L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5738076309021L, 5738076309021L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.5553480614894135
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854743050L, 9223372036854743050L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(9223372036854743050L);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      List<Range> list0 = range0.complement(range1);
      assertNotNull(list0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2319L, 5738076309006L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(5738076309006L, long0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long1 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertFalse(long1 == long0);
      assertEquals(2319L, long1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775446L, 9223372036854775446L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 9223372036854775446L, 9223372036854775446L);
      assertNotNull(range1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range1.equals(range0);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range0, range1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      boolean boolean1 = range1.equals(range_CoordinateSystem1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean2 = range1.equals(object1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertNotSame(object1, object0);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-1L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertFalse(range0.isEmpty());
      assertEquals("[ 0 .. 0 ]/RB", string0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.891938904034438
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(2147483647L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      
      String string0 = "(jI";
      // Undeclared exception!
      try { 
        Range.parseRange("(jI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (jI into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 653L, 2147483647L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.108199302477754
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2266L));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range0.endsBefore(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      long long0 = range1.getEnd();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertEquals((-2266L), long0);
      
      long long1 = range0.getBegin();
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(long1 == long0);
      assertEquals((-2147483648L), long1);
      
      long long2 = range0.getEnd();
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-2147483648L), long2);
      
      long long3 = range1.getEnd();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertTrue(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertEquals((-2266L), long3);
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(12300L, 12300L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals("cDe=");
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range1 = Range.of(2609L, 12300L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean1 = range1.equals(range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.equals((Object) null);
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 12300L, 12300L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-128L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9603694574246116
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals((-129L), long0);
      
      long long1 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertTrue(long1 == long0);
      assertEquals((-129L), long1);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertNotNull(string0);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertEquals("[ -129 .. -129 ]/0B", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, (-252L), (-128L));
      assertNotNull(range1);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string1 = range1.toString(range_CoordinateSystem2);
      assertNotNull(string1);
      assertSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range1, range0);
      assertSame(range_CoordinateSystem2, range_CoordinateSystem0);
      assertNotSame(range_CoordinateSystem2, range_CoordinateSystem1);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range_CoordinateSystem2.equals((Object)range_CoordinateSystem1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("[ -252 .. -128 ]/RB", string1);
      
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long2 = range0.getBegin();
      assertSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals((-129L), long2);
      
      long long3 = range1.getEnd();
      assertSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(long3 == long1);
      assertTrue(long3 == long0);
      assertTrue(long3 == long2);
      assertEquals((-129L), long3);
      
      long long4 = range0.getEnd();
      assertSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertTrue(long4 == long3);
      assertTrue(long4 == long1);
      assertTrue(long4 == long0);
      assertTrue(long4 == long2);
      assertEquals((-129L), long4);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.126004937855463
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-161L), (-161L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-161L));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range1.intersects(range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      long long0 = range1.getEnd();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertEquals((-161L), long0);
      
      boolean boolean1 = range1.equals(range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long1 = range1.getEnd();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertTrue(long1 == long0);
      assertEquals((-161L), long1);
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("(d+)s*-s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.(d+)s*-s*(d+)
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(2147482995L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean1 = range0.equals(object1);
      assertNotSame(object1, object0);
      assertFalse(range0.isEmpty());
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(2147482995L, long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-12L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals((-12L), long0);
      
      Range range1 = Range.of((-27L));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range0.equals(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      long long1 = range1.getBegin();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(long1 == long0);
      assertEquals((-27L), long1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1011L), (-1011L));
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 5738076309019L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(2147483647L, long0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(4294967294L, long0);
      
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
      
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray1);
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray1.length);
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5738076309019L, 9223372034707292161L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(5738076309019L, long0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      long long1 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertTrue(long1 == long0);
      assertEquals(5738076309019L, long1);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.parseRange("b7 -59aP)8{/n", range_CoordinateSystem0);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(2147483647L, long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      
      boolean boolean1 = range0.equals(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      long long1 = range1.getBegin();
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      assertTrue(long1 == long0);
      assertEquals(2147483647L, long1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Range.of(32767L, (-65533L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 5735928825373L, 5735928825373L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(5735928825373L, 5735928825373L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range1.intersects(range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      long long0 = range1.getEnd();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertEquals(5735928825373L, long0);
      
      boolean boolean1 = range1.equals(range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.1644328169396343
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-2147483659L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483659L), (-1365L));
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range0.startsBefore(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      boolean boolean1 = range1.equals(range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-32773L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 12300L, 12300L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Range range1 = Range.of(range_CoordinateSystem0, 12300L, 12300L);
      assertNotNull(range1);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertEquals("[ 12300 .. 12301 ]/SB", string0);
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 12300 .. 12300 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 12300 .. 12300 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2319L, 5738076309006L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(5738076309006L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 2319L, 5738076309006L);
      assertNotNull(range1);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range range1 = Range.ofLength(0L);
      assertNotNull(range1);
      assertSame(range1, range0);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-2147483659L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.9143943095713007
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2319L, 5738076309021L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(5738076309020L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 2319L, 5738076309020L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Iterator<Long> iterator0 = range1.iterator();
      assertNotNull(iterator0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      boolean boolean1 = range0.equals(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long long1 = range1.getBegin();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(long1 == long0);
      assertEquals(2318L, long1);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.8492350266892
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(4294967311L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Spliterator<Long> spliterator0 = range0.spliterator();
      assertNotNull(spliterator0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(4294967310L, long0);
      
      Range range1 = Range.ofLength(4294967310L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range0.equals(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
      
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray1);
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray1.length);
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
      
      long long1 = range0.getEnd();
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertTrue(long1 == long0);
      assertEquals(4294967310L, long1);
      
      long long2 = range0.getEnd();
      assertNotSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(4294967310L, long2);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(2147483647L, 2147483647L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Range range2 = Range.of(2147483647L, 4294967295L);
      assertNotNull(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      
      Range range3 = Range.of(255L);
      assertNotNull(range3);
      assertFalse(range3.isEmpty());
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 2147483647L, 4294967295L);
      assertNotNull(range4);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertFalse(range4.isEmpty());
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      
      boolean boolean0 = range4.equals(range2);
      assertNotSame(range2, range1);
      assertNotSame(range2, range0);
      assertNotSame(range2, range4);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range4, range0);
      assertNotSame(range4, range2);
      assertNotSame(range4, range1);
      assertFalse(range2.isEmpty());
      assertFalse(range4.isEmpty());
      assertFalse(range2.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range4));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range4.equals((Object)range0));
      assertFalse(range4.equals((Object)range2));
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.equals((Object)range3));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1011L), (-1011L));
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray0.length);
      
      long long0 = range0.getBegin();
      assertTrue(range0.isEmpty());
      assertEquals((-1011L), long0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotNull(range_CoordinateSystemArray1);
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray1.length);
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.026343894846193
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2319L, 5738076309021L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(5738076309021L, long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 2319L, 5738076309021L);
      assertNotNull(range1);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      Iterator<Long> iterator0 = range1.iterator();
      assertNotNull(iterator0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      
      boolean boolean1 = range1.endsBefore(range0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.equals(range1);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      long long1 = range1.getBegin();
      assertNotSame(range1, range0);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range0));
      assertFalse(long1 == long0);
      assertEquals(2318L, long1);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertNotNull(range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray0.length);
  }
}
