/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:07:19 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(0);
      Party party0 = player0.head;
      player0.boss = null;
      player0.remove((Party) null);
      player0.head = null;
      player0.remove((Party) null);
      player0.getTimeOfDeath();
      player0.getX();
      player0.reset(true);
      float float0 = player0.getX();
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals("Player0", player0.toString());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.head;
      player0.boss = null;
      player0.remove(player0);
      player0.head = null;
      player0.remove((Party) null);
      player0.reset(true);
      float float0 = player0.getX();
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals("Player-1", player0.getName());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 819;
      Player player0 = new Player(819);
      player0.setX(819);
      player0.gangBoss();
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-15616), (String) null, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 470);
      player0.getStrength();
      player0.getStrength();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-236L));
      Player player0 = new Player((-453), "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-453));
      Player player1 = new Player(2);
      player0.setConnected(false);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis((-1L));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 65, (byte) (-31));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, (byte) (-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(3280);
      player0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player1 = new Player(5);
      player0.isJoinOK(player1, true);
      byte byte0 = (byte)20;
      // Undeclared exception!
      try { 
        player1.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.type();
      assertEquals(5, int0);
      
      String string0 = player0.getName();
      assertEquals("Player-1", string0);
      
      int int1 = player0.getPictureId();
      assertEquals(0, int1);
      
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      String string1 = player0.getIP();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      player0.setY(1.0F);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = Packable.ACTION;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ");
      Player player0 = new Player((-2640), "", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 574, 574);
      int int1 = player0.gangStrength();
      assertEquals(574, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(574, int1);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte byte0 = (byte)20;
      Player player0 = new Player(0, "", 1292);
      Player player1 = new Player(10496, "", (-1));
      Player player2 = new Player(1280, (String) null, (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      // Undeclared exception!
      try { 
        player2.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(1638);
      player0.setZ(1638);
      Party party0 = player0.head;
      player0.remove((Party) null);
      player0.reset(false);
      player0.isConnected();
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(3280);
      player0.setJoinOK(player0, true);
      player0.isJoinOK(player0, true);
      Player player1 = new Player(2352);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      player1.getY();
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(2727, "9q HW}!oG3fqd(+\">NV", "9q HW}!oG3fqd(+\">NV", 2072, (-509));
      Party party0 = new Party((short)4919);
      player0.boss = party0;
      player0.boss.next = party0;
      party0.next = (Party) player0;
      player0.prev = party0;
      player0.setZ(2727);
      player0.setMoney(0.0F);
      player0.getIP();
      player0.getY();
      player0.getX();
      party0.add(player0.boss);
      player0.setDead((long) (-509), true);
      player0.setDead();
      player0.getName();
      player0.isDead();
      player0.setX((-639.0F));
      assertEquals(2727.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = player0.prev;
      player0.pack();
      player0.getMoney();
      player0.getMoney();
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      player0.pack();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-427), "", "state.Party", 3);
      float float0 = player0.getZ();
      assertEquals(3, player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals("", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((byte)20);
      Player player1 = new Player(5127);
      player0.setJoinOK(player1, true);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertFalse(boolean0);
      
      Player player2 = new Player(1900);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertFalse(player2.isDead());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals("Player1900", player2.toString());
      assertTrue(player2.isConnected());
      assertEquals(1, player2.getStrength());
      assertEquals("0.0.0.0", player2.getIP());
      assertEquals(0, player2.getPictureId());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(3280);
      player0.setJoinOK(player0, true);
      player0.isJoinOK(player0, true);
      Player player1 = new Player();
      Player player2 = new Player();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-27);
      player2.unpack(byteArray0);
      player0.isDead();
      Player player3 = new Player((byte)18);
      player3.isJoinOK(player1, false);
      player2.unpack(byteArray0);
      player2.isConnected();
      byte[] byteArray1 = player1.pack();
      player3.isJoinOK(player0, false);
      player1.isJoinOK(player2, false);
      player0.unpack(byteArray1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      player0.isJoinOK(player1, true);
      System.setCurrentTimeMillis((byte)79);
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals("Player-1", player0.toString());
      assertFalse(boolean0);
  }
}
