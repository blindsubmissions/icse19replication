/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:06:23 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(468);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 26, "Tb`E", "Tb`E", "%kROg+", "%kROg+");
      fieldWriter0.visitEnd();
      fieldWriter0.visitEnd();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      String string0 = "<GSNt .";
      int int0 = 4096;
      String string1 = "}~Smqp|PZj6*#";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "<GSNt .", "<GSNt .", "}~Smqp|PZj6*#", "<GSNt .");
      ByteVector byteVector0 = new ByteVector();
      int int1 = (-1246);
      int int2 = 49;
      Attribute attribute0 = new Attribute("<GSNt .");
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6128694524619496
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "0b#@~rM>Jz-l(A!AF", "<GSNt .", "|", "0b#@~rM>Jz-l(A!AF");
      ByteVector byteVector0 = new ByteVector();
      byteVector0.put12(1, 4);
      ByteVector byteVector1 = new ByteVector();
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 5, ">C8;Ows,Yhzw?SdG\"", ">C8;Ows,Yhzw?SdG\"", "Synthetic", "Synthetic");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-9));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "<GSNt .", "", "Synthetic", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
      
      ByteVector byteVector0 = new ByteVector();
      byteVector0.put12(1501, 41);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 49, "E$^RTQ-9k/b?c$M-", "", (String) null, "");
      FieldWriter fieldWriter2 = fieldWriter0.next;
      int int1 = fieldWriter2.getSize();
      assertEquals(16, int1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0360334832009355
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "<GSNt .", "", "Synthetic", "");
      fieldWriter0.getSize();
      fieldWriter0.visitAnnotation("", true);
      ByteVector byteVector0 = new ByteVector(0);
      fieldWriter0.put(byteVector0);
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(42, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1189);
      String string0 = "f\"`If02rO?,";
      classWriter0.visitField(1189, "RuntimeInvisibleAnnotations", "f\"`If02rO?,", (String) null, "RuntimeInvisibleAnnotations");
      classWriter0.newClassItem("");
      FieldWriter fieldWriter0 = classWriter0.firstField;
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("2a%1D8%u.b#l]x");
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.visitAnnotation("2a%1D8%u.b#l]x", true);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2207);
      Object object0 = new Object();
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "org.apache.commons.io.filefilter.PrefixFileFilter", "Deprecated", "ConstantValue", (Object) null);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("Deprecated", false);
      AnnotationVisitor annotationVisitor1 = fieldWriter0.visitAnnotation("i{h|e/7'", false);
      assertFalse(annotationVisitor1.equals((Object)annotationVisitor0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-647), "2:n<=kKC6N8A", "2:n<=kKC6N8A", "Synthetic", "Synthetic");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putUTF8("Signature");
      ByteVector byteVector2 = byteVector1.put12((-1497), 267386880);
      fieldWriter0.put(byteVector2);
      assertSame(byteVector2, byteVector1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-647), "Synthetic", "Synthetic", "Synthetic", "Synthetic");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(8);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putInt((-1));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2911, "The array of suffixes must not be null", "Synthetic", "Synthetic", (Object) null);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      fieldWriter1.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2248);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "-9WBqy-M*#~q{.K02$T", "LYa}E,Z;fsoV", "LYa}E,Z;fsoV", "-9WBqy-M*#~q{.K02$T");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putLong(2);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2248);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1782), "", ":}%TPNaB", "AT=^jS}*a}", "Signature");
      fieldWriter0.next = null;
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 201, "Signature", "Signature", "Signature", (Object) null);
      FieldWriter fieldWriter2 = classWriter0.firstField;
      fieldWriter0.next.getSize();
      ByteVector byteVector0 = null;
      try {
        byteVector0 = new ByteVector((-312));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(537);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(537, "RuntimeInvisibleAnnotations", "f\"`If02rO?,", (String) null, "RuntimeInvisibleAnnotations");
      classWriter0.addUninitializedType("RuntimeInvisibleAnnotations", 537);
      FieldWriter fieldWriter0 = classWriter0.firstField;
      fieldVisitor0.visitAnnotation("W8C0mG;O-CJc<Vv{tD", false);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putInt(2);
      fieldWriter0.put(byteVector1);
      assertSame(fieldWriter0, fieldVisitor0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0727396460638965
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(2248);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1782), "", ":}%TPNaB", "AT=^jS}*a}", "Signature");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      classWriter0.visit((-1), (-102), ":}%TPNaB", "", "Signature", stringArray0);
      fieldWriter0.next = null;
      fieldWriter0.visitAnnotation("+86XjDEm\"L*[f=Nx_8V", false);
      fieldWriter0.getSize();
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.putLong((-4758L));
      ByteVector byteVector1 = byteVector0.put12(1, 42);
      fieldWriter0.put(byteVector0);
      classWriter0.visit(1, 2248, "", "^,,M/ID!C", "Ud}0I7(QLi=", (String[]) null);
      fieldWriter0.visitAnnotation("hv", false);
      byteVector1.put11(42, 64);
      fieldWriter0.getSize();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 1, "Signature", "", "Deprecated", byteVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ByteVector@1
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
