/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:53:32 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONTokener jSONTokener0 = new JSONTokener(",\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("getlongValue");
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject.quote("fM0^U pVcuM^}n");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      long long0 = jSONObject0.optLong("fM0^U pVcuM^}n", (-3508L));
      assertEquals((-3508L), long0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("isreplaceAll");
      assertEquals("\"isreplaceAll\"", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(3546);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = ",\n";
      Byte byte0 = new Byte((byte)65);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",\n";
      stringArray0[1] = ",\n";
      stringArray0[2] = ",\n";
      stringArray0[3] = ",\n";
      stringArray0[5] = ",\n";
      stringArray0[6] = ",\n";
      stringArray0[7] = ",\n";
      stringArray0[8] = ",\n";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.put(",\n", (Object) null);
      try { 
        Integer.decode("W1'ei_beDOgvjRWDeY#");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"W1'ei_beDOgvjRWDeY#\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONObject.quote("8/Nk`(fS,+PhGq");
      Byte byte0 = new Byte((byte)123);
      Byte.compare((byte)88, (byte)88);
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      Float float0 = new Float(0.0F);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JSONObject.quote("fM0^U pVcuM^}n");
      assertEquals("\"fM0^U pVcuM^}n\"", string0);
      
      Boolean boolean0 = new Boolean("\"fM0^U pVcuM^}n\"");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString((-1067), 32);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      JSONObject.valueToString(jSONObject0, 59, 236);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JSONObject.quote("fM0^U pVcuM^}n");
      JSONObject.testValidity("fM0^U pVcuM^}n");
      Long long0 = new Long((-554L));
      String string1 = JSONObject.valueToString(long0, 114, 114);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0, 1, 1);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("o 0S[oNMJ9?[nx{_Lv8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o 0S[oNMJ9?[nx{_Lv8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("hel.jsonJSOEception");
      jSONObject0.put("hel.jsonJSOEception", (Object) boolean0);
      try { 
        jSONObject0.getJSONObject("hel.jsonJSOEception");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hel.jsonJSOEception\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = JSONObject.quote("fM0^U pVcuM^}n");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = JSONObject.quote("<o{iY");
      Float float0 = new Float(1.0F);
      String string1 = JSONObject.valueToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.clear();
      JSONObject.valueToString(linkedList0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3337745393610478
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = null;
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3545061457128476
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject.testValidity("\",\n\"");
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      jSONObject0.accumulate(",\n", ",\n");
      JSONObject.testValidity("\",\n\"");
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.min(0.0, 3391.651508332546);
      Double.max(3391.651508332546, (-2503.209));
      Double.sum(0.0, 0.0);
      Double.max(0.0, (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optInt("5qja4d#>", 120);
      try { 
        jSONObject0.getBoolean("AOI9w-F%|,rXrYfc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"AOI9w-F%|,rXrYfc\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\",\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \",
         // \"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[4] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[5] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[8] = "JSONArray initial value should be a string or collection or array.";
      jSONObject0.has("JSONArray initial value should be a string or collection or array.");
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("B\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 16, 16);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("{?y:11ay_-8e3_9GY;*");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 18);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("0", 2147483645);
      JSONObject jSONObject2 = jSONObject1.put("istoOctalString", (long) 2147483645);
      jSONObject2.getInt("0");
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject.doubleToString(0.5655352303610471);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      int int0 = 92;
      jSONArray0.optJSONObject(92);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0.5655352303610471";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ",\n";
      stringArray0[1] = ",\n";
      stringArray0[2] = "\",\n\"";
      stringArray0[3] = "\",\n\"";
      stringArray0[4] = ",\n";
      stringArray0[5] = ",\n";
      stringArray0[6] = ",\n";
      JSONObject.valueToString("\",\n\"");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = JSONObject.valueToString(jSONObject1, 16, 16);
      assertEquals("{}", string1);
      
      String string2 = JSONObject.valueToString("{}", 1, 16);
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = JSONObject.quote("fM0^U pVcuM^}n");
      assertEquals("\"fM0^U pVcuM^}n\"", string0);
      
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean("\"fM0^U pVcuM^}n\"", false);
      assertFalse(boolean0);
      
      JSONObject.numberToString(float0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 30, 30);
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>(22, 30);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = new Double(0.0);
      hashMap0.put((Object) null, double0);
      Double double1 = new Double(0.0);
      hashMap0.put((Object) null, double1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)26);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("wheel.json.JSONException");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      JSONObject.getNames((Object) null);
      Byte byte0 = new Byte((byte)118);
      byte byte1 = (byte)0;
      Byte.toUnsignedLong((byte)0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.optString("A:;6$m1A<XKisfS<");
      jSONObject0.write(writer0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.getBoolean("for");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"for\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8840633284714166
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isma^";
      JSONObject jSONObject0 = new JSONObject("isma^", stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("getcompare", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isma^", (Object) "isma^");
      jSONObject1.optLong("0");
      try { 
        jSONObject1.getBoolean("isma^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isma^\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.704111275729657
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject.quote("fM0^U pVcuM^}n");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getBoolean("fM0^U pVcuM^}n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fM0^U pVcuM^}n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.80733657693373
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "isma^";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isma^";
      JSONObject jSONObject0 = new JSONObject("isma^", stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("getcompare", (Collection) linkedList0);
      try { 
        jSONObject1.getLong("getcompare");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcompare\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8840633284714166
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isma^";
      JSONObject jSONObject0 = new JSONObject("isma^", stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("getcompare", (Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("isma^", (Object) "isma^");
      jSONObject1.optInt("isma^", (-472));
      try { 
        jSONObject1.getBoolean("isma^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isma^\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Double double0 = new Double((-1.0));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = JSONObject.quote("&T&}M9]lHwTL`LY/qh}");
      assertEquals("\"&T&}M9]lHwTL`LY/qh}\"", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{tyw");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {tyw
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{?y:11ay_-8e3_9GY;*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 19 of {?y:11ay_-8e3_9GY;*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "{bx=G";
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{bx=G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 5 of {bx=G
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      jSONArray0.put((Map) hashMap0);
      String string0 = jSONArray0.toString(4174, 4174);
      String string1 = JSONObject.valueToString(jSONArray0, 743, 743);
      assertEquals("[{}]", string1);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6661022550876021
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject.doubleToString(0.2677510856881205);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("0.2677510856881205");
      try { 
        jSONObject0.getBoolean("zY*bBMP/E:j,xb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zY*bBMP/E:j,xb\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = JSONObject.quote("<o{iY");
      assertEquals("\"<o{iY\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 88, 88);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Double double0 = new Double(0.0);
      Double.min(0.0, 3391.651508332546);
      Double.sum(0.0, 0.0);
      Double.max(0.0, (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.put((String) null, 885L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.310262480099327
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\",\n\"", (Object) "\",\n\"");
      JSONObject.quote("?T_n=yZv)i#U9T6Z9");
      try { 
        jSONObject0.getBoolean("\",\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\",\\n\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.484925891109223
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "f>87Xc>[Kyw[09O4[b *";
      JSONObject jSONObject1 = jSONObject0.put("f>87Xc>[Kyw[09O4[b *", 896);
      short short0 = (short)913;
      try { 
        jSONObject1.getBoolean("f>87Xc>[Kyw[09O4[b *");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f>87Xc>[Kyw[09O4[b *\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("cop");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{Vy:1;yu-8e3_S>GY;k", (-618));
      jSONObject0.optDouble("{Vy:1;yu-8e3_S>GY;k", 0.0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('\u0011');
      String string0 = "] is not a JSONArray.";
      // Undeclared exception!
      try { 
        stringWriter0.write((char[]) null, 123, 123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      assertFalse(jSONObject2.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      boolean boolean0 = jSONObject0.isNull("{}");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = JSONObject.quote(")</mphi,A;}o`95");
      assertEquals("\")<\\/mphi,A;}o`95\"", string0);
      
      String string1 = JSONObject.quote((String) null);
      assertEquals("\"\"", string1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("W0", 2147483645);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject0.accumulate("W0", object0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = ",\n";
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      jSONObject0.toString();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7041112757296575
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = JSONObject.quote("soWj)AR");
      assertEquals("\"soWj)AR\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"soWj)AR\"");
      int int0 = jSONObject0.optInt("l");
      assertEquals(0, int0);
      
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject.quote("]is not a Boolean.");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      Boolean boolean0 = Boolean.TRUE;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(1243);
      jSONArray0.put(1243, 1243);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1244, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
      
      String string0 = JSONObject.doubleToString(1243);
      assertEquals("1243", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("|p\";*b!-)uBM*A}LX^o", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Float.min(0.0F, (-3238.4875F));
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoUnsignedString", true);
      String string0 = JSONObject.quote("istoUnsignedString");
      String string1 = jSONObject0.optString("istoUnsignedString", "\"istoUnsignedString\"");
      assertFalse(string1.equals((Object)string0));
      
      String string2 = jSONObject1.optString("java.lang.Boolean@0000000002", "\"istoUnsignedString\"");
      String string3 = JSONObject.quote("istoUnsignedString");
      assertTrue(string3.equals((Object)string2));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, (-377), (-377));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.80733657693373
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isma^";
      JSONObject jSONObject0 = new JSONObject("isma^", stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("getcompare", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(19);
      StringWriter stringWriter1 = stringWriter0.append('>');
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "isma^");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0);
      jSONObject1.write(stringWriter2);
      JSONObject jSONObject2 = jSONObject0.put("isma^", (Object) "isma^");
      try { 
        jSONObject2.getBoolean("isma^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isma^\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      short short0 = (short)3318;
      Short short1 = new Short((short)3318);
      JSONObject jSONObject1 = jSONObject0.put("d-!", (Object) "d-!");
      JSONObject jSONObject2 = jSONObject1.put("true", (Object) jSONObject0);
      StringWriter stringWriter0 = new StringWriter((short)3318);
      StringWriter stringWriter1 = stringWriter0.append('v');
      // Undeclared exception!
      jSONObject2.write(stringWriter1);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "hel.jsonJSOEception";
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("hel.jsonJSOEception");
      JSONObject jSONObject1 = jSONObject0.put("hel.jsonJSOEception", (Object) boolean0);
      Float float0 = new Float(434.828642149);
      JSONObject jSONObject2 = new JSONObject(float0);
      try { 
        jSONObject1.append("hel.jsonJSOEception", jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[hel.jsonJSOEception] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean("o 0S[oNMJ9?[nx{_Lv8");
      Boolean.logicalXor(true, false);
      jSONObject0.append("hel.jsonJSOEception", boolean0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("hel.jsonJSOEception");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "\\ue[8";
      JSONObject jSONObject1 = jSONObject0.put(string0, 896);
      jSONObject1.getDouble(string0);
      String string1 = null;
      try { 
        jSONObject1.put((String) null, (Object) jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      JSONObject.valueToString(jSONObject0, 59, 218);
      Float float0 = new Float((float) 59);
      Float.max(59, 218);
      JSONObject.valueToString(float0, 218, 59);
      Integer integer0 = new Integer(59);
      JSONObject.testValidity(integer0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = new Object();
      String string0 = JSONObject.doubleToString((-118545668));
      assertEquals("-1.18545668E8", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\",\n\"", (Object) "\",\n\"");
      try { 
        jSONObject0.getJSONArray("\",\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\",\\n\\\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(",\n");
      jSONObject0.put("\",\n\"", (Object) boolean0);
      String string0 = JSONObject.quote("\",\n\"");
      assertEquals("\"\\\",\\n\\\"\"", string0);
      
      boolean boolean1 = jSONObject0.getBoolean("\",\n\"");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.append("min", object0);
      jSONObject0.accumulate("min", "~31EfGTU!TwLn1Y8~hM");
      jSONObject0.put("~31EfGTU!TwLn1Y8~hM", true);
      Float float0 = new Float((-1.0F));
      JSONObject.testValidity("min");
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("min", "min");
      jSONObject1.append("min", jSONObject0);
      Short short0 = new Short((short) (-2901));
      Object object1 = new Object();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("min", jSONObject0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("min");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.80733657693373
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Short.compare((short)55, (short)3);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{bE=G";
      JSONObject jSONObject0 = new JSONObject("{bE=G", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("{bE=G", (Object) "{bE=G");
      jSONObject0.put("{bE=G", true);
      JSONObject.quote("{bE=G");
      jSONObject1.getBoolean("{bE=G");
      JSONObject.quote("{bE=G");
      Long long0 = new Long(52);
      String string0 = JSONObject.numberToString(long0);
      Float float0 = new Float(2189.2F);
      String string1 = JSONObject.valueToString(float0, (short)55, 2);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("hel.jsonJSOEception");
      JSONObject jSONObject1 = jSONObject0.put("hel.jsonJSOEception", (Object) boolean0);
      jSONObject1.putOpt("hel.jsonJSOEception", jSONObject0);
      jSONObject0.getJSONObject("hel.jsonJSOEception");
      jSONObject0.accumulate("getlogicalOr", "getlogicalOr");
      JSONObject.testValidity("hel.jsonJSOEception");
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("min", 2271L);
      jSONObject1.put("toL", (double) 2271L);
      JSONObject.quote("min");
      JSONObject jSONObject2 = jSONObject0.accumulate("\"min\"", jSONObject0);
      Long long0 = new Long(2271L);
      jSONObject2.append("spl", long0);
      jSONObject0.optJSONObject("\"min\"");
      Long long1 = Long.valueOf((long) 616);
      assertEquals(616L, (long)long1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.47413931305783735
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.toString();
      jSONArray0.put(1103, (Object) "getparseFloat");
      jSONArray0.put(34, (double) 34);
      jSONArray0.optBoolean(16);
      Float float0 = new Float((double) 16);
      JSONObject.testValidity(float0);
      Double double0 = new Double((-104.15487));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{?y:e1;}_-8e3_S>GY;k");
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject jSONObject2 = new JSONObject(jSONArray0);
      assertEquals(1, jSONObject2.length());
  }
}
