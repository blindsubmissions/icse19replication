/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:20:51 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.ContainerOrderFocusTraversalPolicy;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.ColorModel;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.ParsePosition;
import java.time.Clock;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import javax.swing.AbstractButton;
import javax.swing.DropMode;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JTextPane;
import javax.swing.MenuSelectionManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.BevelBorder;
import javax.swing.border.Border;
import javax.swing.event.MenuKeyListener;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.DefaultImageHandler;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xerces.dom.PSVIDocumentImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getAction();
      BasicScrollBarUI basicScrollBarUI0 = new BasicScrollBarUI();
      int int0 = 1825;
      int int1 = 0;
      // Undeclared exception!
      try { 
        basicScrollBarUI0.preferredLayoutSize(jDayChooser0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicScrollBarUI", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6440131694248166
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775793L));
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.red;
      float[] floatArray0 = new float[6];
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) 12311;
      floatArray1[1] = (float) 12311;
      floatArray1[2] = (float) 12311;
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      floatArray1[3] = (float) 12311;
      floatArray1[4] = (float) 12311;
      floatArray1[5] = (float) (-452);
      floatArray1[6] = (float) (-9223372036854775793L);
      Color.RGBtoHSB((-452), 12311, (-452), floatArray1);
      Color.RGBtoHSB(12311, 3454, 12311, floatArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)105;
      byteArray0[6] = (byte) (-91);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(2, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.isDecorationBackgroundVisible();
      int int0 = 9985;
      char char0 = 's';
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 9985, 9985, 9985, 9985, 's', 9985);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createImage(5, 5);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.addListeners(5);
      jDayChooser0.setDay(5);
      System.setCurrentTimeMillis(1000L);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = (-811);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-811), false, jDayChooser0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setName("k}aEptfshTK2py|3Wl");
      jDayChooser0.setDecorationBordersVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, 5, 5, 31, 5);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.createImage(5, 5);
      jDayChooser0.addListeners(5);
      jDayChooser0.setDay(5);
      assertEquals(5, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setVisible(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setFocus();
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      short short0 = (short)5461;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser1, (short)5461, (String) null);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = MapView.standardNodeTextColor;
      int int0 = (-3279);
      jDayChooser0.setMonth((-3279));
      jDayChooser0.isDecorationBordersVisible();
      Locale locale0 = Locale.ENGLISH;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getRoot();
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.createImage(5, 5);
      jDayChooser0.requestFocus(false);
      jDayChooser0.addListeners(5);
      jDayChooser0.setDay(5);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(5, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7622091045067054
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(11);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getLocale();
      jDayChooser0.drawDays();
      jDayChooser0.setMonth(11);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(49);
      Locale locale0 = Locale.CANADA_FRENCH;
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      assertNull(jDayChooser1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      assertNull(jYearChooser0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.FRENCH;
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      locale1.getUnicodeLocaleAttributes();
      locale0.getDisplayScript(locale1);
      jDayChooser0.drawWeeks();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale1;
      objectArray0[1] = (Object) locale1;
      objectArray0[2] = (Object) set0;
      JList<Object> jList0 = new JList<Object>(objectArray0);
      jList0.firePropertyChange("day", false, false);
      Color color0 = jList0.getSelectionBackground();
      color0.getColorSpace();
      color0.getColorSpace();
      color0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.isWeekOfYearVisible();
      int int0 = (-56);
      JYearChooser jYearChooser0 = new JYearChooser();
      FocusEvent focusEvent0 = new FocusEvent(jList0, (-56), false, jYearChooser0);
      MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        DropMode.valueOf("year");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant javax.swing.DropMode.year
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 5;
      jDayChooser0.createImage(5, 5);
      jDayChooser0.decorationBordersVisible = false;
      jDayChooser0.addListeners(5);
      Color color0 = jDayChooser0.getSundayForeground();
      ColorModel.getRGBdefault();
      int int1 = (-560);
      BevelBorder bevelBorder0 = null;
      try {
        bevelBorder0 = new BevelBorder((-560), (Color) null, color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.border.BevelBorder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.selectedColor = null;
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser1.getMinSelectableDate();
      jDayChooser0.defaultMinSelectableDate = date0;
      jDayChooser0.createImage(5, 5);
      jDayChooser0.addListeners(5);
      jDayChooser0.setDay(5);
      jDayChooser0.setEnabled(false);
      System.setCurrentTimeMillis(5);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.CANADA_FRENCH;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      Locale.lookup(stack0, rootGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      MockDate mockDate0 = new MockDate((-1179), 1, 9999, 1, 1, 1);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.createImage(5, 5);
      jDayChooser0.addListeners(5);
      jDayChooser0.setDay(5);
      JList<Object> jList0 = new JList<Object>();
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay((-1160));
      jDayChooser0.setDay((-1203));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.CANADA_FRENCH;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      // Undeclared exception!
      try { 
        rootGraphicsNode0.add((Object) jYearChooser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // accessories.plugins.time.JYearChooser[JYearChooser,0,0,0x0,invalid,layout=java.awt.BorderLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=] is not a GraphicsNode
         //
         verifyException("org.apache.batik.gvt.CompositeGraphicsNode", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Calendar calendar0 = MockCalendar.getInstance();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y|tH.O+<RRcp");
      Color color0 = Color.yellow;
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.calendar = calendar0;
      jDayChooser0.getComponents();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Random.setNextRandom((-1167));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6789477095792162
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setVisible(true);
      jDayChooser0.decorationBackgroundVisible = false;
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setDay(3);
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.requestFocus();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser_DecoratorButton0.getMouseMotionListeners();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(3, jDayChooser0.getDay());
      assertFalse(jDayChooser_DecoratorButton0.isFocusable());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 30);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getFocusTraversalPolicy();
      Boolean boolean0 = GVTAttributedCharacterIterator.TextAttribute.OVERLINE_ON;
      jDayChooser0.setMaxDayCharacters((-20));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " %\n8UI1h,|EC0");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getWidth();
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      // Undeclared exception!
      try { 
        color0.getRGBColorComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.monthChooser = jMonthChooser0;
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        unmarshallingContext0.parseElementInt("month", "day");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6575617925430053
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.decorationBackgroundVisible = false;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 6, '', 6, 592, '');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 6, 6, 592, 36, '');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.setDay(36);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8775186062431954
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ContainerOrderFocusTraversalPolicy containerOrderFocusTraversalPolicy0 = new ContainerOrderFocusTraversalPolicy();
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale0 = new Locale("day", "RwI");
      jDayChooser0.setLocale(locale0);
      Color color0 = Color.gray;
      locale0.getUnicodeLocaleAttributes();
      Locale locale1 = new Locale("X$H7", "RwI");
      jDayChooser0.setLocale(locale0);
      Color color1 = Color.gray;
      jDayChooser0.firePropertyChange("31", 0L, 1218L);
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale2 = new Locale("", "");
      Color.getColor("day");
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setEnabled(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 390, (-16L), 390, 4, 'M');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.TAIWAN;
      Locale locale1 = Locale.FRENCH;
      locale0.getUnicodeLocaleAttributes();
      locale1.getUnicodeLocaleAttributes();
      Locale locale2 = new Locale("day", "day");
      locale2.getExtensionKeys();
      jDayChooser0.setLocale(locale1);
      jDayChooser0.setMonth(90);
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Color.getColor("day", 90);
      jDayChooser0.setMonth(8824);
      jDayChooser0.isDayBordersVisible();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(29, 29, 15);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHours((-176));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value -176 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(48);
      jDayChooser0.repaint();
      jDayChooser0.setEnabled(true);
      Instant instant0 = MockInstant.ofEpochSecond((long) 48, (-2123L));
      Date date0 = Date.from(instant0);
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date1, date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(false);
      jDayChooser0.getDaysInMonth();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(11);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(11);
      mockSimpleDateFormat0.parse("http://javax.xml.transform.sax.SAXTransformerFactory/feature/xmlfilter", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 72, 0, 31, (-3594), 'A', 0);
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      jDayChooser0.keyReleased(keyEvent0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.updateUI();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Timestamp timestamp0 = new Timestamp(1873L);
      Date date0 = jDayChooser0.setMaxSelectableDate(timestamp0);
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis(705L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      StringContent stringContent0 = new StringContent(42);
      try { 
        stringContent0.remove(30, 13);
        fail("Expecting exception: BadLocationException");
      
      } catch(BadLocationException e) {
         //
         // Invalid range
         //
         verifyException("javax.swing.text.StringContent", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Timestamp timestamp0 = new Timestamp(1873L);
      jDayChooser0.setMaxSelectableDate(timestamp0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2218), 1332L, (-2218), (-2218), '6');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getFocusTraversalPolicy();
      Boolean boolean0 = new Boolean("day");
      jDayChooser0.setMinSelectableDate((Date) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.createImage(5, 5);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " %\n8UI1h,|EC0");
      jDayChooser0.addListeners(5);
      jDayChooser0.setDay(5);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(5, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.createImage(5, 5);
      jDayChooser0.addListeners(5);
      jDayChooser0.setDay(5);
      JList<Object> jList0 = new JList<Object>();
      jList0.getUI();
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.updateUI();
      assertEquals(5, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MenuSelectionManager.defaultManager();
      MenuKeyListener menuKeyListener0 = mock(MenuKeyListener.class, new ViolatedAssumptionAnswer());
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 23, 49, 15, 23, ')');
      Locale locale0 = JComponent.getDefaultLocale();
      jDayChooser0.locale = locale0;
      jDayChooser0.keyPressed(keyEvent0);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      styleContext0.getEmptySet();
      jDayChooser0.setDay(31);
      System.setCurrentTimeMillis(849);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMonth(31);
      jDayChooser0.setFocus();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{EhY'{mM3zTsa?],");
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(158);
      jDayChooser0.transferFocus();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "ouX1_'Be";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "{EhY'{mM3zTsa?],";
      stringArray0[4] = "{EhY'{mM3zTsa?],";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[5] = "day";
      stringArray0[6] = "20";
      jDayChooser0.dayNames = stringArray0;
      jDayChooser0.validate();
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3778, 0L, 1112, 35, '');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = null;
      try {
        jTextPane0 = new JTextPane((StyledDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 8880;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8880, 221L, (-2931), 40, '');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.createImage((-2931), 8880);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-2931));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7245232524096474
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.decorationBackgroundVisible = false;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, (-2845L), 34, 34, '');
      keyEvent0.setSource((Object) null);
      keyEvent0.consume();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.decorationBackgroundVisible = false;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, (-2845L), 34, 34, '');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 21, (-3850L), 37, 37, '%');
      keyEvent1.setSource(jDayChooser0);
      keyEvent1.consume();
      jDayChooser0.keyPressed(keyEvent1);
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = null;
      try {
        jTextPane0 = new JTextPane((StyledDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent.getKeyModifiersText(5);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Meta+Shift");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 5, 5, 38, '@');
      jDayChooser0.keyPressed(keyEvent0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 3085, 988L, 3085, 480, 12, 12, 5, 38, false, 2529, 3085, 480);
      mouseWheelEvent0.paramString();
      jDayChooser0.getToolTipLocation(mouseWheelEvent0);
      jDayChooser0.setDay((-982));
      jDayChooser0.keyPressed(keyEvent0);
      Locale locale0 = Locale.PRC;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      CanvasGraphicsNode canvasGraphicsNode1 = new CanvasGraphicsNode();
      canvasGraphicsNode1.getRoot();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1757);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      basicCheckBoxUI0.getDefaultIcon();
      JButton jButton0 = new JButton("day", (Icon) null);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(1340);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 37, 645, 33, '');
      keyEvent0.setSource(jDayChooser0);
      keyEvent0.consume();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.685711335140815
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, '\'', 49, 49, '\'', '\'');
      KeyEvent.getKeyModifiersText(49);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      jDayChooser0.keyPressed(keyEvent0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 49, 0L, (-982), 49, (-982), (-982), 49, 49, false, (-982), 3085, 49);
      mouseWheelEvent0.paramString();
      jDayChooser0.getToolTipLocation(mouseWheelEvent0);
      jDayChooser0.setDay(49);
      jDayChooser0.keyPressed(keyEvent0);
      Locale locale0 = Locale.PRC;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getRoot();
      jDayChooser0.addListeners(42);
      jDayChooser0.initialized = false;
      jDayChooser0.setDay((-982));
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.red;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 9223372036854775807L;
      floatArray0[1] = (float) 9223372036854775807L;
      Color.getColor("day", (-118));
      floatArray0[2] = (float) 9223372036854775807L;
      floatArray0[3] = (float) 9223372036854775807L;
      floatArray0[4] = (float) 9223372036854775807L;
      floatArray0[5] = (-1.0F);
      jDayChooser0.setDay((-118));
      jDayChooser0.updateUI();
  }
}
