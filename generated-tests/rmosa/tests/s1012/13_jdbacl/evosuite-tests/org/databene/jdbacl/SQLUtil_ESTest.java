/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:51:45 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("B", (String[]) null, "B", "B", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("drop indexe#rud7s");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.29113983883196504
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.normalize("ctg*OF&Y6}#qF\".]/", false);
      SQLUtil.normalize("zp/#JXgvXC6D|-DTw[(", false);
      SQLUtil.isQuery("drop index");
      System.setCurrentTimeMillis(175L);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop indexselect * from", false);
      assertEquals("drop indexselect * from", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("2~PM=Rl6#@aQjK~");
      assertNull(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("drop indexselect * from");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = " = ";
      stringArray0[1] = " = ";
      stringArray0[1] = " = ";
      String string0 = SQLUtil.join(" = ", " = ", stringArray0, "", "u WHERE ", stringArray0);
      assertEquals(" =  join  as u WHERE  on  = . =  = u WHERE . =  and  = . =  = u WHERE . =  and  = .null = u WHERE .null and  = .null = u WHERE .null and  = .null = u WHERE .null", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ALTER TABLE ";
      stringArray0[5] = "ALTER TABLE ";
      SQLUtil.renderColumnListWithTableName("ALTER TABLE ", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7188008609386547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("selectq=q|or/8s/{{/-y", false);
      assertEquals("selectq = q | or /  8s / { { / - y", string0);
      
      Random.setNextRandom(14);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("selectq=q|or/8s/{{/-y");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "selectq = q  | or /  8s / { { / - y";
      stringArray0[1] = "selectq=q|or/8s/{{/-y";
      stringArray0[2] = "]VCb:i3h^ Y4";
      stringArray0[3] = "d]'nLoit";
      stringArray0[4] = "s_OR#Hz8>\u0005q-<S{7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]VCb:i3h^ Y4", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("selectq = q  | or /  8s / { { / - y", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "@-$m[[Vf^nJbMh^", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (selectq = q  | or /  8s / { { / - y, selectq=q|or/8s/{{/-y, ]VCb:i3h^ Y4, d]'nLoit, s_OR#Hz8>\u0005q-<S{7)", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Boolean.valueOf("");
      SQLUtil.mutatesStructure("");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("AZNI#]}tlG)o", "AZNI#]}tlG)o", (VersionNumber) null);
      defaultDatabase0.getTable("", false);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "AZNI#]}tlG)o";
      stringArray0[2] = "AZNI#]}tlG)o";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "AZNI#]}tlG)o";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("pSUD6uZ#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("Y/", "Y/", "Y/");
      assertEquals("'Y/'", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.substituteMarkers("Syntax error at the beginning ", "Syntax error at the beginning ", (Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "|XAResorce.TMNOFLGS";
      String string1 = "";
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("|XAResorce.TMNOFLGS", "delete", versionNumber0);
      defaultDatabase0.getTable("C", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-3), "C");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      VersionNumber versionNumber1 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber1.compareTo(versionNumber0);
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer2, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("|XAResorce.TMNOFLGS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "c~allco", false, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("c~allco", (String[]) null, "c~allco", "c~allco", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "B";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ALTER TABLE ", false, stringArray0);
      dBUniqueConstraint0.setDoc("ALTER TABLE ");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT \"ALTER TABLE \" ", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "B";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "ALTER TABLE ", false, stringArray0);
      dBUniqueConstraint0.setName("B");
      dBUniqueConstraint0.setDoc("ALTER TABLE ");
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT B ", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.normalize("Y,a$`a>'dk", true);
      assertEquals("Y, a $ ` a > 'dk'", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter sessionalter sessionselect * from", false);
      assertEquals("alter sessionalter sessionselect * from", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter sessionalter sessionselect * from", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("_^<9KtB", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "alter sessionalter sessionselect * from", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "alter indexcallconstraint ;qj'vyix-_r7iw`fvl";
      SQLUtil.mutatesDataOrStructure("alter indexcallconstraint ;qj'vyix-_r7iw`fvl");
      String string1 = "J";
      VersionNumber versionNumber0 = VersionNumber.valueOf("iS} DsR|smNz");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("J", "classpath", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("iS} DsR|smNz");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'J'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[2] = "$Y~HCmJg<WcQzK";
      stringArray0[3] = "$Y~HCmJg<WcQzK";
      stringArray0[6] = "Unknown constraint type: ";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND $Y~HCmJg<WcQzK = '$Y~HCmJg<WcQzK' AND $Y~HCmJg<WcQzK = '$Y~HCmJg<WcQzK' AND null = null AND null = null AND Unknown constraint type:  = 'Unknown constraint type: '", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("WJHd1Nyd01CDxl", stringBuilder0);
      stringBuilder0.append(4125L);
      SQLUtil.addRequiredCondition("alter materialized viewselect * from", stringBuilder0);
      assertEquals("WJHd1Nyd01CDxl4125 and alter materialized viewselect * from", stringBuilder0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("W/Hd1Nyd01 CDxl");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("/E(qgw)@_HU&oUW4Mt", "W/Hd1Nyd01 CDxl", versionNumber0);
      DBCatalog dBCatalog0 = new DBCatalog("W/Hd1Nyd01 CDxl", defaultDatabase0);
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog W/Hd1Nyd01 CDxl", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[12];
      stringArray0[2] = "W/Hd1Nyd01CDxl";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("W/Hd1Nyd01CDxl", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      CompositeDBObject<?> compositeDBObject0 = dBForeignKeyConstraint0.getOwner();
      String string0 = SQLUtil.typeAndName(compositeDBObject0);
      assertNotNull(string0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("q<{Pkob/}!1");
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.7013901080800322
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.normalize("/p//{kmNeokI&dW-W\"", false);
      assertEquals("/ p / / { kmNeokI & dW - W \"\"", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("/p//{kmNeokI&dW-W\"", false, "sa/;IPJU4", "Cp1256");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT /p//{kmNeokI&dW-W\" CHECK Cp1256", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execute|k3apq'w~o@%_5?f");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.join("", stringArray0[1], stringArray0, stringArray0[1], "", stringArray0);
      assertEquals("null as  on null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null", string0);
      
      Random.setNextRandom((-1453));
      String string1 = SQLUtil.removeComments("null as  on null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null and null.null = .null");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "callconstrain ;qj'vyix-_r7iw`fvl";
      SQLUtil.mutatesStructure("callconstrain ;qj'vyix-_r7iw`fvl");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("updateorg.h2.tools.simpleresultset");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf("W/Hd1Nyd0~ CDxl");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("/E(qgw)@_HU&oUW4Mt", "W/Hd1Nyd0~ CDxl", versionNumber0);
      defaultDatabase0.getCatalog("W/Hd1Nyd0~ CDxl");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Boolean boolean0 = new Boolean("|K3.apq'W~o&@%N_5?f");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Dnwb@{");
      Character character0 = new Character(']');
      String string0 = SQLUtil.substituteMarkers("Qm<Cb![", "Qm<Cb![", character0);
      assertEquals("']'", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("SELECT * FROM ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'SELECT * FROM ' not found in table 'SELECT * FROM '
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6592429120275791
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      SQLUtil.normalize("selectq=q4|or/8s/{{/-yu", false);
      SQLUtil.isQuery("selectq = q4  | or /  8s / { { / - yu");
      SQLUtil.removeComments("L{A|K2N");
      Random.setNextRandom((-1222));
      Random.setNextRandom(489);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "LOCKm";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("LOCKm");
      mockPrintWriter0.printf("LOCKm", (Object[]) stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("rename", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("O'&");
      stringBuilder0.codePoints();
      SQLUtil.addOptionalCondition("O'&", stringBuilder0);
      assertEquals("O'& or O'&", stringBuilder0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("6%#V%Ig>6");
      DBPackage dBPackage0 = new DBPackage("6%#V%Ig>6", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("6%#V%Ig>6", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBPackage0);
      assertEquals("6%#V%Ig>6.6%#V%Ig>6", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter materialized view");
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      String string1 = SQLUtil.normalize("alter materialized view", false);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("f}(qg?)@_HU&oUW4Mt", true);
      assertEquals("f } (qg ?) @ _HU & oUW4Mt", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      StringBuilder stringBuilder0 = new StringBuilder(2601);
      int int0 = 47;
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("4]Ae #7}9b`/PjV", compositeDBObject0);
      tableContainer0.getTable("4]Ae #7}9b`/PjV");
      DBDataType dBDataType0 = DBDataType.getInstance(47, "execute");
      DBDataType.getInstance(2601, "4]Ae #7}9b`/PjV");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4]Ae #7}9b`/PjV", (DBTable) null, dBDataType0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = '.';
      charArray0[5] = 'b';
      // Undeclared exception!
      try { 
        stringBuilder0.insert(2601, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2601
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.45820823797145316
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.normalize("zp/#JXgvXC6D|F-DTw[(", false);
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.parseColumnTypeAndSize("/JAp4R ");
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4L));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.normalize("LOK?", false);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "LOK ?";
      stringArray0[2] = "LOK ?";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      byteArray0[2] = (byte)81;
      byteArray0[3] = (byte)81;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TH^b<G]B|");
      DBDataType dBDataType0 = DBDataType.getInstance((-1676), "SECT");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[0], defaultDBTable0, dBDataType0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execute", false, defaultDBTable1, "SECT");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter1);
      Random.setNextRandom(6);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.880524555284045
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("K=[*H$p*J10A0!k", false);
      assertEquals("K = [ * H $ p * J10A0 ! k", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("jvHq", (Database) null);
      DBSchema dBSchema0 = new DBSchema("42Z20.S.1", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete*h9c?", dBSchema0);
      DBCatalog dBCatalog1 = defaultDBTable0.getCatalog();
      DBTable dBTable0 = dBCatalog1.getTable("delete*h9c?");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ALIAS_CATALOG";
      stringArray0[1] = "42Z20.S.1";
      stringArray0[2] = "42Z20.S.1";
      stringArray0[3] = "K = [ * H $ p * J10A0 ! k";
      stringArray0[4] = "K = [ * H $ p * J10A0 ! k";
      stringArray0[5] = "K=[*H$p*J10A0!k";
      dBCatalog1.getSchemas();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "delete*h9c?", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT delete*h9c? PRIMARY KEY (ALIAS_CATALOG, 42Z20.S.1, 42Z20.S.1, K = [ * H $ p * J10A0 ! k, K = [ * H $ p * J10A0 ! k, K=[*H$p*J10A0!k)", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[1] = "B";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "9<t=y", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("9<t=y", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBPrimaryKeyConstraint0.equals(dBUniqueIndex0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, " (", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      byte[] byteArray0 = new byte[1];
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "W/Hd1Nyd01 CDxl";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("W/Hd1Nyd01 CDxl");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("W/Hd1Nyd01 CDxl", defaultDBTable0, (DBDataType) null, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "U0%~NK]`\":m";
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("U0%~NK]`\":m", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("exec", "\u0001\u0139");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // \u0001\u0139
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.codePoints();
      SQLUtil.addOptionalCondition("O'&", stringBuilder0);
      assertEquals("O'&", stringBuilder0.toString());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3347027918768228
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("*H9C? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "e#ruD7s";
      streamTokenizer0.nval = 205.3091671339817;
      SQLUtil.renderNumber(streamTokenizer0);
      Random.setNextRandom((-4));
      SQLUtil.normalize("Yh#&?x5M.jEIgAYZ :l", false);
      SQLUtil.removeComments("HQ9&H-Z>n_");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Yh # & ? x5M.jEIgAYZ : l";
      stringArray0[1] = "e#ruD7s";
      stringArray0[2] = "HQ9&H-Z>n_";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("40XD1", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      Random.setNextRandom((-4));
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      TableContainer tableContainer0 = new TableContainer("updateorg.h2.tools.simpleresultset");
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("&4uj6p{w", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint1.getOwner();
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      String string1 = SQLUtil.normalize("~wM}LtZzWq/X_u^eI1", false);
      assertEquals("~ wM } LtZzWq / X_u ^ eI1", string1);
      
      String string2 = SQLUtil.normalize("foreign key constraint constraint", false);
      assertTrue(string2.equals((Object)string0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("f}(qg?)@_HU&oUW4Mt");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"qg?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("zp/#JXgvXC6D|-DTw[(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: zp/#JXgvXC6D|-DTw[(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter sessionselect * from");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter sessionselect * from");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("IXsZ%0uFr],!}E");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'IXsZ%0uFr],!}E' not found in table 'alter sessionselect * from'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.tools.SimpleResultSet");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = 41;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.tools.SimpleResultSet", defaultDBTable0, 41, "org.h2.tools.SimpleResultSet");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.h2.tools.SimpleResultSet");
      String string0 = "drop materialized vieww / hd1nyd01 cdxl";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized vieww / hd1nyd01 cdxl", true, (String[]) null);
      defaultDBColumn0.addUkConstraint(dBPrimaryKeyConstraint0);
      SQLUtil.addOptionalCondition("drop materialized vieww / hd1nyd01 cdxl", stringBuilder0);
      dynamicByteArrayOutputStream0.close();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.tools.SimpleResultSet");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.h2.tools.SimpleResultSet";
      stringArray0[1] = "org.h2.tools.SimpleResultSet";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create table ", 90);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[2] = "org.h2.tools.SimpleResultSet";
      stringArray0[3] = "org.h2.tools.SimpleResultSet";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.h2.tools.SimpleResultSet", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.h2.tools.SimpleResultSet");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("org.h2.tools.SimpleResultSet", stringBuilder0);
      stringBuilder1.append((CharSequence) "org.h2.tools.SimpleResultSet");
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      stringBuilder2.append((CharSequence) stringBuilder1);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      String string0 = SQLUtil.removeComments("org.h2.tools.SimpleResultSet");
      assertEquals("org.h2.tools.SimpleResultSet", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Ouv(!}2Ulje!");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.removeComments("org.databene.jdbacl.SQLUtil");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ";K>bUWk-FQk4'";
      stringArray0[1] = ";K>bUWk-FQk4'";
      stringArray0[2] = ";K>bUWk-FQk4'";
      stringArray0[3] = "select ";
      stringArray0[4] = "select ";
      stringArray0[6] = "SELECT * FROM ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select ", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";K>bUWk-FQk4'", true, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("[scI(zuE&ZlD", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "select ", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      stringBuilder0.append(0.0F);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"select \" 0.0CONSTRAINT \"select \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = "Zc&)~=9h:";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance("DATE");
      int int0 = 1645;
      Integer integer1 = new Integer(1645);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Zc&)~=9h:", defaultDBTable0, dBDataType0, integer0, integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = "CHECK ";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("CHECK ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "org.h2.tools.SimpleResultSet";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      dynamicByteArrayOutputStream0.flush();
      dynamicByteArrayOutputStream0.setBeginPosition(3424);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("*H9C? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 298.7490287787382;
      SQLUtil.renderNumber(streamTokenizer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("*H9C? ", true);
      SQLUtil.normalize("298.7490287787382", true);
      Random.setNextRandom(335544738);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance((-205298375), "alter tableselec * from");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+{<#m", (DBTable) null, dBDataType0, integer0, integer0);
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+{<#m");
      System.setCurrentTimeMillis((-205298375));
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("+{<#m, +{<#m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '+{<#m, +{<#m' not found in table '+{<#m'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.tools.SimpleResultSet");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.tools.SimpleResultSet", defaultDBTable0, 41, "org.h2.tools.SimpleResultSet");
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals(157, dynamicByteArrayOutputStream0.getUsed());
      
      SQLUtil.removeComments("drop materialized vieww / hd1nyd01 cdxl");
      System.setCurrentTimeMillis(41);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("org.h2.tools.SimpleResultSet ORG.H2.TOOLS.SIMPLERESULTSET NOT NULL", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Random.setNextRandom(2166);
      SQLUtil.removeComments("drop indexselect * from");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop indexselect * from", defaultDBTable0, 45, "drop indexselect * from");
      defaultDBColumn0.setDefaultValue("drop indexselect * from");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("drop indexselect * from DROP INDEXSELECT * FROM DEFAULT drop indexselect * from NULL", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLUtil.isQuery("select into");
      SQLUtil.removeComments("select into");
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      SQLUtil.removeComments("alter index");
      SQLUtil.removeComments("alter index");
      System.setCurrentTimeMillis((-1222));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.tools.SimpleResultSet");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.h2.tools.SimpleResultSet", defaultDBTable0, 41, "org.h2.tools.SimpleResultSet");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, 27, "org.h2.tools.SimpleResultSet");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.h2.tools.SimpleResultSet");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.removeComments("drop materialized vieww / hd1nyd01 cdxl");
      SQLUtil.removeComments("org.h2.tools.SimpleResultSet");
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("CHECK ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "setNCharacterStream(int, Reader)";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setNCharacterStream(int, Reader)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.8373491018663957
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("alter materialized viewselect * from");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "e#ruD7s";
      stringReader0.reset();
      stringReader0.skip(3832L);
      streamTokenizer0.ordinaryChar(3530);
      streamTokenizer0.nval = 184.5274733855208;
      SQLUtil.renderNumber(streamTokenizer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter materialized viewselect * from");
      streamTokenizer0.nval = (-3133.953);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("e#ruD7s", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("*H9C? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      Random.setNextRandom((-4));
      SQLUtil.normalize("*H9C? ", false);
      SQLUtil.removeComments("#I8do@uK[gD1,0.Cz");
      SQLUtil.removeComments("\n/* group sorted */");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      Random.setNextRandom((-4));
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.getUniqueConstraint((String[]) null);
      defaultDBTable1.getIndex("HQ9&H-Z>n_");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
