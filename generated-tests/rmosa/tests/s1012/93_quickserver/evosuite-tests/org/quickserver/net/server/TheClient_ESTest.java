/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:29:34 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getTrusted();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("control Server was null", (-2876));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2876
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(60);
      blockingClientHandler0.getServer();
      assertEquals("<ClientHandler-Pool#60-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setServer((QuickServer) null);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.setCommunicationLogging(true);
      theClient0.toString();
      theClient0.toString();
      theClient0.toString();
      theClient0.toString();
      theClient0.toString();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(0);
      theClient0.setTimeout((-1173));
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientData();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, 0, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@57c58840
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getSocketChannel();
      theClient0.getClientEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1065));
      theClient0.getTimeoutMsg();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("org.quickserver.net.server.TheClient", 0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@7be586f7
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setTimeoutMsg("]v{X");
      theClient0.setClientEvent(clientEvent0);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getTimeoutMsg();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.setClientData(data0);
      theClient0.getAuthenticator();
      theClient0.getClientEvent();
      theClient0.getMaxAuthTryMsg();
      TheClient theClient1 = new TheClient();
      theClient1.setMaxAuthTryMsg("\"OMY");
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      int int0 = (-1555);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      defaultClientEventHandler0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("8Q^U?388", (-1555), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1555
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.toString();
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1);
      blockingClientHandler0.getSocket();
      assertEquals("<ClientHandler-Pool#1-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setSocket((Socket) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTryMsg("");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg((String) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxConnectionMsg("{TheClient ");
      theClient0.setTrusted(true);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("{TheClient ");
      theClient0.getClientObjectHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(891);
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientData();
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      Proxy proxy0 = null;
      try {
        proxy0 = new Proxy(proxy_Type0, (SocketAddress) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // type HTTP is not compatible with address null
         //
         verifyException("java.net.Proxy", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      QuickServer quickServer0 = new QuickServer("org.quickserver.net.server.TheClient", 1000);
      theClient0.getTimeoutMsg();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.toString();
      int int0 = (-641);
      theClient0.setTimeout((-641));
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, (-641), inetAddress0, 15);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-641
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setTimeoutMsg("]v{X");
      theClient0.setClientEvent(clientEvent0);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getTimeoutMsg();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.setMaxAuthTryMsg("]v{X");
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getSocket();
      theClient1.setSocket((Socket) null);
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTrusted(false);
      theClient0.toString();
      theClient0.getClientObjectHandler();
      QuickServer quickServer0 = new QuickServer("org.quickserver.net.server.TheClient");
      try { 
        quickServer0.stopServer();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Server QuickServer is not running!
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setServer((QuickServer) null);
      theClient0.getCommunicationLogging();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(58);
      // Undeclared exception!
      try { 
        nonBlockingClientHandler0.readBinary();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't read Binary :DataType.IN is not in DataMode.BINARY
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.toString();
      assertTrue(theClient0.getTrusted());
  }
}
