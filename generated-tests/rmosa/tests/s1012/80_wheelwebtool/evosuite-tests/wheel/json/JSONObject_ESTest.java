/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:34:30 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("pu");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = JSONObject.quote("W\"O\n");
      assertEquals("\"W\\\"O\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(572, 572);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(484);
      try { 
        Integer.parseUnsignedInt("{}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject.getNames((Object) null);
      int int0 = 104;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      String string0 = jSONObject0.optString(stringArray0[2]);
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject.quote("] s nt D num7br.");
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      Object object1 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"] s nt D num7br.\"";
      stringArray0[1] = "\"java.lang.Object@0000000001\"";
      stringArray0[2] = "ilq(";
      stringArray0[3] = "] is not a JSONObject.";
      stringArray0[4] = "] s nt D num7br.";
      stringArray0[5] = "\"java.lang.Object@0000000001\"";
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("\"java.lang.Object@0000000001\"");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5538483415669473
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)0);
      Integer integer0 = new Integer(977);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "getoptJSONObject";
      stringArray0[2] = "MK3h!2EN";
      stringArray0[3] = "gethashCode";
      stringArray0[4] = "gethashCode";
      stringArray0[5] = "gethashCode";
      stringArray0[6] = "gethashCode";
      stringArray0[7] = "gethashCode";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.putOpt("gethashCode", "gethashCode");
      try { 
        jSONObject1.getBoolean("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8451684290672177
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-2));
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedInt((byte) (-2));
      JSONObject.valueToString(jSONObject0);
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("wheel.json.JSONObject@0000000001", object0);
      try { 
        jSONObject0.getBoolean("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject.quote("] is not D number.");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      try { 
        jSONObject0.getBoolean("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      HashMap<Object, Float> hashMap1 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.keys();
      HashMap<Long, Float> hashMap2 = new HashMap<Long, Float>();
      Boolean boolean0 = new Boolean(false);
      Integer integer0 = new Integer(1862);
      hashMap0.put(boolean0, integer0);
      Boolean boolean1 = new Boolean(false);
      Integer integer1 = new Integer(23);
      hashMap0.put(boolean1, integer1);
      JSONObject jSONObject1 = jSONObject0.put(",P1% vtv14", (Map) hashMap0);
      try { 
        jSONObject1.getJSONArray(",P1% vtv14");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",P1% vtv14\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JSONObject.quote("M\"Cs8_Y/u9hPZ0O");
      assertEquals("\"M\\\"Cs8_Y/u9hPZ0O\"", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject.quote("W\"O\n");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W\"O\n";
      stringArray0[1] = "\"W\"O\n\"";
      stringArray0[2] = "\"W\"O\n\"";
      stringArray0[3] = "W\"O\n";
      stringArray0[4] = "\"W\"O\n\"";
      stringArray0[5] = "W\"O\n";
      stringArray0[6] = "\"W\"O\n\"";
      stringArray0[7] = "\"W\"O\n\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = JSONObject.quote("O,g2 -KIf\"X!u/");
      Short short0 = new Short((short) (-258));
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.quote("Y\n");
      Short short0 = new Short((short)2546);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Y\n";
      stringArray0[1] = "\"Y\n\"";
      stringArray0[2] = "Y\n";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = JSONObject.quote("W\"<\n");
      Byte byte0 = new Byte((byte)12);
      String string1 = JSONObject.valueToString(byte0, (byte)12, (byte)12);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.606941790565509
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(64);
      String string0 = "wheel.json.JSONTokener";
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONTokener", integer0);
      String string1 = "t*`j\"JYSX@kv?J^";
      jSONObject1.optLong("t*`j\"JYSX@kv?J^", 0L);
      try { 
        jSONObject1.getJSONObject("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject.quote("r5_.%r+s\"[Y[/ ");
      JSONTokener jSONTokener0 = new JSONTokener("] is not a JSONArray.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] is not a JSONArray.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Byte byte0 = new Byte((byte)47);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = JSONObject.quote("W\"<\n");
      assertEquals("\"W\\\"<\\n\"", string0);
      
      String string1 = JSONObject.valueToString("W\"<\n");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9860826099877262
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-2));
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedInt((byte) (-2));
      JSONObject.valueToString(jSONObject0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject@0000000001", object0);
      try { 
        jSONObject1.getLong("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = JSONObject.quote("Y\n");
      assertEquals("\"Y\\n\"", string0);
      
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer((-2008));
      Boolean boolean0 = Boolean.valueOf("Y\n");
      hashMap0.put(integer0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(65, 65);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject.doubleToString((short)0);
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "0", (int) (short)0, (int) (short)0);
      StringWriter stringWriter2 = stringWriter1.append('B');
      jSONObject0.write(stringWriter2);
      assertEquals("B{}", stringWriter2.toString());
      assertEquals("B{}", stringWriter0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5936174605927704
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Float float0 = new Float((float) (short)0);
      Float.isFinite(934.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.numberToString(float0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "@^c>qgDgu.1Z";
      jSONObject0.optLong("@^c>qgDgu.1Z");
      try { 
        jSONObject0.getBoolean("}.(^#)?QG@nZ?m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}.(^#)?QG@nZ?m\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject.quote("W\"O\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("0|w[DX.Xa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0|w[DX.Xa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<&";
      Double.sum(0.0, 0.0);
      stringArray0[1] = "] is not a number.";
      stringArray0[2] = "u2r/~p(a";
      stringArray0[3] = "<&";
      stringArray0[4] = "<&";
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      jSONObject1.has("<&");
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Double.sum(0.0, 0.0);
      // Undeclared exception!
      try { 
        linkedList0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Float float0 = new Float((float) (short)0);
      Float.isFinite(934.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      int int0 = 59;
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6528213268992737
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JSONObject.quote("}-B9+@");
      assertEquals("\"}-B9+@\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("\"}-B9+@\"");
      assertEquals(0, int0);
      
      Byte byte0 = new Byte((byte)61);
      JSONObject.valueToString(byte0, (byte)61, 22);
      String string1 = jSONObject0.toString(8, 8);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject.quote("] is not D number.");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"] is not D number.\"";
      stringArray0[1] = "] is not D number.";
      stringArray0[2] = "b4&";
      stringArray0[3] = "] is not D number.";
      JSONObject jSONObject0 = new JSONObject("] is not D number.", stringArray0);
      Float float0 = new Float((-2722.8967728692314));
      jSONObject0.accumulate(".et49", float0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Gy");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {Gy
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONTokener0.back();
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", 48L);
      jSONObject1.optInt("false");
      Float float0 = new Float((double) 48L);
      jSONObject0.put("@h'ST$|WbTYcD<!h']", 48L);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer.getInteger("li");
      jSONObject0.append("li", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\b";
      stringArray0[1] = "\b";
      JSONObject jSONObject0 = new JSONObject("\b", stringArray0);
      boolean boolean0 = jSONObject0.isNull("isfloatValue");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.558255126072715
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject.quote("r5_.%r+s\"[Y[/ ");
      JSONObject jSONObject0 = new JSONObject((Object) "r5_.%r+s\"[Y[/ ");
      jSONObject0.optBoolean("'");
      try { 
        jSONObject0.getBoolean("r5_.%r+s\"[Y[/ ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r5_.%r+s\\\"[Y[/ \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject.quote("rU ^$y/eU4Hgl+3kn");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4057382291118443
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject.quote("r5_.%r+s\"[Y[/ ");
      JSONObject jSONObject0 = new JSONObject((Object) "r5_.%r+s\"[Y[/ ");
      try { 
        jSONObject0.getString("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = JSONObject.quote("Y\n");
      assertEquals("\"Y\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 128, 128);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "C5Qt7f$e";
      stringArray0[1] = "OL&+~+]_Zq1<vszC@";
      stringArray0[4] = stringArray0[2];
      stringArray0[5] = "null";
      stringArray0[6] = "wheel.json.JSONObject";
      stringArray0[7] = "1BHqpzGbQu&Dpe|l~l,";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.putOpt("1BHqpzGbQu&Dpe|l~l,", "C5Qt7f$e");
      jSONObject2.optString("1BHqpzGbQu&Dpe|l~l,", "");
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject(stringArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte byte0 = (byte) (-2);
      Byte byte1 = new Byte((byte) (-2));
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedInt((byte) (-2));
      JSONObject.valueToString(jSONObject0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONObject@0000000001", object0);
      try { 
        jSONObject1.getInt("wheel.json.JSONObject@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject@0000000001\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("o");
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 97);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, (short)0, (short)0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Boolean boolean0 = new Boolean(true);
      String string0 = JSONObject.valueToString(linkedList0, (-1087), 88);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject.quote("W\"<\n");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"W\"<\n\"";
      stringArray0[1] = "sum";
      stringArray0[2] = "\"W\"<\n\"";
      stringArray0[3] = "W\"<\n";
      stringArray0[4] = "W\"<\n";
      stringArray0[5] = "W\"<\n";
      stringArray0[6] = "\t";
      stringArray0[7] = "ismin";
      stringArray0[8] = "W\"<\n";
      JSONObject jSONObject0 = new JSONObject("W\"<\n", stringArray0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      Float.min((-958.8F), 1.0F);
      Double double0 = new Double(0.0F);
      Double.isFinite((-646.778636471593));
      hashMap0.put(float1, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 18;
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Float cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4834996890609111
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = JSONObject.quote("r5_.%r+s\"[Y[/ ");
      assertEquals("\"r5_.%r+s\\\"[Y[/ \"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "r5_.%r+s\"[Y[/ ");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = JSONObject.valueToString("r5_.%r+s\"[Y[/ ", 88, 88);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = JSONObject.doubleToString(968.72);
      assertEquals("968.72", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject.quote("O,g2 -KIf\"X!u/");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "O,g2 -KIf\"X!u/";
      stringArray0[1] = "A/<";
      stringArray0[2] = "!x1&FTh(W`3Yz|T.3";
      stringArray0[3] = "[]";
      stringArray0[4] = "\"O,g2 -K\\If\"X!u/\"";
      stringArray0[5] = "\"O,g2 -K\\If\"X!u/\"";
      JSONObject jSONObject0 = new JSONObject("O,g2 -KIf\"X!u/", stringArray0);
      Short short0 = new Short((short) (-1));
      JSONObject jSONObject1 = jSONObject0.put("A/<", (Object) short0);
      jSONObject0.getLong("A/<");
      JSONObject.testValidity(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("JSONArray initial value should be a string or collection or array.");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-2985), (-2985));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3341923457408336
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject.quote("] is/not a JONObjec?.");
      JSONObject jSONObject0 = new JSONObject((Object) "\"] is/not a JONObjec?.\"");
      String string0 = jSONObject0.toString((-3919), (-3919));
      Float float0 = new Float((float) (-3919));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must begin with '{'", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      String string0 = JSONObject.valueToString(hashMap0, 1363, 1363);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = JSONObject.quote("W\"O\n");
      Double double0 = new Double(1141.54);
      String string1 = JSONObject.valueToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = JSONObject.quote("{M:^x=~2p");
      assertEquals("\"{M:^x=~2p\"", string0);
      
      HashMap<Double, JSONArray> hashMap0 = new HashMap<Double, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0, (-1041), (-18627781));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = JSONObject.quote("'\n");
      assertEquals("\"'\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "'\n");
      JSONObject.valueToString("'\n", (-1222), (-1222));
      jSONObject0.toString(10, 24);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getcH0ar", 44L);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject1.append("getcH0ar", object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[getcH0ar] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.575832360384573
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject.quote("W\"O\n");
      Double double0 = new Double(0.0);
      Double.sum((-975.0), 906.78);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.names();
      try { 
        jSONObject0.getBoolean(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("", 44L);
      Object object1 = JSONObject.NULL;
      String string0 = ",:]}/\\\"[{;=#";
      jSONObject2.optDouble("", (-1218.0));
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.doubleToString((-40561581));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("-4.0561581E7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of -4.0561581E7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject2.put("getclear", 2677L);
      jSONObject3.getDouble("getclear");
      JSONObject jSONObject4 = jSONObject2.append("0", "getclear");
      assertEquals(2, jSONObject4.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0L);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6994866498542254
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject.quote("r5_.%r+s\"[Y[/ ");
      JSONObject jSONObject0 = new JSONObject((Object) "r5_.%r+s\"[Y[/ ");
      jSONObject0.toString();
      jSONObject0.toString(10, (-2991));
      JSONObject.testValidity("{\n\"java.lang.String@0000000002\": [\njava.lang.Byte@0000000023,\njava.lang.Byte@0000000024,\njava.lang.Byte@0000000025,\njava.lang.Byte@0000000026,\njava.lang.Byte@0000000027,\njava.lang.Byte@0000000028,\njava.lang.Byte@0000000029,\njava.lang.Byte@0000000030,\njava.lang.Byte@0000000031,\njava.lang.Byte@0000000032,\njava.lang.Byte@0000000033,\njava.lang.Byte@0000000034,\njava.lang.Byte@0000000035,\njava.lang.Byte@0000000036\n],\n\"java.lang.String@0000000018\": \"java.lang.Class@0000000019\",\n\"java.lang.String@0000000020\": java.lang.Boolean@0000000021\n}");
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getcHB10ar", 44L);
      Float float0 = new Float((double) 44L);
      Float.max(44L, (-1033.447F));
      JSONObject jSONObject2 = jSONObject1.accumulate("getcHB10ar", float0);
      JSONArray jSONArray0 = jSONObject2.optJSONArray("getcHB10ar");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Byte byte0 = new Byte((byte)52);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer((-2005));
      JSONObject jSONObject1 = jSONObject0.append("p-Qfuy60(k", integer0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("p-Qfuy60(k");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "</n=x 5X[/i{";
      JSONObject.quote("</n=x 5X[/i{");
      try { 
        Long.parseUnsignedLong("\"</n=x 5X[/i{\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"</n=x 5X[/i{\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = jSONObject0.accumulate("-@OB 7(3LCkv", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "-@OB 7(3LCkv");
      stringWriter1.append('S');
      jSONObject1.write(stringWriter1);
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "getcH0ar");
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte) (-97));
      Byte.toUnsignedLong((byte) (-97));
      jSONObject0.append("getcH0ar", byte0);
      jSONObject0.append("getcH0ar", byte0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", "");
      JSONArray jSONArray0 = (JSONArray)jSONObject0.get("");
      jSONObject0.accumulate("", jSONArray0);
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.011706042316513
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Object object0 = JSONObject.NULL;
      hashMap0.put(object0, "UINBhG");
      Long long0 = new Long(580L);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = new Boolean(false);
      hashMap0.put(boolean0, (String) null);
      hashMap0.computeIfPresent(long0, biFunction0);
      hashMap0.remove((Object) "getfloatToRawIntBits");
      String string0 = JSONObject.valueToString(hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{\"wheel.json.JSONObject$Null@0000000001\":\"java.lang.String@0000000003\",\"java.lang.Boolean@0000000004\":null}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Float.isFinite(580L);
      JSONObject jSONObject1 = new JSONObject((Object) "getfloatToRawIntBits");
      JSONObject.testValidity((Object) null);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8621716063171256
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      Byte byte0 = new Byte((byte)50);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("true", (byte)50, 1439);
      String string0 = JSONObject.valueToString("true", (byte)50, (-1223));
      jSONObject0.putOpt("\"java.lang.String@0000000002\"", "true");
      jSONObject0.getBoolean("\"java.lang.String@0000000002\"");
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.putOpt("] is not a number.", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("] is not a number.");
      assertEquals(3, jSONObject0.length());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1439);
      String string0 = JSONObject.valueToString(long0, 1439, 1439);
      Boolean boolean0 = Boolean.valueOf(false);
      jSONObject0.putOpt("java.lang.Long@0000000002", boolean0);
      boolean boolean1 = jSONObject0.getBoolean("java.lang.Long@0000000002");
      assertFalse(boolean1);
      
      String string1 = JSONObject.numberToString(long0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(85);
      JSONObject jSONObject1 = jSONObject0.putOpt("wheel.json.JSONTokener", integer0);
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONTokener", (Object) jSONObject0);
      Integer.getInteger("wheel.json.JSONTokener", 85);
      Long long0 = new Long(22L);
      JSONObject.quote("wheel.json.JSONTokener");
      JSONObject.testValidity(jSONObject2);
      String string0 = JSONObject.valueToString("\"wheel.json.JSONTokener\"");
      jSONObject1.optJSONObject("wheel.json.JSONTokener");
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(85);
      jSONObject0.put("wheel.json.JSONTokener", (Object) jSONObject0);
      Long long0 = new Long(85);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("wheel.json.JSONTokener");
      JSONObject.testValidity(jSONObject1);
      JSONObject.quote("t*`j\"JYSX@kv?J^");
      JSONObject jSONObject2 = jSONObject0.optJSONObject("t*`j\"JYSX@kv?J^");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = "{M:^x2:)~2p";
      JSONTokener jSONTokener0 = new JSONTokener("{M:^x2:)~2p");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 7 of {M:^x2:)~2p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject.quote("{M:^,~2p");
      JSONTokener jSONTokener0 = new JSONTokener("{M:^,~2p");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {M:^,~2p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(784, true);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject1 = jSONObject0.accumulate("-@OB 7(3LCkv", jSONArray0);
      jSONObject1.putOpt("get5ormat", jSONObject0);
      Float float0 = new Float((-1.0));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "mi");
      // Undeclared exception!
      jSONObject1.write(stringWriter1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{M^x=]2pI");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 5 of {M^x=]2pI
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = "{M:^x;2:)~2p";
      JSONTokener jSONTokener0 = new JSONTokener("{M:^x;2:)~2p");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{M:^x;2:)~2p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {M:^x;2:)~2p
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
