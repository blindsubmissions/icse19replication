/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:36:58 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = 1189L;
      Range.Builder range_Builder0 = new Range.Builder(1189L);
      long long1 = 2147483647L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-222L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.shift((-222L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -222 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-5073L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-5073L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5073 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(568L, (-9223372036854775808L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 568, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(568L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.endsBefore(range0);
      range0.equals("");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 9223372036854775806 ]/0B", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.908318357393279
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.of((-2147483648L));
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), 32896L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4567L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 654L, 654L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      long long0 = range1.getEnd();
      assertEquals(567L, long0);
      
      Range.Builder range_Builder1 = new Range.Builder(range1);
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/0B", string0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1444L);
      range_Builder0.shift(1444L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/SB", string0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.983155586551054
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      range0.equals(range1);
      boolean boolean0 = range1.isSubRangeOf(range0);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483648 .. 2147483648 ]/RB", string0);
      
      range1.equals("op!713}=");
      long long0 = range0.getBegin();
      assertEquals(2147483646L, long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.225904717741316
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.isEmpty();
      range0.getEnd();
      Long long0 = new Long(9223372036854775807L);
      long long1 = 9223372036854775554L;
      Long long2 = new Long(9223372036854775554L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.add(range0);
      linkedList1.push(range0);
      linkedList1.add(range0);
      List<Range> list0 = range0.split(9223372036854775806L);
      range0.complementFrom(list0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775554L, 775L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3045569886761625
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1017L), (-830L));
      Range range1 = Range.of((-830L));
      range1.equals(range0);
      range0.getBegin();
      Long long0 = new Long(255L);
      range1.complement(range0);
      Long long1 = new Long(1900L);
      range1.equals(long1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Range$LongStartIntLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Range$LongStartIntLengthRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7920474405363453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.toString();
      range0.equals("[ 2147483647 .. 2147483646 ]/0B");
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 2147483647 .. 2147483646 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 2147483647 .. 2147483646 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.966943486189354
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ -127 .. -127 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ -127 .. -127 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.865703420347897
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem.values();
      range0.getBegin(range_CoordinateSystem0);
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("$ [d>n,6Y Y1X#e$lq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $ [d>n,6Y Y1X#e$lq into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-1L));
      boolean boolean0 = range0.equals("op!713}=");
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals((-1L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem.values();
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long((-1L));
      range0.equals("8urrzsbfIYI>L");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add((Range) null);
      linkedList0.add((Range) null);
      linkedList0.push((Range) null);
      linkedList0.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The second parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(1716L);
      range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.intersects(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0439485751584927
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 267L, 267L);
      range0.getLength();
      Range range1 = Range.of(267L);
      range1.intersects(range0);
      range0.equals(range1);
      range1.equals(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.026343894846193
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range0.intersects(range1);
      range0.equals(range1);
      range0.equals(range1);
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483648 .. 2147483648 ]/RB", string0);
      
      boolean boolean1 = range1.equals("op!713}=");
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      
      range0.getBegin();
      long long0 = range0.getEnd();
      assertFalse(range0.isEmpty());
      assertEquals(2147483646L, long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range range1 = Range.of(515L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      
      long long0 = range1.getBegin();
      assertEquals(515L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-287L);
      range_Builder0.expandEnd((-287L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-3569L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 1014L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1014L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1L);
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.863599184453928
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Long long0 = new Long(1049L);
      Long.compare(1049L, 1049L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-1586L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1049L, (-1586L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8357589838940775
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-679L));
      Range range1 = Range.of((-747L));
      range0.equals(range1);
      Long long0 = new Long((-747L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("The second parameter in the comparison is null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.The second parameter in the comparison is null.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getBegin();
      assertEquals((-32768L), long0);
      
      range0.equals("");
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-703L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775770L));
      Long long0 = new Long(0L);
      range0.isEmpty();
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.contains(range0));
      
      String string0 = range0.toString();
      assertEquals("[ -9223372036854775770 .. -9223372036854775770 ]/0B", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.104074021530186
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.toString();
      Range.of((-1L));
      Range range1 = Range.of((-1L));
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("byte array can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.byte array can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(2209L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(1900L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.toString();
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -127 .. -127 ]/RB", string0);
      
      long long0 = range0.getBegin();
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      long long0 = range0.getLength();
      assertEquals(0L, long0);
      
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem.values();
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1028L, 4294967295L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Long.getLong("#ZdEZ]s*ZkuL0a@z!n");
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 1201L);
      range0.toString(range_CoordinateSystem0);
      range0.getEnd();
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 1201L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(2114L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.toString();
      range0.isEmpty();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 2147483647 .. 2147483646 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 2147483647 .. 2147483646 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483667L, 2147483667L);
      range0.toString();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 2147483667 .. 2147483666 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 2147483667 .. 2147483666 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 1201L);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.add(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.push(range0);
      linkedList1.add(range0);
      range0.intersects(range0);
      linkedList0.add(range0);
      range0.complementFrom(linkedList1);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(31);
      long long0 = range0.getBegin();
      assertEquals(2147483647L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      long long0 = range0.getBegin();
      assertEquals((-32768L), long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.223530831983023
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
      
      range_Builder0.expandBegin(336L);
      Range range1 = range_Builder0.build();
      Range range2 = range1.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      Range.CoordinateSystem.values();
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long(9223372036854775807L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1462L, 9223372036854775807L);
      range1.intersects(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(9223372034707292161L);
      Range range1 = Range.of(9223372034707292161L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      List<Range> list1 = new LinkedList<Range>();
      range0.getEnd();
      long long0 = range0.getEnd();
      assertSame(range0, range1);
      assertEquals(9223372034707292161L, long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.940142702686837
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-18L), 654L);
      Range range1 = Range.of(range_CoordinateSystem0, (-18L), 654L);
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(2216L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8444872614601695
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.getBegin();
      range0.split(2147483647L);
      range0.toString();
      range0.equals("[ 2147483647 .. 2147483646 ]/0B");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 2147483647 .. 2147483646 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 2147483647 .. 2147483646 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(567L);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.8782885341845934
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      Range range1 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483646L);
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      Long.getLong("(d+)s*-s*(d+)", 2147483647L);
      Long.getLong("(d+)s*-s*(d+)");
      range1.equals("(d+)s*-s*(d+)");
      Range.CoordinateSystem.values();
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long2 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483646L, long2);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.060287092608695
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long((-1L));
      range0.equals("8urrzsbfIYI>L");
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList1.add((Range) null);
      linkedList0.add((Range) null);
      linkedList1.push((Range) null);
      linkedList1.add((Range) null);
      // Undeclared exception!
      try { 
        range0.complementFrom(linkedList1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.936158557953129
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Long long0 = new Long((-32768L));
      range0.equals(long0);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(373L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.8147041867002995
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 1201L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long(1201L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      Long long1 = new Long(1201L);
      Object object1 = new Object();
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(17L);
      range0.equals("op!713}=");
      Range.Comparators.values();
      Range range1 = Range.ofLength(17L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.0777424019060393
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854774599L, 9223372036854775807L);
      range0.isEmpty();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long((-9223372036854775808L));
      Object object0 = new Object();
      Range range1 = Range.of(9223372036854774599L);
      boolean boolean0 = range1.intersects(range0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      
      long long1 = range0.getEnd(range_CoordinateSystem1);
      assertEquals((-9223372036854775808L), long1);
      
      Object object1 = new Object();
      boolean boolean2 = range1.equals(object1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.010538833429766
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1049L, 2147483647L);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      Long long0 = new Long((-5325L));
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.parseRange("gI", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse gI into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      boolean boolean0 = range0.equals("op!713}=");
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals((-2147483648L), long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483669L, 2147483669L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals(2147483669L, long0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.parseRange("K<`I7vDb+4-90E", range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 654L, 533L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(9223372036854775807L);
      range0.equals(range1);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.929568618777601
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1 .. 9223372036854775807 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1 .. 9223372036854775807 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-18L), 9223372036854775279L);
      String string0 = "Q'fwKZHp9,";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Q'fwKZHp9,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Q'fwKZHp9,
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.1134294978268238
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.ofLength(1201L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1201 .. 1201 ]/SB", string0);
      
      List<Range> list0 = range0.split(1201L);
      assertTrue(list0.contains(range0));
      
      long long0 = range0.getBegin();
      assertEquals(1201L, long0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9689526668537134
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 9223372036854775807L);
      range0.equals(range_CoordinateSystem0);
      range0.isEmpty();
      range0.isEmpty();
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 1201 .. 9223372036854775807 ]/RB", range_CoordinateSystem1);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1201 .. 9223372036854775807 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1201 .. 9223372036854775807 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Long.getLong("Gh**7)I00");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -127 .. -127 ]/RB", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(2147482621L);
      range0.equals((Object) null);
      long long0 = range0.getBegin();
      assertEquals(2147482621L, long0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2147483647 .. -2147483647 ]/RB", string0);
      
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      long long0 = range0.getEnd();
      assertEquals(9223372036854775806L, long0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 267L, 267L);
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, 266L, 267L);
      range0.equals(range1);
      range1.equals(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.1348480799541716
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.isEmpty();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long((-9223372036854775808L));
      Object object0 = new Object();
      Range range1 = Range.of(9223372036854774599L);
      range1.intersects(range0);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.095557832047261
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.of(255L);
      boolean boolean0 = range0.equals(range1);
      boolean boolean1 = range1.equals(range_CoordinateSystem0);
      assertFalse(boolean1);
      
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.split(9997L);
      assertTrue(list0.contains(range0));
      
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertTrue(boolean2 == boolean0);
      
      Long long0 = new Long(255L);
      range1.equals(range0);
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(255L, long1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(2147483616L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 1201L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1201 .. 1201 ]/SB", string0);
      
      Long.getLong("[ 1201 .. 1201 ]/SB");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals(1201L, long0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.getLength();
      Range range1 = Range.of(9223372036854775807L);
      range0.equals(range1);
      range1.equals(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1049L, 2147483647L);
      boolean boolean0 = range0.isEmpty();
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      long long0 = range0.getBegin();
      assertEquals(1049L, long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.equals(range0);
      Integer integer0 = new Integer(31);
      assertEquals(31, (int)integer0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      long long0 = (-32768L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L));
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals(range1);
      range0.toString();
      range0.equals("[ 2147483647 .. 2147483646 ]/0B");
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.toString();
      range0.equals((Object) null);
      Object object0 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 2147483648L);
      range0.equals(range0);
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.013412304782512
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1054L, 2147483647L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long(2147483647L);
      Range range1 = Range.of(1054L, 2147483647L);
      range1.getBegin();
      Long long1 = new Long(2147483646L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1054L, 2147483647L);
      long long0 = range0.getEnd();
      assertEquals(2147483646L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1856L, 2147483647L);
      range0.equals(range1);
      long long1 = range0.getBegin();
      assertEquals(1053L, long1);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-69L));
      range0.equals(range1);
      Object object0 = new Object();
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.1035382690956084
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-1671L));
      range1.endsBefore(range0);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ -2147483648 .. -1671 ]/SB", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(range_Builder0);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.isEmpty();
      range0.getEnd();
      range0.toString(range_CoordinateSystem0);
      range0.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -1 .. -1 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -1 .. -1 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(object0);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.of(1734L, 1734L);
      range0.equals(range0);
      Long long0 = new Long(1734L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.0352859494143716
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-18L), (-18L));
      Range.of((-109L));
      range0.getEnd();
      Range range1 = Range.of((-109L), (-19L));
      range0.equals(range1);
      range0.equals((Object) null);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = 1201L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 1201L);
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.8754478444593765
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775553L);
      Long long0 = new Long(4294967295L);
      Long.getLong("max cluster distance can not be negative");
      Long long1 = new Long(4294967295L);
      Long.remainderUnsigned(9223372036854775553L, (-1285L));
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      Long long2 = new Long(1603L);
      Range.CoordinateSystem.values();
      long long3 = range0.getBegin();
      assertEquals(4294967295L, long3);
      
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967302L, 9223372036854775553L);
      Long long0 = new Long(4294967302L);
      Long.getLong("max cluster distance can not be negative");
      Long long1 = new Long(4294967295L);
      Long.remainderUnsigned(9223372036854775553L, (-1285L));
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      Long long2 = new Long(1603L);
      Range.CoordinateSystem.values();
      long long3 = range0.getBegin();
      assertEquals(4294967302L, long3);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.2019168109245015
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of((-2147483663L), (-2147483663L));
      Range range1 = Range.of((-2147483663L));
      range0.endsBefore(range1);
      range1.endsBefore(range0);
      range1.getEnd();
      Range range2 = Range.of((-2147483663L), 1734L);
      range0.equals(range2);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.097486414195155
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.isEmpty();
      range0.isEmpty();
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B", range_CoordinateSystem1);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 9223372036854775806 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 9223372036854775806 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 9223372036854775807L);
      range0.isEmpty();
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 1201 .. 9223372036854775807 ]/0B", range_CoordinateSystem1);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1201 .. 9223372036854775807 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1201 .. 9223372036854775807 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1049L, 1049L);
      range0.isEmpty();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Long long0 = new Long(1049L);
      range0.getBegin();
      range0.equals(range0);
      range0.getBegin();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1201L, 9223372036854775807L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
      
      Range range1 = Range.of(1682L, 9223372036854775807L);
      boolean boolean1 = range1.equals(range0);
      Long.getLong("Zero Based");
      Long long0 = new Long(1201L);
      range1.equals((Object) null);
      Range.CoordinateSystem.values();
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem1);
      assertEquals((-9223372036854775808L), long1);
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean2 = range1.equals(object1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775553L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854775553L);
      boolean boolean0 = range0.endsBefore(range1);
      boolean boolean1 = range0.equals(range0);
      assertFalse(boolean1 == boolean0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967295 .. 9223372036854775553 ]/0B", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.isEmpty();
      range0.isEmpty();
      range0.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      Range range1 = Range.parseRange("[ 1 .. 9223372036854775807 ]/RB");
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1 .. 9223372036854775807 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1 .. 9223372036854775807 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2147483647L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      range0.spliterator();
      boolean boolean0 = range1.endsBefore(range0);
      range1.equals(range0);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ 2147483647 .. 4294967295 ]/0B", string0);
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
      
      long long0 = range1.getBegin();
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      Range range1 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483646L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 255L, 2147483646L);
      range2.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Long long1 = new Long(2147483647L);
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }
}
