/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 10:45:31 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.PopupMenu;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.awt.image.IndexColorModel;
import java.beans.PropertyChangeListener;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.help.JHelpContentViewer;
import javax.help.event.TextHelpModelEvent;
import javax.help.plaf.basic.BasicContentViewerUI;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JApplet;
import javax.swing.JFormattedTextField;
import javax.swing.JInternalFrame;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTextPane;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.multi.MultiSliderUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.JTextComponent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.dom.svg.SVGDOMImplementation;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.xerces.dom.ASDOMImplementationImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.w3c.dom.DocumentType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6848789873619094
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775787L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.repaint();
      jDayChooser0.setAlwaysFireDayProperty(true);
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources(25);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, (FontInfo) null, (PDFDocument) null, pDFResourceContext0, "day", "day", 9223372036854775787L);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      jDayChooser0.setEnabled(false);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      assertEquals(17, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6848789873619094
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775787L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("accessories.plugins.time.JDayChooser$1", 5);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources(25);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, (FontInfo) null, (PDFDocument) null, pDFResourceContext0, "day", "day", 9223372036854775787L);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.drawImage((Image) null, 25, 2927, color0, (ImageObserver) jDayChooser_DecoratorButton0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6266116706270752
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setToolTipText((String) null);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6848789873619094
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775787L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources(25);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      jDayChooser_DecoratorButton0.grabFocus();
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, (FontInfo) null, (PDFDocument) null, pDFResourceContext0, "day", "day", 9223372036854775787L);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(17, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      Style style0 = jTextPane0.getStyle("$$+V7?");
      Style style1 = defaultStyledDocument0.addStyle("$$+V7?", style0);
      Color color0 = defaultStyledDocument0.getForeground(style1);
      jDayChooser0.decorationBackgroundColor = color0;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.getInsets();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setMaxDayCharacters(160);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.revalidate();
      jDayChooser0.monthChooser = null;
      jDayChooser0.getDecorationBackgroundColor();
      int int0 = 0;
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "month", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingForPrint();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8408986380214314
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth((-1642));
      SystemColor systemColor0 = SystemColor.textText;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-80), 0L, 979, 90, '`');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isPaintingTile();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      Locale locale0 = jDayChooser0.getLocale();
      ComponentOrientation.getOrientation(locale0);
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      FileUtil.getDefaultInstance();
      jDayChooser1.drawDays();
      Locale locale1 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      String[] stringArray0 = new String[7];
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6507210986178644
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.monthChooser = jMonthChooser0;
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, (-16L), 38, 38, '\r');
      KeyEvent.getKeyText(38);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.YELLOW;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[3] = (-1997.45F);
      floatArray0[4] = 3576.2642F;
      floatArray0[5] = 0.285F;
      floatArray0[6] = 782.0F;
      floatArray0[7] = 99.0F;
      color0.getComponents(floatArray0);
      jDayChooser0.setSundayForeground(color0);
      int int0 = 1897;
      char char0 = 'Z';
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1897, 1897, 1897, 1897, 'Z', 1897);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer();
      BasicContentViewerUI basicContentViewerUI0 = new BasicContentViewerUI(jHelpContentViewer0);
      TextHelpModelEvent textHelpModelEvent0 = new TextHelpModelEvent("|w7");
      // Undeclared exception!
      try { 
        basicContentViewerUI0.highlightsChanged(textHelpModelEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.help.plaf.basic.BasicContentViewerUI", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.698555534979564
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(463);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      jDayChooser0.isFocusOwner();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3564), (-1491), 463, 39, 'o', (MenuElement[]) null, menuSelectionManager0);
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, 39, 818, 'o', 12, 'u', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setDay(463);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(false);
      SVGDOMImplementation sVGDOMImplementation0 = new SVGDOMImplementation();
      sVGDOMImplementation0.getLocale();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getParent();
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6695767569521247
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(29);
      Color color0 = Color.CYAN;
      color0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.ORANGE;
      jDayChooser0.setFocus();
      jDayChooser0.addNotify();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 5461, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.list();
      jDayChooser0.setWeekdayForeground((Color) null);
      jDayChooser0.getInsets();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      imageIcon0.getImage();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("day", imageIcon0, true);
      imageIcon0.getIconHeight();
      FocusEvent focusEvent0 = new FocusEvent(jRadioButtonMenuItem0, (-9));
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      SystemColor systemColor0 = SystemColor.textHighlightText;
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(850, 0, byteArray0, (-9), true, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of bits must be between 1 and 16.
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.getInsets();
      MockDate mockDate0 = new MockDate(0, 331, 331, 0, 0, 1700);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setToolTipText((String) null);
      java.sql.Date date0 = new java.sql.Date((-904L));
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isFocusOwner();
      jDayChooser0.drawWeeks();
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-752), (-752), 1518, (-752), '8');
      jDayChooser0.keyTyped(keyEvent0);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7205968383010655
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-1012));
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 1016;
      SystemColor systemColor0 = SystemColor.textText;
      jDayChooser0.weekdayForeground = (Color) systemColor0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1016, (-1012), (-80), 34, '$');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7244208539528403
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, (-16L), 38, 38, '\u0018');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay('\u0018');
      jDayChooser0.drawDays();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInheritsPopupMenu();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 1812, "28", 1890);
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setMaxSelectableDate(date1);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6414352168502915
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocus();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      System.setCurrentTimeMillis((-9223372036854775808L));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFocusListeners();
      Color color0 = Color.CYAN;
      jDayChooser0.setDecorationBackgroundColor(color0);
      MultiSliderUI multiSliderUI0 = new MultiSliderUI();
      multiSliderUI0.getUIs();
      Dimension dimension0 = new Dimension();
      jDayChooser0.setPreferredSize(dimension0);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDaysInMonth();
      Color color1 = Color.MAGENTA;
      jDayChooser0.getMaxDayCharacters();
      JYearChooser jYearChooser0 = new JYearChooser();
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu("8");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775787L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      pDFDocumentGraphics2D0.getPDFDocument();
      Color color0 = jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.setColor(color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getToolkit();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFocusListeners();
      Color color0 = Color.CYAN;
      jDayChooser0.setDecorationBackgroundColor(color0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 15, 15, 15, 15, '.');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.CYAN;
      color0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(43);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      StyleContext styleContext0 = new StyleContext();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7244208539528403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.removeNotify();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, (-16L), 38, 38, '\u0018');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay('\u0018');
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6327142381725785
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Dialog Plain 11");
      System.setCurrentTimeMillis(9223372036854775798L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(false);
      int int0 = (-1215);
      jDayChooser0.setDay((-1215));
      long long0 = (-3147L);
      jDayChooser0.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(2089, 13, 248);
      jDayChooser0.setMinSelectableDate(mockDate0);
      Color color0 = Color.CYAN;
      Color.getColor("Patterns not loaded:");
      color0.getColorSpace();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setMaxDayCharacters((-1175));
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInsets();
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 10082, 0L, 10082, 10082, '2');
      keyEvent0.setKeyCode(35);
      jDayChooser0.weekOfYearVisible = false;
      jDayChooser0.getInputVerifier();
      keyEvent0.setKeyChar('2');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.setDayBordersVisible(true);
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
      
      Date date2 = jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertNotSame(date2, date1);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-1012));
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.weekdayForeground = (Color) systemColor0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1016, (-1012), (-80), 34, '$');
      jDayChooser0.setDay(1064);
      jDayChooser0.setMonth((-80));
      jDayChooser0.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-1012));
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.getInsets();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.809761514970909
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775787L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      ComponentOrientation componentOrientation0 = ComponentOrientation.RIGHT_TO_LEFT;
      jDayChooser0.applyComponentOrientation(componentOrientation0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-73), 9223372036854775787L, (-73), (-73), '2');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-73));
      jDayChooser0.drawDays();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(true);
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField();
      JTextComponent.AccessibleJTextComponent jTextComponent_AccessibleJTextComponent0 = jFormattedTextField0.new AccessibleJTextComponent();
      jTextComponent_AccessibleJTextComponent0.getCharacterBounds((-73));
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.hit((Rectangle) null, (Shape) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInsets();
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 39, 39, 39, '2');
      keyEvent0.setKeyCode(40);
      jDayChooser0.getInputVerifier();
      keyEvent0.setKeyChar('?');
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JDayChooser jDayChooser0 = new JDayChooser();
      Cursor cursor0 = jDayChooser0.getCursor();
      jDayChooser0.putClientProperty(cursor0, cursor0);
      jDayChooser0.getInputContext();
      jDayChooser0.removeNotify();
      jDayChooser0.maxDayCharacters = 12;
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Locale locale0 = Locale.PRC;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Calendar.getAvailableCalendarTypes();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(true);
      Color.getColor("day");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7245232524096474
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getInsets();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jDayChooser0);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 2488, (-3564), 210, (-1272), '<', (MenuElement[]) null, menuSelectionManager0);
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser0, (-1406), (-792L), 28, 33, ',', (MenuElement[]) null, menuSelectionManager1);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1012));
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1016, (-1012), (-59), '$', '$');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 1016, '$', 1016, (-59), '^');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6062555313671196
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocusTraversalKeysEnabled(true);
      assertEquals(2, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1));
      jDayChooser0.transferFocus();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-1012));
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1016, 1383L, (-1012), 1016, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-80));
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.692610179636627
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.initialized = false;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, (-16L), 38, 38, '\u0018');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay('\u0018');
      jDayChooser0.drawDays();
      jDayChooser0.setLocale((Locale) null);
      jDayChooser0.getActionMap();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(17, jDayChooser0.getDay());
  }
}
