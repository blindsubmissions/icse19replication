/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 04:42:13 GMT 2018
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Base64Decoder;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Decoder_ESTest extends Base64Decoder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.16302362949436594
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, (byte)41);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, bufferedOutputStream0);
      base64Decoder0.setStatusRow(3);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      Newzgrabber.verbose = true;
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder1.setOutputStream(bufferedOutputStream0);
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.14999492361041503
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)90;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      bufferedCustomInputStream0.read();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)90;
      byteArray0[8] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(4L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.15407610367102942
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(sequenceInputStream0, false);
      byteArrayInputStream0.reset();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      Newzgrabber.verbose = true;
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)44;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)44;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)44;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)90);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      byteArrayInputStream0.mark(65);
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(byteArrayInputStream0, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      base64Decoder0.ABORT = true;
      base64Decoder0.decodeStream();
      assertEquals(0L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.15407610367102942
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)104;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)41;
      byteArray0[6] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "yfA");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, (byte)104);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      base64Decoder0.setBegin(true);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, bufferedOutputStream0);
      base64Decoder1.updateProgress();
      base64Decoder1.setBegin(false);
      bufferedCustomInputStream0.closeTemp();
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder1.decodeStream();
      assertEquals(2L, base64Decoder1.getLineCount());
      
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(0L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.167944147734173
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      pipedOutputStream0.close();
      bufferedCustomInputStream0.markSupported();
      Newzgrabber.IsBatch = true;
      base64Decoder0.decodeStream();
      try { 
        bufferedCustomInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.15407610367102942
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)44;
      byteArray0[7] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      bufferedCustomInputStream0.closeTemp();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, pipedOutputStream0);
      pipedOutputStream0.close();
      base64Decoder0.setTotalLines((byte)47);
      boolean boolean0 = base64Decoder0.foundbegin;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(pipedOutputStream0, (byte)49);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream1, bufferedOutputStream0);
      base64Decoder0.setStatusRow(1939);
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, bufferedOutputStream0);
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      Base64Decoder base64Decoder2 = new Base64Decoder(bufferedCustomInputStream1, pipedOutputStream0);
      base64Decoder2.decodeStream();
      assertFalse(base64Decoder2.equals((Object)base64Decoder1));
  }
}
