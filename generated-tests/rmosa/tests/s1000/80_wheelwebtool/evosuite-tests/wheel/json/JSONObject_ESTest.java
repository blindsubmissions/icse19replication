/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 04:51:23 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONException;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      boolean boolean0 = jSONObject1.isNull("$Rt");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = JSONObject.quote("BMa{N<[,n$Lbp/ 9(\"");
      assertEquals("\"BMa{N<[,n$Lbp/ 9(\\\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(3233, 0);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[2] = "0";
      JSONObject jSONObject0 = new JSONObject("0", stringArray0);
      String string0 = null;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of false
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject.quote("B!a{N[,n)Lp/ 9(\"");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("\"B!a{N[,n)Lp/ 9(\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"B!a{N[,n)Lp/ 9(\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      Long long0 = new Long((-1L));
      String string1 = JSONObject.valueToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = JSONObject.quote("{\"\n");
      assertEquals("\"{\\\"\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 2496.89);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.558255126072715
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      JSONObject jSONObject0 = new JSONObject((Object) "\"B!a{N<[,nLbp/ 9(\"\"");
      jSONObject0.optLong("?I\"d=%to");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"B!a{N<[,nLbp/ 9(\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"B!a{N<[,nLbp/ 9(\"\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9683304358882807
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("A=^@(X7", "A=^@(X7");
      Short short0 = new Short((short)1123);
      jSONObject1.putOpt("toL", short0);
      jSONObject0.optLong("A=^@(X7");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "toL";
      stringArray0[1] = "A=^@(X7";
      stringArray0[2] = "toL";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.valueToString(jSONObject2);
      assertEquals(2, jSONObject0.length());
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9440066347969065
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", hashMap0);
      jSONObject1.put("-J2BeE)-/", (Map) hashMap0);
      int int0 = 32;
      int int1 = (-365);
      try { 
        jSONObject0.getDouble("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0456906387805505
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      hashMap0.put("B!a{+<[,nL{bp/ 9(\"", "int");
      Long long0 = new Long(0L);
      hashMap0.put(long0, " of ");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Float, Object> hashMap1 = new HashMap<Float, Object>();
      jSONObject0.optDouble("B!a{+<[,nL{bp/ 9(\"", 0.0);
      JSONObject.quote("B!a{+<[,nL{bp/ 9(\"");
      try { 
        jSONObject0.getBoolean("B!a{+<[,nL{bp/ 9(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B!a{+<[,nL{bp/ 9(\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3247643021871367
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      JSONObject jSONObject0 = new JSONObject((Object) "\"B!a{N<[,nLbp/ 9(\"\"");
      try { 
        jSONObject0.accumulate((String) null, "B!a{N<[,nLbp/ 9(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      jSONObject0.toString(1677);
      try { 
        jSONObject0.getJSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject.quote("B!a{N<[&n$7p/ 9(\"");
      String string0 = ",\n";
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("B!a{N<[&n$7p/ 9(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of B!a{N<[&n$7p/ 9(\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6301931932102298
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      JSONObject jSONObject0 = new JSONObject((Object) "\"B!a{N<[,nLbp/ 9(\"\"");
      jSONObject0.optInt("B!a{N<[,nLbp/ 9(\"");
      try { 
        jSONObject0.getBoolean("B!a{N<[,nLbp/ 9(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"B!a{N<[,nLbp/ 9(\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-4));
      JSONObject jSONObject1 = jSONObject0.accumulate("isput", short0);
      jSONObject1.optDouble("isput", (double) (short) (-4));
      Float float0 = new Float((-4.0));
      assertEquals((-4.0F), (float)float0, 0.01F);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject.quote("{\"\n");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONArray> linkedList1 = new LinkedList<JSONArray>();
      JSONObject.getNames((Object) "0 is no? a C[olea_.");
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject1.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2403514954838357
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      JSONObject jSONObject0 = new JSONObject((Object) "\"B!a{N<[,nLbp/ 9(\"\"");
      Object object0 = new Object();
      jSONObject0.putOpt("C", object0);
      try { 
        Short.valueOf("B!a{N<[,nLbp/ 9(\"", 108);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 108 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("0");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "B!a{N<,nLbp/ 9\"";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("B!a{N<,nLbp/ 9\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of B!a{N<,nLbp/ 9\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject.quote("{\"\n");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{\"\n";
      stringArray0[1] = "{\"\n";
      stringArray0[2] = "\"{\"\n\"";
      stringArray0[3] = "z";
      stringArray0[4] = "\"{\"\n\"";
      stringArray0[5] = "\"{\"\n\"";
      stringArray0[6] = "\"{\"\n\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Float float0 = new Float((-293.8351F));
      Float.isFinite(5569.412F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) float0);
      jSONObject1.getDouble("true");
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.listIterator();
      jSONArray0.put((Object) linkedList0);
      String string0 = jSONArray0.join("[]");
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-263.542986852271));
      assertEquals("-263.542986852271", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.558255126072715
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      assertEquals("\"B!a{N<[,nLbp/ 9(\\\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"B!a{N<[,nLbp/ 9(\"\"");
      boolean boolean0 = jSONObject0.optBoolean("B!a{N<[,nLbp/ 9(\"", false);
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6484893275935664
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = JSONObject.quote("{\"\n");
      assertEquals("\"{\\\"\\n\"", string0);
      
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean("\"{\"\n\"");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
      
      String string1 = JSONObject.doubleToString((-529.0));
      assertEquals("-529", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = JSONObject.quote("@Fi</+&&BuACK");
      assertEquals("\"@Fi<\\/+&&BuACK\"", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4216010062582942
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.quote("{\"\n");
      assertEquals("\"{\\\"\\n\"", string0);
      
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.quote("getjoin");
      assertEquals("\"getjoin\"", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("'", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      jSONObject0.remove("~ ");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)460);
      jSONObject0.putOpt((String) null, short0);
      Boolean boolean0 = new Boolean("Nva|YNnKT'n-s8LvSk");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4421755142764856
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      Short short0 = new Short((short) (-2128));
      JSONObject.numberToString(short0);
      JSONObject jSONObject0 = new JSONObject((Object) "B!a{N<[,nLbp/ 9(\"");
      try { 
        jSONObject0.getString("_=rY");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_=rY\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1679L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4216010062582942
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = JSONObject.quote("{\"\n");
      assertEquals("\"{\\\"\\n\"", string0);
      
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = JSONObject.quote("{\"\n");
      assertEquals("\"{\\\"\\n\"", string0);
      
      Byte byte0 = new Byte((byte)19);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString(108, 2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 47, 47);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Short short0 = new Short((short)6);
      Integer integer0 = new Integer((short)6);
      Double double0 = new Double((-2540.027198901664));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String[] stringArray1 = new String[0];
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      hashMap0.put("getvalueOf", (JSONArray) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      JSONObject.quote("oie=W_.@><");
      String string0 = JSONObject.quote("\"oie=W_.@><\"");
      assertEquals("\"\\\"oie=W_.@><\\\"\"", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      JSONObject jSONObject0 = new JSONObject((Object) "\"B!a{N<[,nLbp/ 9(\"\"");
      String string0 = jSONObject0.toString((-1199), (-1199));
      Float float0 = new Float((-1820.359212));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("getoptLong", "getoptLong");
      try { 
        jSONObject0.getJSONObject("pu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(16);
      Integer integer1 = new Integer(1866);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = JSONObject.quote("{\"\n");
      assertEquals("\"{\\\"\\n\"", string0);
      
      Double double0 = new Double(841.38087);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.max(841.38087, 841.38087);
      jSONObject0.toString((-1459), (-1459));
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.valueToString("\"{\"\n\"", (-1459), 39);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject.quote("{D\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\"{D\n\"");
      // Undeclared exception!
      jSONObject0.toString(4423, 4423);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject((Object) "B!a{N<[,nLbp/ 9(\"");
      String string0 = jSONObject0.toString();
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.301273572363032
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = JSONObject.quote("B!a{+<[,nL{bp/ 9(\"");
      assertEquals("\"B!a{+<[,nL{bp/ 9(\\\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"B!a{+<[,nL{bp/ 9(\"\"");
      jSONObject0.toString(65, 65);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Short short0 = new Short((short) (-2128));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(linkedList0, 88, (short) (-2128));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float((-626.0F));
      Float.min(178.5F, 178.5F);
      Float.max(178.5F, (-740.8F));
      Float.max(2201.164F, (-626.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.names();
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("JSONArray[");
      assertEquals("", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      Float float0 = new Float(1134.0F);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float.sum((-95.12247F), 1134.0F);
      String string0 = "u?p~r";
      try { 
        jSONObject0.getBoolean("u?p~r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u?p~r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.quote("6&\n");
      assertEquals("\"6&\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 3634, (-136));
      assertEquals("null", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = JSONObject.quote("B!a{+<[,nL{bp/ 9(\"");
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("isequals");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("istrim");
      JSONException jSONException0 = jSONTokener0.syntaxError("istrim");
      jSONTokener0.toString();
      JSONObject jSONObject0 = new JSONObject(jSONException0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.append("2/M.o", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject.quote("{\"\n");
      JSONTokener jSONTokener0 = new JSONTokener("{\"\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 3 of {\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.851937179228349
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "pa";
      JSONObject jSONObject1 = jSONObject0.put("pa", 0L);
      jSONObject0.optInt("pa", 1);
      jSONObject1.optDouble("E:s!*6/|y39A");
      jSONObject1.keys();
      jSONObject1.getInt("pa");
      try { 
        jSONObject0.getJSONArray("pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pa\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 12, 12);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject.quote("{M\n");
      JSONTokener jSONTokener0 = new JSONTokener("{M\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {M
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("{");
      jSONObject0.accumulate("{", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("{");
      assertEquals(1, jSONObject0.length());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      JSONTokener jSONTokener0 = new JSONTokener("isvalueOf");
      jSONTokener0.toString();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of isvalueOf
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-738.4286688379));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      linkedList0.add(boolean0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        Float.valueOf("re");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("fVSL", "fVSL");
      jSONObject0.accumulate("fVSL", "fVSL");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("fVSL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of fVSL
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.quote("{\"\n");
      assertEquals("\"{\\\"\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0, 258, (-3986));
      assertEquals("{}", string1);
      
      String string2 = jSONObject0.toString((-3986), 373);
      assertEquals("{}", string2);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9803887186103726
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("-J2BeE)-/", (Map) hashMap0);
      jSONObject0.toString(32, (-365));
      JSONObject.valueToString(jSONObject2, (-365), 12);
      try { 
        jSONObject1.getBoolean("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.1057042461602014
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONArray.", hashMap0);
      JSONObject jSONObject2 = jSONObject1.put("-J2BeE)-/", (Map) hashMap0);
      jSONObject0.toString(32, (-365));
      jSONObject2.optInt("-J2BeE)-/");
      JSONObject.valueToString(jSONObject2, (-365), 12);
      JSONObject.quote((String) null);
      JSONObject.valueToString("\"\"", 12, 105);
      jSONObject1.toString((-365), 274);
      Object object1 = new Object();
      JSONObject.valueToString(object1, 105, 87);
      JSONObject.valueToString(hashMap0, (-365), 105);
      try { 
        Byte.decode("{}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.450805020083924
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float((-626.0F));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-1206.963));
      JSONObject jSONObject1 = jSONObject0.accumulate("rPA0cOPC", double0);
      try { 
        jSONObject1.getJSONObject("rPA0cOPC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"rPA0cOPC\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.255263950786102
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = JSONObject.quote("B!a{N<[,nLbp/ 9(\"");
      assertEquals("\"B!a{N<[,nLbp/ 9(\\\"\"", string0);
      
      Short short0 = new Short((short) (-2128));
      JSONObject.numberToString(short0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((int) (short) (-2128), 4077);
      String string1 = JSONObject.valueToString(hashMap0, (short) (-2128), (short) (-2128));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("`@wC4c'a", "`@wC4c'a");
      jSONObject1.optString("`@wC4c'a", "ky");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6423651354584372
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "4");
      jSONObject0.put("4", 0L);
      jSONObject0.getLong("4");
      Long long0 = new Long((-1766L));
      Integer.getInteger("4", (-363));
      try { 
        jSONObject0.append("4", "4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[4] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("{", (Collection) linkedList0);
      Boolean boolean0 = Boolean.valueOf("{");
      Boolean.getBoolean("{");
      JSONObject jSONObject1 = jSONObject0.accumulate("{", boolean0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.0981473891350673
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("pa", (-1424));
      Float float0 = new Float((float) (-1424));
      JSONObject jSONObject2 = jSONObject1.accumulate("pa", "getlogicalAnd");
      jSONObject2.getJSONArray("pa");
      JSONObject jSONObject3 = jSONObject0.optJSONObject("pa");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("{$t%c2#", "{$t%c2#");
      jSONObject0.optJSONArray("{$t%c2#");
      JSONTokener jSONTokener0 = new JSONTokener("{$t%c2#");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {$t%c2#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.1275576999732224
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Float float0 = new Float((-626.0F));
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("Substring bounds error", object0);
      jSONObject1.optLong("Substring bounds error", 2188L);
      jSONObject1.optDouble("|s}RD\"U4eD");
      JSONObject.quote("|s}RD\"U4eD");
      jSONObject1.optBoolean("Substring bounds error");
      try { 
        jSONObject0.getBoolean("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{W:f0& ;y08-EOag]!");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 17 of {W:f0& ;y08-EOag]!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Wf=&;y08-EOag]I!");
      jSONTokener0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {Wf=&;y08-EOag]I!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{p:f0&=;y08-EOag]!");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 7 of {p:f0&=;y08-EOag]!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.0282757957692676
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = jSONObject0.toString((-1087));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\",\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005\n}");
      String string1 = jSONObject1.toString(87, (-1087));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      String string0 = "] is not a JSONArray.";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("{");
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.accumulate("{", boolean0);
      boolean boolean1 = jSONObject0.optBoolean("{");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "4");
      Long long0 = new Long((-1772L));
      jSONObject0.append("4", long0);
      jSONObject0.append("4", "4");
      jSONObject0.keys();
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("0Cxo7&(zhBW^>c");
      assertEquals("\"0Cxo7&(zhBW^>c\"", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("-J2BeE)-/", (Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      Double double0 = Double.valueOf((double) 3);
      hashMap0.put(double0, jSONObject1);
      StringWriter stringWriter0 = new StringWriter(3);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[2];
      jSONObject0.accumulate("izb:K(<S 5", jSONObject0);
      jSONObject0.getJSONObject("izb:K(<S 5");
      Integer integer0 = new Integer(79);
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("] is not a JSONArray.", hashMap0);
      jSONObject0.optBoolean("000", true);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optDouble("000");
      Long.compare(4L, 4L);
      JSONObject jSONObject2 = jSONObject1.put("3\"+<8n#g", (Map) hashMap0);
      jSONObject1.toString(0, 0);
      JSONObject jSONObject3 = jSONObject2.optJSONObject("3\"+<8n#g");
      assertNotSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = JSONObject.quote("B!a{+<[,nL{bp/ 9(\"");
      assertEquals("\"B!a{+<[,nL{bp/ 9(\\\"\"", string0);
      
      JSONObject.valueToString("\"B!a{+<[,nL{bp/ 9(\"\"", (-69960073), (-69960073));
      String string1 = JSONObject.doubleToString((-69960073));
      assertEquals("-6.9960073E7", string1);
      
      String string2 = JSONObject.quote("-6.9960073E7");
      assertEquals("\"-6.9960073E7\"", string2);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      jSONObject1.putOpt("tri", (Object) null);
      boolean boolean0 = jSONObject1.optBoolean("true");
      assertTrue(boolean0);
      
      JSONObject jSONObject2 = new JSONObject((Object) "tri");
      assertEquals(3, jSONObject2.length());
      
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }
}
