/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 04:27:02 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import java.util.logging.Level;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      int int0 = theClient0.getTimeout();
      assertTrue(theClient0.getTrusted());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.setTimeout(0);
      theClient0.getServer();
      theClient0.setServer((QuickServer) null);
      int int0 = theClient0.getTimeout();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, int0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.setTimeout(1264);
      theClient0.setMaxAuthTryMsg("v4Edzu^sf[q$P");
      theClient0.getClientEventHandler();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertEquals(1264, theClient0.getTimeout());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("sOzzO(JM`I ");
      theClient0.setMaxAuthTryMsg("sOzzO(JM`I ");
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getSocket();
      int int0 = 0;
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      Level level0 = Level.FINE;
      // Undeclared exception!
      try { 
        blockingClientHandler0.sendSystemMsg("sOzzO(JM`I ", level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("!C}");
      theClient0.setMaxAuthTry(0);
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.getClientWriteHandler();
      theClient0.setCommunicationLogging(true);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxConnectionMsg();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getSocket();
      theClient0.setSocket((Socket) null);
      theClient0.getClientCommandHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      ClientEvent clientEvent0 = ClientEvent.READ;
      blockingClientHandler0.isClientEventNext(clientEvent0);
      // Undeclared exception!
      try { 
        blockingClientHandler0.readBinary();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't read Binary :DataType.IN is not in DataMode.BINARY
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientData();
      theClient0.setMaxAuthTry(0);
      theClient0.getSocketChannel();
      String string0 = "";
      // Undeclared exception!
      try { 
        MockInetSocketAddress.createUnresolved("", (-1963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1963
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setServer((QuickServer) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.getTimeoutMsg();
      theClient0.getClientCommandHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setTrusted(true);
      theClient0.getTimeout();
      theClient0.getMaxConnectionMsg();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.getSocketChannel();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(inetAddress0, (-2431));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-2431
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.toString();
      theClient0.setMaxAuthTryMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      ClientEvent clientEvent1 = ClientEvent.CLOSE_CON;
      theClient0.setCommunicationLogging(false);
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      Level level0 = Level.FINE;
      // Undeclared exception!
      try { 
        blockingClientHandler0.sendSystemMsg("Error stoping shell: ", level0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(1559);
      theClient0.getClientEventHandler();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("lUO", 0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@6024d329
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      theClient0.setCommunicationLogging(true);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getMaxAuthTryMsg();
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getSocket();
      theClient0.getTrusted();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket((String) null, 2732);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@3c061f46
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(false);
      theClient0.setMaxConnectionMsg("");
      theClient0.setMaxAuthTry((-1));
      theClient0.setTimeout((-637));
      theClient0.setMaxAuthTryMsg("UhG9b(afI");
      theClient0.getTimeout();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setMaxAuthTryMsg("42");
      theClient0.setTimeout((-1));
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientWriteHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEvent();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout(596);
      theClient0.getCommunicationLogging();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeout(4);
      theClient0.getAuthenticator();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTimeoutMsg("org.quickserver.net.server.TheClient");
      theClient0.toString();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.toString();
      assertEquals(4, theClient0.getTimeout());
  }
}
