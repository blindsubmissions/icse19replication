/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:04:23 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseMotionListener;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.sql.Date;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import javax.help.BackAction;
import javax.help.JHelp;
import javax.help.plaf.basic.BasicHelpUI;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.JProgressBar;
import javax.swing.MenuElement;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.text.DefaultCaret;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemExsltFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.659816019073003
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = AWTEventMulticaster.add(containerListener0, (ContainerListener) null);
      AWTEventMulticaster.remove(containerListener1, containerListener1);
      BorderLayout borderLayout0 = new BorderLayout();
      Dimension dimension0 = jDayChooser0.getSize();
      jDayChooser0.setMinimumSize(dimension0);
      jDayChooser0.addContainerListener((ContainerListener) null);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setEnabled(true);
      dimension0.clone();
      MindMapMode mindMapMode0 = new MindMapMode();
      System.setCurrentTimeMillis(9L);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.addMouseMotionListener((MouseMotionListener) null);
      JDayChooser jDayChooser2 = jYearChooser0.dayChooser;
      assertNull(jDayChooser2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "";
      stringArray0[4] = "day";
      stringArray0[6] = "";
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      try { 
        XmlDocument.createXmlDocument("day", false);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.crimson.parser.Parser2", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^~GTP(;";
      stringArray0[1] = "r~]cDl!SuqVD`GCxK>R";
      stringArray0[2] = "";
      stringArray0[3] = "r~]cDl!SuqVD`GCxK>R";
      stringArray0[4] = "r~]cDl!SuqVD`GCxK>R";
      stringArray0[5] = "r~]cDl!SuqVD`GCxK>R";
      stringArray0[6] = "r~]cDl!SuqVD`GCxK>R";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-2683);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2391, 468L, 2391, (-2683), 'C');
      jDayChooser0.keyTyped(keyEvent0);
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent(jDayChooser0, 2391, 482L, 2391, (-2683), 'C', 2391);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1, false);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      Locale locale0 = Locale.ITALIAN;
      jDayChooser0.firePropertyChange("day", (-1.0F), 416.19385F);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7129242178517146
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-38);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.remove((FocusListener) jDayChooser0, (FocusListener) jDayChooser0);
      jDayChooser0.firePropertyChange("day", 416.19385F, (-1.0F));
      jDayChooser0.removeFocusListener((FocusListener) null);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Color color0 = jDayChooser1.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      
      jDayChooser1.setDayBordersVisible(true);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setMonth((-696));
      jDayChooser0.setDay((-696));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxDayCharacters();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6304702401606765
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInheritsPopupMenu();
      jDayChooser0.setMonth((-696));
      jDayChooser0.setDay((-696));
      jDayChooser0.setFocus();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isOpaque();
      Color color0 = jDayChooser1.getDecorationBackgroundColor();
      System.setCurrentTimeMillis((-1L));
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getBorder();
      jDayChooser0.drawDays();
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      jDayChooser0.setSundayForeground(colorUIResource0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("day");
      jDayChooser0.list((PrintWriter) mockPrintWriter0, (-297));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.now();
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      jDayChooser0.setCalendar(gregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay((-696));
      jDayChooser0.setEnabled(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDebugGraphicsOptions(0);
      JProgressBar jProgressBar0 = new JProgressBar(0);
      JProgressBar jProgressBar1 = new JProgressBar(0, 0);
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.setYear(0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.requestFocus();
      jDayChooser0.setDayBordersVisible(true);
      MenuElement[] menuElementArray0 = new MenuElement[8];
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "Windows", (-1157));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis((-4562L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser1.isOpaque();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 228, (-4562L), 7, (-1179), 'E');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-587L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7007775121776714
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser1 = new JYearChooser();
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 2641, 2641, 34, 34, '');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      keyEvent0.consume();
      MindMapMode mindMapMode0 = new MindMapMode();
      System.setCurrentTimeMillis((-9223372036854775789L));
      JDayChooser jDayChooser2 = new JDayChooser(true);
      JYearChooser jYearChooser2 = new JYearChooser();
      jYearChooser2.addMouseMotionListener((MouseMotionListener) null);
      JDayChooser jDayChooser3 = new JDayChooser(true);
      jDayChooser3.getInsets();
      JDayChooser jDayChooser4 = new JDayChooser(true);
      BackAction backAction0 = new BackAction(jYearChooser2);
      jDayChooser4.addMouseListener(backAction0);
      // Undeclared exception!
      try { 
        jDayChooser4.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = null;
      jDayChooser0.oldDayBackgroundColor = null;
      jDayChooser0.setMonth((-657));
      jDayChooser0.setWeekdayForeground((Color) null);
      int int0 = 2;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-657));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getPreferredSize();
      jDayChooser0.revalidate();
      jDayChooser0.drawDays();
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)38;
      byteArray0[2] = (byte)117;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)17;
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 203);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(203);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = null;
      try {
        pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, (OutputStream) null, (-1335), (-2995));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.fop.pdf.PDFDocument", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.remove((FocusListener) jDayChooser0, (FocusListener) jDayChooser0);
      jDayChooser0.firePropertyChange("", 416.19385F, (-1.0F));
      jDayChooser0.removeFocusListener((FocusListener) null);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(772);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      JYearChooser jYearChooser1 = new JYearChooser();
      MindMapMode mindMapMode0 = new MindMapMode();
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser0.getSelectedDay();
      jYearChooser1.getInsets();
      // Undeclared exception!
      try { 
        jDayChooser2.add((Component) jYearChooser0, (Object) null, 898);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getClientProperty("day");
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDayBordersVisible(true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      MockFile mockFile0 = new MockFile("hk>,X@AEPJI", "-*m");
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInheritsPopupMenu();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.SMALL_CAPS;
      ActionEvent actionEvent0 = new ActionEvent(integer0, 160, "day", 4262L, 1177);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isFocusable();
      jDayChooser0.isDayBordersVisible();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.662701752014223
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getContainerListeners();
      jDayChooser0.requestFocus(false);
      jDayChooser0.getGraphicsConfiguration();
      jDayChooser0.setMaxDayCharacters(42);
      jDayChooser0.setMonth(42);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 751, 0L, 751, 751, '2');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange(mockDate0, (java.util.Date) null);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters((-1837));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = new ActionMap();
      actionMap0.getParent();
      jDayChooser0.setActionMap((ActionMap) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Locale locale0 = Locale.FRANCE;
      jYearChooser0.getVisibleRect();
      Locale locale1 = Locale.JAPANESE;
      jDayChooser1.setMaxDayCharacters(0);
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      JDayChooser jDayChooser2 = jYearChooser0.dayChooser;
      jDayChooser1.drawDays();
      assertFalse(jDayChooser1.isDayBordersVisible());
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate1 = new MockDate(0L);
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate1);
      MockDate mockDate2 = new MockDate(0L);
      assertFalse(mockDate2.equals((Object)mockDate0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AWTEventMulticaster.remove((FocusListener) jDayChooser0, (FocusListener) jDayChooser0);
      jDayChooser0.isOpaque();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 9L, 10, 38, 'I');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemExsltFunction elemExsltFunction0 = new ElemExsltFunction();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemExsltFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.68077123393764
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getVerifyInputWhenFocusTarget();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser1.isOpaque();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 630, 0L, 630, 37, 'I');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      ElemExsltFunction elemExsltFunction0 = new ElemExsltFunction();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemExsltFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis((-4562L));
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(160);
      assertEquals(31, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 'E', 31536000000L, 1205, 33, 'E');
      keyEvent0.consume();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.setContentAreaFilled(false);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser_DecoratorButton0.isBorderPainted();
      jDayChooser1.isOpaque();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 'E', 7, (-1179), 39, 'E');
      keyEvent0.paramString();
      keyEvent0.consume();
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      JYearChooser jYearChooser1 = new JYearChooser();
      MindMapMode mindMapMode0 = new MindMapMode();
      System.setCurrentTimeMillis(9223372036854775807L);
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 2669, 0L, 2369, 38, ';');
      JDayChooser jDayChooser2 = new JDayChooser(true);
      assertEquals(17, jDayChooser2.getDay());
      
      jDayChooser2.setDay((-1026));
      assertEquals(1, jDayChooser2.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.isOpaque();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 'E', 'E', 1205, 35, 'E');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      System.setCurrentTimeMillis(1205);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.isOpaque();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 7, 0L, (-462), 36, 'E');
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInheritsPopupMenu();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4971), (-4971), (-4971), 40, 'h');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemExsltFunction elemExsltFunction0 = new ElemExsltFunction();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemExsltFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isFocusOwner();
      jDayChooser0.setFocus();
      jDayChooser0.setIgnoreRepaint(true);
      Locale locale0 = new Locale("4");
      jDayChooser0.setAlwaysFireDayProperty(true);
      locale0.toLanguageTag();
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayLanguage(locale1);
      locale0.getUnicodeLocaleKeys();
      System.setCurrentTimeMillis((-1L));
      jDayChooser0.drawDays();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay((-610));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = new ActionMap();
      actionMap0.getParent();
      jDayChooser0.getActionMap();
      jDayChooser0.setActionMap((ActionMap) null);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JYearChooser jYearChooser1 = new JYearChooser();
      System.setCurrentTimeMillis((-9223372036854775808L));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser1, 37, 0L, 630, 37, '.');
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemExsltFunction elemExsltFunction0 = new ElemExsltFunction();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemExsltFunction0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ActionMap actionMap0 = new ActionMap();
      actionMap0.getParent();
      JYearChooser jYearChooser0 = new JYearChooser();
      JYearChooser jYearChooser1 = new JYearChooser();
      MindMapMode mindMapMode0 = new MindMapMode();
      System.setCurrentTimeMillis((-9223372036854775789L));
      JHelp jHelp0 = new JHelp();
      BasicHelpUI basicHelpUI0 = new BasicHelpUI(jHelp0);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.isOpaque();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 1655L, 39, 37, '>');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(39);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser1 = new JYearChooser();
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      jDayChooser0.setActionMap(actionMap0);
      JYearChooser jYearChooser2 = jDayChooser0.yearChooser;
      JYearChooser jYearChooser3 = new JYearChooser();
      System.setCurrentTimeMillis(62135596800000L);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.firePropertyChange("day", 200.0F, (-1796.496F));
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeFocusListener(defaultCaret0);
      Locale locale0 = Locale.FRANCE;
      jDayChooser1.setLocale(locale0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initialized = false;
      Locale locale0 = Locale.TAIWAN;
      Locale.setDefault(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawDays();
      SystemColor systemColor0 = SystemColor.textHighlight;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7561376338576675
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      System.setCurrentTimeMillis((-9223372036854775808L));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "day";
      stringArray0[0] = "day";
      stringArray0[3] = "year";
      stringArray0[4] = "nodeChanged called for node ";
      jDayChooser0.dayNames = stringArray0;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.isOptimizedDrawingEnabled();
      jYearChooser0.getVisibleRect();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser1.setEnabled(false);
      jDayChooser1.setMonth(4);
      jDayChooser0.setDay(4);
      jDayChooser1.setEnabled(false);
      Color color0 = Color.blue;
      jDayChooser1.setDecorationBackgroundColor(color0);
      System.setCurrentTimeMillis(2159L);
      jDayChooser0.setEnabled(true);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      System.setCurrentTimeMillis((-4562L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.paintImmediately(7, 7, 1219, 160);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1233, 7, 160, 39, 'G');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getPreferredSize();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      JYearChooser jYearChooser1 = new JYearChooser();
      MindMapMode mindMapMode0 = new MindMapMode();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setDay((-1026));
      jDayChooser2.drawDays();
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initialized = false;
      jDayChooser0.removeFocusListener(jDayChooser0);
      jDayChooser0.drawDays();
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setDayBordersVisible(false);
  }
}
