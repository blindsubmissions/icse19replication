/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 04:53:44 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9043725863624155
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("apparr");
      String string2 = lovinsStemmer0.stem("appar");
      assertEquals("appar", string2);
      assertTrue(string2.equals((Object)string1));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.799644564299344
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$");
      String string0 = lovinsStemmer0.stemString("$");
      assertEquals("$", string0);
      
      String string1 = lovinsStemmer0.stem("9eg&2c>8p%daEUS");
      assertEquals("9eg&2c>8p%daeus", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8317603713216299
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("nrY.-c[g<zgj");
      assertEquals("nry.-c[g<zgj", string0);
      
      String string1 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9865967768482679
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("`n>LqUEvy'W'8v7+ N");
      assertEquals("`n>lquevy'w'8v7+ n", string0);
      
      String string1 = lovinsStemmer0.stemString("The language the document is in.");
      assertEquals("th langu th docum is in.", string1);
      
      String string2 = lovinsStemmer0.stemString("th langu th docum is in.");
      assertEquals("th langu th docum is in.", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9974677819946657
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string0);
      
      String string1 = lovinsStemmer0.stem("abstract");
      assertEquals("abstract", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.020213055299294
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      lovinsStemmer0.stem("How something strange has been published. The first word should be capitalized.");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0452092050554471
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("BzQ<g\"5*%");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String string0 = lovinsStemmer2.stemString("/Ps&uzUm?+]^#2");
      assertEquals("/ps&uzum?+]^#2", string0);
      
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.stemString("T2VaTaBVI tLd4l\"O^9~");
      assertEquals("t2vatabv tld4l\"o^9~", string3);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0041240229502482
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("arisations");
      assertEquals("aris", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("O#");
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("her");
      assertEquals("hes", string2);
      
      String string3 = lovinsStemmer0.stemString("captalyz");
      assertEquals("captalys", string3);
      
      String string4 = lovinsStemmer0.stem("Izide");
      assertEquals("iz", string4);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0472665798410326
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("',9O");
      assertEquals("',9o", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString(">et pJsJion of Upton - ");
      assertEquals(">et pjsj of upt - ", string1);
      
      String string2 = lovinsStemmer0.stemString(">et pjsj of upt - ");
      assertEquals(">et pjsj of upt - ", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("pand");
      assertEquals("pans", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ond");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("/he alternating decision tree learning algorithX");
      String string0 = lovinsStemmer0.stem("ond");
      assertEquals("ons", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1122992941197356
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("8034");
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string1);
      
      String string2 = lovinsStemmer0.stemString("null");
      assertEquals("nl", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0074955759632598
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the-editorKfield gives the editor of the book or colleton in which the reference appears.");
      String[] stringArray0 = new String[1];
      lovinsStemmer0.stem("");
      stringArray0[0] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the-editorKfield gives the editor of the book or colleton in which the reference appears.";
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the-editorKfield gives the editor of the book or colleton in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th-editorkfield giv th edit of th book or colles in which th refer appear.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("her");
      String string2 = lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th-editorkfield giv th edit of th book or colles in which th refer appear.");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is al an author field, then th-editorkfield giv th edit of th book or col in which th refer appear.", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9688105408281662
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("cid");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
      
      String string2 = lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is al an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("bex");
      assertEquals("bic", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The sponsoring institution of a technical report.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("th sponsor institut of a techn report.");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1999";
      stringArray0[1] = "th spons institut of a techn report.";
      stringArray0[2] = "The sponsoring institution of a technical report.";
      stringArray0[3] = "R{azSTr<C$Gx;2?=^D+";
      stringArray0[4] = "The sponsoring institution of a technical report.";
      stringArray0[5] = "th spons institut of a techn report.";
      stringArray0[6] = "ert";
      stringArray0[7] = "th sponsor institut of a techn report.";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0341292254951047
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "gLh0r";
      stringArray0[1] = "EDITOR";
      stringArray0[2] = "~p#kNu}/u3WD";
      stringArray0[3] = "";
      stringArray0[4] = "UpR7";
      stringArray0[5] = "?VJRX[ R!Cm~RHjc(";
      stringArray0[6] = "9Dyi`";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("invalid cvs revision - not enough parts separated by dots!ert");
      assertEquals("invalis cv revis - not enough part separ by dot!ers", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0446553841257187
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("cizax");
      assertEquals("cizac", string1);
      
      lovinsStemmer0.stemString("Ru");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("Ru");
      String string2 = lovinsStemmer1.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0531092222288996
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("end");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("L`{Bg?`jKG]\"v");
      assertEquals("l`{bg?`jkg]\"v", string0);
      
      String string1 = lovinsStemmer0.stemString("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0041240229502482
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("uad");
      assertEquals("uas", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("O#");
      lovinsStemmer0.stem("ivities");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("captalyz");
      assertEquals("captalys", string1);
      
      String string2 = lovinsStemmer0.stem("Izide");
      assertEquals("iz", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.072184162527282
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("osend");
      String string0 = lovinsStemmer0.stemString("-iI~j_utt*eFI?(-)!");
      assertEquals("-ii~j_ut*ef?(-)!", string0);
      
      String string1 = lovinsStemmer0.stemString("asju);<xv7$_zfjpvad");
      assertEquals("asju);<xv7$_zfjpvas", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("8<s9CL=0zTW=I.{nu");
      assertEquals("8<s9cl=0ztw=i.{nu", string3);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.002727982931539
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "probToLogOdds: probability must be in [0,1] ";
      lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.stemmers.LovinsStemmer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1303004434888593
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("erid");
      assertEquals("eris", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "z#Urv/|0#D8e.";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("z#Urv/|0#D8e.");
      assertEquals("z#urv/|0#d8.", string2);
      
      String string3 = lovinsStemmer0.stem("z#Urv/|0#D8e.");
      assertEquals("z#urv/|0#d8e.", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.065230976815182
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pex");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("Get pJsJion of option -: ");
      assertEquals("ges pjsj of opt -: ", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("algorithmrud");
      assertEquals("algorithmrus", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9749868128703784
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("`oT=z@=s)U~>l");
      String string0 = lovinsStemmer0.stemString("SERIES");
      assertEquals("ser", string0);
      
      String string1 = lovinsStemmer0.stemString("iful");
      assertEquals("ifl", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0196485309290586
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "~9j:Bps4a>9";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("ation");
      assertEquals("ation", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0859090605747141
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("iOyL");
      assertEquals("ioyl", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "iOyL";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      String string3 = lovinsStemmer0.stem("iOyL");
      assertEquals("ioyl", string3);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.160020628343588
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("HA");
      assertEquals("ha", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*[";
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("\tUbes lowercase strings.");
      assertEquals("\tub lowercas string.", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1193684940856243
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("eless");
      assertEquals("eles", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string2 = lovinsStemmer0.stemString("iful");
      assertEquals("ifl", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0273792505205084
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("lis");
      lovinsStemmer0.stemString("dex");
      String string0 = lovinsStemmer0.stemString("lis");
      assertEquals("li", string0);
      
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("name(s) of editor(s), typed as indicated in the latex book. if there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.072184162527282
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ticyt");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("osend");
      assertEquals("osens", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("aGY|g7)FZ4mw=4V");
      assertEquals("agy|g7)fz4mw=4v", string2);
      
      String string3 = lovinsStemmer0.stem("8<s9CL=0zTW=I.{nu");
      assertEquals("8<s9cl=0ztw=i.{nu", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0354504889526512
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string0);
      
      lovinsStemmer0.stem("KkNCK`");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capital.");
      assertEquals("how someth strang ha been publ. th first word should be capit.", string2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0764985948462373
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ional");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("institutlud");
      lovinsStemmer0.stem("institutlus");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("khezBh^c747|uECW");
      String string0 = lovinsStemmer0.stemString("ical");
      assertEquals("ical", string0);
      
      String string1 = lovinsStemmer0.stem("khezBh^c747|uECW");
      assertEquals("khezbh^c747|uecw", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1214237428851166
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("HA");
      String string0 = lovinsStemmer0.stemString("TGTSgg+C1oaP)/eQ6");
      assertEquals("tgtsg+c1oap)/eq6", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("chdvex");
      assertEquals("chdvec", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("0h9ix");
      assertEquals("0h9ic", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("0h9ic");
      assertEquals("0h9", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("String should not finish with ");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("metr");
      assertEquals("meter", string0);
      
      String string1 = lovinsStemmer0.stem("khezBh^c747|uECW");
      assertEquals("khezbh^c747|uecw", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0881872541088355
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Problem reading user properties: ");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("Problem reading user properties: ");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "tex";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("W");
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer1.stemString("problem read user propers: ");
      assertEquals("problem read user proper: ", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string3);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("gOvNnE}'PImo{szi)t");
      assertEquals("govn}'pim{sz)t", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0012705989196078
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization lhat issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("[#ppo}O\"96");
      assertEquals("[#p}o\"96", string2);
      
      String string3 = lovinsStemmer0.stem("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ lhat issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      assertTrue(string3.equals((Object)string0));
      
      String string4 = lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ lhat issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it vol and number; th organ lhat issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string4);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("ancies");
      assertEquals("anci", string1);
      
      String string2 = lovinsStemmer0.stem("anci");
      assertEquals("anc", string2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Srtedcrray oules): ");
      String string0 = lovinsStemmer0.stemString("Srtedcrray oules): ");
      assertEquals("srtedcrra oul): ", string0);
      
      String string1 = lovinsStemmer0.stemString("ond");
      assertEquals("ons", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("iveness");
      String string0 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string0);
      
      String string1 = lovinsStemmer0.stem("iveness");
      assertEquals("iv", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString(":Bi%kDv");
      assertEquals(":bi%kdv", string0);
      
      String string1 = lovinsStemmer0.stem("umpt");
      assertEquals("um", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "EDITOR";
      stringArray0[4] = "5ElAr";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[5] = "";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("5ElAr");
      assertEquals("5el", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$");
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString(";[JNmX`A+sImAuL-");
      assertEquals(";[jnmx`a+simaul-", string1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ies");
      assertEquals("ie", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("ie");
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("T7Giul>");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer3.stemString("T7Giul>");
      assertEquals("t7giul>", string2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("learnmit");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("learnet");
      assertEquals("learnet", string0);
      
      String string1 = lovinsStemmer0.stemString("/Ps&uzUm?+]^#2");
      assertEquals("/ps&uzum?+]^#2", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("istr");
      assertEquals("ister", string0);
      
      String string1 = lovinsStemmer0.stem("(/{");
      assertEquals("(/{", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pex");
      String string0 = lovinsStemmer0.stemString("Get pJsJion of option -: ");
      assertEquals("ges pjsj of opt -: ", string0);
      
      String string1 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem(":DVL7dRA");
      String string0 = lovinsStemmer0.stemString("V'5o^j}sG/5DDAt gBB");
      assertEquals("v'5^j}sg/5ddat gb", string0);
      
      String string1 = lovinsStemmer0.stemString("idher");
      assertEquals("idhes", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("How something strange hasbeen published. The first word should be capitlized.");
      String string0 = lovinsStemmer0.stemString("how something strange hasbeen published. the first word should be capitlized.");
      assertEquals("how someth strang hasbeen publ. th first word should be capitl.", string0);
      
      lovinsStemmer0.stem("how someth strang hasbeen publ. th first word should be capitl.");
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("how someth strang hasbeen publ. th first word should be capitl.");
      assertEquals("how someth strang hasbeen publ. th first word should be capitl.", string2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("etial");
      assertEquals("es", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stemString("R{azSTr<C$Gx;2?=^D+");
      assertEquals("r{azstr<c$gx;2?=^d+", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("'i$YNLH");
      assertEquals("'i$ynlh", string0);
      
      String string1 = lovinsStemmer0.stem("ull");
      assertEquals("l", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1493487184754634
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.stemString("`:7Rw[n*0-&wruM*");
      assertEquals("`:7rw[n*0-&wr*", string1);
  }
}
