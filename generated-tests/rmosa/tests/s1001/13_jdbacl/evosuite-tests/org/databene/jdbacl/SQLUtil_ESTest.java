/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:00:22 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.AssertionError;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.field.TypeConvertionException;
import org.h2.engine.SessionRemote;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(" DEFAULT ", compositeDBObject0);
      SQLUtil.isProcedureCall("create materialized viewno statement was executed.");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String string0 = SQLUtil.normalize("i*@}bztKV#T3SK", false);
      assertEquals("i * @ } bztKV # T3  SK", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view- 0");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9295224102980398
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.normalize("-(.TTJI)W2Y%", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("L48");
      assertNull(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      SQLUtil.isQuery("`M(Y%VQ[}%|");
      Character character0 = new Character('x');
      SQLUtil.renderValue((Object) null);
      SQLUtil sQLUtil0 = new SQLUtil();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[1];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVARArray0[0] = xSQLVAR1;
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      FBResultSet fBResultSet0 = null;
      try {
        fBResultSet0 = new FBResultSet(xSQLVARArray0, genericDescriptorList0);
        fail("Expecting exception: TypeConvertionException");
      
      } catch(Throwable e) {
         //
         // SQL type for this field is not yet supported.
         //
         verifyException("org.firebirdsql.jdbc.field.FBField", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      SQLUtil.isDML("");
      Character character0 = new Character('x');
      Character.lowSurrogate((-12));
      SQLUtil.renderValue(character0);
      String string0 = null;
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(",$s)O-Cf+^&;-ftn", "'x'", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ',$s)O-Cf+^&;-ftn'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "JAH(P43+[t:";
      String string0 = SQLUtil.join("JAH(P43+[t:", "JAH(P43+[t:", stringArray0, stringArray0[1], "JAH(P43+[t:", stringArray0);
      assertEquals("JAH(P43+[t: join null as JAH(P43+[t: on JAH(P43+[t:.null = JAH(P43+[t:.null and JAH(P43+[t:.null = JAH(P43+[t:.null and JAH(P43+[t:.JAH(P43+[t: = JAH(P43+[t:.JAH(P43+[t:", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("creWte materialized viewno statemet was executed.", (String[]) null, "creWte materialized viewno statemet was executed.", "creWte materialized viewno statemet was executed.", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.normalize("PX{CL[gJ!]/2", false);
      assertEquals("PX { CL [ gJ ! ] / 2", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.impl.store.raw.data.BasePage", true);
      assertEquals("org.apache.derby.impl.store.raw.data.BasePage", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      String string0 = SQLUtil.normalize("i*@}bztKV#T3SK", false);
      assertEquals("i * @ } bztKV # T3  SK", string0);
      
      DBSchema dBSchema0 = new DBSchema("org.apache.xpath.XPath");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("B1XldU*uM<pn", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("i * @ } bztKV # T3  SK", true, defaultDBTable0, "B1XldU*uM<pn");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK B1XldU*uM<pn", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "call";
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "create unique indexj";
      stringArray0[1] = null;
      stringArray0[2] = "call";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        defaultDBTable1.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.7371823152157604
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.normalize("s)bu4*5qLM", false);
      assertEquals("s) bu4 * 5qLM", string0);
      
      System.setCurrentTimeMillis((-1041L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "setNClob(String, NClob)", true, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create tablealter materialized view- 0", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "|\"!C5goM", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("execute");
      stringBuilder0.append((CharSequence) "execute");
      SQLUtil.addOptionalCondition("execute", stringBuilder0);
      assertEquals("executeexecute or execute", stringBuilder0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      assertEquals("null", stringBuilder0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(U");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table (U", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create materialized viewno statement was executed.");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, " DEFAULT ", false, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " DEFAULT ", false, (String[]) null);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create materialized viewno statement was executed.");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, " DEFAULT ", false, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " DEFAULT ", false, (String[]) null);
      dBPrimaryKeyConstraint0.setName(")Wjkz84AT+ERDl=");
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F$|:6uk=zeM m");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F$|:6uk=zeM m", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " DEFAULT ", false, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " DEFAULT ", false, (String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(" DEFAULT ", (String[]) null, " DEFAULT ", " DEFAULT ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "(,el1h", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1757, "");
      Integer integer0 = RawTransaction.COMMIT;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("1io\":TVwVOMaDKGc#KC", (DBTable) null, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("(0,1)", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.7013901080800322
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.normalize("-(.TTJI)W2Y%", false);
      assertEquals("- (.TTJI) W2Y %", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- (.TTJI) W2Y %");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-(.TTJI)W2Y%";
      stringArray0[1] = "-(.TTJI)W2Y%";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "-(.TTJI)W2Y%", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("- (.TTJI) W2Y %", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "alter index]s", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (-(.TTJI)W2Y%, -(.TTJI)W2Y%)", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("truncate}j(%wbkc>\"o*`z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: truncate}j(%wbkc>\"o*`z
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "getBinaryStream(long, long)";
      stringArray0[0] = "abter ma";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Illegal column type format: ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Illegal column type format: ";
      stringArray0[1] = "select intoupd,vd";
      stringArray0[2] = "create table";
      stringArray0[3] = "select intoupd,vd";
      stringArray0[4] = "alter indexgetsqlxml(string)";
      stringArray0[5] = "select intoupd,vd";
      stringArray0[6] = "select intoupd,vd";
      stringArray0[7] = "drop index";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select intoupd,vd", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBUniqueConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("UNIQUE (Illegal column type format: , select intoupd,vd, create table, select intoupd,vd, alter indexgetsqlxml(string), select intoupd,vd, select intoupd,vd, drop index)", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("execute", stringBuilder0);
      assertEquals("execute", stringBuilder0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(true);
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("exec");
      SQLUtil.removeComments("m");
      SQLUtil.mutatesStructure("exec");
      String string0 = "alter materialized viewdeleteeau^.gh(n&b0;\"";
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("TEMPORARY", compositeDBObject0);
      tableContainer0.getTable("alter materialized viewdeleteeau^.gh(n&b0;\"");
      int int0 = (-1189);
      DBDataType dBDataType0 = DBDataType.getInstance((-1189), "alter materialized viewdeleteeau^.gh(n&b0;\"");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewdeleteeau^.gh(n&b0;\"", (DBTable) null, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter materialized viewdeleteeau^.gh(n&b0;\"", (DBTable) null, dBDataType0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0);
      String string1 = "drop table";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("drop table");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.107652786215132
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      SQLUtil.normalize("i*@}bztKV#T3SK", false);
      SQLUtil.mutatesDataOrStructure("update");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("i*@}bztKV#T3SK");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("L]Y)Ig2O-rbajvt", true);
      assertEquals("L ] Y) Ig2O - rbajvt", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.databene.jdbacl.sql.SQLParserUtil";
      stringArray0[6] = "/ er: ";
      stringArray0[7] = "dlteeau^.gh(n&b0;";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, stringArray0[3]);
      String string0 = SQLUtil.join((String) null, "[oV", stringArray0, "[oV", stringArray0[4], stringArray0);
      String string1 = SQLUtil.removeComments("2Y");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("F$|:6uk=zeM m");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F$|:6uk=zeM m", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materializ!d viewno statemen) was executed.");
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("create materializ!d viewno statemen) was executed.", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("p\",sOnJo%W||XR<w{", true);
      assertEquals("p \",sOnJo%W||XR<w{\"", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1717986916), "TPY");
      Integer integer0 = new Integer((-1717986916));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("( TPY(-1717986916) NULL", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3068291534409705
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.normalize("-(.TTJg)W2Y%", false);
      jdbcClob jdbcClob0 = new jdbcClob("alter index");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("x");
      DBSchema dBSchema0 = new DBSchema("x", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("x", dBSchema0);
      dBSchema0.setCatalog(dBCatalog0);
      DBDataType dBDataType0 = DBDataType.getInstance(533, ";\"GG[.GF-AYIFW");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";\"GG[.GF-AYIFW", defaultDBTable0, dBDataType0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        dBCatalog0.getTable("x.;\"GG[.GF-AYIFW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'x.;\"GG[.GF-AYIFW'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.860419010781378
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select into");
      System.setCurrentTimeMillis((-556L));
      SQLUtil.isQuery("hwD4pz.jA-/P-)LJ9'");
      SQLUtil.isQuery("Cannot cast an instance of {0} to type {1}");
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("hwD4pz.jA-/P-)LJ9'", compositeDBObject0);
      tableContainer0.getTable("2c(\"Q-!spVT`IHl(U8");
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint((DBTable) null, "select into", false, "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // owner is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "F$|:6uk=zeM m";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Kz", true, (String[]) null);
      dBPrimaryKeyConstraint0.setName((String) null);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      DBDataType.getInstance(104, "org.h2.command.dml.Delete");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        DBDataType.getInstance("(=3yvI6w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.7990591844756405
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize("D@r&l!Va_9R", true);
      assertEquals("D @ r & l ! Va_9R", string0);
      
      SQLUtil.normalize("create tabledefault", false);
      String string1 = SQLUtil.normalize("create tabledefault", false);
      assertEquals("create tabledefault", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "delete";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("CREATE CONSTRAINT ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (delete) REFERENCES null(delete)", string2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create materialized viewno statement was executed.");
      SQLUtil.removeComments(" DEFAULT ");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("]s");
      assertNull(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]s", defaultDBTable0, (DBDataType) null, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance((-959), "DATE");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("create materialized viewno statement was executed.", defaultDBTable1, dBDataType0, integer0, integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("]s", defaultDBTable1, (DBDataType) null, integer2);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("d", defaultDBTable1, (DBDataType) null, integer3, integer0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn(" DEFAULT ", defaultDBTable1, dBDataType0);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("]s, create materialized viewno statement was executed., ]s, d,  DEFAULT ", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertFalse(dBPrimaryKeyConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[1] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("S", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "S";
      stringArray0[1] = "S";
      stringArray0[2] = "S";
      stringArray0[3] = "S";
      stringArray0[4] = "S";
      stringArray0[5] = "S";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("S", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize(" SELECT * FROM ", true);
      assertEquals("SELECT * FROM", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("%){E52fH+7H\f[n,P", true);
      assertEquals("%) { E5  2fH + 7H \f [ n, P", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 907.623533232609;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("907.623533232609", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Illegal column type format: ");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Illegal column type format: ";
      stringArray0[1] = "Illegal column type format: ";
      stringArray0[2] = "Illegal column type format: ";
      stringArray0[3] = "Illegal column type format: ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Illegal column type format: ", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.removeComments("Bdu");
      assertEquals("Bdu", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("create materialized viewno statement was executed.");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[23];
      stringArray0[0] = "create materialized viewno statement was executed.";
      stringArray0[1] = "execselect into";
      stringArray0[2] = "create materialized viewno statement was executed.";
      stringArray0[4] = "create materialized viewno statement was executed.";
      stringArray0[5] = "create materialized viewno statement was executed.";
      stringArray0[6] = "create materialized viewno statement was executed.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create materialized viewno statement was executed.", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("execselect into");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      Random.setNextRandom(4);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("/(FsvSL)}V6");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"FsvSL\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("CHECK ", 45);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBSchema dBSchema0 = new DBSchema("serviceDirectory");
      dBSchema0.getTable("serviceDirectory");
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("serviceDirectory", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn0.setName("serviceDirectory");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NCLOB";
      stringArray0[1] = "serviceDirectory";
      stringArray0[3] = "serviceDirectory";
      stringArray0[5] = "serviceDirectory";
      stringArray0[6] = "serviceDirectory NCLOB NULL";
      stringArray0[7] = "serviceDirectory";
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "NCLOB", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9839614460010255
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(57, "alter tablvslect ito");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)11;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablvslect ito", defaultDBTable0, dBDataType0, integer0, integer0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("alter tablvslect ito");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getTime(String,Calendar)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(57, "alter tablvslect ito");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter tablvslect ito", defaultDBTable0, dBDataType0, integer0, integer0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.removeComments(" DEAULT ");
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("alter tablvslect ito, alter tablvslect ito", string0);
      
      String string1 = SQLUtil.removeComments("alter tablvslect ito");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.15407610367102942
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.normalize("drop materialized viewmos*(m@.frh!m$'!y@}", false);
      assertEquals("drop materialized viewmos * (m @.frh ! m $ '!y@}'", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "drop materialized viewmos * (m @.frh ! m $ '!y@}'", "KcZ*ucMh");
      String string1 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil.removeComments("alter session");
      SQLUtil.mutatesDataOrStructure("alter session");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("updatedrp materialized viewmos*(m@.frh!m$'!y@}", "updatedrp materialized viewmos*(m@.frh!m$'!y@}", versionNumber0);
      defaultDatabase0.setTableInclusionPattern("updatedrp materialized viewmos*(m@.frh!m$'!y@}");
      System.setCurrentTimeMillis((-2649L));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(26, "");
      dBDataType0.isAlpha();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("java.io.tmpdir");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("java.io.tmpdir", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDefaultValue("");
      SQLUtil.renderColumn(defaultDBColumn0);
      System.setCurrentTimeMillis(26);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-260.22841954);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 260.22841954", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(49, "");
      dBDataType0.isAlpha();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("java.io.tmpdir");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("java.io.tmpdir", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      System.setCurrentTimeMillis(49);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-32);
      byteArray0[0] = (byte) (-32);
      byteArray0[2] = (byte) (-32);
      byteArray0[4] = (byte) (-32);
      byteArray0[5] = (byte) (-32);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("java.io.tmpdir  NULL", defaultDBTable0, dBDataType0, integer0, integer0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Sy^uOF[>-Z");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      ErrorMessages errorMessages0 = new ErrorMessages();
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(14, "");
      dBDataType0.isAlpha();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      System.setCurrentTimeMillis(268435455L);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("  NOT NULL", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      SQLUtil.normalize("-(.TTJg)W2Y%", false);
      jdbcClob jdbcClob0 = new jdbcClob("alter index");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = 5.0;
      SQLUtil.renderNumber(streamTokenizer0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-(.TTJg)W2Y%";
      stringArray0[1] = "upd,vd";
      NameSpec nameSpec0 = NameSpec.NEVER;
      Random.setNextRandom((-4));
      String string0 = "insert";
      DBSchema dBSchema0 = new DBSchema("upd,vd");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert", dBSchema0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("DQs#K++w8$+DZyLzV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("i*@}bztkv#t3", false, defaultDBTable0, "v");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(33, charArrayWriter0.size());
      
      String string0 = SQLUtil.normalize("CHECK v", false);
      assertEquals("CHECK v", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = SQLUtil.removeComments("/**/");
      assertEquals("", string0);
  }
}
