/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:12:46 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8510338863355673
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Hi*[(~QwjwgGdFNc|");
      lovinsStemmer0.stem("send");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "hi*[(~qwjwggdfnc|";
      stringArray0[1] = "send";
      stringArray0[2] = "sens";
      stringArray0[3] = "Hi*[(~QwjwgGdFNc|";
      stringArray0[4] = "Hi*[(~QwjwgGdFNc|";
      stringArray0[5] = "hi*[(~qwjwggdfnc|";
      String string0 = lovinsStemmer0.stemString("hi*[(~qwjwggdfnc|");
      assertEquals("hi*[(~qwjwggdfnc|", string0);
      
      stringArray0[6] = "Hi*[(~QwjwgGdFNc|";
      stringArray0[7] = "hi*[(~qwjwggdfnc|";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("send");
      String string1 = lovinsStemmer0.stem("send");
      assertEquals("sens", string1);
      
      String string2 = lovinsStemmer0.stem("sens");
      assertEquals("sen", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8510338863355673
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Hi*[(~QwjwgGdFNc|");
      lovinsStemmer0.stem("send");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "hi*[(~qwjwggdfnc|";
      stringArray0[1] = "send";
      stringArray0[2] = "sens";
      stringArray0[3] = "Hi*[(~QwjwgGdFNc|";
      stringArray0[4] = "Hi*[(~QwjwgGdFNc|";
      stringArray0[5] = "hi*[(~qwjwggdfnc|";
      stringArray0[6] = "Hi*[(~QwjwgGdFNc|";
      stringArray0[7] = "hi*[(~qwjwggdfnc|";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("send");
      assertEquals("sens", string0);
      
      lovinsStemmer0.stem("send");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("send");
      String string1 = lovinsStemmer0.stem("sens");
      assertEquals("sen", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8500444407967097
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("MANUAL");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8753896124526575
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem(";zbSl]o");
      assertEquals(";zbsl]", string1);
      
      lovinsStemmer0.stem("c1qher");
      String string2 = lovinsStemmer0.stem("c1qher");
      assertEquals("c1qhes", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9161933586092513
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stem("ifully");
      String string2 = lovinsStemmer0.stem("ifully");
      assertEquals("ifl", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9362074758915591
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("{w6TE9");
      lovinsStemmer0.stem("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.stemString("usually the address of the publisher or other type of institution. for major publishing houses, van leunen recommends omitting the information entirely. for small publishers, on the other hand, you can help the reader by giving the complete address.");
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      String string1 = lovinsStemmer0.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      assertEquals("usu th addr of th publish or other typ of institut. for major publ hous, van leun recommen om th inform entir. for smal publish, on th other hand, you can help th reader by giv th compl addr.", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8758905282416434
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("s'");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("idine");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0012705989196078
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("acy");
      lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      String string1 = lovinsStemmer0.stemString("freund, y. and mason, l.");
      assertEquals("freund, y. and mason, l.", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8753896124526575
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("tex");
      assertEquals("tic", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stem("c1qher");
      String string2 = lovinsStemmer0.stem("c1qher");
      assertEquals("c1qhes", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0012705989196078
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      String string0 = lovinsStemmer0.stem("dicyt");
      assertEquals("dicys", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string1);
      
      String string2 = lovinsStemmer0.stemString("freund, y. and mason, l.");
      assertEquals("freund, y. and mason, l.", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0011942590952263
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("lid");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
      
      String string2 = lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is al an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("icbex");
      assertEquals("icbic", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.055632010361368
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such s 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such s 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9357757634420262
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("year");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("c1qher");
      String string1 = lovinsStemmer0.stem("c1qher");
      assertEquals("c1qhes", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("algorithmax");
      assertEquals("algorithmac", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9708652500263605
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      String string1 = lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it vol and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0599290551965916
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("algorithmpand");
      assertEquals("algorithmpans", string0);
      
      lovinsStemmer0.stem("wA9|h1otA=H8&rxS");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such s 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such s 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9775345865675669
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Min index (ints): ");
      assertEquals("min indic (int): ", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stem("NL<trqAF73");
      String string2 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is alsoan author field, then the editor field gives the editor of the book or collection in which the reference appars.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is alsoan author field, then th edit field giv th edit of th book or collect in which th refer appar.", string2);
      
      String string3 = lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is alsoan author field, then th edit field giv th edit of th book or collect in which th refer appar.");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is alsoan author field, then th edit field giv th edit of th book or collect in which th refer appar.", string3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8753896124526575
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ix");
      assertEquals("ix", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("mustlux");
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stem("c1qher");
      String string2 = lovinsStemmer0.stem("c1qher");
      assertEquals("c1qhes", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0011942590952263
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("lovinsstemmerpex");
      assertEquals("lovinsstemmerpic", string1);
      
      String string2 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string2);
      
      String string3 = lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is al an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9357757634420262
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("errorond");
      assertEquals("errorons", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stem("c1qher");
      String string2 = lovinsStemmer0.stem("c1qher");
      assertEquals("c1qhes", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9437577304274845
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      String string0 = lovinsStemmer0.stem("lovinsstemmerert");
      assertEquals("lovinsstemmerers", string0);
      
      lovinsStemmer0.stem("The alternating decision tree learning algorithm");
      String string1 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer0.stemString(" 2l3I+Hx]HpP&^:");
      assertEquals(" 2l3+hx]hp&^:", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8758905282416434
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("iduad");
      String string0 = " UK`L1SYK,Zb%Un";
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("erid");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ioylix");
      assertEquals("ioylic", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.018476364982941
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("senvad");
      assertEquals("senvas", string1);
      
      lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      lovinsStemmer0.stem("The alternating decision tree learning algorithm");
      String string2 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.002727982931539
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("_w)TCJ<a$A");
      String string0 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9843471976194187
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("lud");
      assertEquals("lus", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.stem("ioning");
      assertEquals("ion", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("The alternating decision tree learning algorithm");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("ancies");
      assertEquals("anci", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ation");
      String string0 = lovinsStemmer0.stemString("ation");
      assertEquals("ation", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.018476364982941
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerrud");
      assertEquals("wek.cor.stemmer.lovinsstemmerrus", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("The alternating decision tree learning algorithm");
      String string2 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9437577304274845
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      String string0 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string0);
      
      lovinsStemmer0.stemString("th altern decis tre learn algorithm");
      lovinsStemmer0.stem("The alternating decision tree learning algorithm");
      String string1 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2388558629910928
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("proeeding of the sixteenth international conference on machine learnyz");
      assertEquals("proeeding of the sixteenth international conference on machine learnys", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("/C-E_$)V{ou;HFU:");
      assertEquals("/c-e_$)v{ou;hfu:", string2);
      
      String string3 = lovinsStemmer0.stemString("/c-e_$)v{ou;hfu:");
      assertEquals("/c-e_$)v{ou;hfu:", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      String string0 = lovinsStemmer0.stem("addresert");
      assertEquals("addresers", string0);
      
      lovinsStemmer0.stem("Induction of decision trees");
      String string1 = lovinsStemmer0.stemString("addresers");
      assertEquals("addreser", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0371656365017812
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Can't construct a path to file relative to user dir.");
      String string0 = lovinsStemmer0.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string0);
      
      String string1 = lovinsStemmer0.stem("Can't construct a path to file relative to user dir.");
      assertEquals("can't construct a path to file relative to user dir.", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("The alternating decision tree learning algorithm");
      String string0 = lovinsStemmer0.stemString("wC6KJd}QIex");
      assertEquals("wc6kjd}qiec", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1137049974737334
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("_w)TCJ<a$A");
      assertEquals("_w)tcj<a$", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("=jS}?dE*'V9zAEn");
      assertEquals("=js}?de*'v9za", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9924624716435293
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("one");
      assertEquals("on", string1);
      
      lovinsStemmer0.stem("&dM\"T#F");
      String string2 = lovinsStemmer0.stemString("ental");
      assertEquals("ent", string2);
      
      String string3 = lovinsStemmer0.stem("z_{B2SNq*},jAj");
      assertEquals("z_{b2snq*},jaj", string3);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string0);
      
      lovinsStemmer0.stem("oEF4#eD/)H");
      String string1 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string0);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("K'uRREN~S'%");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9979352124972054
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("The number of a jourTal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; anr sometimes books are given numbers in a named series.");
      assertEquals("th number of a jourt, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; anr sometim book ar giv number in a nam ser.", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.154382020351847
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("dex");
      assertEquals("dic", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("Get opton -o: ");
      assertEquals("ges opt -o: ", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("7]|UHA6Kx_u/KDiKE");
      assertEquals("7]|uha6kx_u/kdik", string0);
      
      String string1 = lovinsStemmer0.stemString("_d%Rec;xbBa$");
      assertEquals("_d%rec;xb$", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0683195296819408
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "arisations";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "";
      lovinsStemmer0.globalInfo();
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("0gMr?baum$");
      assertEquals("0gmr?baum$", string2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("metr");
      assertEquals("meter", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("ement");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("iuly");
      assertEquals("iul", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Array-Dimensions of 'new String[3][4][]': ");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      assertFalse(lovinsStemmer2.equals((Object)lovinsStemmer1));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("BwOrK:+\"GG");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "BwOrK:+\"GG";
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("6az$\"q3nax");
      assertEquals("6az$\"q3nac", string0);
      
      lovinsStemmer0.stemString("paz$\"q3net");
      String string1 = lovinsStemmer0.stemString("paz$\"q3net");
      assertEquals("paz$\"q3net", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0430077745559796
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmertex");
      lovinsStemmer0.stem("ol");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("@i(;(w7TZRO%^@}X7<");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("The numer of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magaRine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named seies.");
      assertEquals("th numer of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magar is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam se.", string1);
      
      String string2 = lovinsStemmer0.stemString("F?nEs_Ioyl;T\ry");
      assertEquals("f?ne_ioyl;t\ry", string2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The sponsoring institution of a technical report.");
      assertEquals("th sponsor institut of a techn report.", string0);
      
      String string1 = lovinsStemmer0.stemString("th sponsor institut of a techn report.");
      assertEquals("th spons institut of a techn report.", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("the alternating decision tree learning algorithmyz");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stem("i!ully");
      String string2 = lovinsStemmer0.stemString("i!ully");
      assertEquals("i!l", string2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      lovinsStemmer0.stemString("th altern decis tre learn algorithm");
      String string0 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string0);
      
      String string1 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0708781590691403
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("sS9hJl");
      String string0 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("et");
      String string1 = lovinsStemmer0.stemString("uk.MM ^YHAR@prz0l");
      assertEquals("uk.mm ^yhar@prz0l", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("2 zT+ets))V2Us");
      assertEquals("2 zt+es))v2us", string0);
      
      String string1 = lovinsStemmer0.stemString("s,L+N&$#cN}TK");
      assertEquals("s,l+n&$#cn}tk", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Z|2(siNACus|@K");
      assertEquals("z|2(sinac|@k", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("owpoib'xjpher");
      lovinsStemmer0.stem("_w)TCJ<a$A");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("_w)tcj<a$");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NsWscvYe5Une7";
      stringArray0[1] = "kdi8K]Uy'MLs+E@AnZ";
      stringArray0[2] = "L8deurI`J&V";
      LovinsStemmer.main(stringArray0);
      stringArray0[3] = "#%ux#L}";
      String string0 = lovinsStemmer0.stemString("L8deurI`J&V");
      assertEquals("l8deur`j&v", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("&8vAuL^t3X^@");
      assertEquals("&8vaul^t3x^@", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1103194743966849
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem(" U&0Lyq k|CS");
      assertEquals(" u&0lyq k|c", string1);
      
      String string2 = lovinsStemmer0.stemString("Get optRon -o:");
      assertEquals("ges optron -o:", string2);
  }
}
