/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:25:36 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(2027, "staute.Player", "staute.Player", 2027);
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      player0.getY();
      player0.setY(0.0F);
      player0.reset(true);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals(2027, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(531);
      player0.setY((byte)49);
      player0.gangStrength();
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)0;
      player0.unpack(byteArray0);
      player0.getStrength();
      player0.getSubparty();
      assertEquals(49.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((-2216), "", "", 10);
      boolean boolean0 = player0.isConnected();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(10, player0.getPictureId());
      assertTrue(boolean0);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-3496), "Player.unpack(): *** WARNING *** data is not of proper type!", "", (-1363));
      Player player1 = new Player((short)4919, "Player.unpack(): *** WARNING *** data is not of proper type!", "$~9h'G&dM\"T#", (-261));
      player0.remove(player1);
      float float0 = player0.getX();
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("Player.unpack(): *** WARNING *** data is not of proper type!", player0.getIP());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals((-1363), player0.getPictureId());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1888;
      Player player0 = new Player(1888, "", 1888);
      Party party0 = player0.boss;
      boolean boolean0 = false;
      player0.reset(false);
      MockFile mockFile0 = new MockFile("");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-78);
      byteArray0[4] = (byte)97;
      byteArray0[7] = (byte)6;
      byteArray0[8] = (byte)1;
      Player player0 = new Player((-1));
      float float0 = Player.MOVE_DISTANCE;
      int int0 = Packable.GAME_STATE;
      Player player1 = new Player((-986));
      player1.unpack(byteArray0);
      System.setCurrentTimeMillis((-1793L));
      System.setCurrentTimeMillis((-3530L));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0);
      player0.setDead();
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      player0.pack();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        dataInputStream0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player();
      player0.setMoney((-155.371F));
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 5057;
      Player player0 = new Player(5057, "", (-1649));
      int int1 = (-2103);
      String string0 = "w(ZpVNI6^8/cNKPV.";
      Player player1 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.type();
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(5, int0);
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = " l+N,PAs";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " l+N,PAs");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-89);
      Player player0 = new Player((-89), (String) null, (-89));
      player0.setZ(0.2F);
      Player player1 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      File file0 = MockFile.createTempFile(" l+N,PAs", " l+N,PAs");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", " ", file0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 829;
      Player player0 = new Player(829, "gui.ModuleBrowserDialog$ModuleFilter", "gui.ModuleBrowserDialog$ModuleFilter", 0);
      player0.getTimeOfDeath();
      byte[] byteArray0 = new byte[7];
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      int int1 = 210;
      PushbackInputStream pushbackInputStream1 = null;
      try {
        pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, (-1984));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-2964);
      String string0 = "C9@M4=r<";
      Player player0 = new Player((-2964), "C9@M4=r<", "C9@M4=r<", (-2964), 5);
      player0.setMoney((-2964));
      Party party0 = new Party((-2964));
      player0.next = party0;
      party0.head = (Party) player0;
      player0.toString();
      MockFile mockFile0 = new MockFile("C9@M4=r<", "C9@M4=r<");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "C9@M4=r<");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // C9@M4=r<
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      Player player0 = new Player(1, "{7fsF6L*``", "Ja&I#m'X U", 1, 2073);
      player0.getName();
      assertEquals(2073, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getPictureId());
      assertEquals("{7fsF6L*``", player0.getIP());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      player0.getIP();
      player0.isDead();
      int int0 = 0;
      File file0 = MockFile.createTempFile("yd{Uop&lqR", "0.0.0.0");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      try { 
        dataInputStream0.readUnsignedByte();
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player();
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      boolean boolean0 = player0.isDead();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.getName());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(2073);
      byte[] byteArray0 = new byte[5];
      player0.getMoney();
      player0.setDead(15000L);
      player0.setMoney(980.6F);
      player0.getX();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream((InputStream) null, 210);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream1, 210);
      try { 
        pushbackInputStream0.unread(2073);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player();
      player0.setX(0.0F);
      Player player1 = new Player();
      byte byte0 = (byte)26;
      player1.isJoinOK(player0, true);
      player1.setDead(1944L);
      player1.setConnected(true);
      player1.isDead();
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player();
      player0.setX(1310.399F);
      Player player1 = new Player((byte)0);
      player1.setJoinOK(player0, false);
      player1.setX(0.1F);
      float float0 = Player.MOVE_DISTANCE;
      int int0 = Packable.GAME_STATE;
      player0.isJoinOK(player1, false);
      player1.isJoinOK(player0, false);
      System.setCurrentTimeMillis((byte)0);
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis(4);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis(4);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(2073);
      player0.setY(3274.3596F);
      player0.gangStrength();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-14);
      player0.unpack(byteArray0);
      assertEquals(3274.3596F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis(1391L);
      Player player0 = new Player();
      Player player1 = new Player();
      player1.prev = (Party) player0;
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, false);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertTrue(player1.isConnected());
      assertEquals(0, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertEquals("Player-1", player1.getName());
      assertFalse(boolean0);
      assertEquals(1, player1.getStrength());
      assertEquals(0.0F, player1.getY(), 0.01F);
  }
}
