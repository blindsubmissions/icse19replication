/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:09:57 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject.quote("bET\" a2[&]CP6[F+0");
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "bET\" a2[&]CP6[F+0";
      stringArray0[1] = "fl";
      stringArray0[2] = "\"bET\" a2[&]CP6[F+0\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote(":# [WgzJ");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("0");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("7?T58ljAjw[.COAhsG");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject.quote("7^ 1H)I-6gT|");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("7^ 1H)I-6gT|", 1L);
      try { 
        jSONObject0.getBoolean(" <!J59oiYLg#*c;|ch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" <!J59oiYLg#*c;|ch\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer(87);
      String string0 = ",:]}/\\\"[{;=#";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(",:]}/\"[{;=#", stringArray0);
      Integer integer1 = new Integer(87);
      String string1 = ",\n";
      jSONObject0.optInt(",\n", 87);
      JSONTokener jSONTokener0 = new JSONTokener(",:]}/\"[{;=#");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ,:]}/\"[{;=#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.558255126072715
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float float0 = 3494.7466F;
      Float float1 = new Float(3494.7466F);
      JSONObject jSONObject0 = new JSONObject(float1);
      jSONObject0.optInt("&+O&");
      jSONObject0.optInt("&+O&");
      float float2 = 1651.6992F;
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JSONObject.doubleToString(4.2665838716907265);
      assertEquals("4.2665838716907265", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      jSONObject0.names();
      jSONObject0.keys();
      try { 
        Byte.valueOf(":9zfuSS~l");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \":9zfuSS~l\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject.quote(" 1H)I:F6g&Y|");
      String[] stringArray0 = new String[3];
      stringArray0[0] = " 1H)I:F6g&Y|";
      stringArray0[1] = " 1H)I:F6g&Y|";
      stringArray0[2] = " 1H)I:F6g&Y|";
      JSONObject jSONObject0 = new JSONObject(" 1H)I:F6g&Y|", stringArray0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(18);
      JSONObject.doubleToString(18);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "18");
      jSONObject0.has("val");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(stringWriter1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("G_WX", (Object) "G_WX");
      jSONObject1.optBoolean("-+Y p-9ug}=+J}>d~v");
      Boolean boolean0 = new Boolean("G_WX");
      try { 
        jSONObject1.getBoolean("G_WX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G_WX\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.quote(":# [WgzJ");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("mi", "mi");
      jSONObject0.optJSONArray("7?T58ljAjw[.COAhsG");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.quote(",H\"\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(",H\"\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,H\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JSONObject.quote(",H\"\n");
      Double double0 = new Double(0.0);
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("*4~WEoU", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toString((-1118548756), (-1118548756));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = JSONObject.quote(",H\"\n");
      Integer integer0 = new Integer(57);
      JSONObject.testValidity(integer0);
      Long long0 = new Long(57);
      String string1 = JSONObject.valueToString(long0, 983, 67);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("gqpx");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1015L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("A JSONObject text must begin with '{'");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.quote(" 1H)I:-6gTY|");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(" 1H)I:-6gTY|", stringArray0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1063911301690834
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject.quote(",H\"\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(442);
      try { 
        jSONObject0.getBoolean("vT\"}AOhUo,rV93");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vT\\\"}AOhUo,rV93\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn("S*?=-").when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfAbsent((Object) null, function1);
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("S*?=-").when(biFunction0).apply(any() , anyString());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      String string0 = jSONObject0.toString();
      assertNull(string0);
      
      String string1 = JSONObject.quote("wl%#d`");
      assertEquals("\"wl%#d`\"", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3341923457408336
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject.quote(",H\"\n");
      JSONObject.testValidity(",H\"\n");
      JSONObject jSONObject0 = new JSONObject((Object) ",H\"\n");
      // Undeclared exception!
      jSONObject0.toString(1337, 32);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = JSONObject.quote(" 1H)I:-6gTY|");
      assertEquals("\" 1H)I:-6gTY|\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) " 1H)I:-6gTY|");
      jSONObject0.toString(71, 71);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.put("K%VmS$iKrXB!@", (Object) boolean0);
      Integer integer0 = new Integer((-765));
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, integer0);
      try { 
        jSONObject1.getJSONObject("K%VmS$iKrXB!@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K%VmS$iKrXB!@\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JSONObject.quote("/ [D9%");
      assertEquals("\"/ [D9%\"", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 87;
      String string0 = "GWM";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("GWM", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("GWM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of GWM
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Object object0 = JSONObject.NULL;
      linkedList0.add(object0);
      String string0 = JSONObject.valueToString(linkedList0, 152, 152);
      assertEquals("[null]", string0);
      assertTrue(linkedList0.contains(object0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = JSONObject.quote("] not foun.");
      assertEquals("\"] not foun.\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("java.lang.Short@0000000003.");
      assertEquals(0L, long0);
      
      String string1 = jSONObject0.toString((-1414), (-2905));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
      
      Boolean.valueOf(false);
      String string0 = JSONObject.quote("eKriYbri");
      assertEquals("\"eKriYbri\"", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject.quote(":# [WgzJ");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("\":# [WgzJ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\":# [WgzJ\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4080604617178538
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("qWM", (Object) "qWM");
      try { 
        jSONObject1.getBoolean("qWM");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"qWM\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("pWU", (Object) "pWU");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("pWU", (Collection) linkedList0);
      try { 
        jSONObject1.getBoolean("pWU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pWU\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.put("", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 114, 114);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject.quote(",H\"\n");
      JSONTokener jSONTokener0 = new JSONTokener("{!ek8vdkEB!XbP");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {!ek8vdkEB!XbP
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject.quote(" 1H)I:-6gTY|");
      JSONObject.quote("zo{``z~3Cq@bo");
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.toJSONArray((JSONArray) null);
      String string0 = "y^:*-pRDa{J\\$~9h";
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("y^:*-pRDa{J$~9h");
      try { 
        jSONTokener0.next(123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Substring bounds error at character 0 of y^:*-pRDa{J$~9h
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject.quote("ZY.KR}5I[9aExv");
      String string0 = JSONObject.quote("isintBitsToFloat");
      assertEquals("\"isintBitsToFloat\"", string0);
      
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = JSONObject.quote(",H\"\n");
      Short short0 = new Short((short)10);
      String string1 = JSONObject.valueToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = JSONObject.quote(",H\"\n");
      assertEquals("\",H\\\"\\n\"", string0);
      
      String string1 = JSONObject.valueToString(",H\"\n");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getDouble(732);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[732] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.8369882167858358
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject();
      linkedList0.add((Object) jSONObject0);
      String string0 = JSONObject.valueToString(linkedList0, 60, 60);
      assertEquals("[{}]", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3396091171567721
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject.quote(",H\"\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\",H\"\n\"");
      jSONObject0.names();
      JSONObject.testValidity("\",H\"\n\"");
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7847605105834412
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Short short0 = new Short((short) (-1560));
      jSONObject0.putOpt("", short0);
      jSONObject0.getDouble("");
      int int0 = 3665;
      jSONObject0.optDouble("", (double) (short) (-1560));
      jSONObject0.put("'", (Object) "");
      jSONObject0.accumulate("-wj2|,k er[X2=", "");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "-wj2|,k er[X2=", (-1225), (int) (short) (-1560));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.684564906971661
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "G_LRC";
      JSONObject jSONObject1 = jSONObject0.put("G_LRC", (Object) "G_LRC");
      Boolean.valueOf("G_LRC");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('a');
      jSONObject1.write(stringWriter1);
      try { 
        jSONObject1.getBoolean("G_LRC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G_LRC\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Set<Object> set0 = hashMap0.keySet();
      hashMap0.put(set0, "iscompare");
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, (-4895), (-4895));
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      String string0 = jSONObject0.optString("K%VmS$iKrXB!@");
      assertEquals("", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject.quote(":# [WgzJ");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1113);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1266.93114325611));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9222841453882735
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      jSONObject0.put("is", (-1.0));
      jSONObject0.getInt("is");
      JSONObject.doubleToString((-1));
      JSONObject jSONObject1 = jSONObject0.optJSONObject("?ia,D5|\"");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.551888093566232
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", false);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = jSONObject0.getBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject0 = new JSONObject();
      linkedList0.offer(jSONObject0);
      JSONObject.valueToString(linkedList0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Double double0 = Double.valueOf(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("true", jSONArray0);
      Float float0 = new Float(5015.9528123);
      float float1 = Float.sum((-359.1F), (-359.1F));
      JSONObject.testValidity(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("G_LRC", (Object) "G_LRC");
      try { 
        jSONObject1.getJSONArray("G_LRC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G_LRC\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("ssplit", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.accumulate("ssplit", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("K%VmS$iKrXB!@");
      JSONObject jSONObject1 = jSONObject0.put("K%VmS$iKrXB!@", (Object) boolean0);
      Integer integer0 = new Integer(3574);
      JSONObject jSONObject2 = jSONObject1.putOpt((String) null, integer0);
      JSONObject jSONObject3 = jSONObject2.put("y", (long) (-1253));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Boolean boolean1 = Boolean.valueOf(false);
      Integer integer1 = new Integer((-1253));
      hashMap0.put(boolean1, integer1);
      String string0 = jSONObject3.optString("K%VmS$iKrXB!@");
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)9);
      linkedList0.add(byte0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "G_WX";
      JSONObject jSONObject1 = jSONObject0.put("G_WX", (Object) "G_WX");
      try { 
        jSONObject1.append("G_WX", "G_WX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[G_WX] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = ":# [;gzJ";
      Long long0 = new Long(2115L);
      Long long1 = new Long(950L);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put(":# [;gzJ", (Object) jSONArray0);
      StringWriter stringWriter0 = new StringWriter(1468);
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject0.write(writer0);
      Integer.getInteger(":# [;gzJ");
      int int0 = (-719);
      int int1 = (-1209);
      Integer integer0 = new Integer((-1209));
      JSONTokener jSONTokener0 = new JSONTokener(":# [;gzJ");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("'z4/h5y^QE:l", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject1.write(stringWriter0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = JSONObject.quote("N,\n");
      assertEquals("\"N,\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.684564906971661
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "G_WX";
      jSONObject0.toString();
      jSONObject0.put("G_WX", (Object) "G_WX");
      try { 
        jSONObject0.getDouble("G_WX");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G_WX\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      short short0 = (short)92;
      Short short1 = new Short((short)92);
      Short.toUnsignedInt((short) (-28352));
      Short.compare((short)92, (short) (-28352));
      Short.toUnsignedLong((short)92);
      JSONObject jSONObject0 = new JSONObject(short1);
      Short.toUnsignedInt((short)92);
      Short.compare((short) (-28352), (short) (-28352));
      jSONObject0.put("7R", true);
      JSONObject jSONObject1 = jSONObject0.put("7R", 35);
      jSONObject1.getLong("7R");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{R=bV;tL\"<%d$x;%X,");
      Boolean.valueOf("{R=bV;tL\"<%d$x;%X,");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('a');
      JSONObject jSONObject0 = new JSONObject(stringWriter1);
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {R=bV;tL\"<%d$x;%X,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8546526185598229
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(57);
      JSONObject jSONObject1 = jSONObject0.append("0", integer0);
      try { 
        jSONObject1.getLong("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.830761045382808
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Float float0 = new Float(3494.7466F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optInt("&+O&");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>(87, 3494.7466F);
      jSONObject0.put("&+O&", (Map) hashMap0);
      jSONObject0.optInt("&+O&");
      String string0 = "$+(9Q%c6e!=/e5/ZUk";
      try { 
        jSONObject0.getJSONObject("$+(9Q%c6e!=/e5/ZUk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$+(9Q%c6e!=/e5/ZUk\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)40);
      jSONObject0.append("] is not a number.", byte0);
      jSONObject0.append("] is not a number.", jSONObject0);
      String string0 = JSONObject.quote("] is not a number.");
      assertEquals("\"] is not a number.\"", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(8192);
      JSONObject jSONObject1 = jSONObject0.put("ssplit", (Object) integer0);
      JSONObject jSONObject2 = jSONObject1.accumulate("ssplit", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.doubleToString(8192);
      JSONObject jSONObject3 = jSONObject0.accumulate("ssplit", jSONObject0);
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.147215697273382
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      jSONObject0.put(":9zSS~]", (Map) hashMap0);
      jSONObject0.keys();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("pU", (Object) jSONArray0);
      jSONObject1.getJSONArray("pU");
      Long long0 = new Long(1564L);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.toString((-1037), (-1037));
      try { 
        jSONObject0.getBoolean("dH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dH\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Double double0 = new Double(1663.3748);
      JSONTokener jSONTokener0 = new JSONTokener("{*:|HD1XL@Z<");
      jSONTokener0.toString();
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 12 of {*:|HD1XL@Z<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.9318371702994763
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Float float0 = new Float(3494.7466F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.valueToString(jSONObject0, 47, 0);
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                               \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                               \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                               \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 326 of {
         //                                                \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,
         //                                                \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,
         //                                                \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"
         // }
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{R=bV;DltL\"<%d$x4X,");
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {R=bV;DltL\"<%d$x4X,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{%=BltL\"<%R$x*4X,");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 8 of {%=BltL\"<%R$x*4X,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      JSONTokener jSONTokener0 = new JSONTokener("{WmJB= ZQA}F");
      jSONTokener0.back();
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject.testValidity(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HashMap<JSONArray, Double> hashMap0 = new HashMap<JSONArray, Double>();
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long(1L);
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Float float0 = new Float(3494.7466F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.valueToString(jSONObject0, 47, 47);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Float.max(3494.7466F, (-1374.0F));
      JSONTokener jSONTokener0 = new JSONTokener("{\n                                                                                              \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                              \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                              \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                               }");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      JSONObject jSONObject3 = jSONObject1.accumulate("{\n                                                                                              \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                              \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                              \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                               }", jSONObject2);
      jSONObject1.put("SIt){gF{~<", (-1L));
      jSONObject0.toString(47, 47);
      jSONObject3.optJSONObject("{\n                                                                                              \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                              \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                              \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                               }");
      jSONObject3.optLong("{\n                                                                                              \"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n                                                                                              \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n                                                                                              \"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n                                               }", (long) 47);
      JSONObject.testValidity(jSONObject0);
      JSONObject.quote("num");
      Integer integer0 = new Integer(160);
      JSONObject.testValidity(integer0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONArray@0000000001");
      Double.isFinite(615.4694359197);
      JSONObject.valueToString(jSONObject0, 72, 72);
      JSONObject.quote("wheel.json.JSONArray@0000000001");
      Short short0 = new Short((short) (-1010));
      JSONObject.valueToString(short0);
      Double double0 = new Double(0.0);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Long long0 = new Long(1L);
      Long long1 = new Long(950L);
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      jSONObject0.put("G'", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put(":# [WgzJ", (Object) jSONArray0);
      Integer.getInteger(":# [WgzJ");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject1.optJSONArray("G'");
      JSONObject jSONObject3 = jSONObject1.getJSONObject("G'");
      assertNotSame(jSONObject0, jSONObject3);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf("+=o");
      Byte byte0 = new Byte((byte) (-119));
      jSONObject0.append("+=o", byte0);
      jSONObject0.optJSONArray("+=o");
      String string0 = JSONObject.valueToString(boolean0, (byte) (-119), (byte) (-119));
      assertNotNull(string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("GWM", object0);
      int int0 = (-3248);
      jSONObject1.isNull("GWM");
      String string0 = "etreplaceFirs";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = JSONObject.quote("6db82I4~&I</I");
      assertEquals("\"6db82I4~&I<\\/I\"", string0);
      
      String string1 = JSONObject.quote("isintBitsToFloat");
      assertEquals("\"isintBitsToFloat\"", string1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      Integer integer0 = new Integer((-26729013));
      JSONObject.testValidity(integer0);
      JSONObject.doubleToString((-26729013));
      JSONObject.numberToString(integer0);
      String string0 = JSONObject.doubleToString((-26729013));
      assertEquals("-2.6729013E7", string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = ").NY}q/`2N";
      stringArray0[2] = "true";
      stringArray0[3] = "r";
      stringArray0[4] = "+=sU9$;nt)XtI";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append(").NY}q/`2N", "r");
      jSONObject0.toString(72, 72);
      JSONObject jSONObject2 = jSONObject0.put("_y\"J`$9P>.J*", (Object) "true");
      String string0 = JSONObject.valueToString(").NY}q/`2N", (-787), (-787));
      jSONObject2.getBoolean("_y\"J`$9P>.J*");
      JSONObject.testValidity(jSONObject2);
      String string1 = jSONObject1.toString((-2572), 861);
      assertFalse(string1.equals((Object)string0));
  }
}
