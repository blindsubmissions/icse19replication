/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 19:08:22 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "%**=aWSgR#M$rD;\\ug";
      String string1 = JSONObject.quote(string0);
      assertEquals("\"%**=aWSgR#M$rD;\\\\ug\"", string1);
      
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string2 = jSONObject0.toString((-937), (-937));
      assertEquals("{}", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(455);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5171534199663776
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject.quote(" \n");
      JSONObject jSONObject0 = new JSONObject((Object) "\" \n\"");
      Object object0 = new Object();
      jSONObject0.putOpt(" \n", object0);
      try { 
        jSONObject0.getBoolean(" \n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" \\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = JSONObject.quote("jlkL2(i7!SM A.mX");
      assertEquals("\"jlkL2(i7!SM A.mX\"", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject.quote(",\n");
      String string0 = JSONObject.quote("\",\n\"");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject.quote("\"\",\\n\"\"");
      Float float0 = new Float((-1.0));
      JSONObject.numberToString(float0);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONObject.quote(" H&\n");
      assertEquals("\" H&\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) " H&\n");
      jSONObject0.toString((-340), (-340));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JSONObject.quote("m");
      assertEquals("\"m\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 93, 93);
      Integer integer0 = new Integer(92);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString((-2048), 2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JSONObject.quote(" \n");
      Double double0 = new Double(0.0);
      String string1 = JSONObject.valueToString(double0, (-3636), (-3636));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.isFinite(2500);
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      String string0 = ",\n";
      try { 
        jSONObject0.get("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3189328019081783
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject.quote("L$GO,F E\"9IHI`-+");
      JSONObject.valueToString("L$GO,F E\"9IHI`-+");
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"java.lang.String@0000000001\"";
      stringArray0[1] = "\"java.lang.String@0000000001\"";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.append("\"L$GO,F E\"9IHI`-+\"", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5171534199663776
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(0);
      Float.isFinite(0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = new Object();
      String string0 = "*agfI'-\\w=xBNl4F``?";
      jSONObject0.put("*agfI'-w=xBNl4F``?", 0);
      try { 
        jSONObject0.getJSONArray("*agfI'-w=xBNl4F``?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*agfI'-w=xBNl4F``?\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      Float float0 = new Float(3638.2160814911513);
      String string0 = JSONObject.numberToString(float0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "java.lang.Float@0000000001";
      stringArray0[1] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string1 = jSONObject0.optString(stringArray0[2]);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("] is not a number.", "] is not a number.");
      assertEquals("] is not a number.", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-20));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("ZyV", 2305);
      try { 
        jSONObject0.get("ZyV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZyV\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0, (-1), (-1));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JSONObject.quote("+$GO,F E\"9IHI`-+");
      Long long0 = new Long((-143L));
      String string1 = JSONObject.valueToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6113482429121737
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Double double0 = new Double((-844.57));
      Double.min((-58.771804276), (-1020.86302213032));
      Double.max((-1020.86302213032), (-1020.86302213032));
      Double.min((-1020.86302213032), (-1020.86302213032));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter(87);
      JSONObject.numberToString(double0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Double@0000000002");
      jSONObject0.write(stringWriter1);
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject.quote("+$GO,F E\"9IHI`-+");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("+$GO,F E\"9IHI`-+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of +$GO,F E\"9IHI`-+
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject.quote("s\"3\n");
      JSONTokener jSONTokener0 = new JSONTokener("] not found.");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject.quote("K \n");
      HashMap<JSONObject, Float> hashMap0 = new HashMap<JSONObject, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong("77Hh{6w$.9j");
      try { 
        jSONObject0.getBoolean("K \n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K \\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5088198909642434
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Double double0 = new Double((-844.57));
      Double.max((-1020.86302213032), (-1020.86302213032));
      Double.min((-1020.86302213032), (-1020.86302213032));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getString("3z[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"3z[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("*#%@5c4^^T*/Em");
      assertTrue(boolean0);
      
      Boolean boolean1 = new Boolean("*#%@5c4^^T*/Em");
      String string0 = JSONObject.quote("*#%@5c4^^T*/Em");
      assertEquals("\"*#%@5c4^^T*/Em\"", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has(".ud~&WXyQAuHHK");
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray((String) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject.doubleToString(0.6773643609592558);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "0.6773643609592558";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte.compare((byte) (-1), (byte) (-1));
      Long long0 = new Long(0);
      jSONObject0.putOpt(" oBEo$", (Object) null);
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      Short short0 = new Short((byte) (-1));
      assertEquals((short) (-1), (short)short0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      try { 
        jSONArray0.getJSONObject((-1283));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1283] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = " \n";
      JSONObject.quote(" \n");
      JSONObject jSONObject0 = new JSONObject((Object) "\" \n\"");
      // Undeclared exception!
      jSONObject0.toString(1603, 1603);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      String string0 = JSONObject.valueToString(jSONObject0, 47, 59);
      JSONArray jSONArray0 = new JSONArray();
      String string1 = JSONObject.valueToString(jSONArray0, 59, 59);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", true);
      jSONObject0.names();
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2544.5));
      assertEquals("-2544.5", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.optBoolean("Expected '");
      jSONObject0.optDouble("Expected '");
      String string0 = "WNg!bhx**ZXS\"<tJ";
      try { 
        jSONObject0.get("WNg!bhx**ZXS\"<tJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WNg!bhx**ZXS\\\"<tJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Double, Byte> hashMap0 = new HashMap<Double, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 739;
      Integer integer0 = new Integer(739);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONTokener", integer0);
      jSONObject1.append("wheel.json.JSONTokener", integer0);
      short short0 = (short)60;
      Double double0 = new Double(739);
      String string0 = "ZStHI`{Sna#CE+L=vP";
      try { 
        Byte.decode("ZStHI`{Sna#CE+L=vP");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ZStHI`{Sna#CE+L=vP\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Substring bounds error";
      JSONObject jSONObject1 = jSONObject0.put("Substring bounds error", false);
      try { 
        jSONObject1.append("Substring bounds error", "Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[Substring bounds error] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = JSONObject.quote("-#B/bNfxO'!DfHu<H");
      assertEquals("\"-#B/bNfxO'!DfHu<H\"", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6935851881355024
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      jSONObject0.put("Wf^v?>y<|oXWTO!*<", (Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = JSONObject.quote("+$GO,F E\"9IHI`-+");
      assertEquals("\"+$GO,F E\\\"9IHI`-+\"", string0);
      
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0, 93, 93);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.043596847718303
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("\"java.lang.Object@0000000001\"");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.889552097834473
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("7:]}/\"[{;=#", object0);
      jSONObject2.optInt("getdoubleToString");
      try { 
        jSONObject2.getBoolean("7:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7:]}/\\\"[{;=#\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830489675638438
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String string0 = "7:]}/\\\"[{;=#";
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("7:]}/\"[{;=#", object0);
      try { 
        jSONObject2.getLong("7:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7:]}/\\\"[{;=#\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0282075154397585
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap1);
      String string0 = "!9^N3=";
      JSONObject jSONObject2 = jSONObject1.put("!9^N3=", (Map) hashMap0);
      jSONObject2.optInt("0", 87);
      jSONObject1.toString(11, (-2426));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2830041293692704
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Double double0 = new Double((-844.57));
      Double.max((-1020.86302213032), (-1020.86302213032));
      Double.min((-1020.86302213032), (-1020.86302213032));
      JSONObject.testValidity(double0);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("J{y ;T;@Z");
      jSONTokener0.nextClean();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of J{y ;T;@Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double(1.0);
      JSONObject jSONObject1 = jSONObject0.put("su*5FP$C`%VW", 1609);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getDouble("su*5FP$C`%VW");
      String string0 = JSONObject.doubleToString((-1.0));
      assertEquals("-1", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      hashMap0.put((Double) null, (Double) null);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.835154568524504
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap1);
      String string0 = "!9^N3=";
      jSONObject1.put("!9^N3=", (Map) hashMap0);
      jSONObject0.toString();
      jSONObject1.toString(11, (-2426));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      jSONArray0.put((Map) hashMap0);
      String string0 = jSONArray0.join("r$H1y^");
      String string1 = JSONObject.valueToString(jSONArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7782333057997075
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-1));
      Byte.compare((byte) (-1), (byte) (-1));
      Byte.compare((byte) (-57), (byte)37);
      JSONObject jSONObject1 = jSONObject0.accumulate(" oBEo$", byte0);
      jSONObject1.getInt(" oBEo$");
      JSONObject jSONObject2 = jSONObject1.accumulate(" oBEo$", byte0);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.2265558156134033
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.add((Object) null);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
      assertEquals("[null]", string0);
      
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject((Map) null);
      jSONObject1.put("", (-1447.11026710926));
      double double0 = jSONObject1.optDouble("", (-1447.11026710926));
      assertEquals((-1447.11026710926), double0, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = JSONObject.quote(">'</yP");
      assertEquals("\">'<\\/yP\"", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("jJ+k%D;", (Object) null);
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      String string0 = jSONObject0.optString("jJ+k%D;", "jJ+k%D;");
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 78, 78);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      HashMap<Long, Double> hashMap0 = new HashMap<Long, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = new JSONObject((Map) null);
      JSONObject jSONObject3 = new JSONObject((Map) null);
      JSONObject jSONObject4 = new JSONObject((Map) null);
      JSONObject jSONObject5 = new JSONObject((Map) hashMap0);
      String string0 = "getvalueOf";
      JSONObject.valueToString("getvalueOf");
      JSONObject.valueToString(jSONObject0);
      JSONObject.valueToString(jSONObject4);
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONObject.valueToString("O: \"'MnW");
      Float float0 = new Float((-1.0));
      JSONObject.valueToString(float0);
      try { 
        jSONObject2.getLong("java.lang.Float@000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("Substring bounds error", "Substring bounds error");
      Float.isFinite(0.0F);
      Float float0 = new Float((double) 0.0F);
      JSONObject jSONObject2 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Substring bounds error");
      Writer writer0 = jSONObject1.write(stringWriter1);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, (-1281), 4931);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9019178491848634
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap1);
      String string0 = "!9^N3=";
      JSONObject jSONObject2 = jSONObject1.put("!9^N3=", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(455);
      StringWriter stringWriter1 = stringWriter0.append('#');
      jSONObject1.write(stringWriter1);
      try { 
        jSONObject2.append("!9^N3=", "0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[!9^N3=] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener(" \n");
      JSONObject.getNames((Object) null);
      try { 
        jSONTokener0.next(32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Substring bounds error at character 0 of  
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("?39_", 3147.9843195707);
      int int0 = 128;
      jSONObject1.keys();
      jSONObject1.getLong("?39_");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9019178491848632
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      HashMap<Double, Double> hashMap2 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      JSONObject jSONObject1 = jSONObject0.put("0", (Map) hashMap1);
      jSONObject1.getJSONObject("0");
      String string0 = "!9^N3=";
      jSONObject1.put("!9^N3=", (Map) hashMap0);
      jSONObject1.toString(11, (-2426));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("E-0zL\"=^vha\"V=");
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "getntern";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("getntern", (Object) "getntern");
      try { 
        jSONObject0.getJSONObject("getntern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getntern\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-1));
      Byte.compare((byte) (-1), (byte) (-1));
      JSONObject jSONObject1 = jSONObject0.accumulate(" oBEo$", byte0);
      JSONObject jSONObject2 = jSONObject1.accumulate(" oBEo$", byte0);
      JSONArray jSONArray0 = jSONObject2.optJSONArray(" oBEo$");
      assertEquals(2, jSONArray0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Substring bounds error", false);
      boolean boolean0 = jSONObject0.getBoolean("Substring bounds error");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Double double0 = new Double(0);
      Float.isFinite(0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = new Object();
      jSONObject0.put("*agfI'-w=xBNl4F``?", (Collection) null);
      jSONObject0.getJSONArray("*agfI'-w=xBNl4F``?");
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "{sJ:PT]kHMzKyg";
      JSONTokener jSONTokener0 = new JSONTokener("{sJ:PT]kHMzKyg");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 7 of {sJ:PT]kHMzKyg
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1968822786389315
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      Double double0 = new Double(1.0);
      Function<Double, Float> function0 = (Function<Double, Float>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyDouble());
      hashMap0.computeIfAbsent(double0, function0);
      jSONObject0.put("WNg!bhx**ZXS\"<tJ", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("su*5FP$C`%VW", 1609);
      jSONObject1.toString((-2671), 0);
      JSONObject.getNames(jSONObject1);
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000003\": {},\n\"java.lang.String@0000000004\": java.lang.Integer@0000000005\n}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      try { 
        jSONObject2.get("WNg!bhx**ZXS\"<tJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WNg!bhx**ZXS\\\"<tJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "GJcSh";
      JSONObject jSONObject1 = jSONObject0.accumulate("GJcSh", "GJcSh");
      try { 
        jSONObject1.getBoolean("GJcSh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GJcSh\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.769488177174612
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("7:]}/\"[{;=#", (Collection) linkedList0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject0.accumulate("7:]}/\"[{;=#", object0);
      try { 
        jSONObject2.getBoolean("7:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7:]}/\\\"[{;=#\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      String string0 = JSONObject.valueToString(hashMap0, 108, 108);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject1 = jSONObject0.put("Wf^v?>y<|oXWTO!*<", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("Wf^v?>y<|oXWTO!*<");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte.compare((byte)95, (byte)9);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("] is not a number.", jSONArray0);
      Object object0 = JSONObject.NULL;
      String string0 = "lo";
      try { 
        jSONArray0.getJSONObject((byte)95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[95] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "toS");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Float, Double> hashMap0 = new HashMap<Float, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("getwait", boolean0);
      jSONObject1.getBoolean("getwait");
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      String string0 = "true";
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      jSONObject1.getBoolean("true");
      String string1 = "q9@KC(^;Sh;;";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-108916131));
      assertEquals("-1.08916131E8", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("false", "false");
      Boolean.logicalXor(true, true);
      boolean boolean1 = jSONObject0.getBoolean("false");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double((-520.9257197900718));
      Double.min((-520.9257197900718), (-774.371526));
      int int0 = (-129);
      Double.max((-129), (-520.9257197900718));
      JSONTokener jSONTokener0 = new JSONTokener("{|g)d=#^*bW<VP");
      jSONTokener0.back();
      jSONTokener0.syntaxError("{|g)d=#^*bW<VP");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 13 of {|g)d=#^*bW<VP
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
