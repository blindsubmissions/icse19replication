/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:58:20 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator", true);
      OutputFormat outputFormat1 = new OutputFormat("-xhtml-xhtml-encodng", true);
      outputFormat1.setIndent("!;sWuh");
      boolean boolean0 = outputFormat1.isXHTML();
      assertEquals("!;sWuh", outputFormat1.getIndent());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(1493);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "Y3y>Jl|~";
      stringArray0[2] = "Y3y>Jl|~";
      stringArray0[5] = "Y3y>Jl|~";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(1493, outputFormat0.getNewLineAfterNTags());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("h*k3V8aud|b,ePUka,}", true, "  ");
      outputFormat0.setIndentSize(0);
      outputFormat0.getLineSeparator();
      assertEquals("", outputFormat0.getIndent());
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setAttributeQuoteCharacter('\"');
      outputFormat1.setPadText(true);
      outputFormat1.setIndentSize((-339));
      assertTrue(outputFormat1.isTrimText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.getEncoding();
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty");
      outputFormat0.setEncoding("-expandEmpty");
      outputFormat0.setIndent(false);
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertEquals("-expandEmpty", outputFormat0.getEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml", false);
      outputFormat0.isPadText();
      assertEquals("-xhtml", outputFormat0.getIndent());
      
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, " ");
      assertFalse(outputFormat0.isPadText());
      
      outputFormat0.setPadText(true);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertTrue(outputFormat0.isPadText());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trim|ext");
      int int0 = 0;
      outputFormat0.setIndentSize(0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6885673693022827
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-trimText";
      stringArray0[1] = "`";
      stringArray0[2] = "`";
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('n');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (n)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals("", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(1);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setNewlines(true);
      assertEquals(" ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Z2yK");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Z2yK";
      stringArray0[1] = "Z2yK";
      stringArray0[2] = "Z2yK";
      stringArray0[3] = "Z2yK";
      outputFormat0.parseOptions(stringArray0, 2842);
      outputFormat0.setLineSeparator("Dx5R5");
      outputFormat0.setEncoding("Z2yK");
      outputFormat0.setLineSeparator("Z2yK");
      outputFormat0.getIndent();
      outputFormat0.setXHTML(false);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("Z2yK", outputFormat0.getLineSeparator());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-omitEncoding";
      outputFormat0.setLineSeparator("-omitEncoding");
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertEquals("-omitEncoding", outputFormat0.getLineSeparator());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", false);
      String[] stringArray0 = new String[5];
      outputFormat0.parseOptions(stringArray0, 446);
      outputFormat0.setIndent("}\"y09}*(");
      outputFormat0.setIndent("/2?|D2O$NKq");
      assertEquals("/2?|D2O$NKq", outputFormat0.getIndent());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "-encoding";
      stringArray0[2] = "-encoding";
      stringArray0[3] = "-encoding";
      stringArray0[4] = "-encoding";
      stringArray0[5] = "-encoding";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "z)vs) wmWa2!");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('A');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (A)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("rU,[$l:", false);
      OutputFormat outputFormat1 = new OutputFormat("rU,[$l:", false);
      outputFormat1.isPadText();
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[4];
      stringArray0[3] = "-indent";
      stringArray0[1] = "rU,[$l:";
      stringArray0[2] = "rU,[$l:";
      stringArray0[3] = "-expandEmpty-xhtmlrU,[$l:";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("rU,[$l:", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = "-trim|ext";
      OutputFormat outputFormat0 = new OutputFormat("-trim|ext");
      String string1 = "";
      outputFormat0.setIndent("");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('L');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (L)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-oitEnrodinY", false);
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("-oitEnrodinY", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`", true);
      outputFormat0.setSuppressDeclaration(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (&)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize(1907);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterNTags(1885);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Oz}'d4tqK' p";
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(true);
      outputFormat0.setIndentSize(1885);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('`');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (`)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", true);
      OutputFormat outputFormat1 = new OutputFormat("-lineSeparator", true);
      boolean boolean0 = false;
      OutputFormat outputFormat2 = new OutputFormat("-omitEncoding", false);
      outputFormat1.isPadText();
      outputFormat0.isPadText();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat1.setOmitEncoding(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setPadText(false);
      assertFalse(outputFormat0.isXHTML());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "-xhtml";
      stringArray0[2] = "-xhtml";
      stringArray0[3] = "-xhtml";
      stringArray0[4] = "-xhtml";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isXHTML());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration", false);
      OutputFormat.createPrettyPrint();
      outputFormat0.setNewlines(false);
      outputFormat0.setNewLineAfterNTags(34);
      outputFormat0.isSuppressDeclaration();
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setPadText(false);
      assertEquals(34, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rU,[$l:";
      stringArray0[1] = "-indent";
      stringArray0[3] = "rU,[$l:";
      stringArray0[3] = "rU,[$l:";
      stringArray0[4] = "rU,[$l:";
      OutputFormat outputFormat0 = new OutputFormat("rU,[$l:");
      outputFormat0.setIndent(".y`4\"QX!hs _\n=");
      assertEquals(".y`4\"QX!hs _\n=", outputFormat0.getIndent());
      
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(3, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", false);
      outputFormat0.setNewlines(false);
      OutputFormat outputFormat1 = new OutputFormat("-xhtml", false);
      outputFormat1.isPadText();
      outputFormat1.setEncoding((String) null);
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[5];
      outputFormat0.parseOptions(stringArray0, 39);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines", false);
      OutputFormat outputFormat1 = new OutputFormat("-newlines", false);
      OutputFormat outputFormat2 = new OutputFormat("-xhtml", true);
      outputFormat2.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat3 = new OutputFormat("-xhtml", false, "-xhtml");
      outputFormat3.setOmitEncoding(false);
      OutputFormat outputFormat4 = new OutputFormat("-newlines", false);
      outputFormat2.setPadText(true);
      OutputFormat outputFormat5 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "-xhtml";
      stringArray0[2] = "-newlines";
      stringArray0[3] = "-newlines";
      stringArray0[4] = "-encodng";
      stringArray0[5] = "-newlines";
      stringArray0[6] = "-encodng";
      stringArray0[7] = "-newlines";
      stringArray0[8] = "-encodng";
      outputFormat4.parseOptions(stringArray0, 1);
      assertTrue(outputFormat4.isNewlines());
      
      outputFormat0.setXHTML(false);
      outputFormat1.setXHTML(false);
      assertFalse(outputFormat1.isTrimText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", false);
      OutputFormat outputFormat1 = new OutputFormat("-xhtml", false);
      OutputFormat outputFormat2 = new OutputFormat("-xhtml", true);
      outputFormat2.isPadText();
      OutputFormat outputFormat3 = new OutputFormat("YBy?");
      outputFormat3.setNewLineAfterDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat2.setPadText(true);
      int int0 = 1;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "-xhtml";
      stringArray0[3] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("DA+QjD3P=mO:cd(tiPq");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getAttributeQuoteCharacter();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.dom4j.io.OutputForma";
      stringArray0[1] = "DA+QjD3P=mO:cd(tiPq";
      stringArray0[2] = "-suppressDeclaration";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "-expandEmpty";
      outputFormat0.setIndent("-expandEmpty");
      stringArray0[2] = "<[TG=c&C\"zOA(wM}.Z";
      outputFormat0.setEncoding("-expandEmpty");
      stringArray0[3] = ">oLPhn";
      outputFormat0.setOmitEncoding(false);
      stringArray0[4] = ";\"!f";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent(";\"!f");
      outputFormat0.setIndent("-expandEmpty");
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1531);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-expandEmpty", outputFormat0.getEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("QonK8+");
      String[] stringArray0 = new String[0];
      outputFormat0.setAttributeQuoteCharacter('\'');
      boolean boolean0 = false;
      outputFormat0.setIndentSize((-1983146790));
      boolean boolean1 = false;
      outputFormat0.setIndent(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('*');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (*)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", true);
      outputFormat0.setPadText(true);
      OutputFormat outputFormat1 = new OutputFormat("-omitEncoding", false);
      outputFormat0.isPadText();
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setPadText(true);
      OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("-padText");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-padText";
      stringArray0[2] = "-encKdng";
      stringArray0[3] = "-omitEncoding";
      stringArray0[4] = "  ";
      stringArray0[5] = "-padText";
      int int0 = outputFormat1.parseOptions(stringArray0, 1);
      assertFalse(outputFormat1.isNewLineAfterDeclaration());
      assertTrue(outputFormat1.isPadText());
      assertEquals(2, int0);
  }
}
