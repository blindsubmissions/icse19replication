/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:46:13 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(98);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-B";
      stringArray0[1] = "#?/>y?xk./OR";
      stringArray0[2] = "Y";
      stringArray0[3] = "#?/>y?xk./OR";
      stringArray0[4] = ".y{'~p%b}6YR<M";
      stringArray0[5] = "Y";
      stringArray0[6] = "#?/>y?xk./OR";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"#?/>y?xk./OR\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2429732264381474
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = new String[1];
      discretize0.setFindNumBins(false);
      stringArray0[0] = "";
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Discretize.main(stringArray0);
      int[] intArray0 = new int[8];
      Random.setNextRandom(1924);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("Z");
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("l/bnGQ.c}Qh(TEZ#");
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.binsTipText();
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.invertSelectionTipText();
      System.setCurrentTimeMillis((-1271));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.m_DiscretizeCols = null;
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("rJQ55}a/Pv");
      discretize0.getBinRangesString(0);
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2494787868806974
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Attribute, ? extends BufferedInputStream>) function0);
      arrayList0.replaceAll(unaryOperator0);
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")$q\bZT");
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      discretize0.setIgnoreClass(true);
      instances0.lastIndexOf(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      double[][] doubleArray0 = new double[3][0];
      attribute0.getRevision();
      doubleArray0[0] = doubleArray0[0];
      discretize0.m_CutPoints = doubleArray0;
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0[0]);
      discretize0.getOptions();
      discretize0.calculateCutPointsByEqualFrequencyBinning(2);
      discretize0.setMakeBinary(true);
      assertTrue(discretize0.getMakeBinary());
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      instances0.lastIndexOf(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      doubleArray0[5] = (double) 3;
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(2, doubleArray0);
      denseInstance0.setDataset(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.input(denseInstance0);
      discretize0.getBinRangesString(0);
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1028));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5985754382128206
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      instances0.lastIndexOf(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      double[] doubleArray0 = new double[7];
      arrayList0.spliterator();
      DenseInstance denseInstance0 = new DenseInstance(3.551502855407978, doubleArray0);
      denseInstance0.setDataset(instances0);
      discretize0.input(denseInstance0);
      attribute0.getRevision();
      DenseInstance denseInstance1 = new DenseInstance(4, doubleArray0);
      denseInstance0.setValueSparse(2, 3);
      discretize0.setOutputFormat();
      arrayList0.add(attribute0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 3.551502855407978;
      doubleArray1[3] = (double) 4;
      DenseInstance denseInstance2 = new DenseInstance(3, doubleArray1);
      discretize0.input(denseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6873063982603875
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      instances0.lastIndexOf(unaryOperator0);
      discretize0.setInputFormat(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      double[] doubleArray0 = new double[7];
      DenseInstance denseInstance0 = new DenseInstance(3, doubleArray0);
      denseInstance0.setDataset(instances0);
      discretize0.input(denseInstance0);
      attribute0.getRevision();
      DenseInstance denseInstance1 = new DenseInstance(4, doubleArray0);
      DenseInstance denseInstance2 = new DenseInstance((-1696.0), doubleArray0);
      discretize0.input(denseInstance0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      arrayList0.remove(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".y{'~p%b}6YR<M", linkedList0, protectedProperties0);
      arrayList0.add(attribute0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Instances instances0 = new Instances("@end", arrayList0, 1);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-370));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -370
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.406034702976807
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      instances0.lastIndexOf(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.setInputFormat(instances0);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      doubleArray0[5] = (double) 3;
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      Attribute attribute1 = new Attribute(".arff", instances1);
      attribute0.addStringValue(attribute1, (-1));
      DenseInstance denseInstance1 = new DenseInstance(2, doubleArray0);
      denseInstance0.setDataset(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.input(denseInstance0);
      discretize0.getBinRangesString(0);
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3101486663462123
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Attribute, ? extends BufferedInputStream>) function0);
      arrayList0.replaceAll(unaryOperator0);
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ")$q\bZT");
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      instances0.lastIndexOf(unaryOperator0);
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      double[][] doubleArray0 = new double[3][0];
      attribute0.getRevision();
      doubleArray0[0] = doubleArray0[0];
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      discretize0.m_CutPoints = doubleArray0;
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0[0]);
      discretize0.getOptions();
      discretize0.calculateCutPointsByEqualFrequencyBinning(2);
      discretize0.setMakeBinary(true);
      discretize0.setOutputFormat();
      System.setCurrentTimeMillis(4);
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(discretize0.getMakeBinary());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.870755417602255
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Attribute, BufferedInputStream> function1 = unaryOperator0.andThen((Function<? super Attribute, ? extends BufferedInputStream>) function0);
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(47, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(47, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      boolean boolean2 = discretize0.m_UseEqualFrequency;
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double[][] doubleArray0 = new double[3][0];
      String string0 = attribute0.getRevision();
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertNotNull(string0);
      assertEquals("9172", string0);
      
      doubleArray0[0] = doubleArray0[0];
      discretize0.m_CutPoints = doubleArray0;
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0[0]);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(3, doubleArray0.length);
      assertEquals(0, denseInstance0.numAttributes());
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertEquals(0, denseInstance0.numValues());
      assertNotNull(denseInstance0);
      
      discretize0.calculateCutPointsByEqualFrequencyBinning(2);
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.870755417602255
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Attribute attribute0 = new Attribute("D", linkedList0, 889);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, linkedList0.size());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isAveragable());
      assertEquals(889, attribute0.index());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isNumeric());
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("D", attribute0.name());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRegular());
      assertNotNull(attribute0);
      assertFalse(linkedList0.contains("D"));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isAveragable());
      assertEquals(889, attribute0.index());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isNumeric());
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("D", attribute0.name());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRegular());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      assertFalse(linkedList0.contains("D"));
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Attribute, BufferedInputStream> function1 = unaryOperator0.andThen((Function<? super Attribute, ? extends BufferedInputStream>) function0);
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(attribute0));
      
      Attribute attribute1 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.hasZeropoint());
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.isNominal());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertTrue(attribute1.isNumeric());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(47, attribute1.index());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertTrue(attribute1.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute1.name());
      assertEquals("", attribute1.getDateFormat());
      assertTrue(attribute1.isRegular());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      
      boolean boolean1 = arrayList0.add(attribute1);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.hasZeropoint());
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.isNominal());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertTrue(attribute1.isNumeric());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(47, attribute1.index());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertTrue(attribute1.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute1.name());
      assertEquals("", attribute1.getDateFormat());
      assertTrue(attribute1.isRegular());
      assertFalse(attribute1.equals((Object)attribute0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(attribute1, attribute0);
      assertTrue(arrayList0.contains(attribute1));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute1));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute1));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute1));
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      
      boolean boolean3 = discretize0.m_UseEqualFrequency;
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      double[][] doubleArray0 = new double[3][0];
      String string0 = attribute1.getRevision();
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.hasZeropoint());
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.isNominal());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertTrue(attribute1.isNumeric());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertTrue(attribute1.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute1.name());
      assertEquals("", attribute1.getDateFormat());
      assertTrue(attribute1.isRegular());
      assertEquals(1, attribute1.index());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(string0);
      assertEquals("9172", string0);
      assertNotSame(attribute1, attribute0);
      
      doubleArray0[0] = doubleArray0[0];
      discretize0.m_CutPoints = doubleArray0;
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0[0]);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(3, doubleArray0.length);
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertEquals(0, denseInstance0.numAttributes());
      assertEquals(0, denseInstance0.numValues());
      assertNotNull(denseInstance0);
      
      discretize0.calculateCutPointsByEqualFrequencyBinning(2);
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertNotNull(discretize0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertNotNull(protectedProperties0);
      
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertNotNull(protectedProperties1);
      
      HashMap<String, Discretize> hashMap0 = new HashMap<String, Discretize>(77, 1.0F);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      Set<String> set0 = hashMap0.keySet();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      
      LinkedList<String> linkedList0 = new LinkedList<String>(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(set0.contains(""));
      assertFalse(linkedList0.contains(""));
      
      Attribute attribute0 = new Attribute("* Returns only the classnames and what filter it is based on.", linkedList0, protectedProperties0);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNominal());
      assertEquals("* Returns only the classnames and what filter it is based on.", attribute0.name());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertNotNull(attribute0);
      assertFalse(set0.contains("* Returns only the classnames and what filter it is based on."));
      assertFalse(linkedList0.contains("* Returns only the classnames and what filter it is based on."));
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(attribute0));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.hasZeropoint());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNominal());
      assertEquals("* Returns only the classnames and what filter it is based on.", attribute0.name());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertTrue(boolean0);
      assertNotSame(protectedProperties0, protectedProperties1);
      assertFalse(set0.contains("* Returns only the classnames and what filter it is based on."));
      assertFalse(linkedList0.contains("* Returns only the classnames and what filter it is based on."));
      assertTrue(arrayList0.contains(attribute0));
      
      Attribute attribute1 = new Attribute("923}YLP%]q[.)>!", linkedList0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, attribute1.ordering());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertTrue(attribute1.isNominal());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertFalse(attribute1.isRelationValued());
      assertEquals(1, attribute1.type());
      assertFalse(attribute1.isNumeric());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isAveragable());
      assertEquals("923}YLP%]q[.)>!", attribute1.name());
      assertEquals(0, attribute1.numValues());
      assertEquals((-1), attribute1.index());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.isRegular());
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.hasZeropoint());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertFalse(set0.contains(""));
      assertFalse(linkedList0.contains(""));
      
      Instances instances0 = new Instances("V", arrayList0, 2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("V", instances0.relationName());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      assertFalse(arrayList0.contains(attribute1));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("V", instances0.relationName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      assertFalse(arrayList0.contains(attribute1));
      
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(discretize0);
      
      discretize0.setFindNumBins(true);
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      Discretize discretize1 = new Discretize();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize1.getIgnoreClass());
      assertTrue(discretize1.isNewBatch());
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotNull(discretize1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "w";
      stringArray0[1] = "w";
      stringArray0[2] = "-M";
      stringArray0[3] = "i";
      stringArray0[4] = "-M";
      stringArray0[5] = "-M";
      try { 
        discretize1.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = arrayList0.remove(object0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(boolean0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Properties properties0 = new Properties();
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertNotNull(properties0);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertNotNull(protectedProperties0);
      
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertNotNull(protectedProperties1);
      
      Attribute attribute0 = new Attribute(".y{'~p%b}6YR<M", linkedList0, protectedProperties1);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, linkedList0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertEquals((-1), attribute0.index());
      assertEquals(".y{'~p%b}6YR<M", attribute0.name());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isAveragable());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRegular());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isNumeric());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertNotNull(attribute0);
      assertFalse(linkedList0.contains(".y{'~p%b}6YR<M"));
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, properties0.size());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertEquals((-1), attribute0.index());
      assertEquals(".y{'~p%b}6YR<M", attribute0.name());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isAveragable());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isRegular());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isNumeric());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertTrue(protectedProperties0.equals((Object)protectedProperties1));
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(protectedProperties0, protectedProperties1);
      assertNotSame(protectedProperties1, protectedProperties0);
      assertTrue(arrayList0.contains(attribute0));
      assertFalse(linkedList0.contains(".y{'~p%b}6YR<M"));
      
      Capabilities capabilities0 = discretize0.getCapabilities();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(capabilities0.hasDependencies());
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertNotNull(capabilities0);
      
      Instances instances0 = new Instances("real", arrayList0, 2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("real", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("real", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      
      boolean boolean3 = discretize0.batchFinished();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      DenseInstance denseInstance0 = new DenseInstance(2, (double[]) null);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2.0, denseInstance0.weight(), 0.01);
      assertNotNull(denseInstance0);
      
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertNotNull(discretize0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertNotNull(protectedProperties0);
      
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, linkedList0.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNominal());
      assertNull(attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(attribute0));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, linkedList0.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertFalse(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertEquals(1, attribute0.type());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNominal());
      assertNull(attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      Attribute attribute1 = new Attribute("real", linkedList0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, linkedList0.size());
      assertEquals("real", attribute1.name());
      assertFalse(attribute1.isDate());
      assertEquals(1, attribute1.type());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.hasZeropoint());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isRegular());
      assertTrue(attribute1.isNominal());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertFalse(attribute1.isNumeric());
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isAveragable());
      assertEquals((-1), attribute1.index());
      assertEquals(0, attribute1.ordering());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertFalse(linkedList0.contains("real"));
      
      attribute1.setStringValue("~^d{W@eP");
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, linkedList0.size());
      assertEquals("real", attribute1.name());
      assertFalse(attribute1.isDate());
      assertEquals(1, attribute1.type());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.hasZeropoint());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isRegular());
      assertTrue(attribute1.isNominal());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertFalse(attribute1.isNumeric());
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isAveragable());
      assertEquals((-1), attribute1.index());
      assertEquals(0, attribute1.ordering());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attribute1, attribute0);
      assertFalse(linkedList0.contains("~^d{W@eP"));
      
      Instances instances0 = new Instances("relational", arrayList0, 2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("relational", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertFalse(arrayList0.contains(attribute1));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("relational", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(arrayList0.contains(attribute1));
      
      Object[] objectArray0 = linkedList0.toArray();
      assertEquals(0, objectArray0.length);
      assertEquals(0, linkedList0.size());
      assertNotNull(objectArray0);
      assertFalse(linkedList0.contains("relational"));
      
      discretize0.calculateCutPoints();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6302533563892636
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertNotNull(discretize0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Attribute attribute0 = new Attribute("P", (-299));
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isRegular());
      assertEquals((-299), attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("P", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(attribute0));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isRegular());
      assertEquals((-299), attribute0.index());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("P", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setBins(10000);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10000, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      
      Instances instances0 = new Instances("numeric", arrayList0, 2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10000, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".arff";
      discretize0.setOptions(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      
      boolean boolean2 = attribute0.isInRange((-0.25));
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("P", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertNotNull(discretize0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertNotNull(protectedProperties0);
      
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, linkedList0.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertNull(attribute0.name());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNumeric());
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(attribute0));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, linkedList0.size());
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertTrue(protectedProperties0.isEmpty());
      assertEquals(0, protectedProperties0.size());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.ordering());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1, attribute0.type());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isRegular());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertNull(attribute0.name());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNumeric());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      Attribute attribute1 = new Attribute("real", linkedList0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, linkedList0.size());
      assertFalse(attribute1.isRegular());
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.isAveragable());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.hasZeropoint());
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(0, attribute1.numValues());
      assertEquals(1, attribute1.type());
      assertEquals("real", attribute1.name());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(0, attribute1.ordering());
      assertFalse(attribute1.isDate());
      assertTrue(attribute1.isNominal());
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isRelationValued());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isNumeric());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertFalse(linkedList0.contains("real"));
      
      attribute1.setStringValue("~^d{W@e");
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, linkedList0.size());
      assertFalse(attribute1.isRegular());
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.isAveragable());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.hasZeropoint());
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(0, attribute1.numValues());
      assertEquals(1, attribute1.type());
      assertEquals("real", attribute1.name());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(0, attribute1.ordering());
      assertFalse(attribute1.isDate());
      assertTrue(attribute1.isNominal());
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isRelationValued());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isNumeric());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotSame(attribute1, attribute0);
      assertFalse(linkedList0.contains("~^d{W@e"));
      
      Instances instances0 = new Instances("relational", arrayList0, 2);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("relational", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertFalse(arrayList0.contains(attribute1));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("relational", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(arrayList0.contains(attribute1));
      
      Object[] objectArray0 = instances0.toArray();
      assertEquals(0, objectArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("relational", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(objectArray0);
      assertFalse(arrayList0.contains(attribute1));
      
      discretize0.calculateCutPoints();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      
      String string0 = discretize0.getBinRangesString(0);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertNotNull(string0);
      assertEquals("All", string0);
      
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4781035426326574
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(47, attribute0.index());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertNotNull(attribute0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(47, attribute0.index());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("There are newer versions of existing packages at the repository. Refreshing cache..."));
      
      Attribute attribute1 = new Attribute("numeric", linkedList0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, linkedList0.size());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertTrue(attribute1.isNominal());
      assertEquals("", attribute1.getDateFormat());
      assertFalse(attribute1.isNumeric());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(0, attribute1.ordering());
      assertEquals(0.0, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(0.0, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.isAveragable());
      assertFalse(attribute1.hasZeropoint());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertFalse(attribute1.isRelationValued());
      assertEquals(1, attribute1.type());
      assertEquals((-1), attribute1.index());
      assertEquals("numeric", attribute1.name());
      assertFalse(attribute1.isRegular());
      assertFalse(attribute1.isString());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertFalse(linkedList0.contains("numeric"));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      assertFalse(arrayList0.contains(attribute1));
      
      double double0 = instances0.meanOrMode(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(attribute0.equals((Object)attribute1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(attribute0, attribute1);
      assertTrue(arrayList0.contains(attribute0));
      assertFalse(arrayList0.contains(attribute1));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      assertFalse(arrayList0.contains(attribute1));
      
      discretize0.setOutputFormat();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      
      boolean boolean3 = discretize0.batchFinished();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2284);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2284, binarySparseInstance0.numAttributes());
      assertEquals(2284, binarySparseInstance0.numValues());
      assertNotNull(binarySparseInstance0);
      
      discretize0.convertInstance(binarySparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2284, binarySparseInstance0.numAttributes());
      assertEquals(2284, binarySparseInstance0.numValues());
      
      boolean boolean4 = discretize0.batchFinished();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      
      discretize0.setOutputFormat();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      int int0 = 47;
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(47, attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isRelationValued());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(47, attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isRelationValued());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setInvertSelection(true);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isRelationValued());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'There are newer versions of existing packages at the repository. Refreshing cache...' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("l/bnGQ.c}Qh(TEZ#");
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertNotNull(discretize0);
      
      Instances instances0 = null;
      discretize0.m_IgnoreClass = true;
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      
      discretize0.setMakeBinary(true);
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertNotNull(discretize0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "P";
      stringArray0[1] = "-R";
      stringArray0[2] = "-refresh-cache";
      Filter.runFilter(discretize0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = discretize0.getRevision();
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertNotNull(string0);
      assertEquals("8964", string0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-81.626661);
      doubleArray0[1] = (-81.626661);
      doubleArray0[2] = (-81.626661);
      doubleArray0[3] = (-81.626661);
      SparseInstance sparseInstance0 = new SparseInstance((-81.626661), doubleArray0);
      assertArrayEquals(new double[] {(-81.626661), (-81.626661), (-81.626661), (-81.626661)}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(4, doubleArray0.length);
      assertEquals(4, sparseInstance0.numAttributes());
      assertEquals((-81.626661), sparseInstance0.weight(), 0.01);
      assertEquals(4, sparseInstance0.numValues());
      assertNotNull(sparseInstance0);
      
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8392967479776607
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      discretize0.m_FindNumBins = true;
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      boolean boolean0 = FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      assertFalse(boolean0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertNotNull(attribute0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      assertEquals((-1.0), double0, 0.01);
      
      boolean boolean3 = discretize0.setInputFormat(instances0);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setMakeBinary(true);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getIgnoreClass());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertTrue(discretize1.getMakeBinary());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize1.isNewBatch());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertTrue(discretize1.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotNull(discretize1);
      assertNotSame(discretize0, discretize1);
      assertNotSame(discretize1, discretize0);
      
      String string0 = attribute0.equalsMsg(instances0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals((-1), instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(string0);
      assertEquals("Object has wrong class", string0);
      assertTrue(arrayList0.contains(attribute0));
      
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      discretize0.m_FindNumBins = true;
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setMakeBinary(true);
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.calculateCutPoints();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertTrue(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      
      // Undeclared exception!
      try { 
        instances0.firstInstance();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      discretize0.m_FindNumBins = true;
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)122;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertNotNull(discretize0);
      
      Attribute attribute0 = new Attribute("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", 2714);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(2714, attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", attribute0.name());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(attribute0));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(2714, attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", attribute0.name());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 9957);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances1 = new Instances("@relation", arrayList0, 20);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("@relation", instances1.relationName());
      assertEquals((-1), instances1.classIndex());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.size());
      assertEquals(0, instances1.numInstances());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(1, instances1.numAttributes());
      assertTrue(instances1.equals((Object)instances0));
      assertNotNull(instances1);
      assertTrue(arrayList0.contains(attribute0));
      
      double double0 = instances0.meanOrMode(attribute0);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", attribute0.name());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertTrue(instances0.equals((Object)instances1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(instances0, instances1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertTrue(instances0.equals((Object)instances1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(instances0, instances1);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      
      boolean boolean2 = discretize0.batchFinished();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      DenseInstance denseInstance0 = new DenseInstance(2);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      
      discretize0.convertInstance(denseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertEquals(2, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numAttributes());
      
      System.setCurrentTimeMillis(10000);
      Random.setNextRandom(20);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertNotNull(discretize0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
      assertTrue(properties0.isEmpty());
      assertNotNull(properties0);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.7976931348623157E308;
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(1.7976931348623157E308, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      Properties properties1 = new Properties();
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(properties1);
      
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertEquals(0, protectedProperties0.size());
      assertTrue(protectedProperties0.isEmpty());
      assertTrue(properties1.equals((Object)properties0));
      assertNotNull(protectedProperties0);
      
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertTrue(protectedProperties1.isEmpty());
      assertEquals(0, protectedProperties1.size());
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(protectedProperties1.equals((Object)protectedProperties0));
      assertNotNull(protectedProperties1);
      
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertEquals(0, protectedProperties2.size());
      assertTrue(protectedProperties2.isEmpty());
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(protectedProperties2.equals((Object)protectedProperties1));
      assertTrue(protectedProperties2.equals((Object)protectedProperties0));
      assertNotNull(protectedProperties2);
      
      Attribute attribute0 = new Attribute((String) null, linkedList0, protectedProperties2);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, linkedList0.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertEquals(0, protectedProperties2.size());
      assertTrue(protectedProperties2.isEmpty());
      assertNull(attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRegular());
      assertEquals(1, attribute0.type());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isAveragable());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(protectedProperties2.equals((Object)protectedProperties1));
      assertTrue(protectedProperties2.equals((Object)protectedProperties0));
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(attribute0));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, linkedList0.size());
      assertTrue(properties1.isEmpty());
      assertEquals(0, properties1.size());
      assertEquals(0, protectedProperties2.size());
      assertTrue(protectedProperties2.isEmpty());
      assertNull(attribute0.name());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRegular());
      assertEquals(1, attribute0.type());
      assertTrue(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.hasZeropoint());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.ordering());
      assertEquals(0.0, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isAveragable());
      assertEquals(0.0, attribute0.getLowerNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(properties1.equals((Object)properties0));
      assertTrue(protectedProperties2.equals((Object)protectedProperties1));
      assertTrue(protectedProperties2.equals((Object)protectedProperties0));
      assertTrue(boolean0);
      assertNotSame(properties1, properties0);
      assertNotSame(protectedProperties2, protectedProperties0);
      assertNotSame(protectedProperties2, protectedProperties1);
      
      Instances instances0 = new Instances("relational", arrayList0, 2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("relational", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(1.7976931348623157E308, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("relational", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertNotNull(discretize0);
      
      String[] stringArray0 = new String[1];
      discretize0.setInvertSelection(true);
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(5, stringArray1.length);
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1028));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertNotNull(discretize0);
      
      discretize0.setIgnoreClass(true);
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.m_UseEqualFrequency = true;
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      
      Attribute attribute1 = (Attribute)attribute0.copy();
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute1.index());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.hasZeropoint());
      assertEquals(0, attribute1.type());
      assertTrue(attribute1.isRegular());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute1.name());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertTrue(attribute1.isNumeric());
      assertTrue(attribute1.isAveragable());
      assertEquals("", attribute1.getDateFormat());
      assertEquals(1, attribute1.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isNominal());
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      discretize0.calculateCutPoints();
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      
      Discretize discretize1 = new Discretize();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertEquals(10, discretize1.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getIgnoreClass());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize1.isNewBatch());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotNull(discretize1);
      
      // Undeclared exception!
      try { 
        discretize1.findNumBins(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertNotNull(discretize0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, ")$q\bZT");
      assertTrue(boolean0);
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      double[][] doubleArray0 = new double[3][0];
      discretize0.m_UseEqualFrequency = true;
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      discretize0.m_CutPoints = doubleArray0;
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      DenseInstance denseInstance0 = new DenseInstance(47, doubleArray0[0]);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(3, doubleArray0.length);
      assertEquals(47.0, denseInstance0.weight(), 0.01);
      assertEquals(0, denseInstance0.numAttributes());
      assertEquals(0, denseInstance0.numValues());
      assertNotNull(denseInstance0);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertNotNull(stringArray0);
      
      discretize0.setMakeBinary(false);
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      discretize0.m_FindNumBins = true;
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      
      Attribute attribute0 = new Attribute("h5#");
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals("h5#", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertNotNull(attribute0);
      
      discretize0.setUseEqualFrequency(true);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertTrue(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.getUseEqualFrequency());
      
      Instances instances0 = new Instances("real", arrayList0, 1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("real", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertFalse(arrayList0.contains(attribute0));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals("h5#", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertNotNull(discretize0);
      
      Attribute attribute0 = new Attribute("z`j^_r(0\"bDT", (-299));
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertFalse(attribute0.isDate());
      assertEquals("z`j^_r(0\"bDT", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals((-299), attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertNotNull(attribute0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(attribute0));
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertFalse(attribute0.isDate());
      assertEquals("z`j^_r(0\"bDT", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertEquals((-299), attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setBins((-2212));
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-2212), discretize0.getBins());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      
      Instances instances0 = new Instances("0=1\"DnkWI$h=SnbDP", arrayList0, 2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("0=1\"DnkWI$h=SnbDP", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-2212), discretize0.getBins());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("0=1\"DnkWI$h=SnbDP", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = attribute0.isInRange((-2212));
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertFalse(attribute0.isDate());
      assertEquals("z`j^_r(0\"bDT", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(9958);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertNotNull(discretize0);
      
      discretize0.setIgnoreClass(true);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.getIgnoreClass());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      discretize0.setUseBinNumbers(true);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.getIgnoreClass());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(8, stringArray0.length);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertTrue(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.getIgnoreClass());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(discretize0);
      
      String string0 = discretize0.getRevision();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(string0);
      assertEquals("8964", string0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 86);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals(86, attribute0.index());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.hasZeropoint());
      assertNotNull(attribute0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      double[][] doubleArray1 = new double[1][0];
      discretize0.m_CutPoints = doubleArray1;
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertNotNull(discretize0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.numValues());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isNumeric());
      assertEquals(47, attribute0.index());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertNotNull(attribute0);
      
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)6;
      byteArray0[3] = (byte) (-31);
      boolean boolean1 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)6, (byte)0, (byte) (-31), (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      discretize0.m_CutPoints = doubleArray1;
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      
      String string0 = discretize0.getBinRangesString(0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertNotNull(string0);
      assertEquals("(-inf-2],(2-0],(0-inf)", string0);
      
      String string1 = denseInstance0.toStringNoWeight();
      assertArrayEquals(new double[] {2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numAttributes());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("2,0", string1);
      
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      assertArrayEquals(new double[] {2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(1, sparseInstance0.numValues());
      assertEquals(2, sparseInstance0.numAttributes());
      assertEquals(2, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numAttributes());
      assertNotNull(sparseInstance0);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.523079262276319
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = "There are newer versions of existing packages at the repository. Refreshing cache...";
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Attribute, BufferedInputStream> function1 = unaryOperator0.andThen((Function<? super Attribute, ? extends BufferedInputStream>) function0);
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertTrue(attribute0.isNumeric());
      assertEquals(47, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(attribute0.isNumeric());
      assertEquals(47, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      double double0 = instances0.meanOrMode(attribute0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, double0, 0.01);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      
      boolean boolean2 = discretize0.batchFinished();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 47;
      doubleArray1[1] = doubleArray2;
      doubleArray1[2] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      
      doubleArray0[1] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(540.835073, doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(540.835073, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numValues());
      assertEquals(2, denseInstance0.numAttributes());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(denseInstance0);
      
      DenseInstance denseInstance1 = new DenseInstance((-1.0), doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1.0), denseInstance1.weight(), 0.01);
      assertEquals(2, denseInstance1.numValues());
      assertEquals(2, denseInstance1.numAttributes());
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(denseInstance1);
      
      boolean boolean3 = discretize0.input(denseInstance1);
      assertArrayEquals(new double[] {2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), denseInstance1.weight(), 0.01);
      assertEquals(2, denseInstance1.numValues());
      assertEquals(2, denseInstance1.numAttributes());
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertTrue(boolean3);
      assertNotSame(denseInstance1, denseInstance0);
      assertNotSame(doubleArray0, doubleArray2);
      
      discretize0.calculateCutPoints();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertFalse(discretize1.isOutputFormatDefined());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize1.getIgnoreClass());
      assertTrue(discretize1.isNewBatch());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotNull(discretize1);
      
      // Undeclared exception!
      try { 
        discretize1.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.648026103002984
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      discretize0.m_NumBins = 119;
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(47, attribute0.index());
      assertNotNull(attribute0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(47, attribute0.index());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      boolean boolean3 = discretize0.batchFinished();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      String string0 = attribute0.getRevision();
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1, attribute0.ordering());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertNotNull(string0);
      assertEquals("9172", string0);
      
      doubleArray2[1] = (double) 3;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      DenseInstance denseInstance0 = new DenseInstance(3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals(3.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numValues());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(denseInstance0);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      DenseInstance denseInstance1 = new DenseInstance(2);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, denseInstance1.numValues());
      assertEquals(2, denseInstance1.numAttributes());
      assertEquals(1.0, denseInstance1.weight(), 0.01);
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      boolean boolean5 = discretize0.input(denseInstance1);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals(2, denseInstance1.numValues());
      assertEquals(2, denseInstance1.numAttributes());
      assertEquals(1.0, denseInstance1.weight(), 0.01);
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      assertNotSame(denseInstance1, denseInstance0);
      
      discretize0.calculateCutPointsByEqualFrequencyBinning(2);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      discretize0.setMakeBinary(true);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals(119, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-28));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -28
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      instances0.setClass(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, instances0.classIndex());
      assertEquals(1, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.classIndex());
      assertEquals(1, instances0.numClasses());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.calculateCutPoints();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.findNumBins(0);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      
      Random.setNextRandom(5758);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Attribute, SparseInstance> function0 = (Function<Attribute, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Attribute, SparseInstance> function1 = unaryOperator0.andThen((Function<? super Attribute, ? extends SparseInstance>) function0);
      assertFalse(function1.equals((Object)function0));
      assertNotNull(function1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.type());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isRegular());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.type());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isRegular());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.type());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isRegular());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      assertEquals((-1.0), double0, 0.01);
      
      instances0.setClass(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.index());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.type());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isRegular());
      assertEquals(0, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numClasses());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, instances0.classIndex());
      assertEquals(2, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numClasses());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setMakeBinary(true);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.isNewBatch());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize1.isNewBatch());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals(10, discretize1.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize1.getIgnoreClass());
      assertTrue(discretize1.getMakeBinary());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.isOutputFormatDefined());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotNull(discretize1);
      assertNotSame(discretize0, discretize1);
      assertNotSame(discretize1, discretize0);
      
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'There are newer versions of existing packages at the repository. Refreshing cache...' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(47, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals(47, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      instances0.setClassIndex(0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numClasses());
      assertEquals(0, instances0.classIndex());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertTrue(arrayList0.contains(attribute0));
      
      double double0 = instances0.meanOrMode(attribute0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numClasses());
      assertEquals(0, instances0.classIndex());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, double0, 0.01);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numClasses());
      assertEquals(0, instances0.classIndex());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isOutputFormatDefined());
      
      boolean boolean2 = discretize0.batchFinished();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2284);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2284, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2284, binarySparseInstance0.numAttributes());
      assertNotNull(binarySparseInstance0);
      
      discretize0.convertInstance(binarySparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(2284, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(2284, binarySparseInstance0.numAttributes());
      
      boolean boolean3 = discretize0.getFindNumBins();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      discretize0.setOutputFormat();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Attribute, BufferedInputStream> function1 = unaryOperator0.andThen((Function<? super Attribute, ? extends BufferedInputStream>) function0);
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      instances0.renameAttribute(attribute0, (String) null);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      
      boolean boolean3 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      String string0 = attribute0.getRevision();
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.index());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertNotNull(string0);
      assertEquals("9172", string0);
      
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      
      doubleArray0[1] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, denseInstance0.numValues());
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertNotNull(denseInstance0);
      
      DenseInstance denseInstance1 = new DenseInstance((-1.0), doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, denseInstance1.numAttributes());
      assertEquals((-1.0), denseInstance1.weight(), 0.01);
      assertEquals(2, denseInstance1.numValues());
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertNotNull(stringArray0);
      
      discretize0.calculateCutPointsByEqualFrequencyBinning(2);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      
      discretize0.setMakeBinary(true);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      
      discretize0.convertInstance(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals(2, denseInstance0.numValues());
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertNotSame(denseInstance0, denseInstance1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isOutputFormatDefined());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertEquals(47, attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertEquals(47, attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      double double0 = instances0.meanOrMode(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.index());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, double0, 0.01);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 47;
      doubleArray1[1] = doubleArray2;
      discretize0.setMakeBinary(true);
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      doubleArray1[2] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      doubleArray2[1] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(564.0637785776634, doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(564.0637785776634, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numValues());
      assertEquals(2, denseInstance0.numAttributes());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(denseInstance0);
      
      DenseInstance denseInstance1 = new DenseInstance((-1.0), doubleArray0);
      assertArrayEquals(new double[] {2.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, denseInstance1.numValues());
      assertEquals(2, denseInstance1.numAttributes());
      assertEquals((-1.0), denseInstance1.weight(), 0.01);
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(denseInstance1);
      
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(47, attribute0.index());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(47, attribute0.index());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      instances0.replaceAll(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertTrue(arrayList0.contains(attribute0));
      
      double double0 = instances0.meanOrMode(attribute0);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, double0, 0.01);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      
      boolean boolean2 = discretize0.batchFinished();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 47;
      doubleArray1[1] = doubleArray2;
      discretize0.setMakeBinary(true);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      
      doubleArray1[2] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      
      doubleArray0[1] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(2265.409214394268, doubleArray2);
      assertArrayEquals(new double[] {0.0, 3.0, 47.0}, doubleArray2, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(3, doubleArray2.length);
      assertEquals(3, denseInstance0.numAttributes());
      assertEquals(2265.409214394268, denseInstance0.weight(), 0.01);
      assertEquals(3, denseInstance0.numValues());
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      assertNotNull(denseInstance0);
      
      DenseInstance denseInstance1 = new DenseInstance(3845);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(3845, denseInstance1.numAttributes());
      assertEquals(1.0, denseInstance1.weight(), 0.01);
      assertEquals(3845, denseInstance1.numValues());
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertTrue(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.isNumeric());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isRelationValued());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      double[] doubleArray0 = new double[10];
      DenseInstance denseInstance0 = new DenseInstance(2);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals(2, denseInstance0.numValues());
      assertNotNull(denseInstance0);
      
      denseInstance0.setDataset(instances0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals(2, denseInstance0.numValues());
      assertEquals((-1), denseInstance0.classIndex());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.input(denseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals(2, denseInstance0.numValues());
      assertEquals((-1), denseInstance0.classIndex());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      discretize0.calculateCutPoints();
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      
      Discretize discretize1 = new Discretize();
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize1.getIgnoreClass());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize1.isNewBatch());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertFalse(discretize1.isOutputFormatDefined());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotNull(discretize1);
      
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean3 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      doubleArray0[5] = (double) 3;
      DenseInstance denseInstance0 = new DenseInstance(3);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(3, denseInstance0.numValues());
      assertEquals(3, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      
      DenseInstance denseInstance1 = new DenseInstance(2, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1.0, 3.0, 0.0, 3.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance1.numAttributes());
      assertEquals(7, denseInstance1.numValues());
      assertEquals(2.0, denseInstance1.weight(), 0.01);
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      denseInstance0.setDataset(instances0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(3, denseInstance0.numValues());
      assertEquals(3, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertNotSame(denseInstance0, denseInstance1);
      assertTrue(arrayList0.contains(attribute0));
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean4 = discretize0.input(denseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(3, denseInstance0.numValues());
      assertEquals(3, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertFalse(boolean4);
      assertNotSame(denseInstance0, denseInstance1);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 47);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(47, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertNotNull(attribute0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(47, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      Attribute attribute1 = new Attribute("date");
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, attribute1.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals("date", attribute1.name());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(0, attribute1.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertTrue(attribute1.isRegular());
      assertTrue(attribute1.hasZeropoint());
      assertEquals(0, attribute1.numValues());
      assertEquals((-1), attribute1.index());
      assertTrue(attribute1.isAveragable());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertTrue(attribute1.isNumeric());
      assertFalse(attribute1.isDate());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isNominal());
      assertFalse(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNotNull(instances0);
      assertFalse(arrayList0.contains(attribute1));
      assertTrue(arrayList0.contains(attribute0));
      
      double double0 = instances0.meanOrMode(attribute0);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(attribute0.equals((Object)attribute1));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(attribute0, attribute1);
      assertFalse(arrayList0.contains(attribute1));
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(arrayList0.contains(attribute1));
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      
      boolean boolean3 = discretize0.batchFinished();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      double[] doubleArray2 = new double[10];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      String string0 = attribute0.getRevision();
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(attribute0.isString());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.hasZeropoint());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isAveragable());
      assertEquals(0, attribute0.numValues());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.equals((Object)attribute1));
      assertNotNull(string0);
      assertEquals("9172", string0);
      assertNotSame(attribute0, attribute1);
      
      doubleArray2[1] = (double) 3;
      doubleArray2[2] = (double) 47;
      doubleArray1[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray1;
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      
      boolean boolean4 = discretize0.batchFinished();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(3, binarySparseInstance0.numAttributes());
      assertEquals(3, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertNotNull(binarySparseInstance0);
      
      discretize0.convertInstance(binarySparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(3, binarySparseInstance0.numAttributes());
      assertEquals(3, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      
      boolean boolean5 = discretize0.batchFinished();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5);
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals((-1), attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals((-1), attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[7];
      Spliterator<Attribute> spliterator0 = arrayList0.spliterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(attribute0));
      
      DenseInstance denseInstance0 = new DenseInstance(3.551502855407978, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals(3.551502855407978, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numValues());
      assertNotNull(denseInstance0);
      
      denseInstance0.setDataset(instances0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(3.551502855407978, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numValues());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean3 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(3.551502855407978, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numValues());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      DenseInstance denseInstance1 = new DenseInstance((-2876.670901444), doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance1.numValues());
      assertEquals((-2876.670901444), denseInstance1.weight(), 0.01);
      assertEquals(7, denseInstance1.numAttributes());
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      Attribute attribute1 = (Attribute)attribute0.copy();
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals(1, attribute1.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertTrue(attribute1.isNumeric());
      assertEquals("", attribute1.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute1.name());
      assertFalse(attribute1.isDate());
      assertEquals(0, attribute1.type());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertTrue(attribute1.isRegular());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(0, attribute1.numValues());
      assertTrue(attribute1.hasZeropoint());
      assertEquals(0, attribute1.index());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertTrue(attribute1.isAveragable());
      assertFalse(attribute1.isNominal());
      assertFalse(attribute1.isRelationValued());
      assertFalse(attribute1.isString());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      Instances instances1 = Filter.useFilter(instances0, discretize0);
      assertEquals("numeric-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      assertEquals(3.551502855407978, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(1, instances1.numInstances());
      assertEquals(1, instances1.size());
      assertEquals(1, instances1.numAttributes());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(instances1.equals((Object)instances0));
      assertNotNull(instances1);
      assertNotSame(instances1, instances0);
      assertNotSame(instances0, instances1);
      assertTrue(arrayList0.contains(attribute1));
      
      denseInstance1.setDataset(instances1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("numeric-weka.filters.unsupervised.attribute.Discretize-B10-M-1.0-Rfirst-last", instances1.relationName());
      assertEquals(3.551502855407978, instances1.sumOfWeights(), 0.01);
      assertFalse(instances1.checkForStringAttributes());
      assertEquals((-1), instances1.classIndex());
      assertEquals(1, instances1.numInstances());
      assertEquals(1, instances1.size());
      assertEquals(1, instances1.numAttributes());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(7, denseInstance1.numValues());
      assertEquals((-2876.670901444), denseInstance1.weight(), 0.01);
      assertEquals((-1), denseInstance1.classIndex());
      assertEquals(7, denseInstance1.numAttributes());
      assertFalse(instances1.equals((Object)instances0));
      assertFalse(instances0.equals((Object)instances1));
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotSame(instances1, instances0);
      assertNotSame(instances0, instances1);
      assertNotSame(denseInstance1, denseInstance0);
      assertTrue(arrayList0.contains(attribute1));
      
      boolean boolean4 = discretize0.input(denseInstance1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals(7, denseInstance1.numValues());
      assertEquals((-2876.670901444), denseInstance1.weight(), 0.01);
      assertEquals((-1), denseInstance1.classIndex());
      assertEquals(7, denseInstance1.numAttributes());
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertTrue(boolean4);
      assertNotSame(denseInstance1, denseInstance0);
      
      Discretize discretize1 = new Discretize();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getIgnoreClass());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals(10, discretize1.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize1.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotNull(discretize1);
      
      discretize1.m_UseEqualFrequency = true;
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.getIgnoreClass());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertTrue(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals(10, discretize1.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertFalse(discretize1.isFirstBatchDone());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize1.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertFalse(discretize1.getMakeBinary());
      
      Discretize discretize2 = new Discretize();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize2.attributeIndicesTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize2.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize2.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize2.ignoreClassTipText());
      assertEquals((-1.0), discretize2.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize2.globalInfo());
      assertFalse(discretize2.isFirstBatchDone());
      assertTrue(discretize2.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize2.findNumBinsTipText());
      assertFalse(discretize2.getUseEqualFrequency());
      assertFalse(discretize2.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize2.useEqualFrequencyTipText());
      assertFalse(discretize2.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize2.useBinNumbersTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize2.invertSelectionTipText());
      assertFalse(discretize2.getIgnoreClass());
      assertFalse(discretize2.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize2.binsTipText());
      assertEquals(10, discretize2.getBins());
      assertFalse(discretize2.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize2.makeBinaryTipText());
      assertFalse(discretize2.equals((Object)discretize1));
      assertFalse(discretize2.equals((Object)discretize0));
      assertNotNull(discretize2);
      
      try { 
        Filter.useFilter(instances1, discretize2);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertNotNull(discretize0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertNotNull(attribute0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances1 = new Instances(".bsi", arrayList0, 0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, instances1.numAttributes());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.size());
      assertEquals((-1), instances1.classIndex());
      assertEquals(".bsi", instances1.relationName());
      assertTrue(instances1.equals((Object)instances0));
      assertNotNull(instances1);
      assertTrue(arrayList0.contains(attribute0));
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(4, binarySparseInstance0.numAttributes());
      assertEquals(4, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertNotNull(binarySparseInstance0);
      
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(4, binarySparseInstance0.numAttributes());
      assertEquals(4, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(4, sparseInstance0.numValues());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(4, sparseInstance0.numAttributes());
      assertNotNull(sparseInstance0);
      
      int int1 = instances1.lastIndexOf(sparseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, instances1.numAttributes());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.size());
      assertEquals((-1), instances1.classIndex());
      assertEquals(".bsi", instances1.relationName());
      assertEquals(4, binarySparseInstance0.numAttributes());
      assertEquals(4, binarySparseInstance0.numValues());
      assertEquals(1.0, binarySparseInstance0.weight(), 0.01);
      assertEquals(4, sparseInstance0.numValues());
      assertEquals(1.0, sparseInstance0.weight(), 0.01);
      assertEquals(4, sparseInstance0.numAttributes());
      assertTrue(instances1.equals((Object)instances0));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(instances1, instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      double double0 = instances1.meanOrMode(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(1, instances1.numAttributes());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.size());
      assertEquals((-1), instances1.classIndex());
      assertEquals(".bsi", instances1.relationName());
      assertTrue(instances1.equals((Object)instances0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(instances1, instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean3 = discretize0.setInputFormat(instances1);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, instances1.numAttributes());
      assertFalse(instances1.checkForStringAttributes());
      assertEquals(0, instances1.numInstances());
      assertEquals(0.0, instances1.sumOfWeights(), 0.01);
      assertEquals(0, instances1.size());
      assertEquals((-1), instances1.classIndex());
      assertEquals(".bsi", instances1.relationName());
      assertTrue(instances1.equals((Object)instances0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNotSame(instances1, instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      
      boolean boolean4 = discretize0.batchFinished();
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string0 = attribute0.getRevision();
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals("", attribute0.getDateFormat());
      assertNotNull(string0);
      assertEquals("9172", string0);
      
      discretize0.setInvertSelection(true);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertTrue(discretize0.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      
      DenseInstance denseInstance0 = new DenseInstance(3, (double[]) null);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(3.0, denseInstance0.weight(), 0.01);
      assertNotNull(denseInstance0);
      
      DenseInstance denseInstance1 = new DenseInstance(4, (double[]) null);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(4.0, denseInstance1.weight(), 0.01);
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Attribute, BufferedInputStream> function1 = unaryOperator0.andThen((Function<? super Attribute, ? extends BufferedInputStream>) function0);
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertFalse(attribute0.isString());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals((-1), attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isString());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals((-1), attribute0.index());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isString());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      discretize0.setOutputFormat();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      
      boolean boolean3 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      String string0 = attribute0.getRevision();
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertFalse(attribute0.isString());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertNotNull(string0);
      assertEquals("9172", string0);
      
      doubleArray1[0] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      
      doubleArray0[1] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numValues());
      assertEquals(2, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      
      DenseInstance denseInstance1 = new DenseInstance((-1.0), doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, denseInstance1.numValues());
      assertEquals((-1.0), denseInstance1.weight(), 0.01);
      assertEquals(2, denseInstance1.numAttributes());
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      assertNotNull(stringArray0);
      
      discretize0.setUseBinNumbers(true);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      
      discretize0.calculateCutPointsByEqualFrequencyBinning(2);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      
      discretize0.setMakeBinary(true);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals(10, discretize0.getBins());
      
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertNotNull(discretize0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertNotNull(attribute0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(attribute0.isRegular());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isString());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertEquals(1, attribute0.ordering());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[7];
      DenseInstance denseInstance0 = new DenseInstance(3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(3.0, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numValues());
      assertEquals(7, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      
      denseInstance0.setDataset(instances0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numInstances());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(3.0, denseInstance0.weight(), 0.01);
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(7, denseInstance0.numValues());
      assertEquals(7, denseInstance0.numAttributes());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean4 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(3.0, denseInstance0.weight(), 0.01);
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(7, denseInstance0.numValues());
      assertEquals(7, denseInstance0.numAttributes());
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(3.0, denseInstance0.weight(), 0.01);
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(7, denseInstance0.numValues());
      assertEquals(7, denseInstance0.numAttributes());
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5);
      
      discretize0.calculateCutPoints();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      
      Discretize discretize1 = new Discretize();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize1.attributeIndicesTipText());
      assertFalse(discretize1.getUseBinNumbers());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize1.ignoreClassTipText());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize1.globalInfo());
      assertFalse(discretize1.isFirstBatchDone());
      assertTrue(discretize1.isNewBatch());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize1.findNumBinsTipText());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize1.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.isOutputFormatDefined());
      assertEquals("Make resulting attributes binary.", discretize1.makeBinaryTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize1.invertSelectionTipText());
      assertFalse(discretize1.getIgnoreClass());
      assertFalse(discretize1.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize1.binsTipText());
      assertFalse(discretize1.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize1.useEqualFrequencyTipText());
      assertFalse(discretize1.getMakeBinary());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize1.useBinNumbersTipText());
      assertFalse(discretize1.equals((Object)discretize0));
      assertNotNull(discretize1);
      
      // Undeclared exception!
      try { 
        discretize1.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertNotNull(attribute0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), attribute0.index());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      double[] doubleArray0 = new double[7];
      DenseInstance denseInstance0 = new DenseInstance(1);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1, denseInstance0.numAttributes());
      assertEquals(1, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertNotNull(denseInstance0);
      
      denseInstance0.setDataset(instances0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(1, denseInstance0.numAttributes());
      assertEquals(1, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean5 = discretize0.input(denseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(1, denseInstance0.numAttributes());
      assertEquals(1, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string0 = attribute0.getRevision();
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(3, Attribute.DATE);
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isRegular());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertNotNull(string0);
      assertEquals("9172", string0);
      
      DenseInstance denseInstance1 = new DenseInstance(4, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance1.numValues());
      assertEquals(7, denseInstance1.numAttributes());
      assertEquals(4.0, denseInstance1.weight(), 0.01);
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      DenseInstance denseInstance2 = new DenseInstance((-1696.0), doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance2.numValues());
      assertEquals(7, denseInstance2.numAttributes());
      assertEquals((-1696.0), denseInstance2.weight(), 0.01);
      assertFalse(denseInstance2.equals((Object)denseInstance1));
      assertFalse(denseInstance2.equals((Object)denseInstance0));
      assertNotNull(denseInstance2);
      
      boolean boolean6 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      discretize0.m_NumBins = 99;
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, BufferedInputStream> function0 = (Function<Object, BufferedInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...", 99);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(99, attribute0.index());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertNotNull(attribute0);
      
      boolean boolean1 = arrayList0.add(attribute0);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(99, attribute0.index());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      Attribute attribute1 = unaryOperator0.apply(attribute0);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(99, attribute0.index());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.isString());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute1.name());
      assertEquals(99, attribute1.index());
      assertTrue(attribute1.hasZeropoint());
      assertTrue(attribute1.isRegular());
      assertTrue(attribute1.isAveragable());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.isRelationValued());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isNominal());
      assertFalse(attribute1.isDate());
      assertTrue(attribute1.isNumeric());
      assertNotNull(attribute1);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      
      Attribute attribute2 = unaryOperator0.apply(attribute1);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(3, Attribute.DATE);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertEquals(99, attribute0.index());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertFalse(attribute1.isString());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute1.name());
      assertEquals(99, attribute1.index());
      assertTrue(attribute1.hasZeropoint());
      assertTrue(attribute1.isRegular());
      assertTrue(attribute1.isAveragable());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(0, attribute1.type());
      assertFalse(attribute1.isRelationValued());
      assertEquals(0, attribute1.numValues());
      assertFalse(attribute1.isNominal());
      assertFalse(attribute1.isDate());
      assertTrue(attribute1.isNumeric());
      assertEquals(1.0, attribute2.weight(), 0.01);
      assertTrue(attribute2.isAveragable());
      assertTrue(attribute2.isNumeric());
      assertEquals("", attribute2.getDateFormat());
      assertEquals(Double.NEGATIVE_INFINITY, attribute2.getLowerNumericBound(), 0.01);
      assertTrue(attribute2.isRegular());
      assertEquals(Double.POSITIVE_INFINITY, attribute2.getUpperNumericBound(), 0.01);
      assertFalse(attribute2.upperNumericBoundIsOpen());
      assertFalse(attribute2.isRelationValued());
      assertEquals(0, attribute2.type());
      assertEquals(99, attribute2.index());
      assertEquals(0, attribute2.numValues());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute2.name());
      assertFalse(attribute2.lowerNumericBoundIsOpen());
      assertFalse(attribute2.isDate());
      assertTrue(attribute2.hasZeropoint());
      assertEquals(1, attribute2.ordering());
      assertFalse(attribute2.isNominal());
      assertFalse(attribute2.isString());
      assertNotNull(attribute2);
      assertSame(attribute0, attribute1);
      assertSame(attribute0, attribute2);
      assertSame(attribute1, attribute0);
      assertSame(attribute1, attribute2);
      assertSame(attribute2, attribute0);
      assertSame(attribute2, attribute1);
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute1));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute1));
      
      double double0 = instances0.meanOrMode(attribute0);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.NUMERIC);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.isDate());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, double0, 0.01);
      assertSame(attribute0, attribute1);
      assertSame(attribute0, attribute2);
      assertTrue(arrayList0.contains(attribute1));
      
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), instances0.classIndex());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(arrayList0.contains(attribute1));
      
      discretize0.setOutputFormat();
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      
      boolean boolean3 = discretize0.batchFinished();
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[2];
      double[][] doubleArray1 = new double[3][0];
      doubleArray1[0] = doubleArray0;
      discretize0.setUseBinNumbers(true);
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray1[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray1;
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      
      DenseInstance denseInstance0 = new DenseInstance(3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, denseInstance0.numAttributes());
      assertEquals(3.0, denseInstance0.weight(), 0.01);
      assertEquals(2, denseInstance0.numValues());
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertNotNull(denseInstance0);
      
      DenseInstance denseInstance1 = new DenseInstance((-1.0), doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, denseInstance1.numValues());
      assertEquals(2, denseInstance1.numAttributes());
      assertEquals((-1.0), denseInstance1.weight(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      boolean boolean4 = discretize0.input(denseInstance1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(2, doubleArray0.length);
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(2, denseInstance1.numValues());
      assertEquals(2, denseInstance1.numAttributes());
      assertEquals((-1.0), denseInstance1.weight(), 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray2));
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4);
      assertNotSame(doubleArray0, doubleArray2);
      assertNotSame(denseInstance1, denseInstance0);
      
      discretize0.calculateCutPointsByEqualFrequencyBinning(2);
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setOutputFormat();
      assertTrue(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setMakeBinary(true);
      assertTrue(discretize0.isOutputFormatDefined());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setOutputFormat();
      assertTrue(discretize0.isOutputFormatDefined());
      assertTrue(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(99, discretize0.getBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertTrue(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.getUseEqualFrequency());
      
      // Undeclared exception!
      try { 
        discretize0.findNumBins(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(1, attribute0.ordering());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(90);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(90, denseInstance0.numValues());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(90, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      
      denseInstance0.setDataset(instances0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals("numeric", instances0.relationName());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(90, denseInstance0.numValues());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(90, denseInstance0.numAttributes());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean4 = discretize0.input(denseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(90, denseInstance0.numValues());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(90, denseInstance0.numAttributes());
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string0 = attribute0.getRevision();
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertEquals(0, attribute0.type());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isRelationValued());
      assertTrue(attribute0.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertEquals(0, attribute0.index());
      assertEquals(1, attribute0.ordering());
      assertEquals("", attribute0.getDateFormat());
      assertNotNull(string0);
      assertEquals("9172", string0);
      
      DenseInstance denseInstance1 = new DenseInstance(4798.563235, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, denseInstance1.numAttributes());
      assertEquals(4798.563235, denseInstance1.weight(), 0.01);
      assertEquals(3, denseInstance1.numValues());
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      DenseInstance denseInstance2 = new DenseInstance(4, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, denseInstance2.numValues());
      assertEquals(3, denseInstance2.numAttributes());
      assertEquals(4.0, denseInstance2.weight(), 0.01);
      assertFalse(denseInstance2.equals((Object)denseInstance1));
      assertFalse(denseInstance2.equals((Object)denseInstance0));
      assertNotNull(denseInstance2);
      
      boolean boolean5 = discretize0.input(denseInstance0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(90, denseInstance0.numValues());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(1.0, denseInstance0.weight(), 0.01);
      assertEquals(90, denseInstance0.numAttributes());
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertFalse(denseInstance0.equals((Object)denseInstance2));
      assertFalse(boolean5);
      assertNotSame(denseInstance0, denseInstance1);
      assertNotSame(denseInstance0, denseInstance2);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertFalse(attribute0.isRelationValued());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isRelationValued());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals((-1), attribute0.index());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[7];
      Spliterator<Attribute> spliterator0 = arrayList0.spliterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(attribute0));
      
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numValues());
      assertNotNull(denseInstance0);
      
      denseInstance0.setDataset(instances0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals((-1), instances0.classIndex());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numValues());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean3 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numValues());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string0 = attribute0.getRevision();
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertNotNull(string0);
      assertEquals("9172", string0);
      
      denseInstance0.setValueSparse(2, 3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numValues());
      
      discretize0.setOutputFormat();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.numValues());
      assertEquals(0, attribute0.type());
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.isString());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(attribute0.isNumeric());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isAveragable());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isRegular());
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertTrue(arrayList0.contains(attribute0));
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 1;
      DenseInstance denseInstance1 = new DenseInstance(3, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 1.0, 0.0}, doubleArray1, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, denseInstance1.numAttributes());
      assertEquals(3.0, denseInstance1.weight(), 0.01);
      assertEquals(4, denseInstance1.numValues());
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      boolean boolean5 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertFalse(discretize0.isFirstBatchDone());
      assertFalse(discretize0.isNewBatch());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isOutputFormatDefined());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals((-1.0), denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numValues());
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertFalse(boolean5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(denseInstance0, denseInstance1);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertEquals("", attribute0.getDateFormat());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute0));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean2 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[7];
      Spliterator<Attribute> spliterator0 = arrayList0.spliterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(attribute0));
      
      DenseInstance denseInstance0 = new DenseInstance(3.551502855407978, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance0.numValues());
      assertEquals(3.551502855407978, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      
      denseInstance0.setDataset(instances0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals((-1), instances0.classIndex());
      assertEquals("numeric", instances0.relationName());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(7, denseInstance0.numValues());
      assertEquals(3.551502855407978, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertTrue(arrayList0.contains(attribute0));
      
      boolean boolean3 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals(7, denseInstance0.numValues());
      assertEquals(3.551502855407978, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string0 = attribute0.getRevision();
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals("", attribute0.getDateFormat());
      assertNotNull(string0);
      assertEquals("9172", string0);
      
      DenseInstance denseInstance1 = new DenseInstance(4, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance1.numAttributes());
      assertEquals(4.0, denseInstance1.weight(), 0.01);
      assertEquals(7, denseInstance1.numValues());
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      denseInstance0.setValueSparse(2, 3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance0.numValues());
      assertEquals(3.551502855407978, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertNotSame(denseInstance0, denseInstance1);
      
      discretize0.setOutputFormat();
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(2, Attribute.STRING);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(3, Attribute.DATE);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isNominal());
      assertTrue(attribute0.isRegular());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertEquals(0, attribute0.numValues());
      assertFalse(attribute0.isDate());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertEquals(0, attribute0.index());
      assertFalse(attribute0.isRelationValued());
      assertFalse(attribute0.isString());
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertTrue(attribute0.isAveragable());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertTrue(arrayList0.contains(attribute0));
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) (-1);
      doubleArray1[2] = 3.551502855407978;
      DenseInstance denseInstance2 = new DenseInstance(3, doubleArray1);
      assertArrayEquals(new double[] {(-1.0), 0.0, 3.551502855407978, 0.0}, doubleArray1, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(4, doubleArray1.length);
      assertEquals(4, denseInstance2.numAttributes());
      assertEquals(4, denseInstance2.numValues());
      assertEquals(3.0, denseInstance2.weight(), 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(denseInstance2.equals((Object)denseInstance0));
      assertFalse(denseInstance2.equals((Object)denseInstance1));
      assertNotNull(denseInstance2);
      
      boolean boolean5 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals(7, denseInstance0.numValues());
      assertEquals(3.551502855407978, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertFalse(denseInstance0.equals((Object)denseInstance2));
      assertFalse(boolean5);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(denseInstance0, denseInstance1);
      assertNotSame(denseInstance0, denseInstance2);
      
      boolean boolean6 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertEquals(7, denseInstance0.numValues());
      assertEquals(3.551502855407978, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertEquals((-1), denseInstance0.classIndex());
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertFalse(denseInstance0.equals((Object)denseInstance2));
      assertFalse(boolean6);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(denseInstance0, denseInstance1);
      assertNotSame(denseInstance0, denseInstance2);
      
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertNotNull(discretize0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Attribute> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Attribute attribute0 = new Attribute("There are newer versions of existing packages at the repository. Refreshing cache...");
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertNotNull(attribute0);
      
      boolean boolean0 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(attribute0));
      
      Attribute attribute1 = unaryOperator0.apply(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(3, Attribute.DATE);
      assertEquals(2, Attribute.STRING);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertEquals((-1), attribute0.index());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(attribute1.hasZeropoint());
      assertFalse(attribute1.lowerNumericBoundIsOpen());
      assertEquals(0, attribute1.type());
      assertEquals(0, attribute1.numValues());
      assertEquals((-1), attribute1.index());
      assertFalse(attribute1.isString());
      assertFalse(attribute1.isDate());
      assertTrue(attribute1.isAveragable());
      assertFalse(attribute1.isNominal());
      assertFalse(attribute1.isRelationValued());
      assertTrue(attribute1.isNumeric());
      assertEquals(1.0, attribute1.weight(), 0.01);
      assertEquals(1, attribute1.ordering());
      assertEquals(Double.POSITIVE_INFINITY, attribute1.getUpperNumericBound(), 0.01);
      assertEquals("", attribute1.getDateFormat());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute1.name());
      assertEquals(Double.NEGATIVE_INFINITY, attribute1.getLowerNumericBound(), 0.01);
      assertTrue(attribute1.isRegular());
      assertFalse(attribute1.upperNumericBoundIsOpen());
      assertNotNull(attribute1);
      assertSame(attribute0, attribute1);
      assertSame(attribute1, attribute0);
      
      Instances instances0 = new Instances("numeric", arrayList0, 4);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      assertTrue(arrayList0.contains(attribute1));
      
      int int0 = instances0.lastIndexOf(unaryOperator0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals((-1), int0);
      assertTrue(arrayList0.contains(attribute1));
      
      boolean boolean1 = discretize0.setInputFormat(instances0);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(arrayList0.contains(attribute1));
      
      boolean boolean2 = discretize0.mayRemoveInstanceAfterFirstBatchDone();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertTrue(discretize0.isNewBatch());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      double[] doubleArray0 = new double[7];
      Spliterator<Attribute> spliterator0 = arrayList0.spliterator();
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotNull(spliterator0);
      assertTrue(arrayList0.contains(attribute1));
      
      DenseInstance denseInstance0 = new DenseInstance(0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance0.numValues());
      assertEquals(0.0, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertNotNull(denseInstance0);
      
      denseInstance0.setDataset(instances0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("numeric", instances0.relationName());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals(1, instances0.numAttributes());
      assertEquals(0, instances0.numInstances());
      assertEquals((-1), instances0.classIndex());
      assertEquals(7, denseInstance0.numValues());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(0.0, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertTrue(arrayList0.contains(attribute1));
      
      boolean boolean3 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(7, denseInstance0.numValues());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(0.0, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string0 = attribute0.getRevision();
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertNotNull(string0);
      assertEquals("9172", string0);
      assertSame(attribute0, attribute1);
      
      DenseInstance denseInstance1 = new DenseInstance(4, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance1.numAttributes());
      assertEquals(4.0, denseInstance1.weight(), 0.01);
      assertEquals(7, denseInstance1.numValues());
      assertFalse(denseInstance1.equals((Object)denseInstance0));
      assertNotNull(denseInstance1);
      
      denseInstance0.setValueSparse(2, 3);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance0.numValues());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(0.0, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertNotSame(denseInstance0, denseInstance1);
      
      discretize0.setOutputFormat();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      
      boolean boolean4 = arrayList0.add(attribute0);
      assertEquals(1, Attribute.NOMINAL);
      assertEquals(2, Attribute.ORDERING_MODULO);
      assertEquals(4, Attribute.RELATIONAL);
      assertEquals(2, Attribute.STRING);
      assertEquals(3, Attribute.DATE);
      assertEquals(1, Attribute.ORDERING_ORDERED);
      assertEquals(0, Attribute.ORDERING_SYMBOLIC);
      assertEquals(0, Attribute.NUMERIC);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, attribute0.numValues());
      assertTrue(attribute0.isRegular());
      assertFalse(attribute0.isNominal());
      assertEquals("", attribute0.getDateFormat());
      assertFalse(attribute0.isRelationValued());
      assertEquals(0, attribute0.index());
      assertEquals("There are newer versions of existing packages at the repository. Refreshing cache...", attribute0.name());
      assertTrue(attribute0.isAveragable());
      assertEquals(1.0, attribute0.weight(), 0.01);
      assertTrue(attribute0.hasZeropoint());
      assertEquals(1, attribute0.ordering());
      assertFalse(attribute0.upperNumericBoundIsOpen());
      assertTrue(attribute0.isNumeric());
      assertFalse(attribute0.isString());
      assertEquals(0, attribute0.type());
      assertFalse(attribute0.lowerNumericBoundIsOpen());
      assertFalse(attribute0.isDate());
      assertEquals(Double.NEGATIVE_INFINITY, attribute0.getLowerNumericBound(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, attribute0.getUpperNumericBound(), 0.01);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4);
      assertSame(attribute0, attribute1);
      assertTrue(arrayList0.contains(attribute1));
      
      DenseInstance denseInstance2 = new DenseInstance(3, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(7, denseInstance2.numValues());
      assertEquals(7, denseInstance2.numAttributes());
      assertEquals(3.0, denseInstance2.weight(), 0.01);
      assertFalse(denseInstance2.equals((Object)denseInstance1));
      assertFalse(denseInstance2.equals((Object)denseInstance0));
      assertNotNull(denseInstance2);
      
      boolean boolean5 = discretize0.input(denseInstance0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, doubleArray0.length);
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", discretize0.invertSelectionTipText());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.isNewBatch());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(discretize0.getIgnoreClass());
      assertEquals("The class index will be unset temporarily before the filter is applied.", discretize0.ignoreClassTipText());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", discretize0.desiredWeightOfInstancesPerIntervalTipText());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", discretize0.attributeIndicesTipText());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", discretize0.useBinNumbersTipText());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.isFirstBatchDone());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", discretize0.findNumBinsTipText());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", discretize0.useEqualFrequencyTipText());
      assertEquals("Make resulting attributes binary.", discretize0.makeBinaryTipText());
      assertEquals("Number of bins.", discretize0.binsTipText());
      assertFalse(discretize0.isOutputFormatDefined());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", discretize0.globalInfo());
      assertEquals(7, denseInstance0.numValues());
      assertEquals((-1), denseInstance0.classIndex());
      assertEquals(0.0, denseInstance0.weight(), 0.01);
      assertEquals(7, denseInstance0.numAttributes());
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(denseInstance0.equals((Object)denseInstance1));
      assertFalse(denseInstance0.equals((Object)denseInstance2));
      assertFalse(boolean5);
      assertNotSame(denseInstance0, denseInstance1);
      assertNotSame(denseInstance0, denseInstance2);
      
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
