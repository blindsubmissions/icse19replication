/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 19:00:48 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Vector;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.AssertionError;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.AbstractIscDbHandle;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.jdbc.FBCallableStatement;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.tools.Recover;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[3] = stringArray0[2];
      stringArray0[4] = "c013800d-00d7-c025-4809-000a0a411200";
      stringArray0[5] = stringArray0[3];
      stringArray0[1] = stringArray0[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4283676329729558
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("z/'FW|XtQ.PD^x", true);
      assertEquals("z / 'FW|XtQ.PD^x'", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("z / 'FW|XtQ.PD^x'");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "z / 'FW|XtQ.PD^x'";
      stringArray0[1] = "z / 'FW|XtQ.PD^x'";
      stringArray0[2] = "z/'FW|XtQ.PD^x";
      stringArray0[3] = "z/'FW|XtQ.PD^x";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "z / 'FW|XtQ.PD^x'", false, stringArray0);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("z / 'FW|XtQ.PD^x'", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      String string1 = SQLUtil.normalize("z / ", true);
      assertEquals("z /", string1);
      
      String string2 = SQLUtil.normalize("T1/i.*!+0{.B", false);
      assertEquals("T1 / i.* ! + 0 {.B", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("wsT|nNJqv+yO");
      StringBuilder stringBuilder1 = new StringBuilder("wsT|nNJqv+yO");
      SQLUtil.addOptionalCondition("wsT|nNJqv+yO", stringBuilder1);
      assertEquals("wsT|nNJqv+yO or wsT|nNJqv+yO", stringBuilder1.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = ",vQ&ytX;Ou(+x4";
      SQLUtil.innerJoin(",vQ&ytX;Ou(+x4", stringArray0, stringArray0[0], stringArray0[0], stringArray0);
      SQLUtil.join((String) null, ",vQ&ytX;Ou(+x4", stringArray0, ",vQ&ytX;Ou(+x4", ",vQ&ytX;Ou(+x4", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ckoXz");
      System.setCurrentTimeMillis(1402L);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("wsT|nNJqv+yO");
      SQLUtil.addRequiredCondition("wsT|nNJqv+yO", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.substituteMarkers("0s3Y_v#)=xc", "0s3Y_v#)=xc", object0);
      Random.setNextRandom(22);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = SQLUtil.renderValue("~Q/v]uM7");
      assertEquals("'~Q/v]uM7'", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      Recover recover0 = new Recover();
      recover0.getLobConnection();
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject1 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn("jmsn;k$</1[C[/O").when(compositeDBObject1).getName();
      doReturn(compositeDBObject0, (CompositeDBObject) null).when(compositeDBObject1).getOwner();
      SQLUtil.ownerDotComponent(compositeDBObject1);
      System.setCurrentTimeMillis((-3413L));
      Random.setNextRandom(34);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("wsT|nNJqv+yO");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.renderColumnListWithTableName("[Isbo8!X2+%hE-$", stringArray0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "VARP";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Plg_]`<", (String[]) null, "Wa{4'[~P;Dwl", "Wa{4'[~P;Dwl", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      System.setCurrentTimeMillis((-1L));
      int int0 = 799;
      DBDataType.getInstance(799, "truncate");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("truncate", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      // Undeclared exception!
      try { 
        stringBuilder2.insert(799, (CharSequence) stringBuilder1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 799
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(compositeDBObject0).getName();
      doReturn((CompositeDBObject) null).when(compositeDBObject0).getOwner();
      String string0 = SQLUtil.ownerDotComponent(compositeDBObject0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "rename*1";
      SQLUtil.mutatesDataOrStructure("rename*1");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      String string0 = "SELECT * FROM ";
      linkedList0.pollLast();
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "Got socket";
      SQLUtil.mutatesDataOrStructure("Got socket");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Got socket");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "x0d9";
      stringArray0[1] = "x0d9";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "x0d9", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (x0d9, x0d9)", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("t]\"}8vwLwp", false);
      assertEquals("t ] \"}8vwLwp\"", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      int int0 = (-736);
      pipedReader0.markSupported();
      streamTokenizer0.ordinaryChar((-736));
      pipedReader0.close();
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("swj8p~oEPo*+mbv_`Bq", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("VARP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VARP", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "EXECCREATEDATADICTI4NARYVERSION", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      dBUniqueConstraint0.setDoc("VARP");
      dBUniqueConstraint0.isIdentical(dBSchema0);
      dBUniqueConstraint0.isIdentical(dBSchema0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Random.setNextRandom(148);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "\\{5qM*SC'K&VC:Kj}lo";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/+seu0`cqn<", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("{5qM*SC'K&VC:Kj}lo", true, dBUniqueConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "/+seu0`cqn<");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      int int0 = 96;
      // Undeclared exception!
      try { 
        stringBuilder1.deleteCharAt(96);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 96
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6870920273799715
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("ayyQ", true);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execvarp", true, "execvarp", "ayyQ");
      SQLUtil.constraintName(dBCheckConstraint0);
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("t(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: t(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      SQLUtil.isDDL("create table~q/v]um7");
      SQLUtil.normalize("create table~q/v]um7", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StringBuilder stringBuilder0 = new StringBuilder(" on ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(41, "z+^G:(cet$b)rQF;a`=");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" on ", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals(" on Z+^G:(CET$B)RQF;A`=(3,3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1970, "fOzt\"ELls[]K4+8S~");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("fOzt\"ELls[]K4+8S~", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(true);
      defaultDBColumn0.setType(dBDataType0);
      StringBuilder stringBuilder0 = new StringBuilder("fOzt\"ELls[]K4+8S~");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("fOzt\"ELls[]K4+8S~FOZT\"ELLS[]K4+8S~(2)", stringBuilder0.toString());
      
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("fOzt\"ELls[]K4+8S~, fOzt\"ELls[]K4+8S~, fOzt\"ELls[]K4+8S~, fOzt\"ELls[]K4+8S~, fOzt\"ELls[]K4+8S~, fOzt\"ELls[]K4+8S~, fOzt\"ELls[]K4+8S~", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.addRequiredCondition("wsT|nNJqv+yO", stringBuilder1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("wsT|nNJqv+yO");
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      int int0 = 725;
      DBDataType dBDataType0 = DBDataType.getInstance(725, "");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.max(725, 598);
      DBTable dBTable0 = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0);
      int int1 = (-1953371869);
      StringBuilder stringBuilder0 = new StringBuilder("");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      String string0 = "ay%R|@E*E?RKP_";
      boolean boolean0 = false;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "K";
      stringArray0[6] = "";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable1.getProvider(725);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 725, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.431071102348777
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("drop materialized viewselect * from", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("165 DLDoPL)l9");
      defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.isProcedureCall("callbdata");
      Random.setNextRandom((-279));
      System.setCurrentTimeMillis((-1795L));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "+sSey\\G*akgy#:7";
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("ille", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("+sSeyG*akgy#:7", (DBSchema) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ille";
      tableContainer0.removeTable(defaultDBTable0);
      stringArray0[1] = "ille";
      stringArray0[2] = null;
      stringArray0[3] = "+sSeyG*akgy#:7";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBUniqueConstraint0.isIdentical(tableContainer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(6, (CharSequence) "ille", 420, (-1097));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 6
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.mutatesStructure("execute");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesStructure("execute");
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        errorMessages0.getCursorName();
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getCursorName
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.550056956396423
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.quoteChar(336331016);
      pipedReader0.markSupported();
      streamTokenizer0.ordinaryChar((-736));
      pipedReader0.close();
      streamTokenizer0.nval = (-1877.9595007006);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      String string1 = SQLUtil.normalize("g*^J3^a]|,1sSH.s!", true);
      assertEquals("g * ^ J3 ^ a ] |, 1sSH.s !", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string2 = SQLUtil.normalize("- 1877.9595007006", true);
      assertTrue(string2.equals((Object)string0));
      
      DBDataType dBDataType0 = DBDataType.getInstance(10, "g * ^ J3 ^ a ] |, 1sSH .s !");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("callexecwst|nnjqv+yo", defaultDBTable0, dBDataType0, integer0);
      String string3 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("callexecwst|nnjqv+yo G * ^ J3 ^ A ] |, 1SSH .S !(1) NULL", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("VARP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VARP", dBSchema0);
      DBDataType.getInstance((-384), "VARP");
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "VARP", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("VARP", false, dBPrimaryKeyConstraint0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      MockFile mockFile0 = new MockFile("VARP");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("VARP", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, true);
      defaultDBTable0.getComponents();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(3090L);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("VARP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VARP", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "EXECCREATEDATADICTI4NARYVERSION", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      defaultDBTable0.setOwner(dBSchema0);
      dBUniqueConstraint0.setName("create materialized viewexecute");
      dBUniqueConstraint0.setDoc("VARP");
      dBUniqueConstraint0.isIdentical(dBSchema0);
      dBUniqueConstraint0.isIdentical(dBSchema0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Random.setNextRandom(148);
      System.setCurrentTimeMillis(148);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("select into");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        linkedList0.removeFirst();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter sessionselect * from", (DBTable) null, (-612), "");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("alter sessionselect * from", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionselect * from");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, (-608), "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultDBColumn0.setNullable(true);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals(", , ", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.databene.jdbacl.model.DBCatalog";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "(K!PR]&*X", false, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y{K63L/");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(1698);
      SQLUtil.normalize("org.databene.jdbacl.model.DBCatalog", false);
      String string0 = SQLUtil.normalize("org.databene.jdbacl.model.DBCatalog", false);
      assertEquals("org.databene.jdbacl.model.DBCatalog", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Character character0 = Character.valueOf(':');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("':'", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("VARP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VARP", dBSchema0);
      String string0 = "EXECCREATEDATADICTI4NARYVERSION";
      boolean boolean0 = false;
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("EXECCREATEDATADICTI4NARYVERSION", false, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      String string1 = ":*N8#,{d";
      dBForeignKeyConstraint0.setName(":*N8#,{d");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ":*N8#,{d", false, stringArray0);
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      dBSchema0.getTable("s&)w1A?%]&a`b\u0001b,!J");
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, ":*N8#,{d", true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "wsT|nNJqv+yO");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-140873337), "b=EF{_%J%a");
      defaultDBTable0.addColumn(defaultDBColumn0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertTrue(defaultDBTable1.equals((Object)defaultDBTable0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize("ayyQ", true);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("execvarp", true, "execvarp", "ayyQ");
      dBCheckConstraint0.setName((String) null);
      SQLUtil.constraintName(dBCheckConstraint0);
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2254019992179428
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize("z/'FW|XtQ.PD^x", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "z / 'FW|XtQ.PD^x'";
      stringArray0[2] = "z/'FW|XtQ.PD^x";
      stringArray0[3] = "z/'FW|XtQ.PD^x";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "z / 'FW|XtQ.PD^x'", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(stringArray0[1], true, dBPrimaryKeyConstraint0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("<GU*QlTp", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBForeignKeyConstraint0.setDoc("QX~7#H1");
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.removeComments("z/'FW|XtQ.PD^x");
      String string0 = SQLUtil.normalize("CONSTRAINT <GU*QlTp FOREIGN KEY (z / 'FW|XtQ.PD^x', , z/'FW|XtQ.PD^x, z/'FW|XtQ.PD^x) REFERENCES null(z / 'FW|XtQ.PD^x', , z/'FW|XtQ.PD^x, z/'FW|XtQ.PD^x)", false);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      SQLUtil.normalize("B>/+57@^&{l", true);
      SQLUtil.typeAndName(dBUniqueIndex0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      SQLUtil.typeAndName(defaultDBTable0);
      String string1 = SQLUtil.removeComments("J#PN");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "enae~q/v]emS.null";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("enae~q/v]emS.null");
      DBDataType dBDataType0 = DBDataType.getInstance(1698, ";}Q;t?l(");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("y7s^", defaultDBTable0, dBDataType0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "enae~q/v]emS.null", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("BDATA", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("enae~q/v]emS.null", dBTable0, dBDataType0);
      defaultDBColumn1.getNotNullConstraint();
      SQLUtil.typeAndName((DBObject) null);
      System.setCurrentTimeMillis(4045L);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("ix.2@m97");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertSame(dBTable0, defaultDBTable0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("!n4a^?O`~=zFC--Qxe", false);
      assertEquals("! n4a ^ ? O ` ~ = zFC -- Qxe", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(, , , )");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("VARP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VARP", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("VARP", false, "VARP", "VARP");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK VARP", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("/+seu0`cqn<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ws/T:JV(/]fpLzE#V#L", dBSchema0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      dBUniqueConstraint0.setDoc("EXECCREATEDATADICTI4NARYVERSION");
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Random.setNextRandom(148);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "UTq4~}dZ^1*u-");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType.getInstance((-1618), "BDATA");
      DBDataType dBDataType0 = DBDataType.getInstance(405, "):$a");
      StringBuilder stringBuilder0 = new StringBuilder("truncate");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("BDATA", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.isProcedureCall("x0C% B{}zeH");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "exec", true, "BDATA");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      System.setCurrentTimeMillis(1000L);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.databene.jdbacl.model.DBCatalog";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "(K!PR]&*X", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.databene.jdbacl.model.DBCatalog", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBUniqueIndex0.equals(dBTable0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter tableselect * from", false, dBTable0, stringArray0, dBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(defaultDBTable0);
      SQLUtil.typeAndName(dBForeignKeyConstraint0);
      System.setCurrentTimeMillis(1698);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y{K63L/");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(1698);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DBDataType dBDataType0 = DBDataType.getInstance((-9), "Ity9xf*4)VKHvgqF");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Ity9xf*4)VKHvgqF", (DBTable) null, dBDataType0, integer1);
      defaultDBColumn0.setDefaultValue("execgetpooledconnection");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "Ity9xf*4)VKHvgqF";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Ity9xf*4)VKHvgqF", false, (DBTable) null, stringArray0, (DBTable) null, stringArray0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // refereeTable is not supposed to be null
         //
         verifyException("org.databene.commons.Assert", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("VARP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VARP", dBSchema0);
      dBSchema0.addTable(defaultDBTable0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("VARP", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("VARP", false, defaultDBTable0, "VARP");
      defaultDBTable1.addCheckConstraint(dBCheckConstraint0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "EXECCREATEDATADICTI4NARYVERSION", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      dBUniqueConstraint0.setDoc("VARP");
      dBUniqueConstraint0.isIdentical(dBSchema0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("VARP");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable1.getDoc());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "CLOB";
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = "lobsFil;Nami";
      boolean boolean0 = false;
      String string2 = "x0c% b{";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "x0c% b{";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        Integer.parseUnsignedInt("CLOB", 42);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 42 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 1000.0;
      int int0 = (-736);
      pipedReader0.markSupported();
      streamTokenizer0.ordinaryChar((-736));
      SQLUtil.renderNumber(streamTokenizer0);
      boolean boolean0 = false;
      SQLUtil.normalize("CONSTRAINT ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      try { 
        pipedReader0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // reset() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.markSupported();
      pipedReader0.close();
      streamTokenizer0.nval = (-1877.9595007006);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.renderNumber(streamTokenizer0);
      DBDataType dBDataType0 = DBDataType.getInstance(10, "- 1877.9595007006");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("callexecwst|nnjqv+yo", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      System.setCurrentTimeMillis(365L);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      pipedReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChar((-736));
      PipedReader pipedReader1 = new PipedReader(127);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("- 0", true);
      Random.setNextRandom((-4));
      streamTokenizer0.nval = 1849.370207156141;
      System.setCurrentTimeMillis((-4));
      pipedReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader1);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("z/'FW|XtQ.PD^x", true);
      System.setCurrentTimeMillis(1829L);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Random.setNextRandom(1226);
      String string0 = SQLUtil.normalize("?h|Ms*/zC2J>YZy24I", false);
      assertEquals("? h | Ms */ zC2J > YZy24I", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[2], false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc(stringArray0[1]);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      String string1 = SQLUtil.normalize("foreign key constraint constraint", false);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = "z/'FW|XtQ.PD^x";
      boolean boolean0 = false;
      String string1 = "\n/* direct lookup */";
      SQLUtil.isProcedureCall("\n/* direct lookup */");
      DBTable dBTable0 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      try {
        dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint((DBTable) null, "\n/* direct lookup */", false, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBPrimaryKeyConstraint", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("VARP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VARP", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "EXECCREATEDATADICTI4NARYVERSION", false, stringArray0);
      String string0 = SQLUtil.normalize("eVhGa^FI5M8/*", false);
      assertEquals("eVhGa ^ FI5M8 /*", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = SQLUtil.removeComments("\n/* group sorted */");
      assertEquals("\n", string0);
  }
}
