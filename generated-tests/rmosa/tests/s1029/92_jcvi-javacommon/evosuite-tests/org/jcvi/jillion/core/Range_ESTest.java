/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 19:09:43 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of(2605L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 2605, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -127 .. -127 ]/RB", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(3752L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Comparators.values();
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775649L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.contractBegin(255L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9508045797183735
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-118L), (-118L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-118L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-98L), (-98L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range1.equals(range_CoordinateSystem0);
      assertFalse(boolean1);
      
      long long1 = range0.getBegin();
      assertEquals((-118L), long1);
      
      Range.Comparators.values();
      List<Range> list0 = range1.complement(range0);
      assertTrue(range1.isEmpty());
      assertTrue(list0.contains(range1));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775360L);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[Gk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[Gk
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0592794887184103
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(9223372036854775797L, 9223372036854775797L);
      range0.complement(range0);
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.387300884544407
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2147483647L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.equals(range0);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      range1.equals(range_CoordinateSystem0);
      range1.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.274185261046465
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(9223372034707292142L);
      range0.getBegin();
      range0.complement(range0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of((long) 1273, 9223372034707292142L);
      range0.complement(range1);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("H:nH7E:82ULjqQ", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse H:nH7E:82ULjqQ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-3752L), (-3752L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292156L);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 9223372034707292155 ]/0B", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long((-818L));
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8507902655806125
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372032559808513L, 9223372036854775733L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775733L, (-2515L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2515 would make range [9223372036854775733 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("unable to delete ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to delete  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.902823587955807
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long((-2147483648L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -2147483647 .. -2147483647 ]/RB", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-2147483655L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("i+*29UD4D~b6A]=^QL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.i+*29UD4D~b6A]=^QL
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.016511028793469
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      range0.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range1.isSubRangeOf(range0);
      range1.equals(range_CoordinateSystem0);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("iC`4]p(GN=X", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse iC`4]p(GN=X into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7543317035592536
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      
      range0.toString();
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long((-818L));
      Long.toUnsignedString((-1L));
      Long.getLong("N*Umk#+>B13i");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem2);
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.886202314102128
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-1661L));
      Range range1 = Range.of((-988L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      Long long0 = new Long((-1661L));
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ -1660 .. -1660 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem2);
      assertEquals((-1660L), long1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9216576564967065
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-971L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder0.expandEnd((-1415L));
      // Undeclared exception!
      try { 
        Range.parseRange("UTF-8", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse UTF-8 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8444872614601695
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range_CoordinateSystem0);
      range0.split(127L);
      Range.CoordinateSystem.values();
      Object object2 = new Object();
      range0.equals(object2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(range_CoordinateSystem0);
      List<Range> list0 = range0.split(2147483647L);
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(list1.isEmpty());
      
      Range.CoordinateSystem.values();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertFalse(boolean0);
      
      long long1 = range0.getBegin();
      assertTrue(range0.isEmpty());
      assertEquals(2147483647L, long1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7689014346007985
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(9223372034707292142L);
      range0.getBegin();
      Integer integer0 = new Integer(1273);
      boolean boolean0 = range0.equals(integer0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1273);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372034707292143 .. 9223372034707292143 ]/RB", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854775733L;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372032559808513L, 9223372036854775733L);
      long long1 = (-2515L);
      // Undeclared exception!
      try { 
        range0.split(2147483647L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707292164 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2450L, 65535L);
      Long long0 = new Long((-722L));
      Object object0 = new Object();
      range0.split(414L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 478L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.ofLength(3755L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9216576564967065
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long((-32768L));
      assertNotNull(long0);
      assertEquals((-32768L), (long)long0);
      
      Long long1 = new Long(1144L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(1144L, (long)long1);
      
      Long long2 = Long.getLong("XhZ]-C9-Ni4RV12]", long1);
      assertFalse(long1.equals((Object)long0));
      assertFalse(long2.equals((Object)long0));
      assertNotNull(long2);
      assertEquals(1144L, (long)long2);
      
      boolean boolean0 = range0.equals(long0);
      assertFalse(long0.equals((Object)long1));
      assertFalse(long0.equals((Object)long2));
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      Range range0 = Range.of(2331L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = range0.asRange();
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.955980476147353
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range1.startsBefore(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(boolean1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Long long0 = new Long(1841L);
      assertNotNull(long0);
      assertEquals(1841L, (long)long0);
      
      boolean boolean2 = range0.equals(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean2);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertFalse(range1.equals((Object)range0));
      assertSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range1, range0);
      assertSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ -1 .. 0 ]/RB", string0);
      assertFalse(range1.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -1 .. 0 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -1 .. 0 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 161L, 161L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(893L, 4294967256L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long0 = range0.getBegin();
      assertEquals(893L, long0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 893 .. 4294967256 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9943816386048705
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(9223372034707292142L, 9223372034707292142L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(9223372034707292142L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(698L, 9223372034707292142L);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(4554L, 9223372034707292142L);
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range2.equals(range1);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range2.equals((Object)range0));
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range2.isEmpty());
      
      long long1 = range0.getEnd();
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertTrue(long1 == long0);
      assertEquals(9223372034707292142L, long1);
      assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("7CfF!'-fk^/W$d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.7CfF!'-fk^/W$d
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      assertTrue(range0.isEmpty());
      
      String string1 = range0.toString();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[ 0 .. -1 ]/0B", string1);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long((-818L));
      assertNotNull(long0);
      assertEquals((-818L), (long)long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
      assertTrue(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.parseRange("g6+g[C)~ST", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse g6+g[C)~ST into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9414588555709975
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1392L), 9223372036854771499L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(range_CoordinateSystem0, (-97L), 9223372036854771499L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      Long long0 = new Long(255L);
      assertNotNull(long0);
      assertEquals(255L, (long)long0);
      
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.equals((Object)range1));
      assertNotSame(range0, range1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Long long1 = new Long((-97L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-97L), (long)long1);
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range1, range0);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ -96 .. 9223372036854771499 ]/RB", string0);
      assertFalse(range1.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -96 .. 9223372036854771499 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -96 .. 9223372036854771499 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of((-128L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ -128 .. -128 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.of((-128L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ -127 .. -127 ]/RB", string0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of(127L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(127L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(75L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
      assertNotNull(list0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.867025459818853
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 161L, 161L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(161L, long0);
      assertTrue(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(262L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(262L, long0);
      assertFalse(range0.isEmpty());
      
      long long1 = range0.getLength();
      assertTrue(long1 == long0);
      assertEquals(262L, long1);
      assertFalse(range0.isEmpty());
      
      long long2 = range0.getEnd();
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(261L, long2);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(0L);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertTrue(range1.isEmpty());
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      String string0 = "Null Range used in range comparison operation.";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Null Range used in range comparison operation.", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Null Range used in range comparison operation. into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.081415990323895
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of((-67348L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      assertNotNull(range_Builder0);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-67348L));
      assertSame(range_Builder0, range_Builder1);
      assertSame(range_Builder1, range_Builder0);
      assertNotNull(range_Builder1);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-67348L));
      assertSame(range_Builder0, range_Builder2);
      assertSame(range_Builder0, range_Builder1);
      assertSame(range_Builder2, range_Builder0);
      assertSame(range_Builder2, range_Builder1);
      assertNotNull(range_Builder2);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range_Builder2);
      assertSame(range_Builder0, range_Builder2);
      assertSame(range_Builder0, range_Builder1);
      assertSame(range_Builder2, range_Builder0);
      assertSame(range_Builder2, range_Builder1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.872327462020019
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775360L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 0 .. 9223372036854775359 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775359L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(9223372036854775359L);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range1.equals(range0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(boolean1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = range1.startsBefore(range0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean2);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      boolean boolean3 = range1.equals(object0);
      assertTrue(range1.equals((Object)range0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNotSame(range1, range0);
      assertFalse(boolean3);
      assertFalse(range1.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 9223372036854775359 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 9223372036854775359 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(3458L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
      
      long long0 = range0.getEnd();
      assertEquals(3458L, long0);
      assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("}mPm;@C/[^-4B99J");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.}mPm;@C/[^-4B99J
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", string0);
      assertTrue(range0.isEmpty());
      
      String string1 = range0.toString(range_CoordinateSystem0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", string1);
      assertTrue(range0.isEmpty());
      
      String string2 = range0.toString();
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", string2);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.ofLength(0L);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(list0.contains(range0));
      assertFalse(list0.contains(range1));
      assertNotNull(list0);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      boolean boolean1 = range0.endsBefore(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(3108L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 3108 .. 3108 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals("[ 3108 .. 3108 ]/0B");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(0L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long((-2013L));
      assertNotNull(long0);
      assertEquals((-2013L), (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(133L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(133L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range0.startsBefore(range0);
      assertFalse(range0.equals((Object)range1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(127L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(75L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range0.equals(object0);
      assertFalse(range0.equals((Object)range1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder();
      assertNotNull(range_Builder0);
      
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1718L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      assertNotNull(range_Builder0);
      
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-929L));
      assertSame(range_Builder0, range_Builder1);
      assertSame(range_Builder1, range_Builder0);
      assertNotNull(range_Builder1);
      
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.966943486189354
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-1L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("8ja82");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.8ja82
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.89465783299428
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean1 = range0.equals(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(boolean1);
      assertTrue(range0.isEmpty());
      
      long long1 = range0.getBegin();
      assertEquals(2147483647L, long1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 2147483647 .. 2147483647 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.809783478004049
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals((-3752L), long0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ 2147483647 .. 2147483647 ]/SB", string0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(range0.isEmpty());
      
      boolean boolean2 = range0.equals((Object) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long(566L);
      assertNotNull(long0);
      assertEquals(566L, (long)long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ -1 .. 4294967295 ]/RB", string0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9307406810122396
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775360L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("}GP-lmsQR3x02`Vu", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse }GP-lmsQR3x02`Vu into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.9813915956520467
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483625L, 2147483625L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long(2147483625L);
      assertNotNull(long0);
      assertEquals(2147483625L, (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 2147483625 .. 2147483624 ]/0B", string0);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(object0.equals((Object)object1));
      assertNotSame(object0, object1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 2147483625 .. 2147483624 ]/0B", range_CoordinateSystem1);
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.parseRange("[ 2147483625 .. 2147483624 ]/0B");
      assertFalse(range2.equals((Object)range1));
      assertSame(range2, range0);
      assertNotSame(range2, range1);
      assertNotNull(range2);
      assertTrue(range2.isEmpty());
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertFalse(boolean1);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      
      long long1 = range0.getBegin();
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertEquals(2147483625L, long1);
      assertTrue(range0.isEmpty());
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertTrue(list0.contains(range1));
      assertFalse(list0.contains(range2));
      assertNotNull(list0);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-2147483672L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 535L, 9223372034707292652L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertEquals(9223372034707292652L, long0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      String string0 = "8ja82";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("8ja82");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.8ja82
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(127L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.ofLength(127L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range1.equals(range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(range1, range0);
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
      
      boolean boolean2 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean2);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      long long0 = Long.sum(127L, 127L);
      assertEquals(254L, long0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray1.length);
      assertNotNull(range_CoordinateSystemArray1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of((-32790L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ -32790 .. -32790 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.9313220127943436
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483647L), long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-2147483647L));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      String string0 = "8ja82";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("8ja82");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.8ja82
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-2147483671L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2147483670L), long0);
      assertFalse(range0.isEmpty());
      
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(long1 == long0);
      assertEquals((-2147483670L), long1);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-2147483670L));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      String string0 = "8ja82";
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = range0.equals(object0);
      assertFalse(range0.equals((Object)range1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("8ja82");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.8ja82
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775360L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 0 .. 9223372036854775359 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 0 .. 9223372036854775359 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 0 .. 9223372036854775359 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(9223372034707292142L, 9223372034707292142L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(9223372034707292142L, long0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372034707292142L, 9223372034707292142L);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      long long1 = range1.getBegin();
      assertTrue(range1.equals((Object)range0));
      assertFalse(long1 == long0);
      assertNotSame(range1, range0);
      assertEquals(9223372034707292141L, long1);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      long long2 = range1.getBegin(range_CoordinateSystem0);
      assertTrue(range1.equals((Object)range0));
      assertFalse(long2 == long1);
      assertTrue(long2 == long0);
      assertNotSame(range1, range0);
      assertEquals(9223372034707292142L, long2);
      assertFalse(range1.isEmpty());
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(list0.contains(range1));
      assertNotNull(list0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372034707292143L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long(255L);
      assertNotNull(long0);
      assertEquals(255L, (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long1 = range0.getBegin();
      assertEquals(2147483646L, long1);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 2147483646 .. 9223372034707292142 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(2147483658L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 0 .. 2147483657 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483658L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(2147483658L);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.parseRange("iCp4]p(GN=X", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse iCp4]p(GN=X into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(2147483650L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 0 .. 2147483649 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      String string1 = range0.toString();
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("[ 0 .. 2147483649 ]/0B", string1);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals("[ 0 .. 2147483649 ]/0B");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long(546L);
      assertNotNull(long0);
      assertEquals(546L, (long)long0);
      
      Long long1 = Long.getLong("^8PY5APJ&8b");
      assertNull(long1);
      
      Range range1 = Range.ofLength(4294967295L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.004610309478443
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-405L), (-203L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(range_CoordinateSystem0, (-203L), (-203L));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range1.isEmpty();
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Long long0 = new Long((-203L));
      assertNotNull(long0);
      assertEquals((-203L), (long)long0);
      
      boolean boolean1 = range1.startsBefore(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Long long1 = new Long((-405L));
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals((-405L), (long)long1);
      
      String string0 = Long.toUnsignedString((-203L));
      assertNotNull(string0);
      assertEquals("18446744073709551413", string0);
      
      int int0 = Long.compareUnsigned(45L, 45L);
      assertEquals(0, int0);
      
      boolean boolean2 = range0.equals(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean2);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      long long2 = range1.getEnd();
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals((-204L), long2);
      assertFalse(range1.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("18446744073709551413");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.18446744073709551413
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Long long0 = Long.valueOf(4165L);
      assertNotNull(long0);
      assertEquals(4165L, (long)long0);
      
      Long long1 = new Long(2147483648L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(2147483648L, (long)long1);
      
      Long long2 = Long.getLong("bP0uLFgh4dKv/2-2AW", 2147483648L);
      assertFalse(long2.equals((Object)long0));
      assertTrue(long2.equals((Object)long1));
      assertNotNull(long2);
      assertEquals(2147483648L, (long)long2);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.parseRange("bP0uLFgh4dKv/2-2AW", range_CoordinateSystem0);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 161L, 161L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(161L, long0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 161L, 161L);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.2548973957689
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ 2147483648 .. 2147483647 ]/RB", string0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      
      long long0 = range1.getEnd();
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertEquals(2147483646L, long0);
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.of(2147483647L);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotNull(range2);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.parseRange("[ 1 .. 2147483647 ]/RB");
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotNull(range3);
      assertFalse(range3.isEmpty());
      
      boolean boolean0 = range3.equals(range0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(range0.equals((Object)range2));
      assertTrue(range0.equals((Object)range1));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertNotSame(range0, range1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      assertFalse(range3.isEmpty());
      
      boolean boolean1 = range3.equals(range1);
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range3));
      assertTrue(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range0));
      assertFalse(range3.equals((Object)range2));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(boolean1);
      assertTrue(range1.isEmpty());
      assertFalse(range3.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9170466349593704
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 161L, 161L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(161L, long0);
      assertTrue(range0.isEmpty());
      
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(long1 == long0);
      assertEquals(161L, long1);
      assertTrue(range0.isEmpty());
      
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray1.length);
      assertNotNull(range_CoordinateSystemArray1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483625L, 2147483625L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long(2147483625L);
      assertNotNull(long0);
      assertEquals(2147483625L, (long)long0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 2147483625L, 2147483625L);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertSame(range1, range0);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertTrue(boolean1);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range0, range1);
      assertSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ 2147483625 .. 2147483625 ]/SB", string0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem2);
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem2));
      assertFalse(range_CoordinateSystem2.equals((Object)range_CoordinateSystem1));
      assertFalse(range_CoordinateSystem2.equals((Object)range_CoordinateSystem0));
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range1, range0);
      assertNotSame(range_CoordinateSystem2, range_CoordinateSystem1);
      assertNotSame(range_CoordinateSystem2, range_CoordinateSystem0);
      assertEquals(2147483624L, long1);
      assertTrue(range1.isEmpty());
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of(9223372036854743041L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854743042L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(9223372036854775360L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("+7,@[+KO|~^(y^TCy");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.+7,@[+KO|~^(y^TCy
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of(9223372034707292142L, 9223372034707292142L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(9223372034707292142L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(698L, 9223372034707292142L);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range1.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      
      Long long1 = new Long(4554L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(4554L, (long)long1);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long(2147483647L);
      assertNotNull(long0);
      assertEquals(2147483647L, (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-118L), (-118L));
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.955980476147353
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertEquals((-1L), long0);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range1.equals(range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(range1, range0);
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
      
      boolean boolean2 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean2);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
      
      long long1 = range1.getEnd();
      assertFalse(range1.equals((Object)range0));
      assertFalse(long1 == long0);
      assertNotSame(range1, range0);
      assertEquals((-2L), long1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2264L, 9223372034707290870L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = (-1L);
      long long1 = 9223372036854772694L;
      Range range0 = Range.of(9223372036854772694L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = range0.getEnd(range_CoordinateSystem0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals(9223372036854772695L, long2);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(9223372036854772695L);
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      Iterator<Long> iterator0 = range1.iterator();
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(iterator0);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertTrue(range0.equals((Object)range1));
      assertTrue(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      long long3 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.equals((Object)range1));
      assertFalse(long3 == long0);
      assertTrue(long3 == long2);
      assertFalse(long3 == long1);
      assertNotSame(range0, range1);
      assertEquals(9223372036854772695L, long3);
      assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = 9223372036854775360L;
      Range range0 = Range.ofLength(9223372036854775360L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 161L, 161L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(161L, long0);
      assertTrue(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(5635L, 4294967256L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long0 = range0.getBegin();
      assertEquals(5635L, long0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 5635 .. 4294967256 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.9843429634622596
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB");
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      
      String string1 = range0.toString();
      assertFalse(range0.equals((Object)range1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(range0, range1);
      assertNotNull(string1);
      assertEquals("[ 0 .. -1 ]/0B", string1);
      assertTrue(range0.isEmpty());
      
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertFalse(boolean1);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long((-818L));
      assertNotNull(long0);
      assertEquals((-818L), (long)long0);
      
      Long long1 = Long.getLong("N*Umk#+>B13i");
      assertNull(long1);
      
      boolean boolean2 = range0.equals(long0);
      assertFalse(range0.equals((Object)range1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNotSame(range0, range1);
      assertFalse(boolean2);
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.parseRange("[ 1 .. 0 ]/RB");
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertSame(range2, range1);
      assertNotNull(range2);
      assertTrue(range2.isEmpty());
      
      boolean boolean3 = range0.equals(range2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range0.equals((Object)range2));
      assertFalse(range2.equals((Object)range0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(range0, range1);
      assertNotSame(range0, range2);
      assertNotSame(range2, range0);
      assertSame(range2, range1);
      assertFalse(boolean3);
      assertTrue(range0.isEmpty());
      assertTrue(range2.isEmpty());
      
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB", range_CoordinateSystem0);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      
      String string1 = range0.toString();
      assertFalse(string1.equals((Object)string0));
      assertSame(range0, range1);
      assertNotNull(string1);
      assertEquals("[ 0 .. -1 ]/0B", string1);
      assertTrue(range0.isEmpty());
      
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertTrue(boolean1 == boolean0);
      assertSame(range0, range1);
      assertFalse(boolean1);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long((-818L));
      assertNotNull(long0);
      assertEquals((-818L), (long)long0);
      
      Long long1 = Long.getLong("N*Umk#+>B13i");
      assertNull(long1);
      
      boolean boolean2 = range0.equals((Object) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(range0, range1);
      assertFalse(boolean2);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854771499L, 9223372036854771499L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long((-4793L));
      assertNotNull(long0);
      assertEquals((-4793L), (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 9223372036854771499L, 9223372036854771499L);
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range0, range1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Long long1 = new Long(9223372036854771499L);
      assertFalse(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(9223372036854771499L, (long)long1);
      
      boolean boolean1 = range1.equals(long1);
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertFalse(long1.equals((Object)long0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2450L, 65535L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Range range1 = Range.of(range_CoordinateSystem0, 478L, 2450L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
      
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Residue Based
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(893L, 4294967256L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(893L, 4294967256L);
      assertSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertSame(range0, range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertSame(range1, range0);
      assertNotNull(string0);
      assertEquals("[ 894 .. 4294967257 ]/RB", string0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775360L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854775360L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.ofLength(9223372034707292161L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean2 = range0.equals(object1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNotSame(range0, range1);
      assertNotSame(object1, object0);
      assertFalse(boolean2);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("iC`4]p(GN=X", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse iC`4]p(GN=X into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.parseRange("QE2,20Vr-MYx", range_CoordinateSystem0);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      long long0 = range0.getEnd();
      assertEquals(19L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(2147483647L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 4294967255L);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(2147483647L);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotNull(range2);
      assertFalse(range2.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range2.getEnd(range_CoordinateSystem2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range_CoordinateSystem2.equals((Object)range_CoordinateSystem0));
      assertFalse(range_CoordinateSystem2.equals((Object)range_CoordinateSystem1));
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotSame(range_CoordinateSystem2, range_CoordinateSystem0);
      assertNotSame(range_CoordinateSystem2, range_CoordinateSystem1);
      assertEquals(2147483647L, long0);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.ofLength(283L);
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotNull(range3);
      assertFalse(range3.isEmpty());
      
      boolean boolean0 = range3.equals(range_CoordinateSystem1);
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem2));
      assertFalse(range3.equals((Object)range1));
      assertFalse(range3.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem2);
      assertFalse(boolean0);
      assertFalse(range3.isEmpty());
      
      boolean boolean1 = range1.equals(range2);
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem2));
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range3));
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range3));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem2);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range1, range0);
      assertNotSame(range1, range2);
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
      assertFalse(range2.isEmpty());
      
      String string0 = "PzRE,Q;i<P31rti";
      // Undeclared exception!
      try { 
        Range.parseRange("PzRE,Q;i<P31rti", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse PzRE,Q;i<P31rti into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372034707292143L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long(255L);
      assertNotNull(long0);
      assertEquals(255L, (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long1 = range0.getBegin();
      assertEquals(2147483646L, long1);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 2147483646 .. 9223372034707292142 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
      
      long long2 = range0.getBegin();
      assertTrue(long2 == long1);
      assertEquals(2147483646L, long2);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775733L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Range> list0 = range0.complementFrom(linkedList0);
      assertFalse(linkedList0.contains(range0));
      assertFalse(list0.contains(range0));
      assertNotNull(list0);
      assertFalse(range0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 9223372036854775733L);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertEquals(9223372036854775732L, long0);
      assertFalse(range1.isEmpty());
      
      String string0 = range0.toString(range_CoordinateSystem1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotNull(string0);
      assertEquals("[ 9223372032559808512 .. 9223372036854775732 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.9889840465642794
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372034707292143L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.equals((Object)range0));
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      List<Range> list0 = range0.complement(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(list0.contains(range1));
      assertNotNull(list0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      List<Range> list1 = range0.complementFrom(list0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(list0.contains(range1));
      assertFalse(list1.contains(range1));
      assertNotNull(list1);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      
      Long long0 = new Long(255L);
      assertNotNull(long0);
      assertEquals(255L, (long)long0);
      
      long long1 = range0.getBegin();
      assertFalse(range0.equals((Object)range1));
      assertEquals(2147483646L, long1);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotNull(object2);
      
      boolean boolean0 = range0.equals(object2);
      assertFalse(range0.equals((Object)range1));
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      assertNotSame(object2, object1);
      assertNotSame(object2, object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.0974851383513986
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(893L, 4294967256L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long0 = range0.getBegin();
      assertEquals(893L, long0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 893 .. 4294967256 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.parseRange("[ 893 .. 4294967256 ]/0B", range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray1.length);
      assertNotNull(range_CoordinateSystemArray1);
      
      long long1 = range1.getBegin();
      assertFalse(range1.equals((Object)range0));
      assertFalse(long1 == long0);
      assertNotSame(range1, range0);
      assertEquals(892L, long1);
      assertFalse(range1.isEmpty());
      
      long long2 = range0.getBegin();
      assertFalse(range0.equals((Object)range1));
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertNotSame(range0, range1);
      assertEquals(893L, long2);
      assertFalse(range0.isEmpty());
      
      long long3 = range0.getEnd();
      assertFalse(range0.equals((Object)range1));
      assertFalse(long3 == long0);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertNotSame(range0, range1);
      assertEquals(4294967256L, long3);
      assertFalse(range0.isEmpty());
      
      long long4 = range0.getEnd();
      assertFalse(range0.equals((Object)range1));
      assertFalse(long4 == long1);
      assertFalse(long4 == long2);
      assertTrue(long4 == long3);
      assertFalse(long4 == long0);
      assertNotSame(range0, range1);
      assertEquals(4294967256L, long4);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.123841515493994
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(893L, 4294967256L);
      assertNotNull(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      long long0 = range0.getBegin();
      assertEquals(893L, long0);
      assertFalse(range0.isEmpty());
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 893 .. 4294967256 ]/0B", string0);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Iterator<Long> iterator0 = range0.iterator();
      assertNotNull(iterator0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.parseRange("[ 893 .. 4294967256 ]/0B", range_CoordinateSystem0);
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range0, range1);
      assertNotSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
      assertNotNull(range_CoordinateSystemArray0);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
      assertEquals(3, range_CoordinateSystemArray1.length);
      assertNotNull(range_CoordinateSystemArray1);
      
      Range.CoordinateSystem[] range_CoordinateSystemArray2 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray2.equals((Object)range_CoordinateSystemArray0));
      assertFalse(range_CoordinateSystemArray2.equals((Object)range_CoordinateSystemArray1));
      assertNotSame(range_CoordinateSystemArray2, range_CoordinateSystemArray0);
      assertNotSame(range_CoordinateSystemArray2, range_CoordinateSystemArray1);
      assertEquals(3, range_CoordinateSystemArray2.length);
      assertNotNull(range_CoordinateSystemArray2);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.9617334800189785
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 698L, 698L);
      assertNotNull(range0);
      assertTrue(range0.isEmpty());
      
      Long long0 = new Long(698L);
      assertNotNull(long0);
      assertEquals(698L, (long)long0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[ 698 .. 697 ]/0B", string0);
      assertTrue(range0.isEmpty());
      
      boolean boolean0 = range0.equals(object0);
      assertFalse(object0.equals((Object)object1));
      assertNotSame(object0, object1);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 698 .. 697 ]/0B", range_CoordinateSystem1);
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range0));
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range0);
      assertNotNull(range1);
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.parseRange("[ 698 .. 697 ]/0B");
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotNull(range2);
      assertTrue(range2.isEmpty());
      
      Spliterator<Long> spliterator0 = range2.spliterator();
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range1);
      assertSame(range2, range0);
      assertNotNull(spliterator0);
      assertTrue(range2.isEmpty());
      
      boolean boolean1 = range0.equals(range1);
      assertFalse(range_CoordinateSystem0.equals((Object)range_CoordinateSystem1));
      assertFalse(range0.equals((Object)range1));
      assertFalse(range_CoordinateSystem1.equals((Object)range_CoordinateSystem0));
      assertFalse(range1.equals((Object)range2));
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(range_CoordinateSystem0, range_CoordinateSystem1);
      assertSame(range0, range2);
      assertNotSame(range0, range1);
      assertNotSame(range_CoordinateSystem1, range_CoordinateSystem0);
      assertNotSame(range1, range2);
      assertNotSame(range1, range0);
      assertFalse(boolean1);
      assertTrue(range0.isEmpty());
      assertTrue(range1.isEmpty());
      
      Long long1 = new Long(698L);
      assertTrue(long1.equals((Object)long0));
      assertNotNull(long1);
      assertEquals(698L, (long)long1);
      
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
      assertNotNull(range_ComparatorsArray0);
      
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
      assertEquals(4, range_ComparatorsArray1.length);
      assertNotNull(range_ComparatorsArray1);
  }
}
