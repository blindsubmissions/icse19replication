/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:53:48 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.controller.NodeMouseMotionListener;
import freemind.main.FreeMindApplet;
import freemind.modes.Mode;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowsePopupMenu;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.mindmapmode.actions.NodeColorBlendAction;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseWheelEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.LocalDate;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.MissingResourceException;
import java.util.Properties;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JApplet;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.Border;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.multi.MultiMenuItemUI;
import javax.swing.plaf.multi.MultiOptionPaneUI;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ExtensionHandler;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.processor.ProcessorText;
import org.apache.xalan.templates.OutputProperties;
import org.apache.xalan.templates.Stylesheet;
import org.apache.xalan.templates.WhiteSpaceInfo;
import org.apache.xpath.XPath;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.OsmFileCacheTileLoader;
import org.w3c.dom.Document;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      WhiteSpaceInfo whiteSpaceInfo0 = new WhiteSpaceInfo((XPath) null, true, (Stylesheet) null);
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder((String) null, "day");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir should not be null
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate((-2408), 29, 29, 4249, 29, 45);
      jDayChooser0.setMinSelectableDate(mockDate0);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      System.setCurrentTimeMillis(29);
      DebugGraphics debugGraphics0 = new DebugGraphics();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.decorationBordersVisible = true;
      jDayChooser0.isValidateRoot();
      jDayChooser0.setMonth(14);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.contains((-3387), (-3387));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3387));
      jDayChooser0.resetKeyboardActions();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(jDayChooser0);
      focusEvent0.setSource("day");
      jDayChooser0.getComponentListeners();
      jDayChooser0.focusGained(focusEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.660187820854415
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JMenu jMenu0 = new JMenu();
      KeyEvent keyEvent0 = new KeyEvent(jMenu0, (-772), 39, (-772), 39, 'x');
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 39, 39, 2, 2, 'h');
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 677, 677, 0, 0, '3', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7569120345667457
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 33;
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 33, 2773L, 33, 33, 'i', menuElementArray0, menuSelectionManager0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)69;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.print(debugGraphics0);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.initDecorations();
      jDayChooser0.getWeekdayForeground();
      File file0 = OsmFileCacheTileLoader.getDefaultCacheDir();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(true, mockFileOutputStream0, (byte)2, (-326));
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.forLanguageTag("day");
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setAlignmentY((-1049.811F));
      locale0.getDisplayScript((Locale) null);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDecorationBordersVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isPaintingTile();
      int int0 = (-1682);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser1, (-1682), false, jDayChooser0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setDay((-1682));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Properties properties0 = new Properties();
      properties0.put("", focusEvent0);
      OutputProperties outputProperties0 = new OutputProperties(properties0);
      outputProperties0.getOwnerDocument();
      // Undeclared exception!
      try { 
        outputProperties0.error("day");
        fail("Expecting exception: MissingResourceException");
      
      } catch(MissingResourceException e) {
         //
         // Can't find resource for bundle org.apache.xalan.res.XSLTErrorResources, key day
         //
         verifyException("java.util.ResourceBundle", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.setFocus();
      MultiMenuItemUI multiMenuItemUI0 = new MultiMenuItemUI();
      // Undeclared exception!
      try { 
        multiMenuItemUI0.getMaximumSize(jPanel0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Timestamp timestamp0 = new Timestamp(1L);
      timestamp0.setTime(1954);
      timestamp0.clone();
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(223, dimension0.width);
      
      jDayChooser0.isFocusOwner();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setEnabled(true);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.minSelectableDate = date0;
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      jDayChooser0.isDecorationBackgroundVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-46));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      byte byte0 = (byte)69;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockDate mockDate0 = new MockDate((byte)69, (byte)69, (byte)69, (byte)69, (byte)69);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6717601208463133
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6717601208463133
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(238, color0.getBlue());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Timestamp timestamp0 = new Timestamp(1L);
      FlowLayout flowLayout0 = new FlowLayout();
      flowLayout0.removeLayoutComponent(jDayChooser0);
      flowLayout0.setVgap((-3321));
      timestamp0.clone();
      flowLayout0.addLayoutComponent("day", jDayChooser0);
      flowLayout0.setAlignOnBaseline(false);
      jDayChooser0.getMinimumSize();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setEnabled(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setDay(73);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(52);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.87230203218938
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 847, 1327L, 847, 40, '\"');
      jDayChooser0.keyPressed(keyEvent0);
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDay((-236));
      jDayChooser0.getMinimumSize();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockPrintStream mockPrintStream0 = new MockPrintStream("day");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 228);
      jDayChooser_DecoratorButton0.requestFocusInWindow();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, bufferedOutputStream0, (-236), (-5));
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-236));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay((-605));
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setDayBordersVisible(true);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 49, 0, 0, 14, 'O');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getDaysInMonth();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAutoscrolls(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setFocusTraversalKeysEnabled(true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getMaximumSize();
      jDayChooser0.drawDays();
      SystemColor systemColor0 = SystemColor.windowText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      jDayChooser0.isDecorationBordersVisible();
      MenuElement[] menuElementArray0 = new MenuElement[3];
      MapDialog mapDialog0 = new MapDialog();
      JMenuItem jMenuItem0 = new JMenuItem("day", Integer.MAX_VALUE);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        unmarshallingContext0.convertDate("tile_cache_purge_time");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      Color color0 = jYearChooser0.darkGreen;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDay(21);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.window;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSundayForeground(systemColor0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-448), "day");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis(649);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6717601208463133
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.setAlwaysFireDayProperty(false);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Timestamp timestamp0 = new Timestamp(1L);
      jDayChooser0.defaultMaxSelectableDate = (java.util.Date) timestamp0;
      jDayChooser0.setAutoscrolls(true);
      jDayChooser0.setFocusTraversalKeysEnabled(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getMaximumSize();
      jDayChooser0.setDay(42);
      jDayChooser0.setMonth((-3037));
      jDayChooser0.drawDays();
      SystemColor systemColor0 = SystemColor.windowText;
      Color color0 = null;
      try {
        color0 = new Color(2683.865F, 106.71791F, (-492.7582F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red Green Blue
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.608820614830946
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setMaxDayCharacters(4);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "comparation_result";
      stringArray0[1] = "day";
      stringArray0[2] = "Center";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      HsqlProperties hsqlProperties0 = HsqlProperties.argArrayToProps(stringArray0, "Center");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawDays();
      jDayChooser0.setMaxDayCharacters(915);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6885063804586076
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.GERMANY;
      locale0.getDisplayScript();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale0);
      ParsePosition parsePosition0 = new ParsePosition(10047);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      jDayChooser0.setMaxDayCharacters((-418));
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setAutoscrolls(true);
      jDayChooser1.setFocusTraversalKeysEnabled(true);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser1.setLocale(locale0);
      jDayChooser1.getMaximumSize();
      jDayChooser1.setDay(Integer.MAX_VALUE);
      int int0 = (-782);
      MouseEvent mouseEvent0 = new MouseEvent(jDayChooser1, (-782), Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, (-782), Integer.MAX_VALUE, true);
      mouseEvent0.paramString();
      jDayChooser0.getClientProperty(locale0);
      InputEvent.getModifiersExText(Integer.MAX_VALUE);
      JButton jButton0 = new JButton();
      mouseEvent0.setSource(locale0);
      jDayChooser0.setWeekOfYearVisible(false);
      Object object0 = new Object();
      mouseEvent0.setSource(object0);
      jDayChooser0.dispatchEvent(mouseEvent0);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection((HsqlProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcConnection", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getPropertyChangeListeners();
      Locale locale0 = jDayChooser0.locale;
      Color color0 = jDayChooser0.getSundayForeground();
      assertEquals(0, color0.getBlue());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint((-1806L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.setFocus();
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      java.util.Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.getSelectedDay();
      Object object0 = new Object();
      JButton jButton0 = new JButton();
      FileMode fileMode0 = new FileMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6653015383886753
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)0;
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      byteArray0[2] = (byte) (-19);
      MultiOptionPaneUI multiOptionPaneUI0 = new MultiOptionPaneUI();
      // Undeclared exception!
      try { 
        multiOptionPaneUI0.getMinimumSize(jDayChooser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.692610179636628
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.setYear(530);
      jDayChooser0.weekPanel = null;
      jDayChooser0.getMaximumSize();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-389), 1786, (-389), 40, 'b');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Calendar calendar0 = mockSimpleDateFormat0.getCalendar();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.662701752014223
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAutoscrolls(true);
      jDayChooser0.setFocus();
      java.util.Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.revalidate();
      ParsePosition parsePosition0 = new ParsePosition(3107);
      Locale locale0 = Locale.ITALY;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      MockSimpleDateFormat mockSimpleDateFormat1 = new MockSimpleDateFormat("11", dateFormatSymbols0);
      mockSimpleDateFormat1.parse("11", parsePosition0);
      java.util.Date date0 = jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      java.util.Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange((java.util.Date) null, date0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-389), 1786, (-389), 37, 'b');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(false);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = new Boolean("day");
      jDayChooser0.weekPanel = (JPanel) jDayChooser0;
      jDayChooser0.getMaximumSize();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-417), 1786, (-417), 35, 'b');
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      jDayChooser0.updateUI();
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JMenu jMenu0 = new JMenu();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.drawDays();
      jDayChooser0.setMaxDayCharacters(0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.660187820854415
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JMenu jMenu0 = new JMenu();
      KeyEvent keyEvent0 = new KeyEvent(jMenu0, (-772), 39, (-772), 39, 'x');
      keyEvent0.paramString();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getWidth();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getMaximumSize();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 36, 6226L, 0, 36, ')');
      KeyEvent.getExtendedKeyCodeForChar(39);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.drawDays();
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setOpaque(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDay(1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.756912034566746
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1189, 1L, 164, 34, 'O');
      keyEvent0.consume();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth(14);
      MockDate mockDate0 = new MockDate(14, 14, 14);
      jDayChooser0.setDayBordersVisible(true);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      java.util.Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      jDayChooser0.updateUI();
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaximumSize();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, Integer.MAX_VALUE, 1646L, 26, 38, 'r');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getDisabledIcon();
      JButton jButton0 = new JButton((Icon) null);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.maxDayCharacters = 2975;
      jDayChooser0.weekPanel = null;
      jDayChooser0.getMaximumSize();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-389), 1786, (-389), 40, 'b');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(1786);
      jDayChooser0.setDay((-389));
      jDayChooser1.setDay((-3233));
      Locale locale0 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.weekPanel = jPanel0;
      jPanel0.removeAll();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.printComponents(debugGraphics0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 868, 868, 868, 868, 'X');
      keyEvent0.setKeyChar('!');
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "day");
      keyEvent0.setKeyCode(868);
      JButton jButton0 = new JButton("7", (Icon) null);
      jDayChooser0.selectedDay = jButton0;
      KeyEvent.getExtendedKeyCodeForChar(283);
      KeyEvent.getExtendedKeyCodeForChar(868);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&v>T}etfB(zRC)M&#c");
      jDayChooser0.keyPressed(keyEvent0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(868);
      jDayChooser0.updateUI();
  }
}
