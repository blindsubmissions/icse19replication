/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:25:18 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-2821));
      advancedSettings0.setQSObjectPoolMaker("-^}eU2hdKcER,WDKJ");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1516));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketSendBufferSize(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("-^}eU2hdKcER,WDKJ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // -^}eU2hdKcER,WDKJ
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-2473));
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      assertEquals((-2473), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1555);
      advancedSettings0.setClientSocketSendBufferSize(1555);
      assertEquals(1555, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog((-2527));
      advancedSettings0.setBacklog((-2527));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.getUseDirectByteBuffer();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker("Lz{6&lz]G:>IL3RZ");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setBacklog(607);
      advancedSettings0.setPerformancePreferencesLatency(607);
      advancedSettings0.setByteBufferSize(3225);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(607, advancedSettings0.getBacklog());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("0KG|w[bxyz&Y");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(65536, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-3281));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog((-3281));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-3281));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("~^d+}05[hYp`Z{Y");
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setClientIdentifier("vs!9j|4");
      advancedSettings0.setClientIdentifier("vs!9j|4");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setBacklog(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTrafficClass("vs!9j|4");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("## o,uZ<");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesLatency(0);
      assertEquals("vs!9j|4", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setSocketLinger(1275);
      advancedSettings0.setSocketLinger(1275);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("VNNe1>8E=~*a !");
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesLatency(1275);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setPerformancePreferencesConnectionTime(1174);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketReceiveBufferSize((-643));
      assertEquals(1275, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("u'\"@>UQAapWhkBA");
      int int0 = 1429;
      advancedSettings0.setMaxThreadsForNioWrite(1429);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize(1429);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("u'\"@>UQAapWhkBA");
      advancedSettings0.getMaxThreadsForNioWrite();
      int int1 = 0;
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("u'\"@>UQAapWhkBA");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // u'\"@>UQAapWhkBA
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite(3357);
      advancedSettings0.setByteBufferSize((-994));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setSocketLinger(3357);
      advancedSettings0.setByteBufferSize((-994));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(3357);
      advancedSettings0.setPerformancePreferencesConnectionTime(58);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setPerformancePreferencesLatency(58);
      advancedSettings0.setPerformancePreferencesLatency((-994));
      advancedSettings0.setMaxThreadsForNioWrite((-276));
      advancedSettings0.setMaxThreadsForNioWrite(10);
      advancedSettings0.setMaxThreadsForNioWrite(58);
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(3357, advancedSettings0.getSocketLinger());
      assertEquals(58, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getClientSocketTrafficClass();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = false;
      advancedSettings0.toXML((String) null);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>true</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>0</backlog>
         // \t<socket-linger>-1</socket-linger>
         // \t<debug-non-blocking-mode>false</debug-non-blocking-mode>
         // \t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>0</performance-preferences-connection-time>
         // \t<performance-preferences-latency>0</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-481);
      advancedSettings0.setPerformancePreferencesLatency((-481));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("nM!");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // nM!
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientIdentifier("0%e$");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setClientIdentifier("$");
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientIdentifier("-T\"MC?9pK0z-");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketSendBufferSize();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals("-T\"MC?9pK0z-", advancedSettings0.getClientIdentifier());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 692;
      advancedSettings0.setPerformancePreferencesBandwidth(692);
      boolean boolean0 = true;
      advancedSettings0.setUseDirectByteBuffer(true);
      String string0 = "Vxu4;i/.33#h;^";
      advancedSettings0.setClientSocketTcpNoDelay(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Vxu4;i/.33#h;^");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Vxu4;i/.33#h;^
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger(3099);
      advancedSettings0.setByteBufferSize(575);
      int int0 = 5720;
      advancedSettings0.setBacklog(5720);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesConnectionTime(3099);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("gdA6`{(c,R~;c@>f");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // gdA6`{(c,R~;c@>f
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-505));
      advancedSettings0.setClientIdentifier("4Ku>+Ggk");
      advancedSettings0.setByteBufferSize(1531);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setByteBufferSize((-505));
      advancedSettings0.setMaxThreadsForNioWrite(1300);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-614));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1509));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML("9J `uBV7 lW");
      advancedSettings0.setPerformancePreferencesBandwidth(1531);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("Iv6?tOR=cD'");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setQSObjectPoolMaker("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class>Iv6?tOR=cD'</client-socket-traffic-class>\n</advanced-settings>\n");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency((-3640));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("x");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setQSObjectPoolMaker("Iv6?tOR=cD'");
      advancedSettings0.setQSObjectPoolMaker("x");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getCharset();
      assertEquals("x", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setMaxThreadsForNioWrite(163);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setByteBufferSize((-1591));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setBacklog((-781));
      advancedSettings0.setPerformancePreferencesLatency(0);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      int int0 = (-1);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(354);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setBacklog((-1404));
      advancedSettings0.setClientSocketReceiveBufferSize((-1404));
      advancedSettings0.setByteBufferSize((-1404));
      advancedSettings0.setBacklog((-1404));
      advancedSettings0.setPerformancePreferencesBandwidth((-651));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getBacklog();
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("");
      advancedSettings0.toXML("S=5Ww\"H9khJ83]$9/I");
      advancedSettings0.getCharset();
      assertEquals(354, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }
}
