/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:38:15 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ReferencedKeyConstraintDescriptor;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.engine.Session;
import org.h2.jdbc.JdbcClob;
import org.h2.jdbc.JdbcConnection;
import org.h2.value.ValueShort;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NestedRawReadOnlyUserTransaction";
      stringArray0[1] = "NestedRawReadOnlyUserTransaction";
      stringArray0[2] = "NestedRawReadOnlyUserTransaction";
      stringArray0[4] = "NestedRawReadOnlyUserTransaction";
      String string0 = SQLUtil.innerJoin("NestedRawReadOnlyUserTransaction", stringArray0, "TEMP_TABLE_", stringArray0[3], stringArray0);
      assertEquals("TEMP_TABLE_ as null on NestedRawReadOnlyUserTransaction.NestedRawReadOnlyUserTransaction = null.NestedRawReadOnlyUserTransaction and NestedRawReadOnlyUserTransaction.NestedRawReadOnlyUserTransaction = null.NestedRawReadOnlyUserTransaction and NestedRawReadOnlyUserTransaction.NestedRawReadOnlyUserTransaction = null.NestedRawReadOnlyUserTransaction and NestedRawReadOnlyUserTransaction.null = null.null and NestedRawReadOnlyUserTransaction.NestedRawReadOnlyUserTransaction = null.NestedRawReadOnlyUserTransaction and NestedRawReadOnlyUserTransaction.null = null.null", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("renamepaf[W7f\nt:d#>");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3445982481028228
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LKp+u3R,B<");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LKp+u3R,B<";
      stringArray0[1] = "LKp+u3R,B<";
      stringArray0[2] = "LKp+u3R,B<";
      stringArray0[3] = "LKp+u3R,B<";
      stringArray0[4] = "LKp+u3R,B<";
      stringArray0[5] = "LKp+u3R,B<";
      stringArray0[6] = "LKp+u3R,B<";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "LKp+u3R,B<", false, stringArray0);
      String string0 = SQLUtil.normalize("LKp+u3R,B<", false);
      assertEquals("LKp + u3R,  B <", string0);
      
      boolean boolean0 = SQLUtil.isQuery("LKp+u3R,B<");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9295224102980398
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" or ", 8);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil.normalize("c?-$d*Xdpj2Co,[qBEY", true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("c ? - $ d * Xdpj2Co, [ qBEY");
      assertNull(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[2] = "9b41-";
      stringArray0[3] = "";
      stringArray0[5] = "";
      SQLUtil.leftJoin("", stringArray0, "9b41-", stringArray0[4], stringArray0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      dataDictionaryImpl0.getDataDescriptorGenerator();
      BasicUUID basicUUID0 = new BasicUUID((-5633L), (-692L), 201);
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "", stringArray0[1], basicUUID0, false);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "<quR]P-)rFt=s", schemaDescriptor0, 201, ')');
      // Undeclared exception!
      try { 
        tableDescriptor0.getPrimaryKey();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5775137153768709
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = SQLUtil.normalize("A)z-/R_L", true);
      assertEquals("A) z - / R_L", string0);
      
      Random.setNextRandom(5);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("A)z-/R_L", false, "A)z-/R_L", "truncate");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      dBCheckConstraint0.equals("/r");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK truncate", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "select";
      stringArray0[1] = "select";
      stringArray0[2] = ")dSgCc4mtI";
      stringArray0[3] = "select into";
      stringArray0[5] = "alter indexc ? - $ d * xdpj2co, [ qbey";
      stringArray0[6] = "VIEWS";
      stringArray0[7] = "{Rl0(";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      System.setCurrentTimeMillis((-1884L));
      Random.setNextRandom((-3214));
      System.setCurrentTimeMillis((-1884L));
      System.setCurrentTimeMillis((-1884L));
      System.setCurrentTimeMillis((-3214));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(1688);
      SQLUtil.addOptionalCondition("-", stringBuilder0);
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(1688);
      SQLUtil.addOptionalCondition("", stringBuilder1);
      assertEquals("-\u0698 or ", stringBuilder1.toString());
      assertEquals("-\u0698 or ", stringBuilder0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.7013901080800322
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter tableinsertc?-$d*xdpj2co,[bey", false);
      assertEquals("alter tableinsertc ? - $ d * xdpj2co, [ bey", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter tableinsertc?-$d*xdpj2co,[bey");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "selectinner";
      stringArray0[1] = "alter tableinsertc?-$d*xdpj2co,[bey";
      stringArray0[2] = "!)3rIu";
      stringArray0[3] = "alter tableinsertc ? - $ d * xdpj2co, [ bey";
      stringArray0[4] = "alter tableinsertc ? - $ d * xdpj2co, [ bey";
      stringArray0[5] = "!)3rIu";
      stringArray0[6] = "!)3rIu";
      stringArray0[7] = "alter tableinsertc?-$d*xdpj2co,[bey";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("!)3rIu", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (selectinner, alter tableinsertc?-$d*xdpj2co,[bey, !)3rIu, alter tableinsertc ? - $ d * xdpj2co, [ bey, alter tableinsertc ? - $ d * xdpj2co, [ bey, !)3rIu, !)3rIu, alter tableinsertc?-$d*xdpj2co,[bey) REFERENCES alter tableinsertc?-$d*xdpj2co,[bey(selectinner, alter tableinsertc?-$d*xdpj2co,[bey, !)3rIu, alter tableinsertc ? - $ d * xdpj2co, [ bey, alter tableinsertc ? - $ d * xdpj2co, [ bey, !)3rIu, !)3rIu, alter tableinsertc?-$d*xdpj2co,[bey)", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2440);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("s@0]k", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.appendCodePoint(2440);
      assertSame(stringBuilder0, stringBuilder2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.7990591844756405
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.normalize("QhW:q !I%YQ;9&18j1>", true);
      assertEquals("QhW : q ! I % YQ ; 9 & 18j1 >", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("QhW:q !I%YQ;9&18j1>", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!xS4RyI", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "!xS4RyI";
      stringArray0[1] = "alter index";
      stringArray0[2] = "QhW : q ! I % YQ ; 9 & 18j1 >";
      stringArray0[3] = "QhW : q ! I % YQ ; 9 & 18j1 >";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter index", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (!xS4RyI, alter index, QhW : q ! I % YQ ; 9 & 18j1 >, QhW : q ! I % YQ ; 9 & 18j1 >)", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 2440;
      StringBuilder stringBuilder0 = new StringBuilder(2440);
      stringBuilder0.append((long) 2440);
      stringBuilder0.append("alter materialized viewcall");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("alter materialized viewcall", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(2440, (long) 2440);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 2440
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("Table/View", true);
      assertEquals("Table / View", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Table / View");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, defaultDBTable0, "kenamep");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String string1 = SQLUtil.normalize("\u0001\u00A5", false);
      assertEquals("\u0001 \u00A5", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.normalize(">@}zXU.?7x@&7J1>g", false);
      assertEquals("> @ } z  XU.? 7x @ & 7J1 > g", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.normalize("sOv,u.=?cY%luAf<n", false);
      assertEquals("sOv, u.= ? cY % luAf < n", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[0] = "";
      String string0 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals("., ., ., .null, ., ., ., ., .null", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("_J-hC");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("DATE", compositeDBObject0);
      tableContainer0.getTable("_J-hC");
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("DATE", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("|dG(q)/YP", true);
      assertEquals("| dG (q) / YP", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "insert";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      TableContainer tableContainer0 = new TableContainer((String) null, defaultDBTable0);
      String string0 = SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      assertEquals("insert.&", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutionContext";
      stringArray0[2] = "org.apache.derby.iapi.sql.execute.ExecutionContext";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      SQLUtil.mutatesDataOrStructure("select intoorg.apache.derby.impl.sql.compile.grantnode");
      DBSchema dBSchema0 = new DBSchema("select intoorg.apache.derby.impl.sql.compile.grantnode");
      assertEquals("schema", dBSchema0.getObjectType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery("select intoe");
      String string0 = "nwKH8l}:Vtuzqr0";
      VersionNumber versionNumber0 = VersionNumber.valueOf("nwKH8l}:Vtuzqr0");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("alter table", "alter table", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("org.firebirdsql.jdbc.field.FBShortField", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'org.firebirdsql.jdbc.field.FBShortField'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view+vk+qe/=`pk$g/");
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "executeinsertc?-$d*xdpj2co,[qbey", false, stringArray0);
      Character character0 = new Character('h');
      dBPrimaryKeyConstraint0.equals(character0);
      dBPrimaryKeyConstraint0.setName("create materialized view+vk+qe/=`pk$g/");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize("?\"$d*X3hdpj2Co,[qBEY", true);
      assertEquals("? \"$d*X3hdpj2Co,[qBEY\"", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize(",zj*/'7sAE5k", false);
      assertEquals(", zj */ '7sAE5k'", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LKp+u3R,B<");
      String[] stringArray0 = new String[7];
      stringArray0[2] = "LKp+u3R,B<";
      DBSchema dBSchema0 = new DBSchema("LKp+u3R,B<");
      defaultDBTable0.setSchema(dBSchema0);
      stringArray0[4] = "LKp+u3R,B<";
      stringArray0[5] = "LKp+u3R,B<";
      stringArray0[6] = "LKp+u3R,B<";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "LKp+u3R,B<", false, stringArray0);
      defaultDBTable0.getUniqueConstraint("LKp+u3R,B<");
      defaultDBTable0.isIdentical(dBSchema0);
      SQLUtil.join("LKp+u3R,B<", (String) null, stringArray0, "LKp+u3R,B<", "lL]x/\"-o9H}", stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintStream mockPrintStream0 = new MockPrintStream("LKp+u3R,B< join LKp+u3R,B< as lL]x/\"-o9H} on null.null = lL]x/\"-o9H}.null and null.null = lL]x/\"-o9H}.null and null.LKp+u3R,B< = lL]x/\"-o9H}.LKp+u3R,B< and null.null = lL]x/\"-o9H}.null and null.LKp+u3R,B< = lL]x/\"-o9H}.LKp+u3R,B< and null.LKp+u3R,B< = lL]x/\"-o9H}.LKp+u3R,B< and null.LKp+u3R,B< = lL]x/\"-o9H}.LKp+u3R,B<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("LKp+u3R,B<", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setOwner(dBSchema0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.DBSchema cannot be cast to org.databene.jdbacl.model.DBTable
         //
         verifyException("org.databene.jdbacl.model.DBConstraint", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Character.valueOf('h');
      boolean boolean0 = SQLUtil.isProcedureCall("executeinsertc?-$d*xdpj2co,[qbey");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "call";
      TableContainer tableContainer0 = new TableContainer("call");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("call", (DBSchema) null);
      SQLUtil.mutatesStructure("call");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("call");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5313039033395413
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.normalize("c?-$d*Xdpj2Co,[qBEY", true);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create table", (DBTable) null, 3846, "create table");
      defaultDBColumn0.setDefaultValue("selectlkp+u3r,b<");
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = "java.sql.Connection.setTypeMap";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("java.sql.Connection.setTypeMap");
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("create table CREATE TABLE DEFAULT selectlkp+u3r,b< NULL");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LKp+u3R,B<");
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance(16, "LKp+u3R,B<");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LKp+u3R,B<", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer((byte) (-88));
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("LKp+u3R,B<, LKp+u3R,B<", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view+vk+qe/=`pk$g/");
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized view+vk+qe/=`pk$g/", true, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      Object object0 = new Object();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view+vk+qe/=`pk$g/");
      Character character0 = new Character('h');
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("create materialized view+vk+qe/=`pk$g/");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique indexvs ~ d - * 3", defaultDBTable1, 'h', "executeinsertc?-$d*xdpj2co,[qbey");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EXECUTEINSERTC?-$D*XDPJ2CO,[QBEY", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2675811659839655
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(",zj*/'7sAE5k");
      SQLUtil.parseColumnTypeAndSize("SELECT * FROM ");
      SQLUtil.mutatesDataOrStructure("alter indexalter tabler45_ru");
      String string0 = SQLUtil.normalize("SELECT * FROM ", false);
      System.setCurrentTimeMillis((-1954L));
      jdbcClob jdbcClob0 = new jdbcClob("SELECT * FROM");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String string1 = SQLUtil.removeComments("h");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(/<=qld^/2GGkf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (/<=qld^/2GGkf
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3068291534409705
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("callc?-$d*xdpj2co,[qben", true);
      assertEquals("callc ? - $ d * xdpj2co, [ qben", string0);
      
      StringReader stringReader0 = new StringReader("callc?-$d*xdpj2co,[qben");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer1);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.iapi.sql.dictionary.SubKeyConstraintDescriptor");
      Character character0 = new Character(',');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("','", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.998936787082697
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rdo^ju$";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rdo^ju$");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "0mMQ\u0004~&H!6K", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("*;cs73$y-w", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1184, "*;cs73$y-w");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*;cs73$y-w", dBTable0, dBDataType0, integer0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.push(defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("*;cs73$y-w", string0);
      
      String string1 = dBUniqueConstraint0.toString();
      assertEquals("CONSTRAINT 0mMQ\u0004~&H!6K UNIQUE (rdo^ju$)", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|c5ik");
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      String string2 = SQLUtil.typeAndName(dBTable0);
      assertEquals("table rdo^ju$", string2);
      assertNotNull(string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insertc?-$d*xdpj2co,[qbey");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[3] = stringArray0[6];
      DBSchema dBSchema0 = new DBSchema(stringArray0[2]);
      defaultDBTable0.setSchema(dBSchema0);
      stringArray0[4] = "LKp+u3R,B<";
      stringArray0[3] = "LKp+u3R,B<";
      stringArray0[6] = "LKp+u3R,B<";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "LKp+u3R,B<", false, stringArray0);
      SQLUtil.normalize("LKp+u3R,B<", false);
      defaultDBTable0.getUniqueConstraint("LKp + u3R,  B  <");
      MockPrintStream mockPrintStream0 = new MockPrintStream("LKp+u3R,B<");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("LKp+u3R,B<", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.normalize("LKp+u3R,B<", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("!b^");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "0mMQ\u0004~&H!6K";
      stringArray0[2] = "!b^";
      stringArray0[3] = "\u0001\u0167";
      stringArray0[4] = "\u0001\u0167";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "\u0001\u0167", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-117183778), "Snys ");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*;cs73$y-w", defaultDBTable0, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl$DbAttachInfo", dBTable0, dBDataType0, integer0, integer0);
      dBUniqueConstraint0.toString();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter index");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", ", (DBSchema) null);
      Integer integer0 = RawTransaction.COMMIT;
      Integer.getInteger("delete~4+%qv");
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)76, "DATE");
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(", ", defaultDBTable0, dBDataType0, integer2, (Integer) null);
      String string0 = defaultDBColumn0.toString();
      assertEquals(",  : DATE", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column , ", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("LKp+u3R,B<");
      String[] stringArray0 = new String[7];
      stringArray0[6] = "LKp+u3R,B<";
      stringArray0[3] = "LKp+u3R,B<";
      DBSchema dBSchema0 = new DBSchema(stringArray0[2]);
      defaultDBTable0.setSchema(dBSchema0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBDataType dBDataType0 = DBDataType.getInstance(28, "LKp+u3R,B<");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("LKp+u3R,B<", defaultDBTable0, dBDataType0, integer0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "LKp+u3R,B<");
      linkedList0.addFirst(defaultDBColumn0);
      linkedList0.push(defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("LKp+u3R,B<, LKp+u3R,B<", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.apache.derby.iapi.sql.execute.ExecutionContext";
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.iapi.sql.execute.ExecutionContext");
      SQLUtil.parseColumnTypeAndSize("org.apache.derby.iapi.sql.execute.ExecutionContext");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.sql.execute.ExecutionContext");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\u0001d");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "org.apache.derby.iapi.sql.execute.ExecutionContext");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.apache.derby.iapi.sql.execute.ExecutionContext");
      char[] charArray0 = new char[2];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      stringBuilder0.append(charArray0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("Q", false, defaultDBTable0, "update");
      dBCheckConstraint0.setDoc("org.apache.derby.iapi.sql.execute.ExecutionContext");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      SQLUtil.typeAndName(dBSchema0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("select into", true);
      assertEquals("select into", string0);
      
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter sessionalter indexalter tabler45_ru");
      Random.setNextRandom(44);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view+vk+qe/=`pk$g/");
      String[] stringArray0 = new String[7];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      Character character0 = new Character(';');
      dBPrimaryKeyConstraint0.equals("create materialized view+vk+qe/=`pk$g/");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      assertEquals("unique constraint", dBPrimaryKeyConstraint0.getObjectType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(/=q)/2GGkf");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/=q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("B8|>O1iKQUD");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "B8|>O1iKQUD", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis(2161L);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("unique constraint B8|>O1iKQUD", defaultDBTable0, (-3), "unique constraint B8|>O1iKQUD");
      defaultDBColumn0.setTable(defaultDBTable0);
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.typeAndName(defaultDBColumn0);
      SQLUtil.normalize("vs~d-*3", true);
      Random.setNextRandom(6);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "E4";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_=I8/%3ek_lKS/p";
      stringArray0[1] = "E4";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "_=I8/%3ek_lKS/p", false, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      defaultDBTable0.getIndex("_=I8/%3ek_lKS/p");
      dBPrimaryKeyConstraint0.setName("c?-$d*Xdpj2Co,[qBEY");
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      Random.setNextRandom((-811));
      long long0 = 2161L;
      System.setCurrentTimeMillis(2161L);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.removeComments("table null");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("E4", defaultDBTable0, (-811), "CONSTRAINT _=I8/%3ek_lKS/p PRIMARY KEY (_=I8/%3ek_lKS/p, E4)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"_=I8/%3ek_lKS/p\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Xallc?-$d*xPpj2co,[qben");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[13];
      dBSchema0.setDoc("- 0");
      String[] stringArray1 = new String[17];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      String string1 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",AM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 233.0;
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("233", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",AM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'p';
      charArray0[1] = 'i';
      charArray0[2] = 'n';
      charArray0[3] = 'W';
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      charArray0[4] = '(';
      charArray0[5] = 'o';
      charArray0[6] = 't';
      charArray0[7] = 'j';
      charArray0[8] = '\\';
      stringReader0.read(charArray0);
      streamTokenizer0.nval = 226.25423563829253;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("226.25423563829253", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string1 = SQLUtil.normalize("7=b", true);
      assertEquals("7 = b", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader(",AM");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-801.18067247607);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.renderNumber(streamTokenizer0);
      JMXPrincipal jMXPrincipal0 = null;
      try {
        jMXPrincipal0 = new JMXPrincipal((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // illegal null input
         //
         verifyException("javax.management.remote.JMXPrincipal", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil.removeComments(" /*--hide--*/");
      SQLUtil.removeComments("alter table");
      Random.setNextRandom((-78));
      Random.setNextRandom(251);
  }
}
