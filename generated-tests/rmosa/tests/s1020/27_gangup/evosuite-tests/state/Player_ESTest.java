/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:25:22 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.net.URI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((-656), "", "", (-656), (-656));
      Player player1 = new Player((-656));
      player0.add(player1);
      assertEquals(1, player1.getStrength());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-656", player1.toString());
      assertEquals("0.0.0.0", player1.getIP());
      
      float float0 = player0.getMoney();
      assertEquals((-656), player0.getPictureId());
      assertEquals((-656), player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(4919, "N<!U", "N<!U", (-2323));
      Player player1 = new Player((short)4919, "N<!U", 4919);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte)55;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)26;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)83;
      byteArray0[8] = (byte)0;
      player1.unpack(byteArray0);
      player1.gangStrength();
      player1.setZ(0.2F);
      player0.remove(player1);
      player0.setX(4919);
      player0.getTimeOfDeath();
      player0.setX(687.411F);
      assertEquals(687.411F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(4919, "", 6869);
      Player player1 = new Player((-10027));
      player0.setJoinOK(player1, false);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      player0.getSubparty();
      player0.reset(false);
      System.setCurrentTimeMillis(5);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.isDead();
      player0.isDead();
      boolean boolean0 = player0.isDead();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals("Player-1", player0.toString());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((-1646));
      Player player1 = new Player((-10027), "Player", 282);
      player0.add(player1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)5;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player1.unpack(dataInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis((short)4919);
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player(1578, "state.Party", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-3031));
      player0.prev = (Party) player0;
      player0.getStrength();
      player0.getMoney();
      player0.getSubparty();
      player0.setConnected(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-101);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "C";
      Player player0 = new Player((-1856), "C", (-1856));
      player0.getSubparty();
      player0.setDead();
      Party party0 = new Party();
      player0.next = party0;
      int int0 = 0;
      player0.reset(false);
      Player player1 = new Player((-1856), "C", "Q,aJyf2[", 0, (-1856));
      player1.remove(party0);
      byte[] byteArray0 = player0.pack();
      player0.head = (Party) player1;
      player0.setDead();
      party0.getSubparty();
      player1.gangStrength();
      player0.unpack(byteArray0);
      player1.setY((-391.0F));
      player0.pack();
      player0.isConnected();
      party0.prev = (Party) player1;
      player0.setMoney(0.2F);
      player0.unpack(byteArray0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(0);
      float float0 = player0.getY();
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player0", player0.toString());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(0);
      player0.pack();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Player.unpack(): *** WARNING *** data is not of proper type!", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      player0.pack(dataOutputStream0);
      player0.getIP();
      Party party0 = player0.boss;
      player0.add((Party) null);
      player0.setDead(0L);
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-91);
      Player player0 = new Player((-91));
      player0.setY((-91));
      player0.setConnected(true);
      boolean boolean0 = false;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-91));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      Player player0 = new Player();
      Player player1 = new Player();
      player1.setZ(1029.0265F);
      player0.isJoinOK(player1, true);
      player1.prev = (Party) player0;
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        dataOutputStream0.writeInt((short)4919);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(1948, "9,*&`{>^A;", 1);
      Party party0 = player0.head;
      player0.add((Party) null);
      player0.type();
      Player player1 = new Player(0, "%Rxm(2*V", "9,*&`{>^A;", 1948);
      player0.setJoinOK(player1, true);
      player0.setZ(1);
      player0.getZ();
      player0.reset(false);
      assertEquals(1.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-6819), "<x", (-6819));
      player0.reset(true);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals((-6819), player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-3268);
      Player player0 = new Player((-3268));
      player0.getName();
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      mockFile0.getAbsolutePath();
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      player0.pack(dataOutputStream0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      player0.setDead((long) (-3268), true);
      DataOutputStream dataOutputStream1 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-1449), "y?W;>UCp=E|WnP", "y?W;>UCp=E|WnP", (-1449));
      byte[] byteArray0 = new byte[2];
      player0.setZ((-1449));
      player0.setY((-1449));
      byteArray0[0] = (byte)0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[1] = (byte) (-76);
      player0.unpack(byteArray0);
      player0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("y?W;>UCp=E|WnP");
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      dataOutputStream0.writeShort(773);
      player0.pack(dataOutputStream0);
      player0.pack();
      player0.setDead();
      float float0 = Player.MOVE_DISTANCE;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y?W;>UCp=E|WnP");
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream1.println();
      mockPrintStream1.println();
      // Undeclared exception!
      try { 
        mockPrintStream1.append((CharSequence) "y?W;>UCp=E|WnP", 2111, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player();
      float float0 = player0.getX();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((-725));
      player0.setY(4468.8F);
      Player player1 = new Player((byte) (-50));
      player1.isJoinOK(player0, false);
      player1.setDead((long) (byte) (-50));
      player0.getZ();
      player0.getPictureId();
      player1.setMoney(0.0F);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis((short)4919);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(4608);
      player0.getSubparty();
      Player player1 = new Player(4608);
      player1.setJoinOK(player0, false);
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis(10);
      Player player2 = new Player(4);
      player0.setJoinOK(player1, false);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      System.setCurrentTimeMillis((-1214L));
      Player player0 = new Player();
      player0.getSubparty();
      player0.setDead(156L, false);
      assertEquals(156L, player0.getTimeOfDeath());
      
      player0.setDead(0L, false);
      player0.getSubparty();
      player0.isDead();
      Player player1 = new Player((short)4919);
      player0.isJoinOK(player1, false);
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(4608);
      player0.getSubparty();
      Player player1 = new Player(1787, "state.Player$JoinInfo", 1787);
      player0.setJoinOK(player1, false);
      player1.setJoinOK(player0, false);
      boolean boolean0 = player1.isJoinOK(player0, true);
      System.setCurrentTimeMillis(1392409296320L);
      boolean boolean1 = player1.isJoinOK(player0, false);
      assertFalse(boolean1);
      assertEquals("Player4608", player0.getName());
      assertEquals(0, player0.getPictureId());
      
      Player player2 = new Player((short)4919, "}E;k[J~z(iK1y}", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-1));
      player2.isDead();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player1.isDead();
      System.setCurrentTimeMillis((-1));
      boolean boolean2 = player2.isDead();
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = player2.isJoinOK(player1, false);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals("}E;k[J~z(iK1y}", player2.getIP());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(1, player2.getStrength());
      assertEquals((-1), player2.getPictureId());
      assertTrue(player2.isConnected());
      assertEquals("0.0.0.0", player1.getIP());
      assertFalse(boolean3);
  }
}
