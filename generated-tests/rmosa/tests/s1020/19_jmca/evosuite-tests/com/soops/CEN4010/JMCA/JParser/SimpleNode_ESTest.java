/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:43:48 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.FileDescriptor;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      try { 
        javaParser0.Literal();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 55;
      SimpleNode simpleNode0 = new SimpleNode(55);
      simpleNode0.id = 47;
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter(55);
      String string0 = "?;U 8rA";
      simpleNode0.dump(">", stringWriter0);
      stringWriter0.write("?;U 8rA");
      char[] charArray0 = new char[2];
      char char0 = 'd';
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6542552578629924
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(55);
      simpleNode0.id = 47;
      simpleNode0.toString(">");
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter(55);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">");
      StringWriter stringWriter2 = stringWriter1.append('s');
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.dump("?;U 8rA", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(47);
      simpleNode0.dump(">", stringWriter2);
      StringReader stringReader0 = new StringReader("?;U 8rA");
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode1.dump("Mx,2Bf0 +JwW4`2]", stringWriter0);
      simpleNode1.dump("?;U 8rA", stringWriter1);
      assertEquals(">s<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression><InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n</InstanceOfExpression>\n<InstanceOfExpression><InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n</InstanceOfExpression>\n", stringWriter1.toString());
      assertEquals(">s<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression><InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n</InstanceOfExpression>\n<InstanceOfExpression><InstanceOfExpression>\n  <identifier>*gt</identifier>\n</InstanceOfExpression>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.589280063598296
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(66);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      String string0 = "pm/ip5";
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      simpleNode0.parser = javaParser0;
      simpleNode0.setIdentifier("(");
      simpleNode0.toString();
      mockFileInputStream0.release();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      mockFileInputStream0.getChannel();
      stringWriter0.write(1608);
      // Undeclared exception!
      try { 
        simpleNode0.dump("pm/ip5", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0530721162798569
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.toString();
      simpleNode0.setIdentifier(".");
      simpleNode0.toString();
      simpleNode0.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      simpleNode0.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = '6';
      stringWriter0.write(charArray0);
      stringWriter0.write(charArray0);
      stringWriter0.write(charArray0);
      simpleNode0.dump("`m&~s')/l]!!K", stringWriter0);
      assertEquals("hh6hh6hh6<PackageDeclaration>\n  <identifier>.</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      String string0 = simpleNode1.toString();
      assertEquals("CompilationUnit", string0);
      
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.setIdentifier("CompilationUnit");
      int int0 = simpleNode1.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(66);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("");
      StringWriter stringWriter1 = stringWriter0.append('s');
      SimpleNode simpleNode1 = new SimpleNode(66);
      simpleNode0.dump("", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode('s');
      simpleNode1.dump("", stringWriter1);
      simpleNode1.dump("", stringWriter1);
      assertEquals("s<Arguments>\n</Arguments>\n", stringWriter1.toString());
      assertEquals("s<Arguments>\n</Arguments>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      String string0 = "Mk9|L>zkj1!d{O5hOm";
      simpleNode0.jjtAddChild(simpleNode0, 0);
      int int1 = 0;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode0, (-1248));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1248
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9745638184346521
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.toString("{");
      simpleNode0.toString("{EnumBody");
      SimpleNode simpleNode1 = new SimpleNode(9);
      simpleNode1.setIdentifier("{");
      simpleNode0.toString();
      simpleNode1.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.jjtAddChild(simpleNode1, 9);
      stringWriter0.flush();
      simpleNode0.dump("@UFqw+7hpKm/}3dAu`", stringWriter0);
      simpleNode1.toString();
      SimpleNode simpleNode2 = new SimpleNode(9);
      simpleNode0.dump("{EnumBodyEnumBody", stringWriter0);
      StringWriter stringWriter1 = new StringWriter(252);
      stringWriter0.write("SingleMemberAnnotation");
      stringWriter1.write((-1914));
      stringWriter1.flush();
      simpleNode2.dump("@UFqw+7hpKm/}3dAu`", stringWriter0);
      simpleNode2.dump("EnumBody : {", stringWriter0);
      assertEquals("<EnumBody><EnumBody>\n</EnumBody>\n</EnumBody>\n<EnumBody><EnumBody>\n</EnumBody>\n</EnumBody>\nSingleMemberAnnotation", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("Mk9|L>zkj1!d{O5hOm");
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "rObrl[& 'eGTL'v#cL", 0, 0);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      SimpleNode simpleNode1 = new SimpleNode(123);
      simpleNode0.jjtAddChild(simpleNode1, 10);
      StringWriter stringWriter0 = new StringWriter(0);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) null, 310, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(44);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier(";");
      stringWriter0.flush();
      SimpleNode simpleNode1 = new SimpleNode(325);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode2 = new SimpleNode(44);
      simpleNode2.dump(";", stringWriter0);
      simpleNode0.dump(";", stringWriter0);
      SimpleNode simpleNode3 = new SimpleNode(72);
      StringWriter stringWriter1 = new StringWriter();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode3.identifiers = arrayList0;
      simpleNode2.dump("Mx,2Bf0 +JwW4`2]", stringWriter0);
      simpleNode3.dump("Mx,2Bf0 +JwW4`2]", stringWriter0);
      assertEquals("<ExclusiveOrExpression>\n</ExclusiveOrExpression>\n", stringWriter0.toString());
      
      simpleNode2.dump("CastLookahead", stringWriter1);
      assertEquals("", stringWriter1.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(44);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      simpleNode0.setIdentifier(">=");
      simpleNode0.jjtClose();
      StringWriter stringWriter1 = new StringWriter(1198);
      StringWriter stringWriter2 = stringWriter1.append('?');
      simpleNode0.dump("{", stringWriter2);
      simpleNode0.dump("{", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(774);
      simpleNode1.dump("{", stringWriter2);
      simpleNode0.dump("\">>>=\"", stringWriter0);
      simpleNode0.dump("{", stringWriter1);
      simpleNode1.dump("kXZ9/<GV{s+E.HRkS''", stringWriter1);
      assertEquals("?<ExclusiveOrExpression>\n  <identifier>*ge</identifier>\n</ExclusiveOrExpression>\n<ExclusiveOrExpression>\n  <identifier>*ge</identifier>\n</ExclusiveOrExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(55);
      simpleNode0.setIdentifier(">>");
      simpleNode0.toString();
      simpleNode0.jjtClose();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[1] = ']';
      charArray0[2] = 'Y';
      stringWriter0.write(charArray0);
      simpleNode0.dump("", stringWriter0);
      assertEquals("\u0000]Y<UnaryExpressionNotPlusMinus>\n  <identifier>*rshft</identifier>\n</UnaryExpressionNotPlusMinus>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(44);
      simpleNode0.toString("{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.setIdentifier("<<");
      simpleNode0.toString();
      simpleNode0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(44);
      simpleNode0.dump("<<", stringWriter1);
      assertEquals("<ExclusiveOrExpression>\n  <identifier>*lshft</identifier>\n</ExclusiveOrExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "<=";
      simpleNode0.setIdentifier("<=");
      stringWriter0.flush();
      stringWriter0.append('s');
      SimpleNode simpleNode1 = new SimpleNode((-1446));
      SimpleNode simpleNode2 = new SimpleNode((-61));
      StringWriter stringWriter1 = new StringWriter();
      simpleNode1.dump("Mx,2Bf0 +JwW4`2]", stringWriter1);
      simpleNode0.dump("Q0qV/,h0!c!G", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.dump("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(44);
      simpleNode0.jjtSetParent((Node) null);
      StringWriter stringWriter0 = new StringWriter(44);
      simpleNode0.dump("*rshf", stringWriter0);
      simpleNode0.setIdentifier("&&");
      char[] charArray0 = new char[7];
      charArray0[6] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      charArray0[4] = ']';
      charArray0[5] = ']';
      simpleNode0.dump(";", stringWriter0);
      simpleNode0.dump("*rshf", stringWriter0);
      simpleNode0.dump("*lshft", stringWriter0);
      assertEquals("<ExclusiveOrExpression>\n  <identifier>*amp</identifier>\n</ExclusiveOrExpression>\n<ExclusiveOrExpression>\n  <identifier>*amp</identifier>\n</ExclusiveOrExpression>\n<ExclusiveOrExpression>\n  <identifier>*amp</identifier>\n</ExclusiveOrExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(44);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("&");
      stringWriter0.flush();
      SimpleNode simpleNode1 = new SimpleNode((-1087843497));
      simpleNode1.dump("&", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode((-1087843497));
      simpleNode2.dump("UnaryExpressionNotPlusMinus", stringWriter0);
      simpleNode2.dump("UnaryExpressionNotPlusMinus", stringWriter0);
      simpleNode0.dump("Mx,2Bf0 +JwW4`2]", stringWriter0);
      simpleNode2.dump("&", stringWriter0);
      assertEquals("<ExclusiveOrExpression>\n  <identifier>*amp</identifier>\n</ExclusiveOrExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      SimpleNode simpleNode1 = new SimpleNode(9);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.setIdentifier("}");
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append('$');
      SimpleNode simpleNode2 = new SimpleNode(1);
      simpleNode1.dump("=syN/.,M}tit", stringWriter1);
      simpleNode1.dump("Mx,2Bf0 +JwW4`2]", stringWriter1);
      SimpleNode simpleNode3 = new SimpleNode(0);
      simpleNode0.dump("=syN/.,M}tit", stringWriter0);
      simpleNode1.dump("}", stringWriter0);
      simpleNode1.dump("<", stringWriter1);
      simpleNode2.dump("Mx,2Bf0 +JwW4`2]", stringWriter1);
      simpleNode1.dump("Mx,2Bf0 +JwW4`2]", stringWriter0);
      assertEquals("$<EnumBody>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.toString("{");
      simpleNode0.toString("{EnumBody");
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter(9);
      simpleNode0.dump("{", stringWriter0);
      stringWriter0.write("mc");
      stringWriter0.write((-1116654581));
      stringWriter0.flush();
      simpleNode0.dump("mc", stringWriter0);
      simpleNode0.dump("mc", stringWriter0);
      assertEquals("<EnumBody>\n  <identifier>*lt</identifier>\n</EnumBody>\nmc\u340B<EnumBody>\n  <identifier>*lt</identifier>\n</EnumBody>\n<EnumBody>\n  <identifier>*lt</identifier>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      String string0 = ">";
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter(55);
      simpleNode0.dump(">", stringWriter0);
      stringWriter0.write("f/!X=XZL4Am");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 63, 63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }
}
