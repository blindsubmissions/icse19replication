/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:36:11 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.ElementPath;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMComment;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("uegs?muyp0k?=q");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class uegs?muyp0k?=q not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setMergeAdjacentText(false);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, ">uXigZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
      MockFile mockFile0 = new MockFile("PVF&)g|tNtVlQ");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7214846262452013
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      String string1 = "M7\"v&(Q9x*qekP#";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/http:/xml.org/sax/features/validation0u~?*fh");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespaces", "//tmp/http:/xml.org/sax/features/validation0u~?*fh");
      sAXReader_SAXEntityResolver0.resolveEntity("M7\"v&(Q9x*qekP#", (String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("/");
      InputSource inputSource0 = sAXReader_SAXEntityResolver1.resolveEntity("org.jaxen.SimpleNamespaceContext", "[YFC2P#z5lW*94jT");
      inputSource0.getByteStream();
      try { 
        sAXReader0.read("ends-with");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/evosuite_readability_gen/projects/62_dom4j/ends-with (No such file or directory) Nested exception: /home/ubuntu/evosuite_readability_gen/projects/62_dom4j/ends-with (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.isStripWhitespaceText();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      // Undeclared exception!
      try { 
        dispatchHandler0.onEnd((ElementPath) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.installXMLFilter(parserAdapter0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createDefaultEntityResolver("//tmp/M7\"v&(Q9x*qekP#0Q>vp7iVbEroQ8#");
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)113;
      byteArray0[0] = (byte) (-5);
      byteArray0[3] = (byte) (-13);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.createDefaultEntityResolver("");
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      try { 
        sAXReader0.setFeature("Icb", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: Icb
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "~OTy$=5d");
      try { 
        sAXReader0.setXMLReaderClassName("~OTy$=5d");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ~OTy$=5d not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "$[lc_w`7";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$[lc_w`7");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setStringInternEnabled(false);
      MockFile mockFile0 = new MockFile("$[lc_w`7");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("$[lc_w`7");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "//tmp/tmp/R8&pp-C&?_0http:/xml.org/sax/features/validation0q";
      boolean boolean0 = false;
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("//tmp/tmp/R8&pp-C&?_0http:/xml.org/sax/features/validation0q", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/tmp/R8&pp-C&?_0http:/xml.org/sax/features/validation0q not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        MockURI.URI("R8&pp-C&?x", "\nF\"bp}-sFTJ{)", "R8&pp-C&?x", 231, "R8&pp-C&?x", "\nF\"bp}-sFTJ{)", "//tmp/tmp/R8&pp-C&?_0http:/xml.org/sax/features/validation0");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: R8&pp-C&?x://%0AF%22bp%7D-sF%7FTJ%7B)@R8&pp-C&?x:231R8&pp-C&%3Fx?%0AF%22bp%7D-sF%7FTJ%7B)#//tmp/tmp/R8&pp-C&?_0http:/xml.org/sax/features/validation0
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      sAXReader0.getErrorHandler();
      String string0 = null;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.802281620731357
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.io.SAXContentHandler");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("M7\"v&(Q9x*qekP#", "http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "org.dom4j.io.SAXContentHandler");
      sAXReader_SAXEntityResolver0.resolveEntity("", "!7.R");
      inputSource0.getByteStream();
      File file0 = MockFile.createTempFile("R8&pp-C&?_", "http://xml.org/sax/features/validation");
      defaultDocumentFactory0.createComment("http://xml.org/sax/features/validation");
      MockFile mockFile0 = new MockFile(file0, "QxB[e:}F{N%]<R1{\u0000T");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDocumentFactory();
      sAXReader0.createContentHandler((XMLReader) null);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createDefaultEntityResolver("P# dA8~9.B?qe?nd");
      QName qName0 = new QName("P# dA8~9.B?qe?nd");
      MockFile mockFile0 = new MockFile("org.jaxen.expr.DefaultXPathExpr");
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity((String) null, (String) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createDefaultEntityResolver((String) null);
      try { 
        MockURI.URI((String) null, "", "//tmp/tmp/SJ$on,']QP0/tmp/http:/xml.org/sax/features/namespaces0h70\"|?2~L>&0`- OlY{J-fS", 2858, "", (String) null, (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected closing bracket for IPv6 address at index 4: //@[//tmp/tmp/SJ$on,']QP0/tmp/http:/xml.org/sax/features/namespaces0h70\"|?2~L>&0`- OlY{J-fS]:2858
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@28245934 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
          ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
          SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
          URI uRI0 = MockURI.aFTPURI;
          URL uRL0 = MockURI.toURL(uRI0);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor345.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLReaderAdapter.parse(XMLReaderAdapter.java:249)
             // org.xml.sax.helpers.ParserAdapter.parse(ParserAdapter.java:430)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor345.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "PVF&)g|tNtVlQ";
      MockFile mockFile0 = new MockFile("PVF&)g|tNtVlQ", "PVF&)g|tNtVlQ");
      mockFile0.setWritable(false, true);
      sAXReader0.setStripWhitespaceText(true);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.749131171382314
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("`- OlY{J-fS");
      String string0 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("", "http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/validation", "org.dom4j.NodeType");
      String string1 = "//tmp/tmp/tmp/:fPkOl0Lyn`7Ikx0R8&pp-C&?_0";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//tmp/tmp/tmp/:fPkOl0Lyn`7Ikx0R8&pp-C&?_0");
      sAXReader_SAXEntityResolver1.resolveEntity("PT$Gp]H@B?C#q_BwDS3", "S");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile(";bo?=omviT-]", ";bo?=omviT-]");
      MockFile mockFile0 = new MockFile(file0, "{D9s+1a?S");
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.749131171382314
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("`- OlY{J-fS");
      String string0 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("", "http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/validation", "org.dom4j.NodeType");
      String string1 = "//tmp/tmp/tmp/:fPkOl0Lyn`7Ikx0R8&pp-C&?_0";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//tmp/tmp/tmp/:fPkOl0Lyn`7Ikx0R8&pp-C&?_0");
      sAXReader_SAXEntityResolver1.resolveEntity("PT$Gp]H@B?C#q_BwDS3", "S");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/;bo?=omviT-]0;bo?=omviT-]");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "//tmp/R8&pp-C&?_0http:/xml.org/sax/features/validation");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      File file0 = MockFile.createTempFile(";bo?=omviT-]", ";bo?=omviT-]");
      MockFile mockFile0 = new MockFile(file0, "{D9s+1a?S");
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///tmp/;bo?=omviT-]0;bo?=omviT-] : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7660742220974046
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip(1020L);
      String string0 = "//tmp/R8&pp-C&?_0.tmp";
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "//tmp/R8&pp-C&?_0.tmp");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          boolean boolean0 = true;
          SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
          DefaultHandler defaultHandler0 = new DefaultHandler();
          String string0 = "\\\\Uz3U\"c}/$q";
          sAXReader0.setEncoding("\\Uz3U\"c}/$q");
          MockFile mockFile0 = new MockFile("\\Uz3U\"c}/$q");
          sAXReader0.setIncludeExternalDTDDeclarations(false);
          sAXReader0.getEncoding();
          URI uRI0 = MockURI.create("http://xml.org/sax/features/namespaces");
          URL uRL0 = MockURI.toURL(uRI0);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1268)
             // java.net.InetAddress.getAllByName(InetAddress.java:1192)
             // java.net.InetAddress.getAllByName(InetAddress.java:1126)
             // java.net.InetAddress.getByName(InetAddress.java:1076)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor345.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1268)
             // java.net.InetAddress.getAllByName(InetAddress.java:1192)
             // java.net.InetAddress.getAllByName(InetAddress.java:1126)
             // java.net.InetAddress.getByName(InetAddress.java:1076)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor345.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.887577825056549
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      xMLReaderAdapter0.endDocument();
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/namespace-prefixes");
      try { 
        sAXReader0.read((Reader) stringReader0, "http://xml.org/sax/features/namespace-prefixes");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document http://xml.org/sax/features/namespace-prefixes : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.853157954612304
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.io.SAXContentHandler");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("M7\"v&(Q9x*qekP#", "http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "org.dom4j.io.SAXContentHandler");
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader_SAXEntityResolver0.resolveEntity("", "!7.R");
      inputSource0.getByteStream();
      File file0 = MockFile.createTempFile("R8&pp-C&?_", "http://xml.org/sax/features/validation");
      DOMComment dOMComment0 = new DOMComment("org.dom4j.io.SAXContentHandler");
      MockFile mockFile0 = new MockFile(file0, "QxB[e:}F{N%]<R1{\u0000T");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setEncoding("!(W6B");
      StringReader stringReader0 = new StringReader("http://xml.org/sax/handlers/LexicalHandler");
      stringReader0.read();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("iW!veRxY Rim`xNES");
      sAXReader0.addHandler("iW!veRxY Rim`xNES", dispatchHandler0);
      File file0 = MockFile.createTempFile("b=p", "Error on line ");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setEncoding("!(W6B");
      sAXReader0.getEncoding();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(xMLReader0);
      sAXReader0.isMergeAdjacentText();
      StringReader stringReader0 = new StringReader("!(W6B");
      stringReader0.skip(0L);
      try { 
        sAXReader0.read((Reader) stringReader0, "x4");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/evosuite_readability_gen/projects/62_dom4j/x4 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.802281620731357
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("`- OlY{J-fS");
      String string0 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("", "http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/validation", "org.dom4j.NodeType");
      String string1 = "//tmp/tmp/tmp/:fPkOl0Lyn`7Ikx0R8&pp-C&?_0";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//tmp/tmp/tmp/:fPkOl0Lyn`7Ikx0R8&pp-C&?_0");
      sAXReader_SAXEntityResolver1.resolveEntity("PT$Gp]H@B?C#q_BwDS3", "S");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      File file0 = MockFile.createTempFile(";bo?=omviT-]", ";bo?=omviT-]");
      MockFile mockFile0 = new MockFile(file0, "{D9s+1a?S");
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      StringReader stringReader0 = new StringReader("//tmp/tmp/tmp/:fPkOl0Lyn`7Ikx0R8&pp-C&?_0");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      String string0 = "Zd=!Vj5lUZf}i";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Zd=!Vj5lUZf}i");
      File file0 = MockFile.createTempFile("Zd=!Vj5lUZf}i", "Zd=!Vj5lUZf}i");
      boolean boolean0 = true;
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.removeHandler("");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.791420920085194
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip(1020L);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      String string0 = " of document ";
      xMLFilterImpl0.endElement(" of document ", " of document ", " of document ");
      try { 
        sAXReader0.setProperty(" of document ", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property:  of document 
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(true);
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      simpleVariableContext0.setVariableValue("tps@W{'v", " T]", (Object) defaultDocumentFactory0);
      sAXReader0.setValidation(true);
      defaultDocumentFactory0.createXPathFilter("substring-after", (VariableContext) simpleVariableContext0);
      defaultDocumentFactory0.createComment("http://xml.org/sax/features/validation");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile("org.dom4j.tree.NamespaceStack", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      QName qName0 = new QName("P# dA8~9.B?qe?nd");
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      MockFile mockFile0 = new MockFile("org.jaxen.expr.DefaultXPathExpr");
      SAXReader sAXReader1 = new SAXReader();
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.getEntityResolver();
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEncoding("//tmp/a Jr^`0a Jr^`");
      xMLFilterImpl0.resolveEntity("", "");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      String string0 = "org.dom4j.io.SAXContentHandler";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.io.SAXContentHandler");
      String string1 = "!7.R";
      String string2 = "M7\"v&(Q9x*qekP#";
      sAXReader_SAXEntityResolver0.resolveEntity("M7\"v&(Q9x*qekP#", "http://xml.org/sax/features/validation");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.io.SAXContentHandler", "!7.R");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setEntityResolver(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      try { 
        sAXReader0.read("M7\"v&(Q9x*qekP#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: M7\"v&(Q9x*qekP# Nested exception: no protocol: M7\"v&(Q9x*qekP#
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      xMLFilterImpl0.getDTDHandler();
      String string0 = "[ type: ";
      xMLFilterImpl0.notationDecl("", "[ type: ", "[ type: ");
      File file0 = MockFile.createTempFile("org.dom4j.tree.DefaultEntity", "");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.8298412396949244
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.setErrorHandler(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("<tg/)&hR ", "");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("<tg/)&hR ", "http://xml.org/sax/features/namespace-prefixes");
      inputSource0.getByteStream();
      File file0 = MockFile.createTempFile("391K\"", "//tmp/R8&ppCC}?_0http:/xml.org/sax/features/validation");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      file0.toURL();
      defaultDocumentFactory0.createComment("391K\"");
      MockFile mockFile0 = new MockFile(file0, "391K\"");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      byte[] byteArray0 = new byte[0];
      sAXReader0.setEncoding("{Gn{8Nc");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(439);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"{GN{8NC\". Nested exception: Invalid encoding name \"{GN{8NC\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setEncoding("org.dom4j.dom.DOMProcessingInstruction");
      MockFile mockFile0 = new MockFile("http://xml.org/sax/properties/lexical-handler");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.getEncoding();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 58, (byte)45);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"ORG.DOM4J.DOM.DOMPROCESSINGINSTRUCTION\". Nested exception: Invalid encoding name \"ORG.DOM4J.DOM.DOMPROCESSINGINSTRUCTION\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setEncoding("tb0szu");
      URI uRI0 = MockURI.aHttpURI;
      MockURI.resolve(uRI0, "tb0szu");
      String string0 = "r)v(%0XxuW9:2";
      try { 
        sAXReader0.read("r)v(%0XxuW9:2");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: r)v(%0XxuW9:2 Nested exception: no protocol: r)v(%0XxuW9:2
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      QName qName0 = new QName("O=ax]", (Namespace) null, "O=ax]");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.setEncoding("O=ax]");
      QName.get("O=ax]", (Namespace) null, "O=ax]");
      File file0 = MockFile.createTempFile("O=ax]", "O=ax]");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"O=AX]\". Nested exception: Invalid encoding name \"O=AX]\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
