/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:46:56 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.943941432584575
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("capitex");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "capitic";
      stringArray0[1] = "capitic";
      stringArray0[2] = "capitex";
      stringArray0[3] = "capitic";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("capitic");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("bex");
      lovinsStemmer1.toString();
      String string0 = null;
      lovinsStemmer1.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0608999448800531
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("lingutex");
      String string1 = lovinsStemmer0.stemString("124-133");
      assertEquals("124-133", string1);
      
      String string2 = lovinsStemmer1.stemString("ex");
      assertEquals("ex", string2);
      
      lovinsStemmer0.stem("intpand");
      String string3 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      String string4 = lovinsStemmer1.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string4);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.827980914707907
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("PUmLISHER");
      assertEquals("pumlishes", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0299691667808861
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      lovinsStemmer0.stem("her");
      stringArray0[0] = "[oMU";
      stringArray0[1] = "[oMU";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("[oMU");
      assertEquals("[omu", string0);
      
      lovinsStemmer0.stemString("lTRu");
      String string1 = lovinsStemmer0.stem("ltruerid");
      assertEquals("ltrueris", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string2);
      
      String string3 = lovinsStemmer0.stemString("lTRu");
      assertEquals("ltru", string3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8632043078532219
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("=tGaR");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9563968167464134
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("&l%0rScsMvyZe`TK\t");
      String string0 = lovinsStemmer0.stemString(">Ve./");
      assertEquals(">ve./", string0);
      
      String string1 = lovinsStemmer0.stemString("encible");
      assertEquals("enc", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9071380966380936
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ix");
      lovinsStemmer0.stem("=tGaR");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.030636321172376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Original array (doubles): ");
      assertEquals("origin arra (doubl): ", string1);
      
      String string2 = lovinsStemmer0.stemString("calnUs{");
      assertEquals("calnus{", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0471887309754795
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
      
      lovinsStemmer0.stemString("8034");
      String string2 = lovinsStemmer0.stemString("z1l#o~4[bgv/");
      assertEquals("z1l#o~4[bgv/", string2);
      
      String string3 = lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.", string3);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9796794196540528
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("entret");
      assertEquals("entres", string0);
      
      String string1 = lovinsStemmer0.stemString("entres");
      assertEquals("entr", string1);
      
      lovinsStemmer0.stemString("{#5syL");
      String string2 = lovinsStemmer0.stemString("(]oU)in-uB|~|N6");
      assertEquals("(]ou)in-ub|~|n6", string2);
      
      lovinsStemmer0.stemString("{#5syl");
      String string3 = lovinsStemmer0.stemString("{#5syl");
      assertEquals("{#5syl", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9708652500263605
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("CROSSREF");
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      String string1 = lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it vol and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("entrrud");
      assertEquals("entrrus", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0235515993705364
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string0);
      
      String string1 = lovinsStemmer0.stemString("e6ncmtlud");
      assertEquals("e6ncmtlus", string1);
      
      String string2 = lovinsStemmer0.stemString("|~/)vBE");
      assertEquals("|~/)vb", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8185418789114838
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ond");
      lovinsStemmer0.stem("=tGaR");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0734879243544693
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("masonend");
      String string0 = lovinsStemmer0.stem("ert");
      assertEquals("ers", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0620831577413519
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("tGaR");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "tgar";
      stringArray0[2] = "tgar";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerpex");
      assertEquals("wek.cor.stemmer.lovinsstemmerpic", string1);
      
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmerpic");
      lovinsStemmer0.stemString("uather");
      String string2 = lovinsStemmer0.stemString("tGaR");
      assertEquals("tgar", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("entret");
      lovinsStemmer0.stemString("entres");
      lovinsStemmer0.stemString("entr");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("entres");
      lovinsStemmer0.stemString("istr");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0354504889526515
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The name(s) of the author(s), in the format described in the LaTeX book.");
      assertEquals("th nam(s) of th author(s), in th format describ in th latic book.", string0);
      
      lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string2);
      
      String string3 = lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capital.");
      assertEquals("how someth strang ha been publ. th first word should be capit.", string3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0169245121878099
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7Z3:fVy";
      stringArray0[1] = "yt";
      stringArray0[2] = "d|siRv";
      stringArray0[3] = "B~H4N7sVph{C2;";
      stringArray0[4] = "v#Hk5]hY3a*+sff";
      lovinsStemmer0.stem("v#Hk5]hY3a*+sff");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("uasend");
      assertEquals("uasens", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("teIx");
      assertEquals("teic", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lu6mit");
      assertEquals("lu6mis", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("end");
      assertEquals("ens", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ening");
      String string0 = lovinsStemmer0.stemString("ening");
      assertEquals("ening", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0734879243544693
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("uad");
      String string0 = lovinsStemmer0.stemString("masonend");
      assertEquals("masonens", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9909662795153598
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("acFion");
      assertEquals("acf", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9847659851312066
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      assertEquals("th year of publ or, for an unpubl work, th year it wa writ. gener it should con of four numer, such as 1984, although th standard styl can handl any year who last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("u7vyt");
      assertEquals("u7vys", string0);
      
      String string1 = lovinsStemmer0.stem("u7vys");
      assertEquals("u7vy", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("encies");
      assertEquals("enci", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0734879243544693
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("1984ax");
      String string0 = lovinsStemmer0.stemString("masonend");
      assertEquals("masonens", string0);
      
      lovinsStemmer0.stem("984");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ionals");
      assertEquals("ion", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0669308198198126
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Sorted array (ints): ");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("idnyz");
      assertEquals("idnys", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.stemString("The alternating deciPion tree learning -lgorithm");
      assertEquals("th altern decip tre learn -lgorithm", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("orUC5XKgGA}c{");
      String string0 = lovinsStemmer0.stemString("orUC5XKgGA}c{");
      assertEquals("oruc5xkg}c{", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0075041431925678
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string0);
      
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("acton");
      String string1 = lovinsStemmer0.stemString("acton");
      assertEquals("act", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.031590910605119
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pumlisherdex");
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Sorted array (ints): ");
      assertEquals("sort arra (int): ", string0);
      
      String string1 = lovinsStemmer0.stemString("Ross Quinlan");
      assertEquals("ros quinlan", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9634961879042461
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("null");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      assertFalse(lovinsStemmer2.equals((Object)lovinsStemmer1));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0756093954392
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("linguvad");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerher");
      assertEquals("weka.core.stemmers.lovinsstemmerhes", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lux");
      assertEquals("luc", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string0);
      
      lovinsStemmer0.stemString("dr~tuoRh^<x-");
      String string1 = lovinsStemmer0.stemString("arra-dimens of 'new string[3][4][]': ");
      assertEquals("ar-dimen of 'new string[3][4][]': ", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("6NIhpm");
      String string0 = lovinsStemmer0.stemString("Median (ints): ");
      assertEquals("med (int): ", string0);
      
      String string1 = lovinsStemmer0.stemString("encing");
      assertEquals("enc", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.092452107047396
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("oa|VkS_u?");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("-s~A#1Vfg/x[");
      assertEquals("-s~a#1vfg/x[", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("cpite xXex");
      assertEquals("cpit xxec", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0235515993705364
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string0);
      
      String string1 = lovinsStemmer0.stemString("fzclid");
      assertEquals("fzclis", string1);
      
      String string2 = lovinsStemmer0.stemString("|~/)vBE");
      assertEquals("|~/)vb", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1101758208914654
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ement");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[oMU";
      stringArray0[1] = "[oMU";
      lovinsStemmer0.stem("[oMU");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("[oMU");
      assertEquals("[omu", string1);
      
      lovinsStemmer0.stemString("lTRu");
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string2);
      
      String string3 = lovinsStemmer0.stemString("lTRu");
      assertEquals("ltru", string3);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("inproceedings");
      assertEquals("inproceed", string0);
      
      String string1 = lovinsStemmer0.stemString("inproceed");
      assertEquals("inproceed", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("tex");
      assertEquals("tic", string0);
      
      lovinsStemmer0.stemString("vt");
      String string1 = lovinsStemmer0.stemString("nY!2) Pwk;&5WalS&");
      assertEquals("ny!2) pwk;&5wal&", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Original array (doubles): ");
      assertEquals("origin arra (doubl): ", string0);
      
      String string1 = lovinsStemmer0.stemString("origin arra (doubl): ");
      assertEquals("origin ar (doubl): ", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Bwzkxm,Dda");
      assertEquals("bwzkxm,d", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9980051611510646
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Sorted array (ints): ");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Sorted array (ints): ");
      assertEquals("sort arra (int): ", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("JOURNAL");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.toString();
      String string1 = lovinsStemmer2.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("CROSSREF");
      String string0 = lovinsStemmer0.stemString("EtE");
      assertEquals("es", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("iPPU");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("metr");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("umpt");
      String string1 = lovinsStemmer0.stemString("um");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("capitex");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "capitic";
      String string0 = lovinsStemmer0.stem("capitic");
      assertEquals("capit", string0);
      
      lovinsStemmer0.stemString("hQ");
      String string1 = lovinsStemmer0.stemString("capitex");
      assertEquals("capitic", string1);
      
      lovinsStemmer0.stemString("d5vbb");
      String string2 = lovinsStemmer0.stemString("hQ");
      assertEquals("hq", string2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("tex");
      assertEquals("tic", string0);
      
      String string1 = lovinsStemmer0.stemString("dr~tuoRh^<x-");
      assertEquals("dr~tuorh^<x-", string1);
      
      String string2 = lovinsStemmer0.stem("uct");
      assertEquals("uc", string2);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The sponsoring institution of a technical report.");
      assertEquals("th sponsor institut of a techn report.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString(" .,;:!?'\"");
      assertEquals(" .,;:!?'\"", string1);
      
      String string2 = lovinsStemmer0.stemString("th sponsor institut of a techn report.");
      assertEquals("th spons institut of a techn report.", string2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0425938616723716
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("z9IP[EQUM}]AnAF");
      assertEquals("z9ip[equm}]anaf", string0);
      
      lovinsStemmer1.stemString("z9ip[equm}]anaf");
      String string1 = lovinsStemmer0.stemString("z9ip[equm}]anaf");
      assertEquals("z9ip[equm}]anaf", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("=IYQneTs?%p;7vg");
      assertEquals("=iyqnet?%p;7vg", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("[oMU");
      String string0 = lovinsStemmer0.stem("olv");
      assertEquals("olut", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ation");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("ull");
      assertEquals("l", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "null";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      stringArray0[3] = "null";
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      stringArray0[6] = "null";
      String string0 = lovinsStemmer0.stemString("null");
      assertEquals("nl", string0);
      
      stringArray0[7] = "null";
      stringArray0[8] = "null";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0428273691010705
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Theyear of publication or, for an unpublished work, the year it waswritten. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("theyear of public or, for an unpubl work, th year it waswrit. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer1.stemString("Correlation: ");
      assertEquals("correl: ", string2);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("ieine");
      assertEquals("iein", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("Oull");
      assertEquals("oul", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("8034");
      assertTrue(string2.equals((Object)string1));
  }
}
