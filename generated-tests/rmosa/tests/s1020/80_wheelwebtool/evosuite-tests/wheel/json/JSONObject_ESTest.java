/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:28:11 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONException;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedInt((short) (-1787));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("");
      JSONArray jSONArray0 = new JSONArray();
      Float float0 = new Float((float) (short) (-527));
      assertEquals((-527.0F), (float)float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject.quote("A,\n");
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a JSOGObject.");
      assertEquals("\"] is not a JSOGObject.\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("vMjt", "vMjt");
      jSONObject1.optBoolean("vMjt", false);
      try { 
        jSONObject1.getBoolean("vMjt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vMjt\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("vH|jt");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5171534199663776
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject.quote("zciI_u<yruQ\"?f7yt");
      JSONObject jSONObject0 = new JSONObject((Object) "zciI_u<yruQ\"?f7yt");
      int int0 = jSONObject0.optInt("|QR,.OH=qQyZ%>)c#kz", 92);
      assertEquals(92, int0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("zciI_u<yruQ\"?f7yt");
      assertEquals("\"zciI_u<yruQ\\\"?f7yt\"", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JSONObject.quote("zciI_u<yruQ\"?f7yt");
      assertEquals("\"zciI_u<yruQ\\\"?f7yt\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString((-3404), (-3404));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JSONObject.quote("zciI_u<yruQ\"?f7yt");
      assertEquals("\"zciI_u<yruQ\\\"?f7yt\"", string0);
      
      Short short0 = new Short((short) (-2313));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString(5496, 2520);
      assertEquals(1, jSONObject0.length());
      
      String string1 = JSONObject.quote("3`)}xC5u");
      assertEquals("\"3`)}xC5u\"", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, 45, 45);
      HashMap<Long, Float> hashMap0 = new HashMap<Long, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONObject0, (-62353088), 5);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = " ,\n";
      JSONObject.quote(" ,\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("uknkVA+cl%>m");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of uknkVA+cl%>m
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "] is not a JSOGObject.";
      JSONObject jSONObject0 = new JSONObject("] is not a JSOGObject.", stringArray0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Short short0 = new Short((short)83);
      JSONObject.quote("zciI_u<yruQ\"?f7yt");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("4yhd-x");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("isfloatValue");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject.quote("uh=3:NzTe/9%");
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Double double0 = Double.valueOf((-1629.173));
      hashMap0.put("uh=3:NzTe/9%", double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("uh=3:NzTe/9%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"uh=3:NzTe/9%\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2587.0398485153));
      assertEquals("-2587.0398485153", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject.quote("zciI_u<yruQ\"?f7yt");
      JSONTokener jSONTokener0 = new JSONTokener("\"zciI_u<yruQ\"?f7yt\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"zciI_u<yruQ\"?f7yt\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = JSONObject.quote("zciI_u<yruQ\"?f7yt");
      Float float0 = new Float(105.8067F);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      Byte byte0 = new Byte((byte) (-14));
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject.quote(",\n");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Object, Boolean> hashMap1 = new HashMap<Object, Boolean>();
      String string0 = jSONObject0.optString("/,Qris{rvtSe");
      assertEquals("", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.666940475780652
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = JSONObject.quote(" ,\n");
      Double double0 = new Double(0.0);
      Double.min(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong(" ,\n");
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0, (-1), (-1));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.20619205063323187
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      String string1 = JSONObject.valueToString(",\n", 1668, 1668);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "f`MSO";
      boolean boolean0 = false;
      try { 
        jSONObject0.put((String) null, 1172.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      String string0 = "iscompare";
      Integer integer0 = new Integer((short) (-1782));
      Integer integer1 = Integer.getInteger("iscompare", integer0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Boolean boolean0 = Boolean.valueOf("g}s]c}J}s");
      hashMap0.put(boolean0, integer1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5171534199663772
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject.quote(" ,\n");
      Double double0 = new Double(0.0);
      Double.min(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("\" ,\n\"", (-1.0));
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("9{wHD!F7G");
      assertEquals("\"9{wHD!F7G\"", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 3062L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6645564789662766
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Short short0 = new Short((short)83);
      Short short1 = new Short((short)83);
      Short.toUnsignedLong((short)1152);
      Short.toUnsignedLong((short)83);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.putOpt("\r", short1);
      jSONObject1.put("9@[,qqosh1A@", (-1550.7892967427));
      try { 
        jSONObject1.append("\r", "9@[,qqosh1A@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\r] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("toU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 16;
      try { 
        jSONObject0.put((String) null, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("] is not a JSONObject.", hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5171534199663772
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = JSONObject.quote(" ,\n");
      assertEquals("\" ,\\n\"", string0);
      
      Double double0 = new Double(0.0);
      Double.min(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(304, 304);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = JSONObject.quote(" o\n");
      Byte byte0 = new Byte((byte)4);
      String string1 = JSONObject.valueToString(byte0, (byte)4, (byte)4);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-58), (-58));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-30733247));
      jSONObject0.keys();
      try { 
        jSONObject0.getJSONArray("4/jv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4/jv\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Double double0 = new Double(439.213F);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Byte byte0 = new Byte((byte)36);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject.quote("] is not a JSOGObject.");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"] is not a JSOGObject.\"";
      stringArray0[1] = "\"] is not a JSOGObject.\"";
      stringArray0[2] = "\"] is not a JSOGObject.\"";
      stringArray0[3] = "] is not a JSOGObject.";
      stringArray0[4] = "] is not a JSOGObject.";
      stringArray0[5] = "get";
      stringArray0[6] = "] is not a JSOGObject.";
      stringArray0[7] = "s]U[y%gz|>";
      stringArray0[8] = "] is not a JSOGObject.";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Double double0 = new Double((-1.0));
      assertEquals((-1.0), (double)double0, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 2304;
      int int1 = 32;
      JSONObject.valueToString(hashMap0, 2304, 32);
      Object object0 = new Object();
      try { 
        Long.valueOf("]nF");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"]nF\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7269369375735457
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "vMjt";
      jSONObject0.accumulate("vMjt", "vMjt");
      try { 
        jSONObject0.getLong("vMjt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vMjt\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8073365769337295
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("vMjt", "vMjt");
      jSONObject1.optInt("NP:^/h,&f[-5L[X}W7");
      try { 
        jSONObject1.getBoolean("vMjt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vMjt\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.768712125492369
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Short short0 = new Short((short)83);
      Short short1 = new Short((short)83);
      Short.toUnsignedLong((short)83);
      Short.toUnsignedLong((short)83);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.toUnsignedLong((short)83);
      JSONObject jSONObject1 = jSONObject0.putOpt("9@[,qqosh1A@", short1);
      jSONObject1.optLong("9@[,qqosh1A@", 83L);
      try { 
        jSONObject0.getJSONArray("9@[,qqosh1A@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"9@[,qqosh1A@\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("/0");
      Integer integer0 = new Integer((-1225));
      assertEquals((-1225), (int)integer0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Float float0 = new Float((-4382.04F));
      JSONObject.testValidity(float0);
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("|[,:TJa1>;H", jSONArray0);
      jSONObject1.putOpt((String) null, "|[,:TJa1>;H");
      JSONObject.testValidity(jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3545061457128476
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject.quote("zciI_u<yruQ\"?f7yt");
      JSONObject jSONObject0 = new JSONObject((Object) "zciI_u<yruQ\"?f7yt");
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("zciI_u<yruQ\"?f7yt", object0);
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("zciI_u<yruQ\"?f7yt");
      assertEquals("\"zciI_u<yruQ\\\"?f7yt\"", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("BFe");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of BFe
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalOr(false, false);
      hashMap0.put(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(123);
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("BFe");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Double double0 = new Double(834.0001818920696);
      Double.isFinite(0.0);
      Object object0 = JSONObject.NULL;
      hashMap0.put(object0, (Boolean) null);
      Double.sum((-1.0), 834.0001818920696);
      Boolean boolean0 = new Boolean(true);
      hashMap0.put(double0, boolean0);
      String string0 = JSONObject.quote("Ctb|ksf6P");
      String string1 = JSONObject.valueToString(hashMap0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9950934168192425
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject.quote("zciI_u<yruQ\"?f7yt");
      JSONObject jSONObject0 = new JSONObject((Object) "zciI_u<yruQ\"?f7yt");
      jSONObject0.optLong((String) null, 0L);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      Writer writer1 = jSONArray0.write(writer0);
      jSONObject0.write(writer1);
      jSONObject0.toString(17, 17);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "_gjt";
      JSONObject jSONObject1 = jSONObject0.accumulate("_gjt", "_gjt");
      try { 
        jSONObject1.getInt("_gjt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_gjt\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "t,ujMWiZ";
      JSONObject jSONObject1 = jSONObject0.accumulate("t,ujMWiZ", "t,ujMWiZ");
      jSONObject1.accumulate("t,ujMWiZ", "t,ujMWiZ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("t,ujMWiZ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of t,ujMWiZ
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-0.08829366368443337));
      assertEquals("-0.08829366368443337", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 2367, 1731);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.666940475780652
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject.quote(" ,\n");
      Double double0 = new Double(0.0);
      Double.min(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('z');
      jSONObject0.write(stringWriter1);
      try { 
        jSONObject0.getBoolean(" ,\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" ,\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0688846458275627
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("v", "v");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('k');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "v", 0, 0);
      jSONObject0.write(stringWriter2);
      try { 
        jSONObject0.getBoolean("UIe+B17?]H&Z.pr");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"UIe+B17?]H&Z.pr\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "f`Mrt";
      JSONObject jSONObject1 = jSONObject0.accumulate("f`Mrt", "f`Mrt");
      try { 
        jSONObject1.getJSONObject("f`Mrt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f`Mrt\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string0 = JSONObject.quote("{}");
      assertEquals("\"{}\"", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optDouble(35, (double) 35);
      jSONObject0.toJSONArray(jSONArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addFirst("JHO*;IjU3n){nptZ");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "}$2n,Ue";
      try { 
        Long.valueOf("}$2n,Ue");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"}$2n,Ue\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.putOpt("|[,:KJa1>;H", jSONArray0);
      jSONObject0.accumulate("|[,:KJa1>;H", jSONObject1);
      boolean boolean0 = new Boolean("\b");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray((Object) "\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Z=e;{ZP<9v/R");
      JSONException jSONException0 = jSONTokener0.syntaxError("17V7}A");
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(jSONException0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Short short0 = new Short((short)83);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.putOpt(",hZ)qR.f", double0);
      double double1 = jSONObject1.getDouble(",hZ)qR.f");
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = 471;
      String string0 = "|9H5|]1eE-JMG2,oP";
      Double double0 = new Double(471);
      JSONObject.doubleToString(2147483645);
      JSONTokener jSONTokener0 = new JSONTokener("2.147483645E9");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("G!X.vQA{edw\"?");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 12 of G!X.vQA{edw\"?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Z=e;{Z:<9v/R");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 12 of {Z=e;{Z:<9v/R
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.3641907558487225
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      Short.toUnsignedLong((short) (-527));
      Short.toUnsignedInt((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.put("", 65009L);
      String string0 = jSONObject0.toString(486, 757);
      jSONObject0.isNull("");
      jSONObject0.optLong(string0);
      Short.toUnsignedLong((short)20);
      jSONObject1.get("");
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject jSONObject3 = new JSONObject((Object) string0);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject4 = new JSONObject(jSONTokener0);
      JSONObject.testValidity(jSONObject1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9430456700020091
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener("{Z=e;ZP<9v/R");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {Z=e;ZP<9v/R
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.03195622385697
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONArray@0000000001");
      String string0 = jSONObject0.toString(60, 82);
      Short short0 = new Short((short)3077);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("vgjt", (Collection) linkedList0);
      jSONObject0.put("vgjt", true);
      jSONObject0.getBoolean("vgjt");
      JSONObject.testValidity(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Float float0 = new Float(1858.86F);
      Float.min(1858.86F, 375.97452F);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "true";
      JSONObject.testValidity(jSONObject0);
      JSONObject.testValidity("<fb:J7Ql}9(=");
      byte byte0 = (byte)53;
      Byte byte1 = new Byte((byte)53);
      byte byte2 = (byte)5;
      Byte.compare((byte)5, (byte)61);
      Byte.toUnsignedLong((byte)6);
      JSONObject jSONObject1 = jSONObject0.append("<fb:J7Ql}9(=", byte1);
      jSONObject0.append("Unclosed comment", float0);
      jSONObject0.optJSONArray("<fb:J7Ql}9(=");
      Long long0 = new Long((-340L));
      jSONObject1.optDouble("?s4&S)qpeO_lrF");
      try { 
        Long.parseUnsignedLong("Unclosed comment", (int) (byte)61);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 61 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Float@00000000010", double0);
      jSONObject1.put("waS!y][$jc", false);
      Double.isFinite(0.0);
      Boolean boolean0 = new Boolean("|AvJ;Q~zGqDcG0!C");
      jSONObject1.append("java.lang.Float@00000000010", boolean0);
      String string0 = JSONObject.quote("|AvJ;Q~zGqDcG0!C");
      assertEquals("\"|AvJ;Q~zGqDcG0!C\"", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Double double0 = new Double((-1.0));
      Double.max((-1.0), (-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum((-1.0), (-809.0));
      jSONObject0.put("", (Collection) null);
      jSONObject0.getJSONArray("");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      String string0 = JSONObject.doubleToString(34);
      assertEquals("34", string0);
      
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.put("", (Map) hashMap0);
      jSONObject2.getJSONObject("");
      Short short0 = new Short((short)570);
      String string1 = JSONObject.quote("34");
      assertEquals("\"34\"", string1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Double double0 = new Double(2821.612833522264);
      JSONObject.quote("</\"w");
      String string0 = JSONObject.quote("</\"w");
      assertEquals("\"<\\/\\\"w\"", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7269369375735457
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("vgjt", "vgjt");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject0.put("vgjt", (Collection) linkedList0);
      jSONObject1.put("vgjt", false);
      jSONObject0.getBoolean("vgjt");
      JSONObject.testValidity(jSONObject1);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject.doubleToString(0.0);
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("`[mL?h;", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      jSONObject0.put("isisNaN", (Map) hashMap0);
      jSONObject0.getString("isisNaN");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("isisNaN");
      Double double0 = new Double(2720.3136);
      JSONObject.valueToString(double0);
      Object object1 = JSONObject.NULL;
      JSONObject.quote("java.lang.Double@0000000003");
      JSONObject.quote("\"java.lang.Double@0000000003\"");
      JSONObject.quote("\"java.lang.Double@0000000003\"");
      try { 
        jSONObject1.getBoolean("\"\"java.lang.Double@0000000003\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"java.lang.Double@0000000003\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("true", "true");
      jSONObject0.getBoolean("true");
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }
}
