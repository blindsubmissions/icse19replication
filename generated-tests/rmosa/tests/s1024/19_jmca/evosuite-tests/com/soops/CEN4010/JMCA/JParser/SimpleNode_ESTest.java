/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:21:12 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.FileDescriptor;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-500));
      // Undeclared exception!
      try { 
        simpleNode0.toString("<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -500
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("&");
      SimpleNode simpleNode1 = new SimpleNode(18);
      StringReader stringReader0 = new StringReader("&");
      stringReader0.skip(0L);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      StringWriter stringWriter2 = new StringWriter();
      simpleNode1.toString();
      simpleNode1.dump("%sMvj", stringWriter0);
      simpleNode1.dump("%sMvj", stringWriter2);
      stringWriter1.append('R');
      simpleNode0.dump("}CF`", stringWriter1);
      simpleNode1.dump("\"enum\"", stringWriter1);
      assertEquals("RR<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n", stringWriter1.toString());
      assertEquals("RR<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3245083869310707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier(" ");
      StringReader stringReader0 = new StringReader(" ");
      StringReader stringReader1 = new StringReader("ArgumentList");
      stringReader0.skip(18);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('B');
      SimpleNode simpleNode1 = new SimpleNode(56);
      simpleNode1.dump(" ", stringWriter0);
      simpleNode0.dump((String) null, stringWriter1);
      simpleNode1.dump(" ", stringWriter1);
      SimpleNode simpleNode2 = new SimpleNode(4138);
      simpleNode2.dump("ArgumentList", stringWriter0);
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals("B<VariableDeclaratorId>\n  <identifier> </identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier> </identifier>\n</VariableDeclaratorId>\n", stringWriter1.toString());
      assertEquals("B<VariableDeclaratorId>\n  <identifier> </identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier> </identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6081583698769648
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 18;
      SimpleNode simpleNode0 = new SimpleNode(18);
      String string0 = " ";
      simpleNode0.setIdentifier(" ");
      StringReader stringReader0 = new StringReader("'=");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 18);
      // Undeclared exception!
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: <EOF> after : \"\\'=\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("JRn6LU6", stringWriter0);
      simpleNode0.dump("", stringWriter0);
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.dump("<", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*lt</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*lt</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*lt</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*lt</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5140966973399504
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 30;
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier(">=");
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(4284);
      String string0 = "ictaD+a^Vj!{.R7\\X>N";
      StringWriter stringWriter0 = new StringWriter(4284);
      stringWriter0.write("");
      simpleNode0.jjtSetParent((Node) null);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "ictaD+a^Vj!{.R7X>N", 4284, (-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1474));
      simpleNode0.jjtClose();
      JavaParser javaParser1 = new JavaParser((Reader) null);
      JJTJavaParserState jJTJavaParserState0 = javaParser0.jjtree;
      // Undeclared exception!
      try { 
        jJTJavaParserState0.popNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-6262915));
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.jjtGetParent();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 21, 21);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      Node node0 = simpleNode0.parent;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1118424342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1118424342
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.39537219111499866
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(77);
      simpleNode0.setIdentifier("O16?FcnCT^vnyND`");
      SimpleNode simpleNode1 = new SimpleNode((-485485111));
      String string0 = "{";
      StringWriter stringWriter0 = new StringWriter(77);
      simpleNode1.dump("{", stringWriter0);
      String string1 = "X%f";
      StringReader stringReader0 = new StringReader("X%f");
      stringReader0.skip(0L);
      Node node0 = simpleNode0.parent;
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.jjtAddChild(simpleNode0, 0);
      simpleNode1.setIdentifier((String) null);
      StringWriter stringWriter1 = new StringWriter();
      char char0 = 'Z';
      StringWriter stringWriter2 = stringWriter1.append('Z');
      String string2 = "\">>>\"";
      stringWriter1.append('Z');
      // Undeclared exception!
      try { 
        stringWriter2.write("X%f", 77, 556);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('Z');
      simpleNode0.dump("g$1L Xi'r", stringWriter1);
      simpleNode0.dump("!", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("z}", stringWriter2);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-500));
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("&");
      SimpleNode simpleNode1 = new SimpleNode(18);
      StringReader stringReader0 = new StringReader("&");
      stringReader0.skip(0L);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('R');
      StringWriter stringWriter2 = new StringWriter();
      simpleNode1.setIdentifier("&");
      simpleNode1.toString();
      simpleNode1.dump("%sMvj", stringWriter0);
      simpleNode1.dump("%sMvj", stringWriter2);
      stringWriter1.append('R');
      simpleNode0.dump("}CF`", stringWriter1);
      simpleNode1.dump("\"enum\"", stringWriter1);
      assertEquals("R<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\nR<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n", stringWriter1.toString());
      assertEquals("R<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\nR<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(77);
      simpleNode0.setIdentifier("O16?FcnCT^vnyND`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.setIdentifier("=");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("HiKfNSwCY!b-a", stringWriter1);
      simpleNode0.dump("L1OVCeOQvAq-Cs", stringWriter0);
      String string0 = "\\u";
      simpleNode0.dump(string0, stringWriter1);
      StringWriter stringWriter2 = stringWriter1.append('!');
      simpleNode0.dump("TEgJCRy#BOLu:0", stringWriter2);
      SimpleNode simpleNode1 = new SimpleNode((-1));
      simpleNode1.dump("iY'go!,^e;OJ.t^}#<|", stringWriter1);
      simpleNode0.dump("O16?FcnCT^vnyND`", stringWriter0);
      simpleNode0.dump("f^Z}Sfdm[u{d_z=&w>", stringWriter1);
      assertEquals("<StatementExpression>\n  <identifier>O16?FcnCT^vnyND`</identifier>\n  <identifier>=</identifier>\n</StatementExpression>\n<StatementExpression>\n  <identifier>O16?FcnCT^vnyND`</identifier>\n  <identifier>=</identifier>\n</StatementExpression>\n!<StatementExpression>\n  <identifier>O16?FcnCT^vnyND`</identifier>\n  <identifier>=</identifier>\n</StatementExpression>\n<StatementExpression>\n  <identifier>O16?FcnCT^vnyND`</identifier>\n  <identifier>=</identifier>\n</StatementExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier(">=");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)44;
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      byteArray0[3] = (byte)34;
      byteArray0[4] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter(30);
      simpleNode0.dump("!Gqpa^rC@s\"/gAru", stringWriter0);
      assertEquals("<ClassOrInterfaceType>\n  <identifier>*ge</identifier>\n  <identifier>*ge</identifier>\n  <identifier>*le</identifier>\n</ClassOrInterfaceType>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JJTJavaParserState");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 6);
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("L1OVCeOQvAq-Cs", stringWriter0);
      simpleNode0.dump(")cC{", stringWriter0);
      simpleNode0.dump("L1OVCeOQvAq-Cs", stringWriter0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.dump(")cC{", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("*rshft");
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.append('T');
      simpleNode0.dump("", stringWriter0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter1 = new StringWriter(1);
      simpleNode0.dump("", stringWriter1);
      simpleNode0.dump("}fGR", stringWriter1);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<=");
      simpleNode0.dump(">=", stringWriter0);
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      simpleNode0.parser = javaParser0;
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      simpleNode0.dump(">=", stringWriter0);
      simpleNode0.dump("*lt", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*ge</identifier>\n  <identifier>*ge</identifier>\n  <identifier>*le</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*ge</identifier>\n  <identifier>*ge</identifier>\n  <identifier>*le</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*ge</identifier>\n  <identifier>*ge</identifier>\n  <identifier>*le</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 10);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte)77;
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("}", stringWriter0);
      simpleNode0.dump("", stringWriter0);
      assertEquals("<EnumConstant>\n</EnumConstant>\n<EnumConstant>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(7);
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("jLi&FfI)#>rSh't");
      simpleNode0.dump("jLi&FfI)#>rSh't", stringWriter0);
      simpleNode0.dump("", stringWriter0);
      assertEquals("<ImplementsList>\n  <identifier>jLi&FfI)#>rSh't</identifier>\n</ImplementsList>\n<ImplementsList>\n  <identifier>jLi&FfI)#>rSh't</identifier>\n</ImplementsList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("&&");
      SimpleNode simpleNode1 = new SimpleNode(18);
      StringReader stringReader0 = new StringReader("&&");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("&&", stringWriter1);
      simpleNode0.dump("g$1A3QXi'r", stringWriter0);
      StringWriter stringWriter2 = new StringWriter(18);
      stringWriter2.append((CharSequence) "'g\"LA7#Q`o22Vs");
      simpleNode0.dump("&&", stringWriter1);
      StringWriter stringWriter3 = new StringWriter();
      simpleNode1.dump("'g\"LA7#Q`o22Vs", stringWriter1);
      assertEquals("<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("=");
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier("=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("=", stringWriter0);
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "<=");
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.append('_');
      simpleNode0.dump("b", stringWriter1);
      simpleNode0.dump("=", stringWriter2);
      simpleNode0.dump("b", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>=</identifier>\n  <identifier>*ge</identifier>\n  <identifier>=</identifier>\n</EnumConstant>\n<=<EnumConstant>\n  <identifier>=</identifier>\n  <identifier>*ge</identifier>\n  <identifier>=</identifier>\n  <identifier>*rshft</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>=</identifier>\n  <identifier>*ge</identifier>\n  <identifier>=</identifier>\n  <identifier>*rshft</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(77);
      String string0 = "O16?FcnCT^vnyND`";
      simpleNode0.setIdentifier("O16?FcnCT^vnyND`");
      String string1 = ";";
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier((String) null);
      // Undeclared exception!
      try { 
        simpleNode0.dump("ArrayInitializer", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      SimpleNode simpleNode1 = new SimpleNode(30);
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("{");
      simpleNode0.dump("Literal", stringWriter0);
      simpleNode1.dump("StatementExpression", stringWriter0);
      assertEquals("<ClassOrInterfaceType>\n</ClassOrInterfaceType>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oC'u|@8qUn6!)");
      StringReader stringReader1 = new StringReader("oC'u|@8qUn6!)");
      StringReader stringReader2 = new StringReader("oC'u|@8qUn6!)");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oC'u|@8qUn6!)");
      JavaParser javaParser0 = new JavaParser(stringReader2);
      JavaParser javaParser1 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser1, 63);
      simpleNode0.setIdentifier(">5-ku,9'Ahk/0");
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "L1OVCeOQvAq-Cs";
      String string1 = "";
      simpleNode0.dump("", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(63);
      simpleNode1.dump("J'_J1V)dW8m|PQ&_''P", stringWriter0);
      simpleNode0.dump(">5-ku,9'Ahk/0", stringWriter0);
      stringWriter0.append((CharSequence) "J'_J1V)dW8m|PQ&_''P");
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "J'_J1V)dW8m|PQ&_''P", 63, (-2679));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(77);
      simpleNode0.setIdentifier("O16?FcnCT^vnyND`");
      SimpleNode simpleNode1 = new SimpleNode(1469);
      StringReader stringReader0 = new StringReader("o^h}Rp?<");
      stringReader0.skip(0L);
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("o^h}Rp?<", stringWriter0);
      simpleNode0.dump("<<", stringWriter0);
      simpleNode0.dump("<<", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('\\');
      simpleNode1.dump("O16?FcnCT^vnyND`", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode2.setIdentifier("<<");
      simpleNode0.dump("}", stringWriter1);
      simpleNode2.dump("'nJGN[KB!0mY*9OX*", stringWriter0);
      assertEquals("<StatementExpression>\n  <identifier>O16?FcnCT^vnyND`</identifier>\n</StatementExpression>\n<StatementExpression>\n  <identifier>O16?FcnCT^vnyND`</identifier>\n</StatementExpression>\n<StatementExpression>\n  <identifier>O16?FcnCT^vnyND`</identifier>\n</StatementExpression>\n\\<StatementExpression>\n  <identifier>O16?FcnCT^vnyND`</identifier>\n</StatementExpression>\n<CompilationUnit>\n  <identifier>*lshft</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(77);
      simpleNode0.setIdentifier("O16?#cnCT^vnyND`");
      simpleNode0.setIdentifier("O16?#cnCT^vnyND`");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("=", stringWriter0);
      StringWriter stringWriter2 = new StringWriter(77);
      simpleNode0.dump("4@8DG5lVMaeoy:", stringWriter2);
      stringWriter2.write(77);
      stringWriter2.append('!');
      SimpleNode simpleNode1 = new SimpleNode(52);
      simpleNode0.dump("*ge", stringWriter0);
      simpleNode1.dump("R;Qc%{:Fb,", stringWriter0);
      assertEquals("<StatementExpression>\n  <identifier>O16?#cnCT^vnyND`</identifier>\n  <identifier>O16?#cnCT^vnyND`</identifier>\n  <identifier>*gt</identifier>\n</StatementExpression>\n<StatementExpression>\n  <identifier>O16?#cnCT^vnyND`</identifier>\n  <identifier>O16?#cnCT^vnyND`</identifier>\n  <identifier>*gt</identifier>\n</StatementExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier(">=");
      SimpleNode simpleNode1 = new SimpleNode(1);
      StringReader stringReader0 = new StringReader("b |urG^=l3");
      stringReader0.skip(1);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z%");
      SimpleNode simpleNode2 = new SimpleNode((-3465));
      simpleNode1.dump("ForInit", stringWriter0);
      stringWriter0.flush();
      Node[] nodeArray0 = new Node[0];
      simpleNode2.children = nodeArray0;
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("b |urG^=l3", stringWriter0);
      StringWriter stringWriter3 = new StringWriter(1);
      simpleNode0.dump("Z%", stringWriter3);
      simpleNode2.dump("!", stringWriter3);
      simpleNode2.dump(">=", stringWriter2);
      simpleNode0.dump(": !", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>*ge</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>*ge</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }
}
