/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:43:48 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("start offset can not be less than 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse start offset can not be less than 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-32767L), long0);
      
      long long1 = range0.getEnd();
      assertEquals((-32768L), long1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 784L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(784L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1586L), (-1586L));
      range_Builder0.shift((-984L));
      range_Builder0.contractBegin((-1586L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("O`yq._(*Yy2r4*h@", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse O`yq._(*Yy2r4*h@ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-30L), (-30L));
      long long0 = (-1L);
      range_Builder0.expandEnd((-1L));
      // Undeclared exception!
      try { 
        Range.of((-1L), (-30L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 0L;
      range_Builder0.contractEnd(0L);
      range_Builder0.expandBegin((-612L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("Zero Based", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Zero Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(127L);
      long long0 = (-1323L);
      range_Builder0.expandEnd((-1323L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.shift(1L);
      range_Builder0.expandEnd(1L);
      range_Builder0.contractBegin(1L);
      range_Builder0.shift((-364L));
      range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483648L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854771674L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32768 would make range [9223372036854771674 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.691724411853638
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1884L), (-1884L));
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.of(range_CoordinateSystem0, (-2090L), (-2090L));
      range0.equals(range1);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -1883 .. -1884 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -1883 .. -1884 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-9223372036854775798L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 2147483647, -9223372036854775798 are not valid Space Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.ofLength(1169L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.965232407806471
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4920L, 4294967319L);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      Long long0 = new Long(4294967295L);
      Range range1 = Range.of(range_CoordinateSystem0, 4920L, 4294967295L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 1544L, 4294967295L);
      range1.equals((Object) null);
      Object object1 = new Object();
      Range.CoordinateSystem.values();
      range0.equals(range1);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("+={i!r`E9llIr-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.+={i!r`E9llIr-
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1100L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      long long0 = range0.getBegin();
      assertEquals(1L, long0);
      assertNotSame(range0, range2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.894657832994279
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(1829L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(1830L);
      range1.toString();
      range0.equals(range1);
      Object object0 = new Object();
      range1.intersects(range0);
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1830 .. 1830 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1830 .. 1830 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      long long0 = (-119L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-119L), (-119L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-119L), (-119L));
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.758771692455391
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 9223372036854771674L);
      Long long0 = new Long(3236L);
      range0.equals(range_CoordinateSystem0);
      Long long1 = new Long(9223372036854771674L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (long) long0, 9223372036854771674L);
      range1.getLength();
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7719278879609686
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(65535L, long0);
      
      range0.equals((Object) null);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.767923626502885
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854771674L);
      Range range1 = Range.ofLength(9223372036854774583L);
      range0.equals(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      String string0 = "c\\u<L6?\\f";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.c\\u<L6?\\f
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      long long0 = range0.getEnd();
      assertEquals((-128L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -128 .. -128 ]/0B", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      long long0 = 5L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(5L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.ofLength((-567L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = range0.asRange();
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 285L, 285L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7719278879609686
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9083183573932785
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1054L;
      Range.of(range_CoordinateSystem0, (-1L), 1054L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1L), (-2215L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.966943486189354
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range0.getEnd();
      assertEquals((-128L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -128 .. -128 ]/0B", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.874573052004374
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8444872614601695
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(1829L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(1830L);
      range1.toString();
      range1.split(1830L);
      range0.equals(range1);
      Object object0 = new Object();
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1830 .. 1830 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1830 .. 1830 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7719278879609686
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      // Undeclared exception!
      try { 
        range0.split((-2727L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9454190102745
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483662L, 9223372036854775807L);
      range0.toString();
      Range range1 = Range.parseRange("[ 2147483662 .. 9223372036854775806 ]/0B");
      range1.equals("[ 2147483662 .. 9223372036854775806 ]/0B");
      range0.endsBefore(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.parseRange("[ 2147483662 .. 9223372036854775806 ]/0B", range_CoordinateSystem1);
      range2.equals(range0);
      Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8444872614601695
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(1829L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(1830L);
      range1.toString();
      range0.equals(range1);
      Object object0 = new Object();
      range1.endsBefore(range0);
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1830 .. 1830 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1830 .. 1830 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.077742401906039
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.getLength();
      range0.split(1L);
      Range range1 = Range.of(2147483647L);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2241595008375064
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(9223372036854771703L);
      range0.iterator();
      List<Range> list0 = range0.complement(range0);
      range0.equals(list0);
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 9223372036854771704 .. 9223372036854771704 ]/RB", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.4013229622423675
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), 52L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("4Q;|ea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.4Q;|ea
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483662L, 2147483662L);
      Range.CoordinateSystem.values();
      Object object0 = new Object();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.955673837270806
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967319L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-91L), 4294967319L);
      range0.equals(range1);
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("(vh<KiOinP;S>H@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.(vh<KiOinP;S>H@
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range1.startsBefore(range0);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals((-1L), long0);
      assertSame(range0, range1);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.876670672278372
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-32757L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-32756L));
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      range1.getEnd();
      range1.getEnd();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(885L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854771721L);
      range0.intersects(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      Long long0 = new Long(1L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      
      long long1 = range0.getEnd();
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0134123047825123
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      List<Range> list0 = range0.split(1114L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      range0.equals((Object) null);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 4294967319L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967319L, 9223372036854775795L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 4294967319L, 9223372036854775795L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967319L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L);
      Range range1 = Range.of(9223372036854775785L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775785L, long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range1.equals(range0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.of(0L);
      Range range0 = Range.of(0L);
      Range range1 = Range.of(4077L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer2);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7719278879609686
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.equals((Object) null);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9834644014718337
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      range0.getLength();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.ofLength(1164L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L);
      Range range1 = Range.of(9223372034707292162L);
      Long long0 = new Long(9223372036854775785L);
      range0.startsBefore(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.846323859467729
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(255L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.950137844444038
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Long long0 = new Long(418L);
      range0.equals(long0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("lk;Wc:P{FCc7(", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse lk;Wc:P{FCc7( into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(902L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Long long0 = new Long(1L);
      boolean boolean0 = range0.equals(range0);
      long long1 = range0.getEnd();
      assertEquals(0L, long1);
      
      boolean boolean1 = range0.equals(long0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of(4294967319L);
      range0.getEnd();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 3236L);
      boolean boolean0 = range0.isEmpty();
      Long long0 = new Long(3236L);
      boolean boolean1 = range0.equals(long0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(1527L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483644L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of((-1815L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8745133271871883
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      Range range2 = Range.ofLength(1L);
      range2.startsBefore(range1);
      Long long0 = new Long(1L);
      range1.equals(range0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.2591389252044305
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L);
      Range range1 = Range.of(9223372036854775785L);
      List<Range> list0 = range1.complement(range0);
      assertFalse(list0.contains(range0));
      assertFalse(list0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Comparators.values();
      long long0 = range1.getEnd();
      assertSame(range1, range0);
      assertEquals(9223372036854775785L, long0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.5263605246161633
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of(9223372036854771703L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854771703L, 9223372036854771703L);
      range0.getBegin(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range1.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 9223372036854771703 .. 9223372036854771703 ]/0B", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775796L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.equals(range0);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("tmS+rcb:HlCDQP_~&b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.tmS+rcb:HlCDQP_~&b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-2147483630L));
      long long0 = range0.getEnd();
      assertEquals((-2147483630L), long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(874L);
      Range range1 = Range.of(874L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.9768269466692368
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-32800L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-32799L));
      range0.equals(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-32799L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of((-1815L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getEnd();
      assertEquals((-128L), long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -128 .. -128 ]/0B", string0);
      
      Long long1 = new Long((-128L));
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.318195339292486
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2522L), (-15L));
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      long long0 = range1.getEnd();
      assertEquals((-16L), long0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.7719278879609686
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.equals((Object) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.8022816207313572
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 3236L);
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long(3236L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.parseRange("EBbyLdE(f\"yL", (Range.CoordinateSystem) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse EBbyLdE(f\"yL into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.getEnd();
      Range range1 = Range.of((-121L));
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("The second parameter in the comparison is null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.The second parameter in the comparison is null.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854771704L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967319L, 9223372036854775795L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 4294967319L, 9223372036854775795L);
      Long.getLong("E@%{V;&*");
      range0.equals((Object) null);
      Long long0 = new Long(4294967319L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-128L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 3236L);
      range0.equals(range_CoordinateSystem0);
      String string0 = "EBbyLdE(f\"yL";
      Range.CoordinateSystem range_CoordinateSystem1 = null;
      Long long0 = new Long(3236L);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.9617334800189785
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = Range.of(255L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 4294967295 ]/RB", string0);
      
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      
      range0.equals(range0);
      range0.equals(range1);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.4339872044851467
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Object object0 = new Object();
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range2 = Range.of((-9223372036854775808L), (-84L));
      range2.equals((Object) null);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-21L));
      Range range1 = Range.of((-21L));
      Long long0 = new Long((-21L));
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -20 .. -20 ]/RB", string0);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854771674L);
      Object object0 = new Object();
      range0.equals((Object) null);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 3236L);
      range0.equals(range_CoordinateSystem0);
      range0.getBegin();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 3236L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      long long0 = range0.getEnd();
      assertEquals(3235L, long0);
      
      boolean boolean1 = range0.equals(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.0008004527068857
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-2147483676L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-2147483675L));
      range1.getEnd();
      range1.startsBefore(range0);
      range1.equals(range0);
      Range.CoordinateSystem.values();
      range0.toString();
      Range.CoordinateSystem.values();
      range0.getBegin();
      String string0 = "p/W_dq*>R9UuH'T 3CL";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("p/W_dq*>R9UuH'T 3CL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.p/W_dq*>R9UuH'T 3CL
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 3236L);
      Long long0 = new Long(3236L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(3236L, 5185L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(5185L, 5185L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      long long0 = range1.getBegin();
      assertEquals(0L, long0);
      
      boolean boolean0 = range1.equals((Object) null);
      assertSame(range1, range0);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.equals(range0);
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-2147483648L), long0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.053843300064786
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(1L, 0L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(0L);
      range1.iterator();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      range0.iterator();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9994L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9994L, long0);
      
      Range range1 = Range.ofLength(709L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.equals((Object)range0));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 9223372036854771703L);
      Object object0 = new Object();
      range0.equals(object0);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775785L, 9223372036854775785L);
      long long0 = range0.getBegin();
      assertEquals(9223372036854775785L, long0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(9223372036854771703L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854771703L, 9223372036854771703L);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1577L), (-1577L));
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483654L);
      long long0 = new Long(2147483654L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Long long1 = new Long(2147483654L);
      Long.min(2147483654L, 2147483647L);
      range1.equals(long1);
      Range.CoordinateSystem.values();
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = (-230L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.parseRange("Q.~xYh,ZH]`qx3, 3D", range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(220L, (-1949L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of(9223372036854775785L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(9223372034707292162L);
      Long long0 = new Long(9223372036854775785L);
      range0.equals(long0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.ofLength(2667L);
      range0.equals(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range0.equals((Object) null);
      range0.equals(range_CoordinateSystem0);
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range0.equals((Object) null);
      range0.equals(range_CoordinateSystem0);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("h N", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse h N into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 3236L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.8754478444593765
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      range0.equals((Object) null);
      range0.getBegin();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.valueOf("ZERO_BASED");
      assertEquals("Zero Based", range_CoordinateSystem1.toString());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.8243659399169285
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 9223372036854771674L);
      Long long0 = new Long(3236L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (long) long0, 9223372034707292162L);
      range1.equals(range_CoordinateSystem1);
      range0.equals(range1);
      Long long1 = new Long(9223372036854771674L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.961733480018979
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854771704L);
      Range range1 = Range.of(250L, 9223372036854771704L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3236L, 9223372036854771674L);
      Long long0 = new Long(3236L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (long) long0, 9223372036854771674L);
      range1.getLength();
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.083715450357595
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-32757L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-32757L), (-32756L));
      range1.equals(range0);
      Long long0 = new Long(255L);
      Range range2 = Range.of((-32757L));
      range2.getEnd(range_CoordinateSystem0);
      range2.getEnd();
      range2.getBegin();
      Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 2758L, 4294967319L);
      Range range1 = Range.of(range_CoordinateSystem0, 2758L, 4294967319L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("pVmX?kI5yKLE8.g9", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse pVmX?kI5yKLE8.g9 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.1994346752105733
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of((-32800L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-32800L));
      Range range2 = Range.of((-32799L));
      Range.of((-32800L));
      range2.getEnd();
      range0.startsBefore(range1);
      Range range3 = Range.of((-32800L), (-32799L));
      range3.equals(range2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      range2.getBegin();
      Range.Comparators.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("C5-7D7s%1_[<", range_CoordinateSystem1);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.toString();
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B");
      range1.equals("[ 0 .. 9223372036854775806 ]/0B");
      range0.endsBefore(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.parseRange("[ 0 .. 9223372036854775806 ]/0B", range_CoordinateSystem0);
      range2.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.071745959910163
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = Range.of(255L, 4294967295L);
      boolean boolean0 = range2.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 4294967295 ]/RB", string0);
      
      boolean boolean1 = range0.equals(range2);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.parseRange("[ 1 .. 4294967295 ]/RB", range_CoordinateSystem1);
      range0.equals(range3);
      assertNotSame(range3, range2);
      assertFalse(range3.equals((Object)range1));
      
      Long long0 = new Long(255L);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range0.equals(range_CoordinateSystem0);
      range0.getEnd();
      boolean boolean2 = range0.equals(range_CoordinateSystem1);
      assertSame(range0, range1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775807L);
      range0.toString();
      Range range1 = Range.parseRange("[ 2147483647 .. 9223372036854775806 ]/0B");
      range1.equals("[ 2147483647 .. 9223372036854775806 ]/0B");
      range0.endsBefore(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.parseRange("[ 2147483647 .. 9223372036854775806 ]/0B", range_CoordinateSystem1);
      range2.equals(range0);
      Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.1201968809133813
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-127L));
      range1.getEnd();
      range0.startsBefore(range0);
      Range range2 = Range.of((-128L), (-127L));
      range2.equals(range1);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      range1.equals(range2);
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }
}
