/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:24:24 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject.quote("mx[*p*@p&pQHb");
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("+4v_g^4#421H^8");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote("NktXU/F+4l3emL~");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("NktXU/F+4l3emL~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"NktXU/F+4l3emL~\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Y<.|H-w]4%";
      stringArray0[1] = "";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = ">";
      stringArray0[4] = "";
      String string1 = ",_A<Z>}@iS>^3";
      stringArray0[5] = ",_A<Z>}@iS>^3";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6293310559637797
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("islength");
      jSONObject0.optBoolean("rL|s", false);
      jSONObject0.optInt("islength");
      jSONObject0.optLong("kA=4ut+ao;/)", 2330L);
      String string0 = JSONObject.valueToString("islength", 0, 1258);
      assertNotNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = JSONObject.quote("=Pw.z v`{l");
      assertEquals("\"=Pw.z v`{l\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(92, 92);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JSONObject.quote("HF~6a/3Gdv|5qX");
      assertEquals("\"HF~6a/3Gdv|5qX\"", string0);
      
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      HashMap<Double, String> hashMap1 = new HashMap<Double, String>();
      Double double0 = new Double(0.0);
      hashMap1.put(double0, "ismin");
      hashMap0.putAll(hashMap1);
      double double1 = 492.2395178495;
      Double double2 = new Double(492.2395178495);
      Double.max((-891.0), 1793.6293);
      Double.max(1793.6293, (-891.0));
      String string0 = "\\t";
      hashMap0.put(double2, "\t");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7187185090132444
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      JSONObject.valueToString(object1);
      Float float0 = new Float((double) 634.44F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.getNames(jSONObject0);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7509687782493434
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject.quote("Wnov lIA:K");
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject.quote("NktXU/Fu+Pl3kmL;");
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = JSONObject.quote("HF~6a/3Gdv|5qX");
      Long long0 = new Long((-1L));
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = JSONObject.quote("KvpW\n");
      Integer integer0 = new Integer(27);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = JSONObject.quote("NktXU/F+Pl3kmL;");
      Short short0 = new Short((short)108);
      String string1 = JSONObject.valueToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.quote("NktXU/F+4l3emL;");
      JSONTokener jSONTokener0 = new JSONTokener("NktXU/F+4l3emL;");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of NktXU/F+4l3emL;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("%UnC");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.5394228101498475);
      assertEquals("1.5394228101498475", string0);
      
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(16);
      String string1 = jSONObject0.toString(16, 10);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Short short0 = new Short((short)44);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      StringWriter stringWriter0 = new StringWriter((short)44);
      StringWriter stringWriter1 = stringWriter0.append(' ');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "0", (int) (short)44, (int) (short)44);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.666940475780652
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = JSONObject.quote(",v\n");
      assertEquals("\",v\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\",v\n\"");
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
      
      String string1 = JSONObject.doubleToString((-2297.987641969317));
      assertEquals("-2297.987641969317", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5014877585648847
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt(",vpW\n", ",vpW\n");
      try { 
        jSONObject0.getBoolean(",vpW\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",vpW\\n\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6731947481222247
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("r~X0-lB^bd", object0);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject1.getBoolean("r~X0-lB^bd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r~X0-lB^bd\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      Short short0 = new Short((short) (-1));
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3718061232922234
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      float float0 = 0.0F;
      jSONObject0.put("VQ]e$x2_68=", false);
      Float float1 = new Float(0.0F);
      try { 
        jSONObject0.getJSONObject("VQ]e$x2_68=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VQ]e$x2_68=\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = JSONObject.quote("OBOU]D\"{Q8KQt4}.$");
      assertEquals("\"OBOU]D\\\"{Q8KQt4}.$\"", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.quote(",\n");
      Double double0 = new Double((-4891.6166));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.names();
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = JSONObject.quote("NktXU/Fu+Pl3kmL;");
      assertEquals("\"NktXU/Fu+Pl3kmL;\"", string0);
      
      Short short0 = new Short((short) (-2314));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.toString((int) (short) (-2314), 660);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String string0 = JSONObject.valueToString(linkedList0, (-78), 44);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = JSONObject.quote("NktXU/F+4l3emL;");
      assertEquals("\"NktXU/F+4l3emL;\"", string0);
      
      String string1 = JSONObject.valueToString("NktXU/F+4l3emL;", 22, 722);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of true
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wheel.json.JSONArray@0000000001";
      stringArray0[1] = "wheel.json.JSONArray@0000000001";
      stringArray0[2] = "wheel.json.JSONArray@0000000001";
      stringArray0[3] = "wheel.json.JSONArray@0000000001";
      stringArray0[4] = "wheel.json.JSONArray@0000000001";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 1430, 1430);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 0.0;
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7174752589196527
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("toU");
      jSONObject0.put("islength", (Collection) linkedList0);
      jSONObject0.optLong("islength");
      jSONObject0.optInt("islength");
      long long0 = jSONObject0.optLong("kA=4ut+ao;/)", 2330L);
      assertEquals(1, jSONObject0.length());
      assertEquals(2330L, long0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6425559869377249
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "LSyWa";
      jSONObject0.putOpt("LSyWa", "LSyWa");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("isshortValue", "LSyWa");
      try { 
        jSONObject1.getDouble("isshortValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isshortValue\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 0;
      String string0 = "\\u";
      jSONObject0.put(string0, 2450.355263380567);
      Boolean boolean0 = new Boolean(true);
      jSONObject0.put("vnQ*xw>G Q", (Object) "vnQ*xw>G Q");
      Integer integer0 = new Integer(0);
      jSONObject0.get("vnQ*xw>G Q");
      jSONObject0.optDouble(string0, (-2219.733027271714));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("kA=4ut+o;/)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of kA=4ut+o;/)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Long.compare(672L, 672L);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = JSONObject.quote("NktXU/F+4l3emL;");
      assertEquals("\"NktXU/F+4l3emL;\"", string0);
      
      String string1 = JSONObject.valueToString("NktXU/F+4l3emL;");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = JSONObject.quote("=Pw.z v`{l");
      assertEquals("\"=Pw.z v`{l\"", string0);
      
      Double double0 = new Double((-2228.05935));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(5, 34);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      jSONArray0.put((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONArray0, 8, 8);
      assertEquals("[{}]", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 8L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("' and instead saw '");
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = JSONObject.quote("Wnov lIA:K");
      assertEquals("\"Wnov lIA:K\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"Wnov lIA:K\"");
      jSONObject0.toString((-2127), 3070);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Float float0 = new Float((double) 634.44F);
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      Float float1 = new Float(634.44F);
      hashMap0.put((Boolean) null, float1);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9520152017759551
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(634.44F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      String string0 = jSONObject0.toString((-4353));
      Float.max(634.44F, 634.44F);
      Integer integer0 = new Integer(15);
      String string1 = jSONObject0.toString(0);
      assertEquals(3, jSONObject0.length());
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "^>zHxn!YoJ");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'J';
      charArray0[1] = 'L';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append('L');
      jSONArray0.write(stringWriter2);
      JSONObject.valueToString(jSONArray0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = JSONObject.quote("agMg,T@yuG4e(/fR");
      assertEquals("\"agMg,T@yuG4e(/fR\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = JSONObject.quote("' aJd[instead saw '");
      assertEquals("\"' aJd[instead saw '\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, (-76143222), (-76143222));
      assertEquals("null", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8073365769337295
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "MlWa";
      JSONObject jSONObject1 = jSONObject0.putOpt("MlWa", "MlWa");
      StringWriter stringWriter0 = new StringWriter(114);
      jSONObject1.write(stringWriter0);
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject1.getBoolean("MlWa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MlWa\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{)eBf7?@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 8 of {)eBf7?@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      String string0 = "{{5:(0;+GN\"E0jjA";
      JSONTokener jSONTokener0 = new JSONTokener("{{5:(0;+GN\"E0jjA");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {{5:(0;+GN\"E0jjA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "{cT2AH:Sy*m";
      JSONTokener jSONTokener0 = new JSONTokener("{cT2AH:Sy*m");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 11 of {cT2AH:Sy*m
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("Ne <$");
      assertEquals("", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("wheel.json.JSONObject", "wheel.json.JSONObject");
      assertEquals("wheel.json.JSONObject", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-264.2633));
      assertEquals("-264.2633", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)13);
      jSONObject0.putOpt("", byte0);
      double double0 = jSONObject0.getDouble("");
      assertEquals(13.0, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5171534199663776
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject.quote(",\n");
      Double double0 = new Double((-4891.6166));
      JSONObject jSONObject0 = new JSONObject(double0);
      Byte byte0 = new Byte((byte) (-13));
      JSONObject jSONObject1 = jSONObject0.accumulate("y@Es^*C)<U9JCA", byte0);
      jSONObject1.put("is", (Collection) null);
      assertEquals(5, jSONObject1.length());
      
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iswait", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.has("");
      Float float1 = new Float((-2642.647314));
      String string0 = JSONObject.valueToString(float1, 1921, 987);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-128));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.putOpt("", byte0);
      jSONObject1.optLong("", (-1873L));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("isintern");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of isintern
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5171534199663776
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject.quote(",v\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\",v\n\"");
      JSONObject jSONObject1 = jSONObject0.append("] is not a number.", "] is not a number.");
      JSONObject.quote("isparseFloat");
      try { 
        jSONObject1.getBoolean("0U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{)eBf7?@");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("{)eBf7?@", jSONArray0);
      jSONArray0.toJSONObject(jSONArray0);
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {)eBf7?@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      String string0 = JSONObject.valueToString(hashMap0, (-2453), (-1511));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6293310559637797
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("islength");
      assertEquals(0L, long0);
      
      Byte byte0 = new Byte((byte)92);
      jSONObject0.putOpt("islength", byte0);
      int int0 = jSONObject0.optInt("islength");
      assertEquals(92, int0);
      
      long long1 = jSONObject0.optLong("kA=4ut+ao;/)", 2330L);
      assertEquals(2330L, long1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string0 = jSONObject1.optString("");
      String string1 = JSONObject.quote("java.lang.String@0000000002");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "KvTW)";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("KvTW)", "KvTW)");
      JSONObject jSONObject2 = jSONObject1.accumulate("KvTW)", "KvTW)");
      jSONObject2.append("KvTW)", jSONObject0);
      String string1 = "int";
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("int", object0);
      try { 
        jSONObject0.getBoolean("KvTW)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KvTW)\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "mx[*p*@p&p\\QHb";
      JSONObject jSONObject1 = jSONObject0.put("mx[*p*@p&pQHb", true);
      try { 
        jSONObject1.append("mx[*p*@p&pQHb", "mx[*p*@p&pQHb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[mx[*p*@p&pQHb] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.addFirst("false");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6425559869377249
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "MlWa";
      jSONObject0.putOpt("MlWa", "MlWa");
      try { 
        jSONObject0.getJSONArray("MlWa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MlWa\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isparseDouble", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put(",vp", (Collection) linkedList0);
      int int0 = 1485;
      StringWriter stringWriter0 = new StringWriter(1485);
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("mx[*p*@p&pQHb", "mx[*p*@p&pQHb");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("mx[*p*@p&pQHb");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("MlWa", "MlWa");
      jSONObject1.put("MlWa", true);
      Object object0 = JSONObject.NULL;
      jSONObject1.getBoolean("MlWa");
      JSONObject.testValidity(object0);
      String string0 = JSONObject.valueToString("MlWa", 799, 68);
      assertNotNull(string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9199261201964186
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("c]Wra", "c]Wra");
      jSONObject1.put("c]Wra", false);
      Object object1 = JSONObject.NULL;
      jSONObject0.optDouble("c]Wra", 277.9694419);
      String string0 = JSONObject.valueToString(object1);
      jSONObject0.getBoolean("c]Wra");
      String string1 = JSONObject.valueToString("c]Wra");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      Float float0 = new Float((double) 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("}`1TZUioQ% #=G#'W<J");
      jSONObject0.put("\"java.lang.Object@0000000001\"", (Collection) linkedList0);
      JSONObject.getNames((Object) float0);
      JSONObject.testValidity(float0);
      jSONObject0.getJSONArray("\"java.lang.Object@0000000001\"");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      String string0 = JSONObject.quote("' aJd instead saw '");
      assertEquals("\"' aJd instead saw '\"", string0);
      
      Long long0 = new Long(0L);
      Long.compare(0L, 0L);
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      HashMap<Long, Float> hashMap1 = new HashMap<Long, Float>();
      hashMap1.remove((Object) "' aJd instead saw '");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      hashMap0.put("' aJd instead saw '", jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("' aJd instead saw '");
      assertNotNull(jSONObject2);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] is not a JSONObject.", "] is not a JSONObject.");
      JSONObject jSONObject2 = jSONObject1.accumulate("] is not a JSONObject.", "] is not a JSONObject.");
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.136699382763838
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("r~X0-lB^bd", object0);
      jSONObject0.put("'{L0*2pf2BIEi", true);
      jSONObject1.toString(10, (-3292));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000002\": null,\n\"java.lang.String@0000000003\": java.lang.Boolean@0000000004\n}");
      jSONObject2.keys();
      JSONObject.testValidity("r~X0-lB^bd");
      JSONObject.testValidity("r~X0-lB^bd");
      JSONObject.quote("'{L0*2pf2BIEi");
      Float float0 = new Float((float) (-3292));
      JSONObject.testValidity(float0);
      JSONObject.valueToString(float0);
      JSONObject.testValidity(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",jQqsa", false);
      String[] stringArray0 = new String[3];
      stringArray0[1] = ",jQqsa";
      stringArray0[2] = stringArray0[0];
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.putOpt(",jQqsa", jSONObject2);
      JSONObject jSONObject3 = jSONObject0.getJSONObject(",jQqsa");
      jSONObject3.optJSONArray("{}");
      assertEquals(1, jSONObject3.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONObject.doubleToString((-54582745));
      Boolean.logicalXor(false, false);
      Float float0 = new Float((float) 0L);
      Integer integer0 = new Integer(55);
      try { 
        Integer.parseUnsignedInt("isnotify");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"isnotify\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      String string0 = JSONObject.quote("l</:afb0*&/$r4");
      assertEquals("\"l<\\/:afb0*&/$r4\"", string0);
      
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      assertEquals(1, jSONObject0.length());
  }
}
