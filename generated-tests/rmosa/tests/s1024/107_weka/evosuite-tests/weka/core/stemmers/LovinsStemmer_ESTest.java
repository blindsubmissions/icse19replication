/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:27:16 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7796416188803014
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("weka.core.RevisionUtils");
      assertEquals("weka.core.revisionutil", string0);
      
      lovinsStemmer0.stem("rusend");
      lovinsStemmer0.stem("rusend");
      String string1 = lovinsStemmer0.stem("ifully");
      assertEquals("ifl", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8221907349838813
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rusend");
      assertEquals("rusens", string0);
      
      String string1 = lovinsStemmer0.stemString("elihood");
      assertEquals("el", string1);
      
      lovinsStemmer0.stem("rusend");
      String string2 = lovinsStemmer0.stem("ifully");
      assertEquals("ifl", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7796416188803014
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("\"-m{#A~n%Mu");
      lovinsStemmer0.stem("rusend");
      lovinsStemmer0.stem("rusend");
      String string0 = lovinsStemmer0.stem("ifully");
      assertEquals("ifl", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9013396600891119
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("A journal name. Abbreviations are provided for many journals.");
      assertEquals("a journ nam. abbrevi ar provid for man journ.", string1);
      
      String string2 = lovinsStemmer0.stem("Hnjtal");
      assertEquals("hnjt", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0128590478318442
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string2 = lovinsStemmer0.stem("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertTrue(string2.equals((Object)string1));
      
      String string3 = lovinsStemmer0.stemString("5MtiTe");
      assertEquals("5mt", string3);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9822538062289589
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stemString("w_.FuO6J&n!/nxl");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.";
      stringArray0[1] = "w_.FuO6J&n!/nxl";
      stringArray0[2] = "w_.fuo6j&n!/nxl";
      stringArray0[3] = "w_.fuo6j&n!/nxl";
      stringArray0[4] = "w_.fuo6j&n!/nxl";
      stringArray0[5] = "th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.";
      stringArray0[6] = "th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      String string1 = lovinsStemmer0.stemString("C4.5: Programs for Machine Learning");
      assertEquals("c4.5: program for mach learn", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0017744872367746
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("lud");
      lovinsStemmer0.stemString("keywords");
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string0);
      
      lovinsStemmer0.stemString("ADDRESS");
      lovinsStemmer0.stemString("keywords");
      lovinsStemmer0.stemString("keyword");
      String string1 = lovinsStemmer0.stemString("less");
      assertEquals("les", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("oDVOC3tmlt@.`zrP+xG");
      assertEquals("odvoc3tmlt@.`zrp+xg", string0);
      
      lovinsStemmer0.stemString("String should not finish with ");
      lovinsStemmer0.stemString("noher");
      String string1 = lovinsStemmer0.stemString("Get posiqion of flag -f: ");
      assertEquals("ges posiq of flag -f: ", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("%!i]M5TRr*W)-M");
      assertEquals("%!i]m5tr*w)-m", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.844703399344479
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("ionvad");
      assertEquals("ionvas", string0);
      
      String string1 = lovinsStemmer0.stem("*muE:Ee{kYR/OUM");
      assertEquals("*mue:ee{kyr/oum", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.088051097361702
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("kbend");
      assertEquals("kbens", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("Fatal error");
      assertEquals("fat error", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9360503249080605
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("end");
      lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string0);
      
      lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      String string1 = lovinsStemmer0.stem(")7>");
      assertEquals(")7>", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8640911127858059
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("rusend");
      String string1 = lovinsStemmer0.stemString("institution");
      assertEquals("institut", string1);
      
      lovinsStemmer0.stem("rusend");
      lovinsStemmer0.stem("rusend");
      String string2 = lovinsStemmer0.stem("ifully");
      assertEquals("ifl", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "pAZ|.|{&?";
      stringArray0[2] = "pAZ|.|{&?";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[3] = "'u5pxQ%tYS";
      stringArray0[5] = "8034cid";
      stringArray0[6] = "suU";
      stringArray0[7] = stringArray0[1];
      stringArray0[8] = "8034cid";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("E(}tf136(q0+7B%.nfR");
      lovinsStemmer0.stem("&w&M]`-7q]OeV^");
      String string0 = lovinsStemmer0.stem("iz~lton");
      assertEquals("iz~lt", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("`_A6]%t`.u|");
      String string0 = lovinsStemmer0.stemString("arly");
      assertEquals("arl", string0);
      
      lovinsStemmer0.stemString("ation");
      String string1 = lovinsStemmer0.stemString("`_A6]%t`.u|");
      assertEquals("`_a6]%t`.u|", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0219134912504795
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("appearbex");
      assertEquals("appearbic", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|eWr";
      stringArray0[1] = "mustend";
      stringArray0[2] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[3] = "_>XCg{98+";
      stringArray0[4] = "end";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("Thealtrnating decison tree learning algorithm");
      String string1 = lovinsStemmer1.stemString("Thealtrnating decison tree learning algorithm");
      assertEquals("thealtrn decison tre learn algorithm", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lingulux");
      assertEquals("linguluc", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stem("allic");
      assertEquals("al", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9013396600891119
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("linguuad");
      assertEquals("linguuas", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("Hnjtal");
      assertEquals("hnjt", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9280501512082178
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "lessly";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("ityond");
      assertEquals("ityons", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("*muE:Ee{kYR/OUM");
      assertEquals("*mue:ee{kyr/oum", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9715121982607949
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("\"qm\"9Aedp");
      lovinsStemmer0.stem("izations");
      lovinsStemmer0.stemString("izat");
      String string0 = lovinsStemmer0.stemString("An annotaton. It is not used by the standard bibliography styles,but may be used by others that produce an annotated bibliography.");
      assertEquals("an annotat. it is not us by th standard bibliograph styl,but may be us by other that produc an annot bibliograph.", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0069933688259507
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[2] = "Used for alphabetizing, cross referecing, and creating a label when the ``author'' nformation is missing. This field should not be confused ith the key that appears in the cite command and at the beginning of the database entry.";
      String string0 = lovinsStemmer0.stemString(")7>pand");
      assertEquals(")7>pans", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("Used for alphabetizing, cross referecing, and creating a label when the ``author'' nformation is missing. This field should not be confused ith the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer0.stemString("us for alphabes, cros referec, and creat a label when th ``author'' nform is mis. th field should not be confus ith th key that appear in th cit command and at th begin of th databas entr.");
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referecing, and creating a label when the ``author'' nformation is missing. This field should not be confused ith the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros referec, and creat a label when th ``author'' nform is mis. th field should not be confus ith th key that appear in th cit command and at th begin of th databas entr.", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("G)cing");
      String string0 = lovinsStemmer0.stem("G)cing");
      assertEquals("g)c", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9687800658478425
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("rudax");
      assertEquals("rudac", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("rudax");
      String string3 = lovinsStemmer1.stem("*muE:Ee{kY/qUM");
      assertEquals("*mue:ee{ky/qum", string3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9440087775170304
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "cid";
      stringArray0[1] = "!UV#<w@";
      stringArray0[2] = "n}X0Q5H";
      stringArray0[3] = "uad";
      stringArray0[4] = "et";
      stringArray0[5] = "ately";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("Hnjtal");
      assertEquals("hnjt", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Fa-averror");
      String string0 = lovinsStemmer0.stem("rud");
      assertEquals("rus", string0);
      
      String string1 = lovinsStemmer0.stem("5uoertpex");
      assertEquals("5uoertpic", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.7796416188803014
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("dex");
      assertEquals("dic", string0);
      
      lovinsStemmer0.stem("rusend");
      lovinsStemmer0.stem("rusend");
      String string1 = lovinsStemmer0.stem("ifully");
      assertEquals("ifl", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pAZ|.|{&?";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[3] = "'u5pmQ%tYS";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rpt");
      assertEquals("rb", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9280501512082178
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("a'");
      assertEquals("a'", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stem("*muE:Ee{kY/qUM");
      assertEquals("*mue:ee{ky/qum", string3);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("inproceedings");
      assertEquals("inproceed", string0);
      
      String string1 = lovinsStemmer0.stem("eableness");
      assertEquals("eabl", string1);
      
      String string2 = lovinsStemmer0.stem("inproceed");
      assertEquals("inproceed", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9994706693724867
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lingulux");
      lovinsStemmer0.stem("linguluc");
      String string0 = lovinsStemmer0.stemString("-pLxzS_`u:d3oVSH");
      assertEquals("-plxz_`u:d3ovsh", string0);
      
      String string1 = lovinsStemmer0.stemString("Problem reading local properties: ");
      assertEquals("problem read loc propers: ", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.048668212179354
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("dotcid");
      lovinsStemmer0.stemString("eless");
      lovinsStemmer0.stem("eless");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("tHb*");
      String string0 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.886696431854348
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("*mue:ee{kyr/oumix");
      assertEquals("*mu:ee{kyr/oumic", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("*muE:Ee{kYR/OUM");
      assertEquals("*mue:ee{kyr/oum", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.886696431854348
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("annoterid");
      String string0 = lovinsStemmer0.stemString("annoteris");
      assertEquals("annoter", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("*muE:Ee{kYR/OUM");
      assertEquals("*mue:ee{kyr/oum", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.8610424183171985
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("v~@;");
      assertEquals("v~@;", string0);
      
      String string1 = lovinsStemmer0.stem("lud");
      assertEquals("lus", string1);
      
      String string2 = lovinsStemmer0.stem("ental");
      assertEquals("ent", string2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.002655783555695
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("5MiTe");
      assertEquals("5mis", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0607990005873988
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("dv3|q5! wd6w:3=]5nex");
      assertEquals("dv3|q5! wd6w:3=]5nec", string0);
      
      lovinsStemmer0.stemString("E(}tf136(q0+7B%.fR");
      String string1 = lovinsStemmer0.stem("*p@KbA");
      assertEquals("*p@kb", string1);
      
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9280501512082178
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Get flag -f: ");
      assertEquals("ges flag -f: ", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stem("*muE:Ee{kY/qUM");
      assertEquals("*mue:ee{ky/qum", string3);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.844703399344479
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerert");
      assertEquals("weka.core.stemmers.lovinsstemmerers", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("*muE:Ee{kYR/OUM");
      assertEquals("*mue:ee{kyr/oum", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.048668212179354
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("mustyt");
      String string0 = lovinsStemmer0.stemString("eless");
      assertEquals("eles", string0);
      
      lovinsStemmer0.stem("eless");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("tHb*");
      String string1 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.844703399344479
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("td7rud");
      assertEquals("td7rus", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("*muE:Ee{kYR/OUM");
      assertEquals("*mue:ee{kyr/oum", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("hunet");
      assertEquals("hunet", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.011687058550578
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("oqOC[X} ~)> tD7");
      String string0 = lovinsStemmer0.stemString("oqoc[x} ~)> td7");
      assertEquals("oqoc[x} ~)> td7", string0);
      
      String string1 = lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may beused by others that produce an nnotated bibliography.");
      assertEquals("an annot. it is not us by th standard bibliograph styl, but may beus by other that produc an nnot bibliograph.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("an annot. it is not us by th standard bibliograph styl, but may beus by other that produc an nnot bibliograph.");
      String string2 = lovinsStemmer0.stemString("an annot. it is not us by th standard bibliograph styl, but may beus by other that produc an nnot bibliograph.");
      assertEquals("an annot. it is not us by th standard bibliograph styl, but may beus by other that produc an nnot bibliograph.", string2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "encies";
      lovinsStemmer0.stemString("encies");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      String string0 = lovinsStemmer0.stemString("izing");
      assertEquals("izing", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("oDVOC3tmlt@.`zrP+xG");
      assertEquals("odvoc3tmlt@.`zrp+xg", string0);
      
      String string1 = lovinsStemmer0.stem("metr");
      assertEquals("meter", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("appearyz");
      assertEquals("appearys", string0);
      
      lovinsStemmer1.stem("=`,{BiR0J_<o]J.S");
      String string1 = lovinsStemmer0.stemString("appearys");
      assertEquals("appeary", string1);
      
      String string2 = lovinsStemmer1.stem("appeary");
      assertEquals("appear", string2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      String string1 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string1);
      
      lovinsStemmer1.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      String string2 = lovinsStemmer1.stem("BD?UP #y9LV$/UW^6");
      assertEquals("bd?up #y9lv$/uw^6", string2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("I<Ga!L|2#@P$)PKpP");
      assertEquals("i<ga!l|2#@p$)pkp", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9564124420694637
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(".`7eY76`/'A>XTB");
      assertEquals(".`7ey76`/'a>xtb", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("dV3|q5! wd6w:3=]5N");
      String string1 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.014235953284152
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "erid";
      stringArray0[1] = "otix";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      assertEquals("invalis cv revis - not enough part separ by dot!", string0);
      
      String string1 = lovinsStemmer1.stemString("invalis cv revis - not enough part separ by dot!");
      assertEquals("inval cv rev - not enough part separ by dot!", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      lovinsStemmer0.stemString("(8bB W1%2pyK");
      lovinsStemmer0.stemString("(8b w1%2pyk");
      String string1 = lovinsStemmer0.stemString("(8b w1%2pyk");
      assertEquals("(8b w1%2pyk", string1);
      
      String string2 = lovinsStemmer0.stem("elrudvad");
      assertEquals("elrudvas", string2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string0);
      
      String string1 = lovinsStemmer0.stem("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("array-dimensions of 'new string[3][4][]': ", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|eWr";
      stringArray0[1] = "mustend";
      stringArray0[2] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[3] = "_>XCg{98+";
      String string0 = lovinsStemmer0.stem("#W\"5R>GgY");
      assertEquals("#w\"5r>g", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("istr");
      assertEquals("ister", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("lud");
      assertEquals("lus", string0);
      
      String string1 = lovinsStemmer0.stem("etal");
      assertEquals("etal", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string0);
      
      String string1 = lovinsStemmer0.stem("ental");
      assertEquals("ent", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The volume of a journal or multi-volume book.");
      assertEquals("th volum of a journ or mult-volum book.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("th volum of a journ or mult-volum book.");
      assertEquals("th vol of a journ or mult-vol book.", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string0);
      
      lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("th organ that sponsor a confer or that publish a manu.");
      assertEquals("th organ that spons a confer or that publ a manu.", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("(fWIkrBk|%Oul");
      assertEquals("(fwikrbk|%oul", string0);
      
      lovinsStemmer1.stem("(fWIkrBk|%Oul");
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stem("fuo6jlid");
      assertEquals("fuo6jlis", string1);
      
      lovinsStemmer0.stemString("(fwikrbk|%oul");
      String string2 = lovinsStemmer0.stemString("/WgSvR/");
      assertEquals("/wgsvr/", string2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "|eWr";
      stringArray0[1] = "mustend";
      stringArray0[2] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("umpt");
      assertEquals("um", string0);
      
      String string1 = lovinsStemmer0.stem("MGdg86GZ9pA");
      assertEquals("mgdg86gz9p", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("other");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("[l@ulis#TS\"hGbXG'ON");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("~?/-3a7{3^jpher");
      assertEquals("~?/-3a7{3^jpher", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("eTT");
      lovinsStemmer0.stemString("INPROCEEDINGS");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.171033886443238
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("gnmTo1$oPxarYlaT");
      assertEquals("gnmto1$opxarylat", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("tf136yt");
      assertEquals("tf136ys", string3);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("zAulX0M)VwSJ!j^p1");
      assertEquals("zaulx0m)vwsj!j^p1", string1);
  }
}
