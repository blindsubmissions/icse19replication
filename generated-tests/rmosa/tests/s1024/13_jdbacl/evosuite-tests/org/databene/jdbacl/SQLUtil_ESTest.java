/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 16:33:17 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.net.URISyntaxException;
import java.sql.Connection;
import java.util.List;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.engine.SessionRemote;
import org.h2.jdbc.JdbcSQLException;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[2];
      String[] stringArray1 = new String[5];
      stringArray1[0] = stringArray0[0];
      stringArray1[3] = ".m^J";
      String string0 = SQLUtil.innerJoin(".m^J", stringArray0, ".m^J", stringArray0[0], stringArray1);
      assertEquals(".m^J as null on .m^J.null = null.null and .m^J.null = null.null", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.join("SYS_PKK_", "org.apache.derby.io.StorageFactory", stringArray0, (String) null, "SYS_PKK_", stringArray0);
      assertEquals("SYS_PKK_ join null as SYS_PKK_ on ", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = SQLUtil.join((String) null, "insert", stringArray0, (String) null, "insert", stringArray0);
      assertEquals("null as insert on insert.null = insert.null and insert.null = insert.null and insert.null = insert.null and insert.null = insert.null and insert.null = insert.null and insert.null = insert.null and insert.null = insert.null and insert.null = insert.null and insert.null = insert.null", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[19];
      SQLUtil.renderColumnListWithTableName("*/", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      try { 
        MockURI.URI("", "", "*/", "*/", "*/");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ://*_/?*_/#*_/
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "d!eu(x9gw", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "greaterThan";
      DBCatalog dBCatalog0 = new DBCatalog("greaterThan");
      dBCatalog0.getTable("greaterThan", false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "greaterThan";
      stringArray0[2] = stringArray0[1];
      stringArray0[3] = "greaterThan";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "drop materialized view");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized view", (DBTable) null, dBDataType0, integer2, integer2);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer.min(0, 0);
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        defaultDBColumn1.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9566162950175765
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.normalize("alter materialized viewlg4a!e#qvi)n'aqcsp", false);
      TableContainer tableContainer0 = new TableContainer("alter materialized viewlg4a ! e # qvi) n 'aqcsp'");
      tableContainer0.getSchema();
      tableContainer0.getSchema();
      SQLUtil.removeComments("alter materialized viewlg4a!e#qvi)n'aqcsp");
      SQLUtil.mutatesDataOrStructure("alter materialized viewlg4a!e#qvi)n'aqcsp");
      Random.setNextRandom(291);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9735584326028659
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create table");
      SQLUtil.normalize("|-m{1\"LZyC7wp", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("G81Rp39");
      StringBuilder stringBuilder0 = new StringBuilder("G81Rp39");
      SQLUtil.addRequiredCondition("G81Rp39", stringBuilder0);
      assertEquals("G81Rp39 and G81Rp39", stringBuilder0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("DataFileCache.close() : seek end", "DataFileCache.close() : seek end", "DataFileCache.close() : seek end");
      assertEquals("'DataFileCache.close() : seek end'", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("SYS_PK_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS_PK_", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SYS_PK_";
      defaultDBTable0.isIdentical(dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYS_PK_", false, stringArray0);
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("DataFileCache.close() : seek end", true);
      assertEquals("DataFileCache.close () : seek end", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS_PKK_", dBSchema0);
      String[] stringArray0 = new String[7];
      defaultDBTable0.isIdentical(dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYS_PKK_", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("D_svad!lY~jOR");
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      dBPrimaryKeyConstraint0.setDoc((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "3eWbb6]", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint1, nameSpec0);
      assertEquals("CONSTRAINT 3eWbb6] ", stringBuilder0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3245083869310707
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.normalize("SK-%uw\";`j%1&[Lj!Xp9", false);
      assertEquals("SK - % uw \";`j%1&[Lj!Xp9\"", string0);
      
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SK-%uw\";`j%1&[Lj!Xp9", compositeDBObject0);
      tableContainer0.getTable("SK - % uw \";`j%1&[Lj!Xp9\"");
      DBDataType dBDataType0 = DBDataType.getInstance(2147483645, "SK - % uw \";`j%1&[Lj!Xp9\"");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SK - % uw \";`j%1&[Lj!Xp9\"", (DBTable) null, dBDataType0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("SK - % uw \";`j%1&[Lj!Xp9\" SK - % UW \";`J%1&[LJ!XP9\" NULL", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("/@R*now32N~s131pm:", false);
      assertEquals("/ @ R * now32N ~ s131pm :", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "renamealter materialized viewlg4a!e#qvi)n'aqcsp";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("executeinsertnot yet implemented", (String[]) null, "executeinsertnot yet implemented", "executeinsertnot yet implemented", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8381196037849845
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("/@r*now32N~s131pm:", true);
      assertEquals("/ @ r * now32N ~ s131pm :", string0);
      
      SQLUtil.removeComments("o");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("/@r*now32N~s131pm:", true, "85b j7BuYGj", "o");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT /@r*now32N~s131pm: CHECK o", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("Kd)~NO/}C:1M3w1Y1_");
      DBSchema dBSchema0 = new DBSchema("Kd)~NO/}C:1M3w1Y1_", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Kd)~NO/}C:1M3w1Y1_", dBSchema0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Kd)~NO/}C:1M3w1Y1_", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Random.setNextRandom(335544752);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("5DF)=");
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("5DF)=", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2101376494021046
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize(".-+A_L_*UZ!:O|6", true);
      SQLUtil.removeComments("&6ms$P-y+");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(3, "&6ms$P-y+");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".- + A_L_ * UZ ! : O | 6";
      stringArray0[1] = "&6ms$P-y+";
      stringArray0[2] = "&6ms$P-y+";
      stringArray0[3] = "&6ms$P-y+";
      stringArray0[4] = ".-+A_L_*UZ!:O|6";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&6ms$P-y+", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("FOREIGN KEY ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("exec");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      MockFile mockFile0 = new MockFile("getParameterValueSet", ".- + A_L_ * UZ ! : O | 6");
      SQLUtil.normalize(".- + A_L_ * UZ ! : O | 6", false);
      System.setCurrentTimeMillis(44L);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4114553925503102
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize(".-+A_L_*UZ!:O|6", false);
      SQLUtil.removeComments("&6ms$P-y+");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(3, ".-+A_L_*UZ!:O|6");
      SQLUtil.normalize(".-+A_L_*UZ!:O|6", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".- + A_L_ * UZ ! : O | 6";
      stringArray0[1] = "&6ms$P-y+";
      stringArray0[2] = "insert";
      stringArray0[3] = "insert";
      stringArray0[5] = "&6ms$P-y+";
      stringArray0[6] = "exec";
      stringArray0[0] = "insert";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("2S/!ht/6yN(;,N=W", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("getParameterValueSet");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("insert");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execute", true, stringArray0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis((-2159L));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("G81Rp39", stringBuilder0);
      assertEquals("G81Rp39", stringBuilder0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("selectconstraiI:nt");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("selectconst");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "";
      int int0 = 1760;
      StringBuilder stringBuilder0 = new StringBuilder(1760);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.delete(1760, 1760);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("SF-%uF\"`j%1&[Lj!9p9");
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container SF-%uF\"`j%1&[Lj!9p9", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(",@^o!dqUUS)hu{EOl");
      defaultDBTable0.getForeignKeyConstraints();
      defaultDBTable0.getColumns();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(234);
      char[] charArray0 = new char[1];
      stringBuilder0.reverse();
      SQLUtil.addOptionalCondition(",@^o!dqUUS)hu{EOl", stringBuilder0);
      System.setCurrentTimeMillis(782);
      Random.setNextRandom(626);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS_PKK_", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SYS_PKK_";
      defaultDBTable0.isIdentical(dBSchema0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYS_PKK_", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("seletcon");
      dBSchema0.getTables();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "seletcon");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("seletconCONSTRAINT SYS_PKK_ ", stringBuilder1.toString());
      assertEquals("seletconCONSTRAINT SYS_PKK_ ", stringBuilder0.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3465050905813454
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize(".-+A_L_*UZ!:O|6", false);
      SQLUtil.removeComments("&6ms$P-y+");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.normalize(".-+A_L_*UZ!:O|6", false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".- + A_L_ * UZ ! : O | 6";
      stringArray0[1] = "&6ms$P-y+";
      stringArray0[2] = "insert";
      stringArray0[3] = "insert";
      stringArray0[5] = "&6ms$P-y+";
      stringArray0[6] = "exec";
      stringArray0[4] = "insert";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("2S/!ht/6yN(;,N=W", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("getParameterValueSet");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".- + A_L_ * UZ ! : O | 6");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      mockPrintWriter0.print((float) 3);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execute", true, stringArray0);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      SQLUtil.removeComments("&6ms$P-y+");
      SQLUtil.normalize("execute", false);
      String string1 = SQLUtil.removeComments("VoaO(!");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("DataFileCache.close() : seek end");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("oF5-O(}md=#=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: oF5-O(}md=#=
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("call*/", true);
      assertEquals("call */", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema((String) null);
      String[] stringArray0 = new String[7];
      boolean boolean0 = new Boolean((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[0], dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
      
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = " &o@^d^9)F16f7{mYS";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "IS_NULLABLE";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" &o@^d^9)F16f7{mYS", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("IS_NULLABLE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("SYS_PK_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS_PK_", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SYS_PK_";
      defaultDBTable0.isIdentical(dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYS_PK_", false, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("SYS_PK_.SYS_PK_", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDML("U@-|J$0vl]/*9(`Dt$O");
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insertnot yet implemented");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isQuery("insertnot yet implemented");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      Object object0 = new Object();
      Character character0 = new Character('o');
      Object[] objectArray0 = new Object[6];
      objectArray0[3] = (Object) "CALLABLESTATEMENT";
      Character.getName(31);
      Character.getName(31);
      String string0 = SQLUtil.renderValue(character0);
      String string1 = SQLUtil.normalize("'o'", false);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      jdbcClob jdbcClob0 = new jdbcClob("selectconstraint");
      SQLUtil.removeComments("selectconstraint");
      String string0 = "executeseltconstraint";
      SQLUtil.mutatesStructure("executeseltconstraint");
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4548540858431385
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.normalize(".-+A_L_*UZ!:O|6", true);
      SQLUtil.removeComments("&6ms$P-y+");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType.getInstance(3, "&6ms$P-y+");
      SQLUtil.normalize(".-+A_L_*UZ!:O|6", true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("&6ms$P-y+", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("execute");
      defaultDBTable1.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("execute");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("_~#G?{");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "--", false, (String[]) null);
      dBUniqueConstraint0.setDoc("<missing ");
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(1167, "qL");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = new Integer(5);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getCheckConstraints();
      Integer integer3 = new Integer(40);
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.LOCK_ESCALATE;
      Integer integer6 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o!,;E);pI1fzN^", defaultDBTable0, dBDataType0, integer5, integer6);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("QG &_jg^pc\"", defaultDBTable0, 5, "WITH");
      Integer.toUnsignedLong(90052);
      defaultDBColumn0.setType(dBDataType0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      int int0 = 1751;
      try { 
        simpleResultSet0.getCharacterStream(1751);
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Feature not supported: null [50100-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("SF-%u\"`jO%1[Lg!kp9", true);
      assertEquals("SF - % u \"`jO%1[Lg!kp9\"", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("select into");
      SQLUtil.mutatesDataOrStructure("select into");
      Random.setNextRandom((-387));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = SQLUtil.normalize("|yV,YO>!Kz", false);
      assertEquals("| yV, YO > ! Kz", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "SYS_PKK_";
      String string1 = null;
      DBSchema dBSchema0 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SYS_PKK_", dBSchema0);
      String[] stringArray0 = new String[7];
      defaultDBTable0.isIdentical(dBSchema0);
      boolean boolean0 = true;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYS_PKK_", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("D_svad!lY~jOR");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = SQLUtil.normalize("%&3r(-6_~{b", false);
      assertEquals("% & 3r (- 6_ ~ { b", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("oKT|@9,7* &>j8e?.7Q");
      SQLUtil.mutatesDataOrStructure("hL");
      SQLUtil.mutatesDataOrStructure("alter sessioncreate materialized view");
      SQLUtil.removeComments("into");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("into", "into", (VersionNumber) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(1073741823L);
      Random.setNextRandom(335544779);
      System.setCurrentTimeMillis(335544779);
      System.setCurrentTimeMillis((-1404L));
      String string0 = SQLUtil.removeComments("oKT|@9,7* &>j8e?.7Q");
      assertEquals("oKT|@9,7* &>j8e?.7Q", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "J .q`'D";
      TableContainer tableContainer0 = new TableContainer("setNClob(int, Reader, long)");
      DBCatalog dBCatalog0 = new DBCatalog();
      tableContainer0.getTable("setNClob(int, Reader, long)");
      int int0 = (-84);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("J .q`'D", (DBTable) null, (-84), "setNClob(int, Reader, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"int\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&BrJ:l!&;J8H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 162.9605359722;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("162.9605359722", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      System.setCurrentTimeMillis(7L);
      StringReader stringReader0 = new StringReader("&BrJ:l!&;J8H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 44;
      streamTokenizer0.nval = (double) 44;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      String string1 = SQLUtil.removeComments("'i+]J&ItdDuZrD]");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(90, "DATE");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DATE", (DBSchema) null);
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DATE", defaultDBTable0, dBDataType0, integer0, integer1);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("DATE DATE NULL", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = new Boolean("O<<TD_ZgO)_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.addReferrer((DBTable) null);
      defaultDBTable0.setOwner((CompositeDBObject<?>) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O<<TD_ZgO)_", defaultDBTable0, 2126, "");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "", true, "O<<TD_ZgO)_");
      defaultDBColumn0.isUnique();
      defaultDBColumn0.setDefaultValue("O<<TD_ZgO)_");
      defaultDBColumn0.setNotNullConstraint(dBNotNullConstraint0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("O<<TD_ZgO)_ NOT NULL", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 31;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("dWt'D");
      DBDataType dBDataType0 = DBDataType.getInstance(31, "dWt'D");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("dWt'D", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      defaultDBColumn0.setNullable(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dWt'D DWT'D(1) NULL");
      Object[] objectArray0 = new Object[5];
      defaultDBColumn0.setName("dWt'D DWT'D(1) NULL");
      objectArray0[3] = (Object) "dWt'D DWT'D(1) NULL";
      Object object0 = new Object();
      objectArray0[0] = (Object) integer0;
      objectArray0[4] = (Object) nameSpec0;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("dWt'D DWT'D(1) NULL");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&BrJ:l!&;J8H");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-103.231833393);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 103.231833393", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("U)TV");
      Integer integer0 = RawTransaction.ABORT;
      Integer.toUnsignedString(34);
      String[] stringArray0 = new String[11];
      stringArray0[0] = "prepareThreshold";
      Character character0 = new Character('E');
      String string0 = SQLUtil.normalize(".%IN_`+&'qz", false);
      assertEquals(".% IN_ ` + & 'qz'", string0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Random.setNextRandom(336723983);
      System.setCurrentTimeMillis(336723983);
      SQLUtil.removeComments("@SZ0kxiCYpB.(");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("U)TV DWT'D(1) NULL");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte) (-39);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte) (-4);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-109);
      byteArray0[6] = (byte)90;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string1 = SQLUtil.normalize("EH`,46xB<S8d9nb", false);
      assertEquals("EH `, 46xB < S8d9nb", string1);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string2 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string2);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.setPrimaryKey((DBPrimaryKeyConstraint) null);
      SQLUtil.normalize("\"hi`", false);
      SQLUtil.normalize("\"hi`\"", false);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(3, "7&");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}^|_LBdAN.p$G?", defaultDBTable0, dBDataType0, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("7&", defaultDBTable0, dBDataType0, integer1, integer1);
      defaultDBColumn1.setNullable(false);
      defaultDBColumn1.getForeignKeyConstraint();
      defaultDBTable0.removeForeignKeyConstraint((DBForeignKeyConstraint) null);
      MockFileWriter mockFileWriter0 = new MockFileWriter("}^|_LBdAN.p$G?");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("6ms$P6-fy+");
      MockFileWriter mockFileWriter1 = new MockFileWriter("'");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("}^|_LBdAN.p$G?");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Random.setNextRandom(3);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      Random.setNextRandom(3);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = SQLUtil.normalize("E--~!8?Y6<2E?!JoV?", false);
      assertEquals("E -- ~ ! 8 ? Y6 < 2E ? ! JoV ?", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XCL26.S");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("XCL26.S", true, defaultDBTable0, "zU");
      mockPrintWriter0.print((Object) dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }
}
