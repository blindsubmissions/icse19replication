/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 07:49:22 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("0");
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4741083800990982
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject.quote(",\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\",\n\"");
      jSONObject0.optInt(",\n");
      try { 
        jSONObject0.getBoolean("!*6k.~Q@dKlI7n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!*6k.~Q@dKlI7n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "-\\q\"'>/4n)ZiVNrTL";
      try { 
        jSONObject0.getJSONArray("-q\"'>/4n)ZiVNrTL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-q\\\"'>/4n)ZiVNrTL\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray(" ReY~-9`#");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Short.toUnsignedLong((short) (-26));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (long) 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "false";
      jSONObject0.remove("false");
      int int0 = 101;
      StringWriter stringWriter0 = new StringWriter();
      long long0 = (-2069L);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "false", 101, 2816);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "k^.3";
      jSONObject0.optString("k^.3");
      String string1 = "JqX .nn#u#ma*xN4/";
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject.quote("$gh8 ");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"$gh8 \"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean("$gh8 ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$gh8 \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2677660408775657
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject.quote("f,\n");
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("f,\n", double0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("f,\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of f,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSONObject.quote("L%h8W 9z+of[");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\"L%h8W 9z+of[\"";
      JSONObject jSONObject0 = new JSONObject("\"L%h8W 9z+of[\"", stringArray0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(432);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "\"L%h8W 9z+of[\"", 13, 432);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 1.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.quote(":uKqa2;/&U>");
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3545061457128476
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject.quote("f,\n");
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer((-543));
      jSONObject0.append("HJVKO@vg+mIZ6FP", integer0);
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("0,R$EB|p*6`");
      assertEquals("\"0,R$EB|p*6`\"", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1678);
      hashMap0.put(integer0, (JSONArray) null);
      try { 
        jSONObject0.put((String) null, 1678);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(1190);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Short@00000000010", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject.quote("f,\n");
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = null;
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject.quote("f,\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("f,\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of f,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("D$vAadXbL[");
      JSONTokener jSONTokener0 = new JSONTokener("D$vAadXbL[");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.450805020083924
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("4lc@?NF/d/8=C", true);
      try { 
        jSONObject0.getBoolean("=gIR(b#z`H1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=gIR(b#z`H1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(10);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "null");
      jSONArray0.write(stringWriter1);
      String string1 = JSONObject.valueToString(jSONArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONTokener jSONTokener0 = new JSONTokener("");
      assertFalse(jSONTokener0.more());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2037078324366666
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject.quote(":uKqa2;/&U>");
      JSONObject.valueToString("ava.lang.Short@0000000001.");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\":uKqa2;/&U>\"";
      JSONObject jSONObject0 = new JSONObject("ava.lang.Short@0000000001.", stringArray0);
      try { 
        jSONObject0.getString("=eAoyb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=eAoyb\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject.quote("h_u9'$ NXTY+P&");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"\\h_u9'$ NXTY+P&\"");
      jSONObject0.write(stringWriter1);
      assertEquals("\"\\h_u9'$ NXTY+P&\"{}", stringWriter1.toString());
      assertEquals("\"\\h_u9'$ NXTY+P&\"{}", stringWriter0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = JSONObject.quote(":uKqa2;/&U>");
      Short short0 = new Short((short) (-1427));
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject.quote("f,\n");
      Float float0 = new Float(0.0);
      Float.sum((-263.17416F), (-263.17416F));
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optBoolean("f,\n");
      try { 
        jSONObject0.getBoolean("\"f,\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"f,\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject.quote("f\n");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "f\n";
      stringArray0[1] = "f\n";
      stringArray0[2] = "f\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = (-2696L);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.301273572363032
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = JSONObject.quote("D[KNk1!@/[?RO");
      assertEquals("\"D[KNk1!@/[?RO\"", string0);
      
      Short short0 = new Short((short)8);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "D[KNk1!@/[?RO";
      stringArray0[1] = "\"D[K\\Nk1!@/[?RO\"";
      stringArray0[2] = "tr";
      stringArray0[3] = "D[KNk1!@/[?RO";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      long long0 = jSONObject0.optLong("wheel.json.JSONArray");
      assertEquals(0L, long0);
      
      String string1 = jSONObject0.toString(34, (-1));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      Short short0 = new Short((short)306);
      hashMap0.put((Double) null, short0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.501487758564885
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "toH";
      JSONObject jSONObject1 = jSONObject0.accumulate("f\"8S>--W", "toH");
      try { 
        jSONObject1.getBoolean("f\"8S>--W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f\\\"8S>--W\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5171534199663776
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject.quote("f,\n");
      JSONObject jSONObject0 = new JSONObject((Object) "f,\n");
      jSONObject0.put("\"f,\n\"", (double) (short) (-2921));
      try { 
        jSONObject0.getBoolean("\"f,\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"f,\\n\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = null;
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7269369375735457
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "dfFWC";
      JSONObject jSONObject1 = jSONObject0.accumulate("dfFWC", "dfFWC");
      try { 
        jSONObject1.getLong("dfFWC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dfFWC\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7269369375735457
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "dfFWC";
      JSONObject jSONObject1 = jSONObject0.accumulate("dfFWC", "dfFWC");
      jSONObject1.put("ER45wB/<e}J", 2);
      try { 
        jSONObject1.getDouble("dfFWC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dfFWC\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3545061457128476
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = JSONObject.quote("f,\n");
      assertEquals("\"f,\\n\"", string0);
      
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
      
      String string1 = JSONObject.quote((String) null);
      assertEquals("\"\"", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject.quote("`7Yd|cl54I7\"#B`8A");
      JSONObject jSONObject0 = new JSONObject((Object) "`7Yd|cl54I7\"#B`8A");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject0.put("\"`7Yd|cl54I7\"#B`8A\"", (Collection) linkedList0);
      jSONObject0.append("\"`7Yd|cl54I7\"#B`8A\"", linkedList0);
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "f\"8S>--W";
      JSONObject jSONObject1 = jSONObject0.accumulate("f\"8S>--W", "f\"8S>--W");
      try { 
        jSONObject1.append("f\"8S>--W", "f\"8S>--W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[f\"8S>--W] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = JSONObject.quote("f,\n");
      assertEquals("\"f,\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-303), (-303));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 704, 704);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "KfzWQ";
      jSONObject0.accumulate("KfzWQ", "KfzWQ");
      JSONObject jSONObject1 = jSONObject0.accumulate("KfzWQ", "KfzWQ");
      try { 
        jSONObject1.getBoolean("KfzWQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"KfzWQ\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.588328803039602
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)48);
      jSONObject0.append("f\"8S>C-W", byte0);
      String string0 = "toH";
      JSONObject jSONObject1 = jSONObject0.accumulate("f\"8S>C-W", "toH");
      try { 
        jSONObject1.getBoolean("f\"8S>C-W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f\\\"8S>C-W\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject(stringArray0[3]);
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5171534199663772
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = JSONObject.quote("f,\n");
      assertEquals("\"f,\\n\"", string0);
      
      Double double0 = new Double((-1.0));
      Double.isFinite((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Integer integer0 = new Integer(589);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      String string0 = "{_)Bex#RHVxusly";
      JSONTokener jSONTokener0 = new JSONTokener("{_)Bex#RHVxusly");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {_)Bex#RHVxusly
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4845152605020275
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "java.lang.Short@0000000001.";
      stringArray0[1] = "java.lang.Short@0000000001.";
      JSONObject jSONObject0 = new JSONObject("java.lang.Short@0000000001.", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Short@0000000001.", "java.lang.Short@0000000001.");
      Boolean boolean0 = new Boolean("java.lang.Short@0000000001.");
      jSONObject1.put("java.lang.Short@0000000001.", (Object) boolean0);
      try { 
        jSONObject1.getBoolean(":uKqa2;/&U>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":uKqa2;/&U>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("f\"8S>--W", "tot");
      try { 
        jSONObject1.getInt("f\"8S>--W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f\\\"8S>--W\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = JSONObject.quote("f,\n");
      assertEquals("\"f,\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0, 97, 97);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      String string0 = JSONObject.valueToString(linkedList0, 92, 92);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Double, Short> hashMap0 = new HashMap<Double, Short>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.listIterator();
      JSONObject jSONObject1 = jSONObject0.put("qQj `s6pmy}R1@>~R", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("qQj `s6pmy}R1@>~R");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 117, 117);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\t", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("\t");
      assertNotSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("dfnpb", "dfnpb");
      try { 
        jSONObject1.getJSONArray("dfnpb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dfnpb\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = JSONObject.quote("81Zucc:+k6t/b*");
      assertEquals("\"81Zucc:+k6t/b*\"", string0);
      
      Integer integer0 = new Integer((-1937));
      JSONObject.valueToString(integer0);
      String string1 = JSONObject.quote("islowestOneBit");
      assertEquals("\"islowestOneBit\"", string1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5732719802578201
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject.quote("f,\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\"f,\n\"");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(92);
      Writer writer0 = jSONObject0.write(stringWriter0);
      Writer writer1 = jSONArray0.write(writer0);
      jSONObject0.write(writer1);
      try { 
        jSONObject0.getBoolean("faM<e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"faM<e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Float float0 = new Float((-3424.552F));
      JSONObject.getNames((Object) null);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[2] = "81Zucc:+k%t/b*7";
      JSONObject.quote("81Zucc:+k%t/b*7");
      JSONTokener jSONTokener0 = new JSONTokener("81Zucc:+k%t/b*7");
      Byte byte0 = new Byte((byte) (-32));
      JSONObject.numberToString(byte0);
      Byte byte1 = new Byte((byte)2);
      JSONObject.testValidity(byte1);
      assertFalse(byte1.equals((Object)byte0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = JSONObject.quote("f,\n");
      Byte byte0 = new Byte((byte) (-16));
      String string1 = JSONObject.valueToString(byte0, (byte) (-16), (byte) (-16));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6935851881355024
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject1 = jSONObject0.put("\t", (Map) hashMap0);
      jSONObject1.put("\t", 10L);
      Long long0 = new Long((-2979L));
      jSONObject0.optLong("\t", (-2979L));
      try { 
        jSONObject0.getJSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "dfFWC";
      JSONObject jSONObject1 = jSONObject0.accumulate("dfFWC", "dfFWC");
      try { 
        jSONObject1.getJSONObject("dfFWC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dfFWC\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.9910941512903642
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "dfnWJ";
      JSONObject jSONObject1 = jSONObject0.accumulate("dfnWJ", "dfnWJ");
      JSONObject jSONObject2 = jSONObject1.putOpt("to", "dfnWJ");
      jSONObject2.toString();
      jSONObject1.put("ER45wB/<e}J", 2);
      Integer integer0 = new Integer(2);
      try { 
        jSONObject0.getBoolean("dfnWJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dfnWJ\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = JSONObject.quote("h_u9'$ NXTY+P&");
      assertEquals("\"h_u9'$ NXTY+P&\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "h_u9'$ NXTY+P&");
      jSONObject0.toString(61, 69);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      Long long0 = new Long(415L);
      linkedList0.add(long0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      String string0 = JSONObject.quote("T@T<S=.k0rJ");
      jSONObject0.toString((-2423), (-290));
      Long long1 = new Long((-290));
      String string1 = JSONObject.numberToString(long1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put(" ReY~-;9`#", (Collection) linkedList0);
      jSONObject0.optJSONArray(" ReY~-;9`#");
      try { 
        jSONObject0.getInt("quo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"quo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(8.0F);
      jSONObject0.append("\t", float0);
      Float.min(0.0F, 0.0F);
      jSONObject0.accumulate("false", float0);
      jSONObject0.isNull("false");
      StringWriter stringWriter0 = new StringWriter(8);
      jSONObject0.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(8.0F);
      Float.min((-527.129F), (-527.129F));
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(true);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("false", float0);
      jSONObject1.optDouble("false", (double) (-527.129F));
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = JSONObject.quote("f,\n");
      assertEquals("\"f,\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      String string1 = JSONObject.valueToString(object0, 1554, 1554);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("isnotifyAll", 0L);
      jSONObject0.optString("isnotifyAll", "I;]i'R_UmM");
      String string0 = JSONObject.quote("k");
      assertEquals("\"k\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      String string0 = JSONObject.valueToString(hashMap0, 0, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("false", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.accumulate("f\"8S>--W", boolean0);
      jSONObject0.getBoolean("f\"8S>--W");
      JSONObject.testValidity("f\"8S>--W");
      long long0 = 0L;
      Long long1 = new Long(0L);
      // Undeclared exception!
      try { 
        Long.remainderUnsigned(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(8.0F);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.accumulate("false", float0);
      int int0 = jSONObject0.getInt("false");
      assertEquals(8, int0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      hashMap1.entrySet();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("@", (-11L));
      jSONObject2.getDouble("@");
      Double double0 = new Double((-1.0));
      Long long0 = new Long((-11L));
      assertEquals((-11L), (long)long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Object object0 = new Object();
      String string0 = JSONObject.quote("owz>w</nnDU");
      assertEquals("\"owz>w<\\/nnDU\"", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      jSONObject0.put("get", (Map) hashMap0);
      jSONObject0.optInt((String) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Double double0 = new Double((-6));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("1", object0);
      jSONObject1.isNull("1");
      JSONTokener jSONTokener0 = new JSONTokener("1");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.keys();
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      Integer integer0 = new Integer(127);
      Integer.compare(127, 127);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.put("@E1J(", (Map) hashMap0);
      JSONObject.testValidity((Object) null);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("@E1J(");
      jSONObject2.optJSONObject("@E1J(");
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(147.634338);
      assertEquals("147.634338", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-14530045));
      assertEquals("-1.4530045E7", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Integer integer0 = new Integer(28);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.SONTokener", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("wheel.json.SONTokener");
      assertTrue(boolean1);
      
      JSONObject.testValidity(boolean0);
      Short short0 = new Short((short)53);
      String string0 = JSONObject.quote("sh");
      assertEquals("\"sh\"", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9676644723719467
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Byte.compare((byte)52, (byte) (-58));
      jSONObject0.toString(22, (int) (byte)52);
      assertEquals(2, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      JSONObject jSONObject2 = new JSONObject("{\n                                                                          \"java.lang.String@0000000003\": \"java.lang.Class@0000000004\",\n                                                                          \"java.lang.String@0000000005\": java.lang.Boolean@0000000006\n                                                    }");
      assertEquals(2, jSONObject2.length());
      
      Byte byte0 = new Byte((byte)33);
      JSONObject.testValidity(byte0);
      jSONArray0.optJSONObject((byte)52);
      jSONObject1.toString(110, (int) (byte)33);
      assertEquals(1, jSONObject1.length());
      
      JSONObject.quote("{\"java.lang.String@0000000012\": \"java.lang.Class@0000000013\"}");
      String string0 = JSONObject.quote("opt");
      assertEquals("\"opt\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{-l=#qSwGOe");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 12 of {-l=#qSwGOe
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{-lT=GqSmZ}e");
      jSONTokener0.nextValue();
      Float float0 = new Float(1.0F);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.testValidity(jSONArray0);
      JSONObject.testValidity("{-lT=GqSmZ}e");
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("true", "true");
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
      
      String string0 = JSONObject.quote("true");
      assertEquals("\"true\"", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("B:z%0/gefws#2Zdd<", 1321L);
      Double double0 = new Double(1321L);
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      assertNotNull(stringArray0);
      
      HashMap<Short, Byte> hashMap0 = new HashMap<Short, Byte>();
      jSONObject0.put("B:z%0/gefws#2Zdd<", (Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.toString(5, (-465));
      Float float0 = new Float(1.0);
      JSONObject jSONObject2 = new JSONObject(float0, stringArray0);
      jSONObject2.put("gettoString", (Object) "{}");
      assertEquals(9, jSONObject2.length());
  }
}
