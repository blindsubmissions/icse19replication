/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 07:58:00 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.net.URI;
import java.sql.SQLException;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.catalog.UUID;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.jdbc.FBResultSet;
import org.h2.jdbc.JdbcSQLException;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      String[] stringArray0 = new String[0];
      Random.setNextRandom(0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.normalize("/|j@|", true);
      assertEquals("/ | j @ |", string0);
      
      String string1 = SQLUtil.normalize("nv3nm<", true);
      assertEquals("nv3nm <", string1);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("/|j@|", true);
      assertEquals("/ | j @ |", string0);
      
      String string1 = SQLUtil.normalize("nv3nm<", true);
      assertEquals("nv3nm <", string1);
      
      boolean boolean0 = SQLUtil.isDDL("org.h2.command.ddl.PrepareProcedure");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("create unique indexderby.__rt.");
      MockFile mockFile0 = new MockFile("create unique indexderby.__rt.");
      MockFile mockFile1 = new MockFile(mockFile0, "org.apache.derby.impl.sql.compile.ReplaceWindowFuncCallsWithCRVisitor");
      MockFile mockFile2 = new MockFile("create unique indexderby.__rt.");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile2, false);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, false);
      mockPrintWriter0.println('-');
      DBSchema dBSchema0 = new DBSchema("AUTHORIZATIONID");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("AUTHORIZATIONID", dBSchema0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create unique indexderby.__rt.");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("selecthv[-{m+\"bvt`gg<<,/");
      String[] stringArray0 = new String[1];
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("nV3nM<^<k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("802");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte) (-128);
      byteArray0[3] = (byte) (-53);
      byteArray0[4] = (byte)38;
      byteArray0[5] = (byte) (-29);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      SQLUtil.join((String) null, (String) null, stringArray0, (String) null, "updatenv3nm<^<k", stringArray0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBDataType.getInstance(225, ".rt]TTla=");
      Integer integer0 = RawTransaction.COMMIT;
      System.setCurrentTimeMillis(225);
      boolean boolean0 = SQLUtil.isQuery("select intonv3nm<^<k");
      boolean boolean1 = SQLUtil.isQuery(".rt]TTla=");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("RM*%Nk/%dOqDO3", "RM*%Nk/%dOqDO3", "RM*%Nk/%dOqDO3");
      String string0 = SQLUtil.typeAndName(dBSequence0);
      assertEquals("sequence RM*%Nk/%dOqDO3", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Drop ind4x";
      stringArray0[1] = "Drop ind4x";
      stringArray0[2] = "Drop ind4x";
      stringArray0[3] = "Drop ind4x";
      stringArray0[4] = "Drop ind4x";
      String string0 = "-_VPL}f~YLP";
      SQLUtil.innerJoin("Drop ind4x", stringArray0, "-_VPL}f~YLP", "Drop ind4x", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("Drop ind4x", dBCatalog0);
      int int0 = (-3199);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("Drop ind4x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("!Y ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "!Y ";
      defaultDBTable1.toString();
      stringArray0[1] = "!Y ";
      defaultDBTable1.getUniqueConstraint(stringArray0);
      Object object0 = new Object();
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = SQLUtil.substituteMarkers("C9- ?Zfl3", "MODIFIES SQL DATA", (Object) null);
      assertEquals("C9- ?Zfl3", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      boolean boolean0 = true;
      String string0 = " join ";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.apache.derby.impl.sql.execute.CreateTableConstantAction", true, "HV[-{M+\"BVT`GG<<,/", " join ");
      dBCheckConstraint0.setDoc("u");
      dBCheckConstraint0.toString();
      SQLUtil.constraintName(dBCheckConstraint0);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[4] = "a)x9~r)#!";
      stringArray0[3] = "a)x9~r)#!";
      stringArray0[7] = "a)x9~r)#!";
      String string0 = SQLUtil.renderColumnListWithTableName("a)x9~r)#!", stringArray0);
      assertEquals("a)x9~r)#!.null, a)x9~r)#!.null, a)x9~r)#!.null, a)x9~r)#!.a)x9~r)#!, a)x9~r)#!.a)x9~r)#!, a)x9~r)#!.null, a)x9~r)#!.null, a)x9~r)#!.a)x9~r)#!, a)x9~r)#!.null", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Am]T]SC8Dz2,";
      stringArray0[1] = "Am]T]SC8Dz2,";
      SQLUtil.leftJoin("Am]T]SC8Dz2,", stringArray0, "Am]T]SC8Dz2,", "[Yxj", stringArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[9];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVARArray0[0] = xSQLVAR1;
      XSQLVAR xSQLVAR2 = xSQLVAR0.deepCopy();
      xSQLVARArray0[1] = xSQLVAR2;
      XSQLVAR xSQLVAR3 = xSQLVAR0.deepCopy();
      xSQLVARArray0[2] = xSQLVAR3;
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      xSQLVARArray0[3] = xSQLVAR4;
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      xSQLVARArray0[4] = xSQLVAR5;
      XSQLVAR xSQLVAR6 = xSQLVAR1.deepCopy();
      xSQLVARArray0[5] = xSQLVAR6;
      XSQLVAR xSQLVAR7 = new XSQLVAR();
      xSQLVARArray0[6] = xSQLVAR7;
      XSQLVAR xSQLVAR8 = new XSQLVAR();
      xSQLVARArray0[7] = xSQLVAR8;
      XSQLVAR xSQLVAR9 = new XSQLVAR();
      xSQLVARArray0[8] = xSQLVAR9;
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(40);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      SQLUtil.addRequiredCondition("I$g)4m\rY*}V::;KM'", stringBuilder2);
      stringBuilder2.reverse();
      ErrorMessages errorMessages0 = new ErrorMessages();
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("U(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: U(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("bLL SOP.IDENTITY()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = ".";
      MockFile mockFile0 = new MockFile("m");
      mockFile0.toPath();
      MockFile mockFile1 = new MockFile(mockFile0, "~[n8).@#x}TRl.V");
      MockFile mockFile2 = new MockFile(".");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile2, false);
      DBSchema dBSchema0 = new DBSchema("m");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) genericDescriptorList0, (Collection<String>) genericDescriptorList0, locale_FilteringMode0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop index", false, " join ", "executeaut");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(32);
      StringBuilder stringBuilder2 = stringBuilder1.append(923.41F);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder2);
      int int0 = (-1377);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1377), ']');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[5];
      String string0 = "W";
      stringArray0[0] = "";
      stringArray1[4] = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray1[3]);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      int int0 = 1;
      // Undeclared exception!
      try { 
        DBDataType.getInstance(1, stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("W!D8&T``/+", false);
      assertEquals("W ! D8 & T ` ` / +", string0);
      
      CompositeDBObject<DBCheckConstraint> compositeDBObject0 = (CompositeDBObject<DBCheckConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("W!D8&T``/+", compositeDBObject0);
      tableContainer0.getTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(218, "W!D8&T``/+");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("W ! D8 & T ` ` / +", (DBTable) null, dBDataType0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("W ! D8 & T ` ` / + W!D8&T``/+ NULL", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("W!.T/+", true);
      assertEquals("W !.T / +", string0);
      
      Boolean boolean0 = new Boolean(true);
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBDataType dBDataType0 = DBDataType.getInstance(44, "/UJ8*)AUP7");
      DBDataType.getInstance(44, "/UJ8*)AUP7");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/UJ8*)AUP7", defaultDBTable0, dBDataType0, integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("/UJ8*)AUP7 /UJ8*)AUP7(2) NULL", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2486647389332928
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-709L));
      SQLUtil.removeComments("execute");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("deletew !.t / +", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/*");
      defaultDBTable0.setDoc("deletew !.t / +");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "*Rselect into", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.parseColumnTypeAndSize("execute");
      String string0 = SQLUtil.removeComments(":l+@,%l]");
      assertEquals(":l+@,%l]", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("op_get_segment ", (DBCatalog) null);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("op_get_segment ", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ")");
      SQLUtil.addOptionalCondition(")", stringBuilder0);
      System.setCurrentTimeMillis((-4L));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("drop index'2t&", dBCatalog0);
      String string0 = SQLUtil.ownerDotComponent(dBSchema0);
      assertEquals("null.drop index'2t&", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = SQLUtil.normalize(" w=@8-\"6sy:K", true);
      assertEquals("w = @ 8 - \"6sy:K\"", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition(")", stringBuilder0);
      assertEquals(")", stringBuilder0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.normalize("7C}Y`qfxfm~7N0G'M", false);
      assertEquals("7C } Y ` qfxfm ~ 7N0G 'M'", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SQLUtil.normalize("59-<i(A", false);
      assertEquals("59 - < i (A", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 225;
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ov~n2w\"pho7!y;%E", (DBTable) null, 225, "ov~n2w\"pho7!y;%E");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType.getInstance(225, "~2}Q)8");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ov~n2w\"pho7!y;%E", (DBTable) null, (DBDataType) null);
      DBDataType.getInstance(225, "TtgnB23_");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("B'?H[wm!z", (DBTable) null, 225, "call");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("TtgnB23_", (DBTable) null, 225, "B'?H[wm!z");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn3;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.removeComments(".");
      DBSchema dBSchema0 = new DBSchema("renamev.b;hwkr022hso");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".", defaultDBTable0, (-2486), ".");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("executev.b;hwkr022hso", ".", "executev.b;hwkr022hso");
      jdbcConnectionPool0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1361119236642543
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("W!.T/+", true);
      assertEquals("W !.T / +", string0);
      
      Boolean boolean0 = new Boolean(true);
      ErrorMessages errorMessages0 = new ErrorMessages();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "W !.T / +";
      stringArray0[2] = "-d>M]";
      stringArray0[3] = "-d>M]";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-d>M]", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT -d>M] FOREIGN KEY (, W !.T / +, -d>M], -d>M]) REFERENCES null(, W !.T / +, -d>M], -d>M])", string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType.getInstance((-4099), "W !.T / +");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer((-4099));
      Integer.getInteger("-d>M]", integer1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      SQLUtil.removeComments("alter table-d>m]");
      SQLUtil.removeComments("i%F+xBqf\"Ev,@E");
      String string2 = SQLUtil.normalize("alter table-d>m]", true);
      assertEquals("alter table - d > m ]", string2);
      
      String string3 = SQLUtil.normalize("i%F+xBqf\"Ev,@E", false);
      assertEquals("i % F + xBqf \"Ev,@E\"", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.normalize("W!.T/+", true);
      String string0 = "create materialized view";
      jdbcClob jdbcClob0 = new jdbcClob("create materialized view");
      Reader reader0 = jdbcClob0.getCharacterStream();
      reader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("I$g)4m\rY*}V::;KM'", stringBuilder0);
      stringBuilder0.reverse();
      ErrorMessages errorMessages0 = new ErrorMessages();
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("iE~67T*,JB2B", false);
      assertEquals("iE ~ 67T *, JB2B", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1769342230909907
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("execute");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(0L);
      SQLUtil.removeComments("execute");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = SQLUtil.normalize("deletew !.t / +", true);
      assertEquals("deletew !.t / +", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.setDoc("*Rselect into");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "wJbhT)`VEMt2z3+me,7", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT wJbhT)`VEMt2z3+me,7 PRIMARY KEY ()", string1);
      
      SQLUtil.parseColumnTypeAndSize("nXw");
      String string2 = SQLUtil.normalize("execute", false);
      assertEquals("execute", string2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      DataStore dataStore0 = new DataStore((String) null);
      VirtualFile virtualFile0 = new VirtualFile(" WHERE ", dataStore0);
      OutputStream outputStream0 = virtualFile0.getOutputStream(true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      mockPrintWriter0.append((CharSequence) null);
      virtualFile0.isDirectory();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" WHERE ", false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBDataType.getInstance((-510), "g79");
      System.setCurrentTimeMillis((-1884L));
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("blobBufferSize");
      // Undeclared exception!
      try { 
        defaultDBTable1.getUniqueConstraint("9aovw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execut");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.equals("execut");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execut", defaultDBTable0, 773, "execut");
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBDataType dBDataType0 = DBDataType.getInstance((-322), "NCLOB");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("ZW>$E0rbHi7lf)}", false);
      assertEquals("ZW > $ E0rbHi7lf) }", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis(543);
      Character character0 = Character.valueOf('m');
      SQLUtil.renderValue(character0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("AUTHORIZATIONID");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("eect", true, (String) null, "eect");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("eect");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, true);
      assertFalse(mockPrintWriter2.equals((Object)mockPrintWriter0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("/z06", false, "/z06", "syU");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("deleteexecute");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.impl.sql.execute.CreateTableConstantAction");
      DBCatalog dBCatalog0 = new DBCatalog("w*");
      DBSchema dBSchema0 = new DBSchema("800-.D", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("w*", dBSchema0);
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "7)da", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE ()", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6145237390882279
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("W!.T/+", true);
      assertEquals("W !.T / +", string0);
      
      Boolean boolean0 = new Boolean(true);
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBDataType dBDataType0 = DBDataType.getInstance(44, "/UJ8*)AUP7");
      DBDataType.getInstance(44, "/UJ8*)AUP7");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/UJ8*)AUP7", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.ABORT;
      defaultDBColumn0.setFractionDigits(integer1);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("/UJ8*)AUP7 /UJ8*)AUP7(2,1) NULL", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBDataType.getInstance(90015, " = ");
      boolean boolean0 = SQLUtil.isDML("select into");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile("7_k$3IHB4vW\"^/``L");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncatenv3nm<^<k");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      MockFile mockFile0 = new MockFile("table null", "A^^");
      FileUtil.canonicalFile((File) mockFile0);
      DBSchema dBSchema0 = new DBSchema("AUTHORIZATIONID");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("table null", defaultDBTable0, 543, "AUTHORIZATIONID");
      defaultDBColumn0.setVersionColumn(false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "AUTHORIZATIONID", true, "table null");
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      try { 
        simpleResultSet0.getCharacterStream(90037);
        fail("Expecting exception: JdbcSQLException");
      
      } catch(JdbcSQLException e) {
         //
         // Feature not supported: null [50100-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" WHERE ", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(302, " WHERE ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" WHERE ", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setVersionColumn(false);
      Integer integer0 = new Integer((-5372));
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("delete", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBTable0.addColumn(defaultDBColumn1);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" WHERE ");
      mockFileOutputStream0.flush();
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = MockFile.createTempFile("delete", "Xgfy~R+:uTE'#p(MXX");
      File file1 = FileUtil.canonicalFile(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file1);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) " WHERE ");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "dop ndexexecuteauthorizationid";
      boolean boolean0 = true;
      String[] stringArray0 = new String[3];
      stringArray0[2] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("dop ndexexecuteauthorizationid");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      jdbcClob jdbcClob0 = null;
      try {
        jdbcClob0 = new jdbcClob(stringArray0[2]);
        fail("Expecting exception: SQLException");
      
      } catch(Throwable e) {
         //
         // java.lang.String@0000000011
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.8924960391130321
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      String string0 = SQLUtil.normalize("7l&*!qPzK;a8qr -", true);
      assertEquals("7l & * ! qPzK ; a8qr -", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-3064), ")");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("\"gPapysN6Nh$$~|MQ");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("null )(0) DEFAULT \"gPapysN6Nh$$~|MQ NULL", string1);
      
      String string2 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string2);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 167.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("167", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(8);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dynamicByteArrayOutputStream1);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ghCgL");
      String[] stringArray0 = new String[14];
      stringArray0[0] = "ghCgL";
      stringArray0[1] = "update";
      stringArray0[3] = "select";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(76, dynamicByteArrayOutputStream1.getUsed());
      assertEquals(76, dynamicByteArrayOutputStream1.getPosition());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("execute");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "alter materialized viewselect 1 from pg_catalog.pg_attrdef where adrelid = ? and adnum = ? and pg_catalog.pg_get_expr(adbin, adrelid) like '%nextval(%'";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter materialized viewselect 1 from pg_catalog.pg_attrdef where adrelid = ? and adnum = ? and pg_catalog.pg_get_expr(adbin, adrelid) like '%nextval(%'");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"adbin\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("alter sessionselect intow*");
      ErrorMessages errorMessages0 = new ErrorMessages();
      String string0 = "create unique indexwd4f\\[fpfj[1b k2_f";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("create unique indexwd4f[fpfj[1b k2_f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, "s8_UbKvh`>", "insert");
      dBCheckConstraint0.toString();
      SQLUtil.constraintName(dBCheckConstraint0);
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2053, ") re");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType0, integer0, integer0);
      linkedList0.addFirst(defaultDBColumn0);
      DBDataType dBDataType1 = DBDataType.getInstance(2053, "exec");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType1, integer1, integer1);
      defaultDBColumn1.setSize(integer1);
      linkedList0.add((DBColumn) defaultDBColumn1);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("exec, exec", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2053, " DEFAULT ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" DEFAULT ", defaultDBTable0, dBDataType0, integer0, integer0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[5] = " DEFAULT ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " DEFAULT ");
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder1 = stringBuilder0.append(charArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1);
      assertEquals(" DEFAULT ", stringBuilder1.toString());
      assertEquals(" DEFAULT ", stringBuilder0.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = SQLUtil.normalize("OUyXS*/O#", true);
      assertEquals("OUyXS */ O #", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = stringArray0[2];
      stringArray0[4] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBUniqueConstraint0.toString();
      SQLUtil.typeAndName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.32450838693107065
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("execute");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("execute");
      stringReader0.reset();
      stringReader0.ready();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("truncate=", 127);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      streamTokenizer0.nval = (-707.2243807448307);
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      SQLUtil.normalize("- 707.2243807448307", false);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-107403091), " NOT NULL");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("mozilla", defaultDBTable0, dBDataType0, integer1);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setFractionDigits(integer2);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      System.setCurrentTimeMillis(1000000000L);
      SQLUtil.normalize("mozilla  NOT NULL(1,3) NOT NULL", false);
      System.setCurrentTimeMillis(1000000000L);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLUtil.normalize(" /*--hide--*/", false);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = "execute";
      jdbcClob jdbcClob0 = new jdbcClob("execute");
      jdbcClob jdbcClob1 = new jdbcClob("execute");
      Reader reader0 = jdbcClob1.getCharacterStream();
      String string1 = "z[xp'*PY?v2";
      StringReader stringReader0 = new StringReader("z[xp'*PY?v2");
      stringReader0.ready();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = 4234.3;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.renderNumber(streamTokenizer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        jdbcClob1.getSubString(10000L, (-4));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000005
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.removeComments(" /*--hide--*/");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("gt4@cULtNJe0i8mB");
      defaultDBTable0.setDoc("*Rselect into");
      Random.setNextRandom((-2585));
  }
}
