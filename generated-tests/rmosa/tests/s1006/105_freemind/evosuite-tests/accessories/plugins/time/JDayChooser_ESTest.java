/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:00:49 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.Controller;
import freemind.main.FreeMindApplet;
import freemind.main.FreeMindMain;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelListener;
import java.awt.font.FontRenderContext;
import java.sql.Time;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JDialog;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.border.EtchedBorder;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicPanelUI;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFICCStream;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemExsltFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentPopupMenu();
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      jDayChooser0.setYear(11);
      jDayChooser0.getMouseListeners();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Color color0 = null;
      try {
        color0 = new Color(1405, 11, 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Color parameter outside of expected range: Red
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AWTKeyStroke aWTKeyStroke0 = AWTKeyStroke.getAWTKeyStroke(1334, 20, true);
      ActionEvent actionEvent0 = new ActionEvent(aWTKeyStroke0, 1334, "Tile grid visible", 1334, 47);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.KeyStroke cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((-1216));
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      Color color0 = Color.blue;
      jDayChooser0.setWeekdayForeground(color0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay((-1216));
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getFocusListeners();
      jDayChooser0.getDecorationBackgroundColor();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      Locale.lookupTag(rootGraphicsNode0, rootGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((-1216));
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDay(390);
      jDayChooser0.setDay((-1216));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(3);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((-1216));
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(8944);
      jDayChooser0.setDay((-1216));
      jDayChooser0.setMaxDayCharacters(13);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 0, 'p', 0);
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.737604723385756
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser1.getClientProperty(mockGregorianCalendar0);
      Locale locale1 = jDayChooser1.getLocale();
      locale0.getDisplayLanguage(locale1);
      Locale.lookupTag(rootGraphicsNode0, rootGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((-1216));
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.801064484785414
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setDay((-2215));
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.defaultMinSelectableDate = date0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2215), 17, 17, (-2615), 'n');
      InputEvent.getMaskForButton(15);
      KeyEvent.getKeyModifiersText((-2615));
      KeyEvent.getKeyText(15);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setEnabled(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      jDayChooser0.focusLost((FocusEvent) null);
      jDayChooser0.focusLost((FocusEvent) null);
      Date date0 = jDayChooser0.maxSelectableDate;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.apache.crimson.tree.DataNode$NodeListImpl", 63729);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Button button0 = null;
      try {
        button0 = new Button("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          JDayChooser jDayChooser0 = new JDayChooser(false);
          Locale locale0 = Locale.SIMPLIFIED_CHINESE;
          JPanel jPanel0 = jDayChooser0.getDayPanel();
          jDayChooser0.dayPanel = jPanel0;
          JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, true, false, true);
          jDayChooser0.setDayBordersVisible(true);
          int int0 = 8944;
          Controller controller0 = null;
          try {
            controller0 = new Controller((FreeMindMain) null);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("freemind.controller.Controller", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getMinSelectableDate();
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("+jDd>kkF<LA?Pt<9d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: +jDd>kkF<LA?Pt<9d
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setDebugGraphicsOptions((-1119));
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      Locale locale0 = new Locale("year", "year");
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, (-1119), (-1119), (-224), 0, 'd');
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7705815447061317
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getMaximumSize();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Locale locale0 = Locale.forLanguageTag("G b2L");
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("G b2L", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'b'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDayBordersVisible();
      JYearChooser jYearChooser0 = new JYearChooser();
      Object object0 = jDayChooser0.getTreeLock();
      int int0 = 210;
      ActionEvent actionEvent0 = new ActionEvent(object0, 210, "day", (-1761));
      actionEvent0.paramString();
      jYearChooser0.actionPerformed(actionEvent0);
      jDayChooser0.setYearChooser(jYearChooser0);
      Locale locale0 = Locale.CHINA;
      Font.getFont("j0F", (Font) null);
      char[] charArray0 = new char[4];
      charArray0[0] = 'R';
      charArray0[1] = '\'';
      charArray0[2] = 'x';
      charArray0[3] = 'j';
      int int1 = 2420;
      ElemExsltFunction elemExsltFunction0 = new ElemExsltFunction();
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemExsltFunction0, imageHandlerBase64Encoder0, defaultExtensionHandler0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getFocusListeners();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      String string0 = "flowSpan";
      HsqlProperties hsqlProperties0 = new HsqlProperties("flowSpan");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockDate mockDate0 = new MockDate(304, 8, 20, 8, 8, 8);
      jDayChooser0.setDay((-128));
      MockDate mockDate1 = new MockDate((-7054L));
      jDayChooser0.setMaxSelectableDate(mockDate1);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.paintImmediately(0, (-2389), 48, (-3377));
      JDayChooser jDayChooser2 = new JDayChooser(true);
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      
      Color color0 = Color.BLUE;
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser1.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7549967255123256
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setUI((PanelUI) null);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(65406);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-994), (-496L), 40, 40, 'A');
      KeyEvent.getKeyText((-446));
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDay(42);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.706697613279902
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setUI((PanelUI) null);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(65406);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 65406, 65406, (-446), (-446), 'A');
      KeyEvent.getKeyText(65406);
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      SystemColor systemColor0 = SystemColor.text;
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      String[] stringArray0 = new String[8];
      stringArray0[5] = "Windows";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.paintImmediately((-441), (-1194), 4, 102);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(259);
      Color color0 = Color.BLUE;
      jDayChooser0.getMaxDayCharacters();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9166957252050913
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-167), (-717L), 75, (-2212), 'H');
      keyEvent0.setKeyCode(33);
      jDayChooser0.addMouseWheelListener((MouseWheelListener) null);
      jDayChooser0.setMaxDayCharacters((-1223));
      Color color0 = null;
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.drawDays();
      jDayChooser0.setEnabled(true);
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("QD");
      PDFResources pDFResources0 = new PDFResources((-2316));
      PDFICCStream pDFICCStream0 = new PDFICCStream();
      PDFICCStream pDFICCStream1 = new PDFICCStream();
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFICCStream1, (-167), (-2177));
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, fontInfo0, pDFDocument0, pDFPage0, "QD", "25", 0.0F);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7007775121776714
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775798L));
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getFocusListeners();
      HsqlProperties hsqlProperties0 = new HsqlProperties("day");
      JYearChooser jYearChooser0 = new JYearChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 1, 1, 1, 1, 'M');
      int int0 = 33;
      keyEvent0.setKeyCode(33);
      keyEvent0.setKeyChar('M');
      jDayChooser0.getDebugGraphicsOptions();
      keyEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((-1216));
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay((-1216));
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setBounds(600, 1383, 1383, 600);
      jDayChooser0.getComponentListeners();
      JButton[] jButtonArray0 = new JButton[4];
      jDayChooser0.getSelectedDay();
      jButtonArray0[0] = null;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jButtonArray0[1] = (JButton) jDayChooser_DecoratorButton0;
      JButton jButton0 = new JButton((Icon) null);
      jButtonArray0[2] = jButton0;
      JButton jButton1 = new JButton((Icon) null);
      jButtonArray0[3] = jButton1;
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      jDayChooser0.getWeekdayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1154), (-1154), (-1154), 37, 'n');
      keyEvent0.setKeyChar('I');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDebugGraphicsOptions(13);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser1.setSundayForeground(systemColor0);
      jDayChooser1.setDay((-178));
      int int0 = (-994);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, 31, 65406, (-178), 2058, 'A');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      pDFDocumentGraphics2D0.getPDFDocument();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object object0 = jDayChooser0.getTreeLock();
      jDayChooser0.putClientProperty(object0, object0);
      SystemColor systemColor0 = SystemColor.text;
      Color color0 = Color.MAGENTA;
      int int0 = 37;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(37);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(37);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      MockDate mockDate0 = new MockDate(6, 1, 28, 4, 9999, 28);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.paintImmediately(18, 6, 18, 18);
      jDayChooser0.firePropertyChange("28", '[', 'e');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockDate mockDate1 = new MockDate(28, (-1375), 18, '[', 1, (-2347));
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-2215));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2215), (-2615), (-2615), (-2615), 'n');
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PanelUI panelUI0 = jDayChooser0.getUI();
      BasicPanelUI.createUI(jDayChooser0);
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.drawDays();
      jDayChooser0.setDay(65406);
      jDayChooser0.setMonth(65406);
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(747);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(30, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getFocusListeners();
      Locale locale0 = Locale.GERMANY;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((-1216));
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.722045918974229
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PanelUI panelUI0 = jDayChooser0.getUI();
      BasicPanelUI.createUI(jDayChooser0);
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.drawDays();
      jDayChooser0.setDay(65406);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 27, (-491L), (-1389), 40, 'u');
      jDayChooser0.setActionMap((ActionMap) null);
      KeyEvent.getExtendedKeyCodeForChar((-1389));
      KeyEvent.getKeyText(40);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.firePropertyChange("WT", (byte) (-8), (byte) (-8));
      jDayChooser0.setDay(42);
      Color color0 = Color.YELLOW;
      jDayChooser0.setDecorationBackgroundColor(color0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1375, 600000L, 1375, 35, 'n');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.744912942295961
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 463, false, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setEnabled(false);
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setWeekdayForeground(systemColor0);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.updateUI();
      jDayChooser0.setDay(2);
      jDayChooser0.drawDays();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7408472649052253
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.text;
      jDayChooser0.setDay((-2215));
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 'n';
      floatArray0[1] = (float) 'n';
      floatArray0[2] = (float) 'n';
      floatArray0[3] = (float) (-2215);
      floatArray0[4] = (float) (-2215);
      floatArray0[5] = (float) (-2215);
      floatArray0[6] = (float) (-2215);
      floatArray0[7] = (float) (-2215);
      floatArray0[8] = (float) 'n';
      systemColor0.getRGBComponents(floatArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 326, 326, 432, 36, 'n');
      InputEvent.getMaskForButton(15);
      jDayChooser0.getToolTipText();
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setDay(33554432);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, (-717L), (-167), (-2212), 'H');
      keyEvent0.setKeyCode(39);
      keyEvent0.setKeyChar('G');
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      assertEquals(15, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2212), 437L, 48, 29, 'U');
      keyEvent0.setKeyCode(38);
      keyEvent0.setKeyChar('=');
      jDayChooser0.getDebugGraphicsOptions();
      keyEvent0.paramString();
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setFocus();
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775798L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getFocusListeners();
      JYearChooser jYearChooser0 = new JYearChooser();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-1623), (-1623), 40, 37, ',');
      KeyEvent.getKeyText((-1623));
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.setDay(38);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.drawDays();
      jDayChooser0.setDay(65406);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2, 0L, 34, 34, '3');
      KeyEvent.getKeyText(34);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDay(1579);
      jDayChooser0.setDayBordersVisible(true);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 238);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Color color0 = MapView.standardNodeTextColor;
      EtchedBorder etchedBorder0 = new EtchedBorder((Color) null, (Color) null);
      // Undeclared exception!
      try { 
        etchedBorder0.getBorderInsets((Component) jDayChooser0, (Insets) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.border.EtchedBorder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775798L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getBorder();
      HsqlProperties hsqlProperties0 = new HsqlProperties("day");
      JYearChooser jYearChooser0 = new JYearChooser();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay(1);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.drawDays();
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775797L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDay((-2559));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.maxDayCharacters = 7;
      jDayChooser0.init();
      System.setCurrentTimeMillis(7);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setMonth((-1216));
      jDayChooser0.drawDays();
      jDayChooser0.initialized = false;
      jDayChooser0.setDayBordersVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setDay((-1216));
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setEnabled(true);
  }
}
