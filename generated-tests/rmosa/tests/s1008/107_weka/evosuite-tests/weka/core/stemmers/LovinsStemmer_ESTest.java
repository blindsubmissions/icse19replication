/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:40:41 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9157256708722257
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ioning");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.7972251242348619
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lyl");
      lovinsStemmer0.stem(";kine");
      lovinsStemmer0.stem("QLGX?^u8I~W{gE");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8192201284420944
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("X:xZp)2n%OO?");
      assertEquals("x:xzp)2n%oo?", string0);
      
      String string1 = lovinsStemmer0.stem("HTTP");
      assertEquals("http", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0821473297170245
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("$Revision: 8034 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("izational");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("Y@");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0087420923577903
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufman publishes", string0);
      
      lovinsStemmer0.stemString("ials");
      lovinsStemmer0.stem("ial");
      String string1 = lovinsStemmer0.stem("idine");
      assertEquals("id", string1);
      
      String string2 = lovinsStemmer0.stemString("R. Quinlan");
      assertEquals("r. quinlan", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0459679501693513
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      lovinsStemmer0.stemString("a docum hav an author and titl, but not form publ.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      assertFalse(lovinsStemmer2.equals((Object)lovinsStemmer1));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9661136097374763
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("dH /DR\";N_`08n~u6");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("umet");
      String string0 = lovinsStemmer0.stem("umet");
      assertEquals("umes", string0);
      
      String string1 = lovinsStemmer0.stemString("umes");
      assertEquals("um", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9340397030227502
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("v]WOit}G");
      String string0 = lovinsStemmer0.stemString("z0qlud");
      assertEquals("z0qlus", string0);
      
      String string1 = lovinsStemmer0.stem("z0qlus");
      assertEquals("z0qlus", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9847659851312065
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("T;e year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle nny year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stemString("t;e year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl nny year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9629073985063348
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("erid");
      String string0 = lovinsStemmer0.stemString("Get position of flag -f: ");
      assertEquals("ges posit of flag -f: ", string0);
      
      String string1 = lovinsStemmer0.stemString("S.Q&:Lsq");
      assertEquals("s.q&:lsq", string1);
      
      String string2 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string2);
      
      lovinsStemmer0.stemString("ges posit of flag -f: ");
      lovinsStemmer0.stem("how someth strang ha been publ. th first word should be capital.");
      lovinsStemmer0.stem("s.q&:lsq");
      String string3 = lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capital.");
      assertEquals("how someth strang ha been publ. th first word should be capit.", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0601463059040168
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("encies");
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("encies");
      assertEquals("enci", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("enci");
      assertEquals("enc", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ities");
      assertEquals("it", string0);
      
      String string1 = lovinsStemmer0.stemString("ence");
      assertEquals("enc", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9450606744605394
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.stemString("uclud");
      lovinsStemmer0.stemString("uct");
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
      
      String string1 = lovinsStemmer0.stemString("atoN");
      assertEquals("at", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0087420923577903
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("sendrud");
      assertEquals("sendrus", string0);
      
      lovinsStemmer0.stemString("ials");
      lovinsStemmer0.stem("ial");
      String string1 = lovinsStemmer0.stemString("ials");
      assertEquals("ial", string1);
      
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
      
      String string3 = lovinsStemmer0.stemString("R. Quinlan");
      assertEquals("r. quinlan", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.2003374828144118
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("bex");
      assertEquals("bic", string0);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("o-send");
      assertEquals("o-sens", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0514129843351192
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("pZUM;&JrC6");
      assertEquals("pzum;&jrc6", string0);
      
      lovinsStemmer0.stemString("]0:d");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("lovinsstemmerax");
      assertEquals("lovinsstemmerac", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.028960921679845
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.stemString("uct");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("vas");
      assertEquals("va", string1);
      
      String string2 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string2);
      
      String string3 = lovinsStemmer0.stemString("atoN");
      assertEquals("at", string3);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9593643861646922
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("uct");
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
      
      String string1 = lovinsStemmer0.stemString("ZLSh'\"wn!o5+");
      assertEquals("zlsh'\"wn!o5+", string1);
      
      String string2 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string2);
      
      String string3 = lovinsStemmer0.stemString("atoN");
      assertEquals("at", string3);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0224378241270138
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("masontex");
      assertEquals("masontic", string0);
      
      lovinsStemmer0.stemString("uct");
      String string1 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "uc";
      stringArray0[1] = "uc";
      stringArray0[2] = "uct";
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      stringArray0[3] = "uc";
      stringArray0[4] = "uct";
      stringArray0[5] = "uct";
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stemString("uDus");
      assertEquals("udus", string3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8304527139038489
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("learnensend");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      assertFalse(lovinsStemmer2.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.064565275354252
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ful");
      lovinsStemmer0.stem("ful");
      lovinsStemmer0.stemString("uct");
      String string0 = lovinsStemmer0.stemString("03peZGdvL^");
      assertEquals("03pezgdvl^", string0);
      
      String string1 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string1);
      
      lovinsStemmer0.stemString("end");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("atoN");
      assertEquals("at", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.089131967359468
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("\"");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("mustend");
      assertEquals("mustens", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9498200741363202
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "ials";
      String string1 = "Copyright ilformation.";
      lovinsStemmer0.stemString("91reKOe1;P&nwCf");
      lovinsStemmer0.stemString("Copyright ilformation.");
      lovinsStemmer0.stem("y&ear");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.stemmers.LovinsStemmer", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1510346808504979
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("null");
      assertEquals("nl", string1);
      
      lovinsStemmer0.stem("K;F");
      String string2 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string2);
      
      lovinsStemmer0.stem("#gDE=LmaYF\"a");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0001106169801668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stem("lid");
      assertEquals("lis", string0);
      
      String string1 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0106230040762023
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("piclux");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("fatal error.pex");
      assertEquals("fat error.pic", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("cgfauad");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      assertFalse(lovinsStemmer2.equals((Object)lovinsStemmer1));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("howpublmit");
      assertEquals("howpublmis", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0223781161464438
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[1] = "us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.";
      stringArray0[2] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String string2 = lovinsStemmer0.stemString("}qk{r8hpum?z_Ce#1d[");
      assertEquals("}qk{r8hpum?z_ce#1d[", string2);
      
      String string3 = lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9943474300935294
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("yBTKJ5'q=[{UW}{p");
      assertEquals("ybtkj5'q=[{uw}{p", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.Option");
      assertEquals("wek.cor.opt", string1);
      
      lovinsStemmer0.stem("the international standard serial number. used to identify a journal.ert");
      lovinsStemmer0.stem("weka.core.Option");
      String string2 = lovinsStemmer0.stem("XTl?.F|Y");
      assertEquals("xtl?.f|", string2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.049377967141856
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("#gde=lmayf\"ond");
      String string0 = lovinsStemmer0.stemString("#gde=lmayf\"ond");
      assertEquals("#gd=lmayf\"ons", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("fatal error.pex");
      assertEquals("fat error.pic", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0087420923577903
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("pand");
      assertEquals("pans", string0);
      
      String string1 = lovinsStemmer0.stemString("ials");
      assertEquals("ial", string1);
      
      lovinsStemmer0.stem("ial");
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
      
      String string3 = lovinsStemmer0.stemString("R. Quinlan");
      assertEquals("r. quinlan", string3);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("6kwerid");
      String string0 = lovinsStemmer0.stem("#Bb");
      assertEquals("#b", string0);
      
      String string1 = lovinsStemmer0.stemString("6kweris");
      assertEquals("6kwer", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("algorithmix");
      assertEquals("algorithmic", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9563968167464134
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Get position of flag -f: ");
      String string0 = lovinsStemmer0.stemString("ator");
      assertEquals("at", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("mxcrqex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.969125406536672
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[14];
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("icide");
      String string1 = lovinsStemmer0.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.103238305462365
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("jj>DTAq+~5\";kyzo");
      assertEquals("jj>dtq+~5\";kys", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("ax");
      assertEquals("ax", string1);
      
      String string2 = lovinsStemmer0.stemString("wD[yab8a*]iMAr");
      assertEquals("wd[yab8*]imar", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0130173528440576
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stemString("T;e year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle nny year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("t;e year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl nny year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      String string1 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("weka.core.Option");
      assertEquals("wek.cor.opt", string0);
      
      String string1 = lovinsStemmer0.stem("weka.core.Option");
      assertEquals("weka.core.opt", string1);
      
      String string2 = lovinsStemmer0.stemString("@\"Ppp");
      assertEquals("@\"pp", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("0LRr");
      assertEquals("0lr", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rpt");
      assertEquals("rb", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1387123345646983
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("erid");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("ax");
      lovinsStemmer0.stem("p");
      lovinsStemmer0.stemString("SoAr{sYT");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("]fOaCJ='8OWw]Pq/9gJ");
      assertEquals("]foacj='8oww]pq/9gj", string0);
      
      String string1 = lovinsStemmer0.stemString("entist");
      assertEquals("ent", string1);
      
      String string2 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.9595804244418065
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Freund, Y. and Mason, L.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Freund, Y. and Mason, L.");
      String string0 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string0);
      
      String string1 = lovinsStemmer0.stemString("EDITOR");
      assertEquals("edit", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9932125249120172
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("bl_R");
      lovinsStemmer0.stem("optdex");
      String string0 = lovinsStemmer0.stemString("optdex");
      assertEquals("optdic", string0);
      
      String string1 = lovinsStemmer0.stemString("Vb)vawI6vjiHUS*j");
      assertEquals("vb)vawi6vjihus*j", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("i3als");
      assertEquals("i3al", string0);
      
      lovinsStemmer0.stem("i3al");
      String string1 = lovinsStemmer0.stem("i3al");
      assertEquals("i3al", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("FXEgG.B");
      assertEquals("fxeg.b", string0);
      
      lovinsStemmer0.stem("publisher");
      String string1 = lovinsStemmer0.stem("publisher");
      assertEquals("publishes", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("A}$qG");
      assertEquals("a}$qg", string2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("*l3d]3@u]q(o#D7;5:");
      assertEquals("*l3d]3@u]q(o#d7;5:", string0);
      
      String string1 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ation");
      lovinsStemmer0.stem("81-106");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("rud");
      assertEquals("rus", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("81-106");
      assertEquals("81-106", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("owz>Pher");
      assertEquals("owz>pher", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("olv");
      assertEquals("olut", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("quinlanet");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      assertFalse(lovinsStemmer2.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
      
      lovinsStemmer0.stemString("uc");
      String string1 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
      
      lovinsStemmer0.stem("The alternating decision tree learning algorithm");
      String string2 = lovinsStemmer0.stemString("ement");
      assertEquals("ement", string2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lis");
      assertEquals("li", string0);
      
      lovinsStemmer0.stem("li");
      String string1 = lovinsStemmer0.stemString("\tU]es lowercase strings.");
      assertEquals("\tu]es lowercas string.", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("VOLUME");
      assertEquals("volum", string0);
      
      String string1 = lovinsStemmer0.stemString("volum");
      assertEquals("vol", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("istr");
      lovinsStemmer0.stemString("istr");
      lovinsStemmer0.stemString("-%:l");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      assertEquals("th organ that sponsor a confer or that publish a manu.", string0);
      
      String string1 = lovinsStemmer0.stemString("th organ that sponsor a confer or that publish a manu.");
      assertEquals("th organ that spons a confer or that publ a manu.", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("iev");
      assertEquals("ief", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("*Uli");
      String string0 = lovinsStemmer0.stemString("*Uli");
      assertEquals("*l", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ials");
      assertEquals("ial", string0);
      
      lovinsStemmer0.stem("ial");
      String string1 = lovinsStemmer0.stem("idine");
      assertEquals("id", string1);
      
      lovinsStemmer0.stem("mit");
      lovinsStemmer0.stemString("8G1muM_]Er@F7)=0");
      String string2 = lovinsStemmer0.stemString("ond");
      assertEquals("ons", string2);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("et");
      assertEquals("et", string0);
      
      String string1 = lovinsStemmer0.stem("AgE-qFv.#QUZv`EeN");
      assertEquals("age-qfv.#quzv`een", string1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("8034");
      String string1 = lovinsStemmer0.stemString("Ets");
      assertEquals("es", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
      
      String string1 = lovinsStemmer0.stemString("uPsdmY3AR//`|");
      assertEquals("upsdmy3ar//`|", string1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "uct";
      stringArray0[4] = "uct";
      stringArray0[5] = "uct";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("erid");
      lovinsStemmer0.stemString("Get position of flag -f: ");
      lovinsStemmer0.stemString("S.Q&:Lsq");
      lovinsStemmer0.stemString("How something strange has been publishe. The first word shoul be capitalized.");
      lovinsStemmer0.stemString("ges posit of flag -f: ");
      lovinsStemmer0.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("erid");
      assertEquals("eris", string0);
      
      lovinsStemmer0.stemString("/et pos\"tTon`of flag -f: ");
      String string1 = lovinsStemmer0.stemString("S.Q&:Lsq");
      assertEquals("s.q&:lsq", string1);
      
      String string2 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string2);
      
      String string3 = lovinsStemmer0.stemString("/et po\"tton`of flag -f: ");
      assertEquals("/et po\"tton`of flag -f: ", string3);
      
      lovinsStemmer0.stem("how someth strang ha been publ. th first word should be capital.");
      lovinsStemmer0.stem("s.q&:lsq");
      String string4 = lovinsStemmer0.stemString("how someth strang ha been publ. th first word should be capital.");
      assertEquals("how someth strang ha been publ. th first word should be capit.", string4);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.038139113092347
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
      
      String string1 = lovinsStemmer0.stemString("Proceding of the Sixteenth International Conference on Macine Learning");
      assertEquals("proced of th sixteenth intern confer on macin learn", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("atoN");
      assertEquals("at", string3);
  }
}
