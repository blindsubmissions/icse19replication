/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:43:53 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-1978));
      advancedSettings0.setSocketLinger((-1978));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTrafficClass("AB");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("apuGw{'+h^#");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // apuGw{'+h^#
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setBacklog(10);
      advancedSettings0.getPerformancePreferencesLatency();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setUseDirectByteBuffer(false);
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings1.setPerformancePreferencesLatency(10);
      advancedSettings1.setPerformancePreferencesLatency((-314));
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      advancedSettings1.setBacklog(3235);
      assertEquals((-314), advancedSettings1.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("56_*{");
      advancedSettings0.getCharset();
      advancedSettings0.setByteBufferSize(668);
      advancedSettings0.setCharset((String) null);
      assertEquals("56_*{", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1915));
      advancedSettings0.setBacklog(905);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTrafficClass("ja(DcE98V|]iC");
      assertEquals((-1915), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-197));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize((-722));
      advancedSettings0.setClientIdentifier("C!d7QjY:0Aa8,M7O~3_");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesLatency(528);
      assertEquals("C!d7QjY:0Aa8,M7O~3_", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setByteBufferSize(598);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setByteBufferSize(19);
      advancedSettings0.setByteBufferSize(19);
      assertEquals(19, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setQSObjectPoolMaker(".e@/Gd,,1");
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("J6wPHeNa7>*~%9/$H$");
      advancedSettings0.setBacklog((-1622));
      assertEquals("J6wPHeNa7>*~%9/$H$", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<performance-preferences-latency>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<performance-preferences-latency>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(165);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(198);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setQSObjectPoolMaker("VT!2^Wxn)<");
      advancedSettings0.setDebugNonBlockingMode(false);
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(165, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(2107);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      int int0 = 1901;
      advancedSettings0.setByteBufferSize(1901);
      advancedSettings0.setByteBufferSize(3178);
      String string0 = ".W\\DM,$";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset(".WDM,$");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .WDM,$
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("%");
      advancedSettings0.setByteBufferSize((-1004));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize((-1004));
      advancedSettings0.setMaxThreadsForNioWrite((-163));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      assertEquals((-1004), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("J6wPHeNa7>*~%9/$H$");
      advancedSettings0.setPerformancePreferencesLatency(40);
      advancedSettings0.setClientSocketReceiveBufferSize(1815);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML("J6wPHeNa7>*~%9/$H$");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientIdentifier();
      assertEquals("J6wPHeNa7>*~%9/$H$", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.toXML("BBd<\"K^I5a%v!;c");
      advancedSettings0.getCharset();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.toXML((String) null);
      assertEquals(10, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8943995444300383
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(2728);
      advancedSettings0.toXML("BBd<\"K^I5a%v!;c");
      advancedSettings0.getCharset();
      advancedSettings0.setCharset((String) null);
      assertEquals(2728, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setSocketLinger(1015);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(1, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog((-1622));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("X4Fi");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // X4Fi
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("BBd<\"K^I5a%v!;c");
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("ISO-8859-1");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("BBd<\"K^I5a%v!;c");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // BBd<\"K^I5a%v!;c
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
