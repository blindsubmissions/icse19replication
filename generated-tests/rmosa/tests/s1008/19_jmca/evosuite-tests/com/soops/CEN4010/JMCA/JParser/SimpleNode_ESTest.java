/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:34:45 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(37);
      simpleNode0.setIdentifier("PrimarySuffix");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("PrimarySuffix", stringWriter0);
      JavaParser javaParser0 = new JavaParser("&");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 37);
      simpleNode1.dump("&", stringWriter0);
      simpleNode0.dump("PrimarySuffix", stringWriter0);
      assertEquals("<NameList>\n  <identifier>PrimarySuffix</identifier>\n</NameList>\n<NameList>\n  <identifier>PrimarySuffix</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6816102690529531
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      simpleNode0.toString("ieooa`\"");
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier("PrimarySuffix");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("'?V", stringWriter0);
      assertEquals("<Name>\n  <identifier>*ge</identifier>\n  <identifier>PrimarySuffix</identifier>\n</Name>\n<Name>\n  <identifier>*ge</identifier>\n  <identifier>PrimarySuffix</identifier>\n</Name>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((byte)80);
      String string0 = "?";
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((byte)80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4709001279172663
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      String string0 = "PrimarySuffix";
      SimpleNode simpleNode1 = new SimpleNode(17);
      simpleNode0.jjtAddChild(simpleNode1, 421);
      simpleNode0.setIdentifier("PrimarySuffix");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.id = 421;
      simpleNode1.setIdentifier(", column ");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "PrimarySuffix");
      // Undeclared exception!
      try { 
        simpleNode0.dump("PrimarySuffix", stringWriter2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 421
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 37;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(37);
      String string0 = "PrimarySuffix";
      simpleNode0.setIdentifier("PrimarySuffix");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("PrimarySuffix", stringWriter0);
      String string1 = "&";
      JavaParser javaParser0 = new JavaParser("&");
      try { 
        javaParser0.ConditionalExpression();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtClose();
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.popNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5305096302300272
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      simpleNode0.setIdentifier(">=");
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.setIdentifier("PrimarySuffix");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump(",Bj2->H)@", stringWriter0);
      simpleNode0.dump("w", stringWriter0);
      assertEquals("<Name>\n  <identifier>*ge</identifier>\n  <identifier>PrimarySuffix</identifier>\n</Name>\n<Name>\n  <identifier>*ge</identifier>\n  <identifier>PrimarySuffix</identifier>\n</Name>\n<Name>\n  <identifier>*ge</identifier>\n  <identifier>PrimarySuffix</identifier>\n</Name>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtGetParent();
      simpleNode0.parent = null;
      StringReader stringReader0 = new StringReader("hSpQjp&N9");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5305096302300272
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier("PrimarySuffix");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("%", stringWriter0);
      simpleNode0.dump(">=", stringWriter0);
      simpleNode0.toString();
      simpleNode0.dump("}", stringWriter0);
      simpleNode0.dump("%", stringWriter0);
      assertEquals("<Name>\n  <identifier>*ge</identifier>\n  <identifier>PrimarySuffix</identifier>\n</Name>\n<Name>\n  <identifier>*ge</identifier>\n  <identifier>PrimarySuffix</identifier>\n</Name>\n<Name>\n  <identifier>*ge</identifier>\n  <identifier>PrimarySuffix</identifier>\n</Name>\n<Name>\n  <identifier>*ge</identifier>\n  <identifier>PrimarySuffix</identifier>\n</Name>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode((byte)80);
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.parent = null;
      simpleNode0.dump("/j*!u+&{FZ$D", stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.7937300551584248
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.toString();
      simpleNode0.dump("-O*l[.QMwdG$uxC$", stringWriter1);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5305096302300272
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier("PrimarySuffix");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      Node[] nodeArray0 = new Node[5];
      JavaParser javaParser0 = new JavaParser((String) null);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 36);
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      String string0 = "'?V";
      // Undeclared exception!
      try { 
        simpleNode0.dump("'?V", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(126);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.jjtGetNumChildren();
      SimpleNode simpleNode1 = new SimpleNode(1);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode0, (-1073));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1073
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((byte)80);
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      simpleNode0.dump("", stringWriter0);
      assertEquals("<IfStatement>\n</IfStatement>\n<IfStatement>\n</IfStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("An interface cannot implement other interfaces", stringWriter0);
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<Name>\n  <identifier>*ge</identifier>\n</Name>\n<Name>\n  <identifier>*ge</identifier>\n</Name>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.id = 399;
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.jjtAddChild(simpleNode0, 51);
      StringWriter stringWriter1 = new StringWriter(0);
      StringWriter stringWriter2 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 399
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((byte)80);
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("O3UV8s", stringWriter0);
      assertEquals("<IfStatement>\n  <identifier>*lshft</identifier>\n</IfStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("W5wu$!+|?I[[G8", stringWriter0);
      assertEquals("<Name>\n</Name>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.setIdentifier("&");
      simpleNode0.dump("&", stringWriter1);
      simpleNode0.dump(">=", stringWriter0);
      simpleNode0.dump("\"abstract\"", stringWriter0);
      assertEquals("<Name>\n  <identifier>*ge</identifier>\n  <identifier>*ge</identifier>\n  <identifier>*amp</identifier>\n</Name>\n<Name>\n  <identifier>*ge</identifier>\n  <identifier>*ge</identifier>\n  <identifier>*amp</identifier>\n</Name>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(65);
      String string0 = "<";
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-1487));
      String string1 = null;
      stringWriter0.write((String) null);
      stringWriter0.close();
      simpleNode0.dump("<", stringWriter0);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(57);
      simpleNode0.setIdentifier("88a`h6-.XLk");
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(">>", stringWriter0);
      assertEquals("<PostfixExpression>\n  <identifier>88a`h6-.XLk</identifier>\n  <identifier>*rshft</identifier>\n</PostfixExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(40);
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("&&", stringWriter0);
      simpleNode0.dump("&&", stringWriter0);
      assertEquals("<ConditionalExpression>\n</ConditionalExpression>\n<ConditionalExpression>\n</ConditionalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(40);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("Z$Kr%VD$", stringWriter0);
      simpleNode0.dump("&&", stringWriter0);
      simpleNode0.dump("'", stringWriter0);
      assertEquals("<ConditionalExpression>\n  <identifier>*amp</identifier>\n</ConditionalExpression>\n<ConditionalExpression>\n  <identifier>*amp</identifier>\n</ConditionalExpression>\n<ConditionalExpression>\n  <identifier>*amp</identifier>\n</ConditionalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("PrimarySuffix", stringWriter0);
      simpleNode0.dump("^=", stringWriter1);
      simpleNode0.dump(">", stringWriter1);
      simpleNode0.dump(";", stringWriter0);
      assertEquals("<Name>\n  <identifier>*gt</identifier>\n</Name>\n<Name>\n  <identifier>*gt</identifier>\n</Name>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      simpleNode0.setIdentifier(">=");
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("*gt", stringWriter0);
      assertEquals("<Name>\n  <identifier>*ge</identifier>\n  <identifier>*le</identifier>\n</Name>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(63);
      simpleNode0.setIdentifier("PrimarySuffix");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("PrimarySuffix", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode((-441));
      StringReader stringReader0 = new StringReader("PrimarySuffix");
      JavaParser javaParser0 = new JavaParser((String) null);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, (-61300178));
      simpleNode0.dump("PrimarySuffix", stringWriter0);
      simpleNode1.dump("~~.X4~&<_5_OW.fL", stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      SimpleNode simpleNode3 = new SimpleNode(javaParser0, 2214);
      simpleNode3.dump("<=", stringWriter0);
      simpleNode2.dump("PrimarySuffix", stringWriter0);
      assertEquals("<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
  }
}
