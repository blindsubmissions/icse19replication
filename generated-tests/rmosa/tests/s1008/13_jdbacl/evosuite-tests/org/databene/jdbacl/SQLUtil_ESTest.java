/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:48:25 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.CreateIndexNode;
import org.apache.derby.impl.store.raw.xact.ConcurrentXactFactory;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      SQLUtil.leftJoin("", stringArray0, "", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("");
      // Undeclared exception!
      try { 
        defaultDBTable0.removeIndex((DBIndex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append('9');
      SQLUtil.substituteMarkers("<K_a',@|B}ls'", "rename", (Object) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("alter table");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.45820823797145316
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      boolean boolean0 = SQLUtil.isQuery("3ez<=,xC4jv-(u");
      assertFalse(boolean0);
      
      String string0 = SQLUtil.normalize("3ez<=,xC4jv-(u", false);
      assertEquals("3ez < =, xC4jv - (u", string0);
      
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      BasicUUID basicUUID0 = new BasicUUID("3ez < =, xC4jv - (u");
      String string1 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string1);
      assertEquals("table null", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "org.postgresql.core.Field";
      stringArray0[3] = "$wg";
      stringArray0[4] = "org.apache.derby.impl.sql.compile.ReferencedTablesVisitor";
      stringArray0[5] = "v=d`Wq^MxfQ#k|!^";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null AND org.postgresql.core.Field = 'org.postgresql.core.Field' AND $wg = '$wg' AND org.apache.derby.impl.sql.compile.ReferencedTablesVisitor = 'org.apache.derby.impl.sql.compile.ReferencedTablesVisitor' AND v=d`Wq^MxfQ#k|!^ = 'v=d`Wq^MxfQ#k|!^'", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.normalize("O_FI6YSCMqr{b/xb8@", true);
      System.setCurrentTimeMillis((-3522L));
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("O_FI6YSCMqr{b/xb8@");
      assertNull(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T}.F@=");
      DBDataType dBDataType0 = DBDataType.getInstance((-884), "T}.F@=");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_8X.n@C*<*oE", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("T}.F@=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.normalize("43X47.U", false);
      assertEquals("43X47.U", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&MT");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("&MT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '&MT' not found in table '&MT'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.777209681786442
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize(";Cy15]8R`h(i6sv", false);
      assertEquals("; Cy15 ] 8R ` h (i6sv", string0);
      
      DBSchema dBSchema0 = new DBSchema(";Cy15]8R`h(i6sv");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";Cy15]8R`h(i6sv", dBSchema0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "; Cy15 ] 8R ` h (i6sv";
      stringArray0[1] = "The timeout value for socket read operations, in seconds; 0 means no timeout.";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string1 = dBUniqueConstraint0.toString();
      assertEquals("UNIQUE (; Cy15 ] 8R ` h (i6sv, The timeout value for socket read operations, in seconds; 0 means no timeout.)", string1);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (; Cy15 ] 8R ` h (i6sv, The timeout value for socket read operations, in seconds; 0 means no timeout.)", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.45820823797145316
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Q-/qH|onIU;4;FuGhY5";
      SQLUtil.normalize("Q-/qH|onIU;4;FuGhY5", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-257), "fbW%");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Q - / qH | onIU ; 4 ; FuGhY5 ", defaultDBTable0, dBDataType0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fbW%";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Q - / qH | onIU ; 4 ; FuGhY5 ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("Q - / qH | onIU ; 4 ; FuGhY5 ", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(2682);
      // Undeclared exception!
      try { 
        stringBuilder3.delete(2682, (-257));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "e1";
      stringArray0[1] = "e1";
      stringArray0[0] = "e1";
      stringArray0[3] = "e1";
      String string0 = SQLUtil.renderColumnListWithTableName("e1", stringArray0);
      assertEquals("e1.e1, e1.e1, e1.null, e1.e1", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("*kX$", true);
      assertEquals("* kX $", string0);
      
      String string1 = SQLUtil.normalize("* kX $", true);
      assertEquals("* kX $", string1);
      
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "* kX $", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "in best access path";
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "", "in best access path", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = ")IFj-+~a";
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(\"0@TTM>j01&M^");
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      mockPrintWriter0.flush();
      charArray0[3] = 'W';
      mockPrintWriter0.print(charArray0);
      mockPrintWriter0.checkError();
      PrintWriter printWriter0 = mockPrintWriter0.append('W');
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("iXi<*Q*(Z|N+pu.^|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: iXi<*Q*(Z|N+pu.^|
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      DBDataType.getInstance(1, "hsqldb.catalogs");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("hsqldb.catalogs", stringBuilder0);
      assertEquals("hsqldb.catalogs", stringBuilder0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.7371823152157604
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.normalize("A{</bVMN>@'JkR{&D", false);
      assertEquals("A { < / bVMN > @ 'JkR{&D'", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("A { < / bVMN > @ 'JkR{&D'", false, "A { < / bVMN > @ 'JkR{&D'", "F");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"A { < / bVMN > @ 'JkR{&D'\" CHECK F", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append("l-c%v<M>UZC`bj(f B");
      SQLUtil.addOptionalCondition("KTj5I1fYX2Cf", stringBuilder0);
      assertEquals("l-c%v<M>UZC`bj(f B or KTj5I1fYX2Cf", stringBuilder0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O_FI6YSCMqr{b/xb8@", (DBSchema) null);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("O_FI6YSCMqr{b/xb8@", (String[]) null, "5!x$Tcfe{n[/x~", "O_FI6YSCMqr{b/xb8@", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O_FI6YSCMqr{b/xb8@", (DBSchema) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter index", false, (String[]) null);
      dBUniqueConstraint0.setName("O_FI6YSCMqr{b/xb8@");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5!x$Tcfe{n[/x~", true, dBUniqueConstraint0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        FileUtil.canonicalFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder("execo_fi6yscmqr{b/xb8@");
      SQLUtil.addRequiredCondition("alter index", stringBuilder0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("execo_fi6yscmqr{b/xb8@");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.7990591844756405
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("gsC=81", true);
      assertEquals("g  sC = 81", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("into", true, "at", "into");
      dBCheckConstraint0.equals("at");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT into CHECK into", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable(")8@V6WTNT,p.EVU", false);
      String[] stringArray0 = new String[6];
      stringArray0[4] = "create materialized viewcall";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = SQLUtil.normalize("+LD.)w(1-8", false);
      assertEquals("+ LD.) w (1 - 8", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6277052571971504
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("]{zi-'M%}A7QqZV", false);
      assertEquals("] { zi - 'M%}A7QqZV'", string0);
      
      DBDataType dBDataType0 = DBDataType.getInstance(4, "call");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.min(554, (-1915));
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]{zi-'M%}A7QqZV", defaultDBTable0, dBDataType0, integer2, integer3);
      Integer.max(554, (-316638846));
      dBDataType0.isNumber();
      defaultDBColumn0.getForeignKeyConstraint();
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("]{zi-'M%}A7QqZV CALL(2,0) NULL", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.7188008609386548
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize("Q-/qH|onIU;4;svGhY5", false);
      assertEquals("Q - / qH | onIU ; 4 ; svGhY5 ", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Q - / qH | onIU ; 4 ; svGhY5 ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Q-/qH|onIU;4;svGhY5";
      stringArray0[1] = "Q - / qH | onIU ; 4 ; svGhY5 ";
      stringArray0[2] = "Y7kxe_K0!";
      stringArray0[3] = "09c&";
      stringArray0[4] = "Q-/qH|onIU;4;svGhY5";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Qo>T'o3:hDSbTOj7", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("Y7kxe_K0!", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "09c&";
      stringArray1[1] = "09c&";
      stringArray1[2] = "ofi6yscm";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("09c&", false, dBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (Q-/qH|onIU;4;svGhY5, Q - / qH | onIU ; 4 ; svGhY5 , Y7kxe_K0!, 09c&, Q-/qH|onIU;4;svGhY5) REFERENCES Q - / qH | onIU ; 4 ; svGhY5 (09c&, 09c&, ofi6yscm)", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop index");
      DBTrigger dBTrigger0 = new DBTrigger("drop index", dBSchema0);
      SQLUtil.ownerDotComponent(dBTrigger0);
      dBSchema0.getTable("<Y+$Yq=/zG");
      MockFile mockFile0 = new MockFile("<Y+$Yq=/zG");
      dBSchema0.getTables(true);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "create materialized view");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // create materialized view
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("exec]{zi-'m%}a7qqzv");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String string0 = "TABLE_PRIVILEGES";
      DBDataType dBDataType0 = DBDataType.getInstance(1457, "create materialized viewupdate_rule");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("TABLE_PRIVILEGES", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      dBDataType0.isNumber();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.normalize("gSb,AX#\"T`U[3f)", false);
      assertEquals("gSb, AX # \"T`U[3f)\"", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("(l8e8zNL,Gq", true);
      assertEquals("(l8e8zNL, Gq", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("calldeleteoy'kcq", true);
      assertEquals("calldeleteoy 'kcq'", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'b';
      SQLUtil.isQuery("SELECT * FROM ");
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-629618204));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      String string0 = "TABLE_PRIVILEGES";
      DBDataType dBDataType0 = DBDataType.getInstance(1461, "create materialized viewupdate_rule");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("TABLE_PRIVILEGES", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.73798344858705
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      File file0 = FileUtil.canonicalFile("deleteoy'kcq");
      DBCatalog dBCatalog0 = new DBCatalog("deleteoy'kcq");
      DBSchema dBSchema0 = new DBSchema("SHA1PRNG", dBCatalog0);
      defaultDBTable0.isIdentical(dBSchema0);
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("deleteoy'kcq");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O_FI6YSCMqr{b/xb8@", (DBSchema) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter index", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("5!x$Tcfe{n[/x~", true, dBUniqueConstraint0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      mockPrintWriter0.append('*');
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.BufferedOutputStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("alter session{");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session{");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Character character0 = new Character('^');
      SQLUtil.renderValue(character0);
      System.setCurrentTimeMillis(0L);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = dBCatalog0.getSchema((String) null);
      assertNull(dBSchema0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer.min((-298158966), (-298158966));
      Integer integer0 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance((-298158966), "v");
      DBDataType.getInstance(2343, "*kXt");
      Integer integer1 = new Integer((-298158966));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Bs]G2PKr5", defaultDBTable0, dBDataType0, integer1, (Integer) null);
      Integer.max((-298158966), (-298158966));
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("*kXt");
      Object[] objectArray0 = new Object[1];
      mockPrintWriter0.format("`?>&If", objectArray0);
      Random.setNextRandom((-298158966));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Bs]G2PKr5";
      stringArray0[1] = "drop table";
      stringArray0[2] = "*kXt";
      stringArray0[3] = "create unique indexderby.system.bootall";
      stringArray0[4] = "v";
      stringArray0[5] = "drop table";
      stringArray0[6] = "v";
      stringArray0[7] = "Bs]G2PKr5";
      stringArray0[8] = "Bs]G2PKr5";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop table", true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT \"drop table\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("Q-/qonIU;4;FuhY5", false);
      assertEquals("Q - / qonIU ; 4 ; FuhY5 ", string0);
      
      jdbcClob jdbcClob0 = new jdbcClob("t~V/i^[YV44IZHx:");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoy fc{");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O_FI6YSCMqr{b/xb8@", (DBSchema) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("HB)Oj[Z(Tnq^>g'", false, dBUniqueConstraint0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        FileUtil.canonicalFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.303092403761719
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O_FIVYSCMq:{b/xb8");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O_FIVYSCMq:{b/xb8");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "O_FIVYSCMq:{b/xb8";
      stringArray0[1] = "O_FIVYSCMq:{b/xb8";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "O_FIVYSCMq:{b/xb8", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hbPn^h %Zmj", defaultDBTable0, (DBDataType) null);
      linkedList0.addLast(defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("hbPn^h %Zmj, hbPn^h %Zmj", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("Empty SQL string in executeUpdate()", defaultDBTable0, 34, "Empty SQL string in executeUpdate()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance((-298158966), "*kX$");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer.min(1679, 1679);
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("*kX$", defaultDBTable0, dBDataType0, integer0, integer0);
      Integer.max(554, 554);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("*kX$ *KX$(1,1) NULL", string0);
      
      String string1 = SQLUtil.typeAndName(defaultDBColumn0);
      assertEquals("column *kX$", string1);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("*kX$ *KX$(1,1) NULL");
      assertEquals(3, objectArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(4, "call");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.min(554, (-1915));
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]{zi-'M%}A7QqZV", defaultDBTable0, dBDataType0, integer1, integer2);
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.renderColumn(defaultDBColumn0);
      Random.setNextRandom(473);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]{zi-'M%}A7QqZV");
      DBCatalog dBCatalog0 = new DBCatalog("4E71+MP(H8KNKB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "]{zi-'M%}A7QqZV", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setName((String) null);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT ]{zi-'M%}A7QqZV ", stringBuilder0.toString());
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("OFI6YSCMr{b/xb8@", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(1810, "&mTe");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hJ,SVntP}\"H", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBColumn0.setDefaultValue("&mTe");
      Integer.divideUnsigned(125, 125);
      SQLUtil.renderColumn(defaultDBColumn0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = defaultDBColumn0.getForeignKeyConstraint();
      assertNull(dBForeignKeyConstraint0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(" NOT", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      defaultDBTable0.getComponents();
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[1];
      dBCatalog0.setName("7Q.8o<w[&IoD(");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumnNames();
      Integer.min(554, 554);
      Integer integer1 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(554, "O,B1;w^T:K{X]`$g|");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O,B1;w^T:K{X]`$g|", defaultDBTable0, dBDataType0, integer1, integer0);
      Integer.max(22, 554);
      dBDataType0.isNumber();
      defaultDBColumn0.getForeignKeyConstraint();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, 42, "Y64Q");
      SQLUtil.renderColumn(defaultDBColumn1);
      MockPrintStream mockPrintStream0 = new MockPrintStream("sPaTt6)");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      mockPrintWriter0.append((CharSequence) "null Y64Q NULL");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!|-2y\"K;E1%N8h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-2622.2003);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 2622.2003", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!|-2y\"L;E1cD8h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1624.31159385;
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "!|-2y\"L;E1cD8h";
      stringArray0[1] = null;
      stringArray0[2] = "1624.31159385";
      stringArray0[3] = "!|-2y\"L;E1cD8h";
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (!|-2y\"L;E1cD8h, , 1624.31159385, !|-2y\"L;E1cD8h, )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h_";
      stringArray0[1] = "h_";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("h_", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("create table null (,\n\tFOREIGN KEY (h_, h_) REFERENCES null(h_, h_),\n\tFOREIGN KEY (h_, h_) REFERENCES null(h_, h_)\n)", stringWriter0.toString());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("t~V/i^[YV44IHx:");
      StringReader stringReader0 = new StringReader("t~V/i^[YV44IHx:");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 32768.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("32768", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "NCLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("_EUj(gf>1");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NCLOB";
      stringArray0[1] = "O_FI6YSCMqr{b/xb8@";
      stringArray0[2] = "O_FI6YSCMqr{b/xb8@";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "NCLOB", false, stringArray0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O_FI6YSCMqr{b/xb8@", defaultDBTable0, dBDataType0, integer1);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      Random.setNextRandom((-2));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("O_FIVYSCMq:{b/xb8");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("O_FIVYSCMq:{b/xb8");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("O_FIVYSCMq:{b/xb8", false, defaultDBTable0, "rename");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.removeComments("rename");
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      assertSame(nameSpec1, nameSpec0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      System.setCurrentTimeMillis((-4L));
      SQLUtil.normalize("|j", false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.removeComments("|j");
      SQLUtil.removeComments("|j");
      SQLUtil.normalize("|j", false);
      System.setCurrentTimeMillis((-4L));
      SQLUtil.removeComments("\n/* group sorted */");
      SQLUtil.removeComments("|j");
      Random.setNextRandom(46);
      SQLUtil.normalize("|j", true);
      SQLUtil.normalize("| j", true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
