/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:48:44 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = JSONObject.quote("u4,\n");
      Short short0 = new Short((short)2);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = JSONObject.quote("u m_\n");
      Double double0 = new Double((-2538.45102917516));
      String string1 = JSONObject.valueToString(double0, (-297), (-493));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = JSONObject.quote("upmhJ_\n");
      assertEquals("\"upmhJ_\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(4355, (-93));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("JSONArray initial value should be a string or collection or array.");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)64);
      hashMap0.put(byte0, "}CX?8SBtEPx#[j?&\"?[");
      try { 
        jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.666940475780652
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JSONObject.quote("upmhJ_\n");
      assertEquals("\"upmhJ_\\n\"", string0);
      
      JSONObject.quote("gettrim");
      Float float0 = new Float(3583.124F);
      JSONObject jSONObject0 = new JSONObject(float0);
      boolean boolean0 = jSONObject0.optBoolean("upmhJ_\n");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
      
      String string1 = JSONObject.doubleToString(2012.660572680477);
      assertEquals("2012.660572680477", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3640159254907818
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\f";
      Integer integer0 = new Integer(21);
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", integer0);
      try { 
        jSONObject1.getJSONObject("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject.quote("u m_&\n");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("\"u m_&\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"u m_&\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("wheel.json.JSONObject$Null", "wheel.json.JSONObject$Null");
      assertEquals("wheel.json.JSONObject$Null", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = JSONObject.quote("upmhJ_\n");
      JSONObject.quote("gettrim");
      Float float0 = new Float(3583.124F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optLong("gettrim", (-43L));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.551888093566232
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = JSONObject.quote("w7D+o@bV[F=GnI8:>?");
      HashMap<JSONArray, Boolean> hashMap0 = new HashMap<JSONArray, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("\"w7D+o@bV[F=GnI8:>?\"");
      jSONObject0.toString(35, (-1812));
      Integer integer0 = new Integer(59);
      JSONObject.numberToString(integer0);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8648894884125389
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.quote("w7D+o@bV[Gn:8:>?");
      String string0 = JSONObject.valueToString("\"w7D+o@bV[Gn:8:>?\"", 519, (-1192));
      Double double0 = new Double((-1192));
      JSONObject jSONObject0 = new JSONObject(double0);
      long long0 = jSONObject0.optLong("getvalueOf");
      assertEquals(0L, long0);
      
      String string1 = JSONObject.valueToString("w7D+o@bV[Gn:8:>?", 123, 123);
      assertFalse(string1.equals((Object)string0));
      
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = JSONObject.quote("/1Qq#");
      assertEquals("\"/1Qq#\"", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = new Integer((-3832));
      String string0 = "-min";
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (double) (-1862));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject.quote("u m_\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("g]Q}7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of g]Q}7
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject.quote("u4&\n");
      JSONTokener jSONTokener0 = new JSONTokener("u4&\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of u4&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("-min", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject.doubleToString(0.9606535895533106);
      JSONObject jSONObject0 = new JSONObject((Object) "0.9606535895533106");
      jSONObject0.putOpt("0.9606535895533106", "0.9606535895533106");
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.484925891109223
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      jSONObject0.append("] is not a Boolean.", long0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.getBoolean("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.quote("upmJ_\n");
      JSONObject.quote("getjoin");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "upmJ_\n";
      stringArray0[1] = "getjoin";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (short) (-258), (short) (-258));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = JSONObject.quote(" m_L&\n");
      assertEquals("\" m_L&\\n\"", string0);
      
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0, (-867), 9);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = JSONObject.quote(".Hh|wo+/i0");
      assertEquals("\".Hh|wo+/i0\"", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2570699364010602
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = JSONObject.quote("u m_\n");
      assertEquals("\"u m_\\n\"", string0);
      
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-2379), (-2379));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      String string0 = JSONObject.valueToString(linkedList0, 102, 102);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = JSONObject.quote("upChJ_\n");
      assertEquals("\"upChJ_\\n\"", string0);
      
      String string1 = JSONObject.quote((String) null);
      assertEquals("\"\"", string1);
      
      Object object0 = new Object();
      String string2 = JSONObject.valueToString(object0, (-1226), (-1226));
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6661022550876021
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      Double double0 = new Double(123.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min(334.908981615502, 0.0);
      StringWriter stringWriter0 = new StringWriter(59);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.quote("wheel.json.JSONArray@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JSONObject.quote("u m_&\n");
      Double double0 = new Double(728.876026);
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4375503412075572
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = JSONObject.quote("upmhJ_\n");
      assertEquals("\"upmhJ_\\n\"", string0);
      
      JSONObject.quote("gettrim");
      Float float0 = new Float(3583.124F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.quote("UL=k{V1`vDt0/4");
      assertEquals("\"UL=k{V1`vDt0/4\"", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(182.14115);
      linkedList0.addLast(float0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5171534199663772
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject.quote("u m_\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\"u m_\n\"");
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\"u m_\n\"");
      assertEquals("\"\\\"u m_\\n\\\"\"", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2852930241200993
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optDouble("0");
      JSONObject jSONObject1 = jSONObject0.optJSONObject("0");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject.quote("u4,\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("KGp&-*a\"-1<)K.0[:", 0L);
      jSONObject0.optJSONObject("u4,\n");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      Integer integer0 = new Integer((-842));
      assertEquals((-842), (int)integer0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString((-2442));
      Double double0 = new Double((-1.1858740961785017));
      assertEquals((-1.1858740961785017), (double)double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject.quote("a 2il$qUda3PBw'");
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, (-1619), (-1619));
      assertEquals("null", string0);
      
      String string1 = JSONObject.quote("a 2il$qUda3PBw'");
      assertEquals("\"a 2il$qUda3PBw'\"", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6661022550876021
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = JSONObject.doubleToString(4.795050084929812);
      assertEquals("4.795050084929812", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "4.795050084929812");
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      JSONObject.testValidity(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4118191793225021
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\f";
      int int0 = (-842);
      Integer integer0 = new Integer((-842));
      jSONObject0.append("\f", integer0);
      try { 
        jSONObject0.getLong("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Short short0 = new Short((short) (-633));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.optLong("[A5Q:`rN>-XJa=L");
      Short.toUnsignedLong((short)740);
      jSONObject0.optInt("", (int) (short)0);
      Short.toUnsignedLong((short) (-892));
      Short.toUnsignedInt((short)0);
      jSONObject0.opt("0");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "[A5Q:`rN>-XJa=L";
      jSONObject0.put("[A5Q:`rN>-XJa=L", (int) (short)0);
      jSONObject0.optString("t;;_(|!XzZrX*8P[X-");
      JSONObject.quote("Vlb:x%{yqP");
      Boolean boolean0 = new Boolean("gNxKvvfODK$7[Qp?eG");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("JPgdkK ]");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.append("$wvQ#|C%`Lh", "$wvQ#|C%`Lh");
      jSONObject0.append("$wvQ#|C%`Lh", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject.quote("upmJ_\n");
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      BiFunction<Object, Object, Float> biFunction0 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Float float0 = new Float(0.0F);
      hashMap0.put(float0, float0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      Integer integer0 = new Integer(1842);
      JSONObject.quote("upmJ_\n");
      // Undeclared exception!
      try { 
        Float.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = JSONObject.quote("Thov3:!Q=YoF1*c:$ ");
      assertEquals("\"Thov3:!Q=YoF1*c:$ \"", string0);
      
      JSONObject.testValidity("getsplit");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(114, 1876);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject.quote("u4,\n");
      HashMap<Double, Boolean> hashMap0 = new HashMap<Double, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("]<_#&juGy~7$}6)", (Map) hashMap0);
      jSONObject0.optJSONObject("%sA{wt%Jko");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Writer writer0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject.quote("w7D+o@bV[Gn:8:>?");
      JSONObject jSONObject0 = new JSONObject((Object) "\"w7D+o@bV[Gn:8:>?\"");
      jSONObject0.toString(123, 123);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("</91Qq#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/91Qq#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7820471559051687
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-842));
      JSONObject jSONObject1 = jSONObject0.append("\f", integer0);
      Integer.divideUnsigned((-842), (-842));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject1.isNull("\f");
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.580649125069464
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put(" :", (Collection) linkedList0);
      Short short0 = new Short((short)44);
      JSONObject.getNames((Object) short0);
      try { 
        jSONObject0.getInt(" :");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" :\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 5, 5);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("-min", "-min");
      try { 
        jSONObject1.getJSONArray("-min");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-min\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Z;il)ztl#");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {Z;il)ztl#
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.accumulate("getgetJSONObject", object0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(92);
      StringWriter stringWriter2 = new StringWriter();
      jSONObject0.optString("getgetJSONObject", "getgetJSONObject");
      Object object1 = new Object();
      jSONObject1.accumulate("java.lang.Object@0000000002", object1);
      jSONObject0.optJSONArray("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "_6q7sIv*+*r?1<4X";
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.put("_6q7sIv*+*r?1<4X", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject0.getJSONArray("_6q7sIv*+*r?1<4X");
      int int0 = (-953);
      try { 
        jSONArray0.get((-1862));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1862] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\f";
      jSONObject0.put("\f", (Object) "in");
      int int0 = (-842);
      Integer integer0 = new Integer((-842));
      try { 
        jSONObject0.append("\f", integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\f] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONTokener jSONTokener0 = new JSONTokener("{ ?==");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 4 of { ?==
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.doubleToString((-22654515));
      Short short0 = new Short((short)2);
      assertEquals((short)2, (short)short0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("Expected a ',' or '}'", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("] is not a Boolean.", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-842));
      Integer.divideUnsigned(10, (-1823));
      jSONObject0.append("\f", integer0);
      Byte byte0 = new Byte((byte) (-123));
      jSONObject0.accumulate("\f", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.append("\f", "\f");
      JSONObject jSONObject2 = jSONObject1.append("(EQ&<G0}R-z", (Object) null);
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject3 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.optJSONArray("(EQ&<G0}R-z");
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject.quote("w7D+o@bV[Gn:8:>?");
      String string0 = JSONObject.valueToString("\"w7D+o@bV[Gn:8:>?\"", 519, 519);
      Double double0 = new Double(519);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString("w7D+o@bV[Gn:8:>?", 123, 123);
      jSONObject0.toString(1365, 1365);
      Short short0 = new Short((short)2347);
      String string1 = JSONObject.valueToString(short0, 519, 49);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("int", 747L);
      Object object0 = new Object();
      double double0 = jSONObject0.optDouble("int", (double) 747L);
      assertEquals(1, jSONObject0.length());
      assertEquals(747.0, double0, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.append("] is not a Boolean.", long0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      jSONObject1.put("] is not a Boolean.", (Map) hashMap0);
      Boolean.logicalAnd(true, true);
      Double double0 = new Double(0L);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      StringWriter stringWriter0 = new StringWriter();
      long long1 = new Long(0L);
      Writer writer0 = jSONObject0.write(stringWriter0);
      char[] charArray0 = new char[3];
      charArray0[1] = 'q';
      charArray0[1] = 'V';
      // Undeclared exception!
      try { 
        writer0.write(charArray0, 32, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0L);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
      assertNotNull(jSONArray1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "{ L)=G";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONTokener jSONTokener0 = new JSONTokener("{ L)=G");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 6 of { L)=G
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.6425559869377249
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("7mia", "7mia");
      jSONObject1.optDouble("7mia", (-555.7950507));
      try { 
        jSONObject0.getBoolean("7mia");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7mia\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("false", "false");
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject1.getBoolean("false");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.803748138230123
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject.quote("w7D+o@bV[Gn:8:>?");
      JSONObject.valueToString("\"w7D+o@bV[Gn:8:>?\"", 519, (-1192));
      Double double0 = new Double((-1192));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("\"w7D+o@bV[Gn:8:>?\"", (double) 519);
      jSONObject1.getInt("\"w7D+o@bV[Gn:8:>?\"");
      JSONObject.valueToString("w7D+o@bV[Gn:8:>?", 123, 123);
      try { 
        jSONObject0.getBoolean("\"java.lang.String@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000001\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Null key.", (Object) "u m_&\n");
      jSONObject0.accumulate("Null key.", "u m_&\n");
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-842));
      jSONObject0.append("\f", integer0);
      jSONObject0.put("\f", (Object) integer0);
      jSONObject0.getDouble("\f");
      Integer.divideUnsigned((-842), (-842));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Object object0 = JSONObject.NULL;
      try { 
        Integer.decode("\f");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\f\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Z;il)ztl#");
      HashMap<Boolean, JSONArray> hashMap0 = new HashMap<Boolean, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("{Z;il)ztl#", 0L);
      jSONObject0.optJSONObject("{Z;il)ztl#");
      long long0 = jSONObject0.getLong("{Z;il)ztl#");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONTokener jSONTokener0 = new JSONTokener("{ ?:==");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 4 of { ?:==
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8959265051305154
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\b", (Collection) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      jSONObject0.put("Exp<cted^a P,' or '}'", (Collection) linkedList0);
      String string0 = jSONObject0.toString(904, 904);
      JSONTokener jSONTokener0 = new JSONTokener(string0);
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject1.names();
      Integer integer0 = new Integer(904);
      assertEquals(904, (int)integer0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("7mia", "7mia");
      jSONObject1.put("7mia", false);
      double double0 = jSONObject1.optDouble("7mia", (-555.7950507));
      assertEquals((-555.7950507), double0, 0.01);
      
      boolean boolean0 = jSONObject0.getBoolean("7mia");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-min";
      stringArray0[1] = "-min";
      stringArray0[2] = "-min";
      stringArray0[3] = "-min";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalAnd(true, false);
      JSONObject jSONObject1 = jSONObject0.putOpt("-min", boolean0);
      boolean boolean1 = jSONObject1.getBoolean("-min");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-842));
      Integer.min((-842), 29);
      JSONObject jSONObject1 = jSONObject0.append("f", integer0);
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      jSONObject1.put("f", (Map) hashMap0);
      Boolean boolean0 = new Boolean("f");
      Float float0 = new Float(0.0);
      JSONObject jSONObject2 = jSONObject0.getJSONObject("f");
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      JSONObject.quote("a 2il$qUda3PBw'");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("a 2il$qUda3PBw'", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("a 2il$qUda3PBw'");
      try { 
        jSONObject1.getBoolean("a 2il$qUda3PBw'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a 2il$qUda3PBw'\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test98()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("true", "true");
      double double0 = new Double((-556.0));
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test99()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-842));
      JSONObject jSONObject1 = jSONObject0.append("\f", integer0);
      Object object0 = JSONObject.NULL;
      jSONObject1.put("\f", object0);
      Integer.divideUnsigned((-842), (-842));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject1.isNull("\f");
      Float float0 = new Float(0.0);
      Float.min(0.0F, (-842));
      JSONObject.testValidity(float0);
      JSONObject.testValidity((Object) null);
  }
}
