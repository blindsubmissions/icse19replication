/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 08:39:29 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QName.get("mI?uy1`Odra,r|^-J:");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName.get("", namespace0, "mI?uy1`Odra,r|^-J:");
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getDocumentFactory();
      StringReader stringReader0 = new StringReader("4;iWa2:olqEF3\"-F");
      StringReader stringReader1 = new StringReader("`+06");
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null, true);
      sAXReader1.getEntityResolver();
      String string0 = "org.jaxen.expr.DefaultXPathFactory";
      String string1 = "org.dom4j.util.UserDataElement";
      try { 
        parserAdapter0.parse("org.dom4j.util.UserDataElement");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // /home/ubuntu/evosuite_readability_gen/projects/62_dom4j/org.dom4j.util.UserDataElement (No such file or directory)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("'T&YV");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class 'T&YV not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createXMLReader();
      String string0 = null;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      int int0 = (-3381);
      PushbackInputStream pushbackInputStream0 = null;
      try {
        pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (-3381));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size <= 0
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//dX;O9y09k>PaCn{&a2/dX;O9y09k>PaCn{&a2/EZ!g&w^0EZ!g&w^");
      String string0 = "Nf.un/a+!G-*l`9fM|l";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Nf.un/a+!G-*l`9fM|l");
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.setParent((XMLReader) null);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      try { 
        MockURL.URL("{  X\"#Sz4:", "~|E-qOOhr/{A", 80, "Nf.un/a+!G-*l`9fM|l");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: {  x\"#sz4:
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      StringReader stringReader0 = new StringReader("u7=BJdM14");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setIgnoreComments(false);
      String string0 = "a-ON";
      MockFile mockFile0 = new MockFile("a-ON");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setFeature("//home/ubuntu/evosuite_readability_gen/projects/62_dom4j/org.dom4j.QName.singleton.strategy/org.dom4j.QName.singleton.strategy0The node \"", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: //home/ubuntu/evosuite_readability_gen/projects/62_dom4j/org.dom4j.QName.singleton.strategy/org.dom4j.QName.singleton.strategy0The node \"
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Namespace.get("", "");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.getEncoding();
      XMLReader xMLReader0 = null;
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      File file0 = MockFile.createTempFile("//tmp/`4/aVo|0 userData: ", "//tmp/`4/aVo|0 userData: ");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      MockFile mockFile0 = new MockFile(file0, "%~M9*r|B:h<t;~F");
      try { 
        MockFile.createTempFile("//tmp/`4/aVo|0 userData: ", "//tmp/`4/aVo|0 userData: ", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("ELEMENT_NODE");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler("n|-{&T-UC", dispatchHandler0);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      try { 
        MockURL.URL("ELEMENT_NODE", "ELEMENT_NODE", ",^38u");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: element_node
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.resetHandlers();
      sAXReader0.setIgnoreComments(false);
      sAXReader0.resetHandlers();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      MockException mockException0 = new MockException();
      SAXParseException sAXParseException0 = new SAXParseException(" : ", locator2Impl0, mockException0);
      SAXParseException sAXParseException1 = new SAXParseException("", "", " : ", 10, 3644, sAXParseException0);
      sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      boolean boolean0 = sAXReader0.isValidating();
      assertTrue(sAXReader0.isMergeAdjacentText());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.70560245079815
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      XMLFilter xMLFilter0 = sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter(xMLFilter0);
      sAXReader0.setXMLFilter(xMLFilter0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      File file0 = MockFile.createTempFile("http://xml.org/sax/properties/lexical-handler", "org.dom4j.dom.DOMCDATA");
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      String string0 = "]#q{P$vV0-:e";
      try { 
        sAXReader0.read("]#q{P$vV0-:e");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.807564737707392
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      File file0 = MockFile.createTempFile("org.dom4j.dom.DOMCDATA", "org.dom4j.dom.DOMCDATA");
      file0.setReadable(true, true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.807564737707392
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      xMLFilterImpl0.getContentHandler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/org.dom4j.dom.DOMCDATA0org.dom4j.dom.DOMCDATA");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)72;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)22;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      xMLFilterImpl0.startDocument();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp");
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-6);
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      File file0 = MockFile.createTempFile("org.dom4j.dom.DOMCDATA", "org.dom4j.dom.DOMCDATA");
      file0.setReadable(true, true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///tmp/org.dom4j.dom.DOMCDATA0org.dom4j.dom.DOMCDATA : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Namespace namespace0 = new Namespace("//tmp/[ lhs: 0[ lhs: ", "tZ$9C");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("//tmp/[ lhs: 0[ lhs: ", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      sAXReader0.createDefaultEntityResolver("d;");
      // Undeclared exception!
      try { 
        MockFile.createTempFile("d;", "d;", (File) mockFile0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      File file0 = MockFile.createTempFile("org.dom4j.dom.DOMCDATA", "org.jaxen.ContextSupport");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("Error on line ", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Error on line  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler("http://xml.org/sax/handlers/LexicalHandler", dispatchHandler0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@e76a917 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V_3gvA4N-T6{/$wp0");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("V_3gvA4N-T6{/$wp0");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("V_3gvA4N-T6{/$wp0", (String) null);
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("V_3gvA4N-T6{/$wp0", "V_3gvA4N-T6{/$wp0");
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("DL7)");
      try { 
        sAXReader0.read((Reader) stringReader0, "DL7)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.setXMLReaderClassName("bFGU");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class bFGU not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      xMLFilterImpl0.getParent();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      assertFalse(pipedInputStream1.equals((Object)pipedInputStream0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(false);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      URL uRL0 = MockURL.getFtpExample();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStripWhitespaceText(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      StringReader stringReader0 = new StringReader("4;iWa2:olqEF3\"-F");
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      String string0 = "//tmp/org.dom4j.dom.DOMCDATA1gAOkvccy\"t]iE9jxK";
      sAXReader0.createDefaultEntityResolver("http://xml.org/sax/properties/declaration-handler");
      try { 
        MockURI.URI("//tmp/org.dom4j.dom.DOMCDATA1gAOkvccy\"t]iE9jxK", "dfR~\"S:", "dfR~\"S:", "|?BH:RaiEI_d;H");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: //tmp/org.dom4j.dom.DOMCDATA1gAOkvccy\"t]iE9jxK://[dfR~\"S:]dfR~%22S:#%7C?BH:Ra%7FiEI_d;H
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      File file0 = MockFile.createTempFile("org.dom4j.dom.DOMCDATA", "org.dom4j.dom.DOMCDATA");
      file0.setReadOnly();
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "htt://xml.org/sax/properties/lexical-handler");
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.removeHandler((String) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.getErrorHandler();
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/org.dom4j.dom.DOMCDATA0org.dom4j.dom.DOMCDATA");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.dom4j.dom.DOMCDATA");
      StringReader stringReader0 = new StringReader("O$A6_CVR+");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4497);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "//tmp/http:/xml.org/sax/properties/declaration-handler0OBxZ";
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "//tmp/http:/xml.org/sax/properties/declaration-handler0OBxZ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setMergeAdjacentText(true);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      assertNull(defaultDocument0.getXMLEncoding());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStringInternEnabled(true);
      SAXReader sAXReader1 = new SAXReader();
      URI uRI0 = MockURI.aHttpURI;
      assertEquals("foo.bar", uRI0.getHost());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)62;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(dataInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("org.jaxen.SimpleVariableContext", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: org.jaxen.SimpleVariableContext
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V_3gvA4N-T6{/$wp0");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("V_3gvA4N-T6{/$wp0");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("V_3gvA4N-T6{/$wp0", "//tmp/49&n!jh5mf@-;+}b:D0@z#(*eXw]o=i");
      InputSource inputSource1 = new InputSource("//tmp/49&n!jh5mf@-;+}b:D0@z#(*eXw]o=i");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLReader0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/org.dom4j.dom.DOMCDATA0org.dom4j.dom.DOMCDATA");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      StringReader stringReader0 = new StringReader("");
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.resetHandlers();
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      XMLReader xMLReader0 = null;
      try {
        xMLReader0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V_3gvA4N-T6{/$wQp0");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("V_3gvA4N-T6{/$wQp0", "V_3gvA4N-T6{/$wQp0");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      sAXReader0.setEncoding("?>");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      xMLReader0.getContentHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.startDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLReader0);
      File file0 = MockFile.createTempFile("org.dom4j.dom.DOMCDATA", "/");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8613706721745853
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      xMLFilterImpl0.getContentHandler();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      xMLFilterImpl0.startDocument();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      File file0 = MockFile.createTempFile("org.dom4j.dom.DOMCDATA", "org.dom4j.dom.DOMCDATA");
      file0.setReadable(true, true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      sAXReader0.setEncoding("A8\"`cz+V");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      File file0 = MockFile.createTempFile("org.dom4j.dom.DOMCDATA", "org.dom4j.dom.DOMCDATA");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      sAXReader0.configureReader(xMLReader0, (DefaultHandler) null);
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setEncoding("?>");
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.normalize(uRI0);
      URL uRL0 = MockURI.toURL(uRI1);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("d&:zD!Og2m7(C.]\"");
      stringReader0.read();
      String string0 = "4ks19>8HhLD+";
      sAXReader0.setEncoding("@");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-19);
      byteArray0[2] = (byte) (-41);
      byteArray0[0] = (byte) (-19);
      byteArray0[5] = (byte) (-41);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "4ks19>8HhLD+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"@\". Nested exception: Invalid encoding name \"@\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      xMLFilterImpl0.getContentHandler();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      xMLFilterImpl0.startDocument();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      File file0 = MockFile.createTempFile("//tmp/tmp/tmp/org.dom4j.dom.DOMCDATA0tif~Uso\f-\"fheo){0/tmp/org.dom4j.dom.DOMCDATA0tif~Uso\f-\"fheo){0Q{do4^]jK#;!", " [");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9730014063936123
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("'@q2)=Cgf|");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      String string0 = "DL7)";
      StringReader stringReader0 = new StringReader("DL7)");
      try { 
        sAXReader0.read((Reader) stringReader0, "DL7)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.startDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setEncoding("%");
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      xMLFilterImpl0.getEntityResolver();
      try { 
        sAXReader0.read("%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      xMLFilterImpl0.startDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setEncoding("?>");
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      StringReader stringReader0 = new StringReader("K%p;");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
