/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:29:10 GMT 2018
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.net.SocketOption;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getClientEvent();
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.getAuthenticator();
      theClient0.getClientEventHandler();
      theClient0.getClientEvent();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("", 0);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(proxy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Proxy
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      String string0 = null;
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTryMsg((String) null);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("", (-1657), inetAddress0, (-1657));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1657
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.toString();
      theClient0.setMaxAuthTryMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      boolean boolean0 = false;
      int int0 = 0;
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", 0, false);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@38861c8b
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getTimeoutMsg();
      CommandHandler commandHandler0 = new CommandHandler();
      ClientHandler clientHandler0 = null;
      // Undeclared exception!
      try { 
        commandHandler0.lostConnection((ClientHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.CommandHandler", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getTrusted();
      int int0 = (-1238);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-1238));
      blockingClientHandler0.run();
      // Undeclared exception!
      try { 
        blockingClientHandler0.updateInputOutputStreams();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEvent();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTrusted(true);
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 4916);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(proxy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid Proxy
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockSocket", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setServer((QuickServer) null);
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1);
      try { 
        blockingClientHandler0.handleClient(theClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient0.setMaxAuthTry(0);
      theClient1.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setCommunicationLogging(false);
      theClient0.setCommunicationLogging(true);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg((String) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTryMsg("i6)&bhelC~BXKo");
      theClient0.setCommunicationLogging(true);
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.clean();
      theClient0.getClientEvent();
      theClient0.getSocket();
      try { 
        QuickServer.load("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Could not init server from xml file
         //
         verifyException("org.quickserver.net.server.QuickServer", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeout();
      TheClient theClient1 = new TheClient();
      theClient1.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      String string0 = null;
      theClient1.setMaxConnectionMsg((String) null);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientAuthenticationHandler();
      theClient1.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientCommandHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.setClientCommandHandler((ClientCommandHandler) null);
      theClient1.setMaxConnectionMsg((String) null);
      theClient0.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      SocketChannel socketChannel0 = SocketChannel.open();
      SocketOption<Integer> socketOption0 = (SocketOption<Integer>) mock(SocketOption.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(socketOption0).toString();
      Integer integer0 = new Integer(0);
      // Undeclared exception!
      try { 
        socketChannel0.setOption(socketOption0, integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.getClientObjectHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setMaxAuthTryMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      TheClient theClient1 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient1.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z@dU, C\"[");
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      System.setCurrentTimeMillis((-663L));
      System.setCurrentTimeMillis(1000L);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      System.setCurrentTimeMillis((-1L));
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("", 625, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@14666983
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(1791);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1791);
      blockingClientHandler0.getSocket();
      theClient0.setSocket((Socket) null);
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxAuthTryMsg("");
      TheClient theClient1 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      assertEquals(1791, theClient0.getTimeout());
      
      TheClient theClient2 = new TheClient();
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertFalse(theClient2.getTrusted());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.updateLastCommunicationTime();
      blockingClientHandler0.run();
      blockingClientHandler0.getClientData();
      theClient0.setClientData((ClientData) null);
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTrusted(true);
      // Undeclared exception!
      try { 
        blockingClientHandler0.getSelectionKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setMaxAuthTryMsg("Client Thread Pool - ");
      theClient0.getClientData();
      theClient0.getClientObjectHandler();
      theClient0.setTimeout(2915);
      theClient0.setMaxAuthTry(0);
      theClient0.getMaxConnectionMsg();
      assertEquals(2915, theClient0.getTimeout());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("AsF~!(");
      theClient0.getMaxAuthTry();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxConnectionMsg("%gMup_+F");
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      theClient0.setMaxAuthTry(0);
      theClient0.getTimeoutMsg();
      theClient0.setTrusted(false);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientEventHandler();
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getMaxAuthTryMsg();
      CommandHandler commandHandler0 = new CommandHandler();
      ClientHandler clientHandler0 = null;
      // Undeclared exception!
      try { 
        commandHandler0.lostConnection((ClientHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.CommandHandler", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(1791);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(1791);
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.setCommunicationLogging(true);
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      blockingClientHandler0.getClientData();
      theClient0.setTimeoutMsg("[|4q/j]%QrrmUB0]");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      theClient0.toString();
      theClient0.getCommunicationLogging();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getMaxConnectionMsg();
      TheClient theClient1 = new TheClient();
      theClient1.getClientCommandHandler();
      theClient1.setClientCommandHandler((ClientCommandHandler) null);
      blockingClientHandler0.getServer();
      theClient1.setServer((QuickServer) null);
      TheClient theClient2 = new TheClient();
      theClient2.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientEvent();
      assertEquals(1791, theClient0.getTimeout());
  }
}
