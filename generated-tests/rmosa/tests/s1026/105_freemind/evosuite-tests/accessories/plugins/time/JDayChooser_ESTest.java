/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:28:39 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.filemode.FileController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.font.FontRenderContext;
import java.sql.Time;
import java.sql.Timestamp;
import java.text.AttributedCharacterIterator;
import java.text.CharacterIterator;
import java.time.Instant;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import javax.help.BackAction;
import javax.swing.AbstractButton;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.plaf.basic.BasicListUI;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.PlainDocument;
import javax.swing.text.Segment;
import javax.swing.text.StringContent;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.pdf.PDFTTFStream;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.wml.dom.WMLDocumentImpl;
import org.apache.xalan.templates.ElemUnknown;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;
import org.w3c.dom.DocumentType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.706697613279902
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(42);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 42, (-56L), 940, 940, ';');
      jDayChooser0.getAlignmentY();
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      jDayChooser0.setDay(42);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 3;
      int int1 = 228;
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 3, "day", 228);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale.forLanguageTag("day");
      jDayChooser0.getLocale();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 16, 0, 0, 16, 'S', 0);
      keyEvent0.setKeyCode(36);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.revalidate();
      Color color0 = jDayChooser0.sundayForeground;
      MockDate mockDate0 = new MockDate();
      jDayChooser0.getDayPanel();
      // Undeclared exception!
      try { 
        MockDate.parse("J]x%kNeD,QLYUPwY6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6789477095792162
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.list();
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.firePropertyChange("day", (-852.1145), 4206.724887);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7039446318508733
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      SystemColor systemColor0 = SystemColor.activeCaptionBorder;
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setForeground(systemColor0);
      JComponent.isLightweightComponent(jDayChooser0);
      Color.getColor((String) null);
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-4969);
      Locale locale0 = Locale.JAPANESE;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      canvasGraphicsNode0.getRoot();
      Locale locale1 = Locale.KOREA;
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      int int0 = (-4969);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4969), (-4969), (-4969), (-4969), 'I');
      keyEvent0.setKeyChar('b');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setFocusTraversalKeysEnabled(false);
      Locale locale0 = Locale.ITALY;
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale locale1 = Locale.forLanguageTag("Windows");
      locale0.getDisplayScript(locale1);
      canvasGraphicsNode0.getRoot();
      // Undeclared exception!
      try { 
        Locale.lookup((List<Locale.LanguageRange>) null, (Collection<Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekdayForeground((Color) null);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.setSubject("day");
      Date date0 = pDFInfo0.getCreationDate();
      assertNull(date0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.list();
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.firePropertyChange("day", (-852.1145), 4206.724887);
      Date date0 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.maxSelectableDate = date0;
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(2512);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getActionMap();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.firePropertyChange((String) null, (byte)100, (byte)100);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDay(13);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.drawDays();
      // Undeclared exception!
      try { 
        unmarshallingContext0.convertDate("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxSelectableDate();
      Date date0 = jDayChooser0.maxSelectableDate;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-463));
      jDayChooser0.setDayBordersVisible(true);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.oldDayBackgroundColor = color0;
      jDayChooser0.setMonth(33);
      jDayChooser0.setMaxDayCharacters(33);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.getLabelFor();
      FocusEvent focusEvent0 = new FocusEvent(defaultListCellRenderer_UIResource0, 23, false, jDayChooser0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.662701752014223
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-463));
      jDayChooser0.setMaxDayCharacters((-463));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setVisible(false);
      jDayChooser0.setMonth(33);
      jDayChooser0.setMaxDayCharacters(33);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.resetKeyboardActions();
      jDayChooser0.getSelectedDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HsqlProperties hsqlProperties0 = new HsqlProperties("day");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      Timestamp.valueOf(localDateTime0);
      MockFile mockFile0 = new MockFile("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setFocus();
      Color color0 = Color.RED;
      jDayChooser0.isDecorationBordersVisible();
      byte[] byteArray0 = new byte[4];
      jDayChooser_DecoratorButton0.getDisabledSelectedIcon();
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte) (-79);
      char char0 = '2';
      MenuElement[] menuElementArray0 = new MenuElement[4];
      MindMapMode mindMapMode0 = new MindMapMode();
      // Undeclared exception!
      try { 
        mindMapMode0.toLocalizedString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.Mode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate(13, 13, 3823);
      MockDate.UTC(3823, (-1699), 4, 4, 38, 1);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      BasicListUI basicListUI0 = new BasicListUI();
      JList<MockCalendar> jList0 = new JList<MockCalendar>();
      // Undeclared exception!
      try { 
        basicListUI0.indexToLocation(jList0, (-1437625606));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicListUI", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2200, true);
      Object object0 = jDayChooser0.getTreeLock();
      focusEvent0.setSource(object0);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.797362550286864
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDayBordersVisible(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.firePropertyChange("Windows", 375, 17);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 49, (-1L), (-3), 44, 'u');
      jDayChooser0.keyPressed(keyEvent0);
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.662701752014223
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setMinSelectableDate(date0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.setEnabled(true);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Stack<AttributedCharacterIterator.Attribute> stack0 = new Stack<AttributedCharacterIterator.Attribute>();
      JTable jTable0 = new JTable(stack0, stack0);
      Color color0 = jTable0.getGridColor();
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.firePropertyChange((String) null, (byte)100, (byte)100);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      System.setCurrentTimeMillis(5270400000L);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.8068487729375327
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlignmentY(145.30472F);
      jDayChooser0.setMaxDayCharacters(2);
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Color color0 = Color.white;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange((String) null, (byte)100, (byte)100);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser_DecoratorButton0.isRequestFocusEnabled();
      jDayChooser0.setYearChooser((JYearChooser) null);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange((String) null, (byte)100, (byte)100);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((byte)100);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JComponent.isLightweightComponent(jDayChooser0);
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.list();
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.firePropertyChange("day", (-852.1145), 4206.724887);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocument pDFDocument0 = new PDFDocument("11");
      PDFResources pDFResources0 = new PDFResources((-3649));
      PDFTTFStream pDFTTFStream0 = new PDFTTFStream((-1466));
      PDFPage pDFPage0 = new PDFPage(pDFResources0, pDFTTFStream0, (-2801), (-5025));
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, (FontInfo) null, pDFDocument0, pDFPage0, "8", (String) null, 4);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.834815241946004
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-463));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-463), (-1L), (-463), 1075, 'h');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyReleased(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      WMLDocumentImpl wMLDocumentImpl0 = new WMLDocumentImpl((DocumentType) null);
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(wMLDocumentImpl0);
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
      jDayChooser_DecoratorButton0.paint(sVGGraphics2D0);
      jDayChooser0.setEnabled(false);
      Locale locale0 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.608820614830946
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.list();
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.firePropertyChange("day", (-852.1145), 4206.724887);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDay((-1556));
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Date date0 = jDayChooser0.minSelectableDate;
      Instant instant0 = MockInstant.ofEpochMilli(1L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      jDayChooser1.setSelectableDateRange(date0, timestamp0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser1.drawDays();
      jDayChooser1.setFocus();
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.799517964535027
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth((-463));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(33);
      jDayChooser0.setMaxDayCharacters(33);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1522, 667L, 1522, 33, '_');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMaxDayCharacters(0);
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7245232524096474
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "4");
      jDayChooser0.firePropertyChange("4", 626.5612051486569, (-474.537));
      jDayChooser0.drawWeeks();
      int int0 = 4;
      int int1 = 244;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 33, 244, 34, 'b', 4);
      keyEvent0.consume();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.692610179636627
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.drawWeeks();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 33, 990L, 33, 33, '5', 4);
      keyEvent0.setKeyCode(40);
      jDayChooser0.keyPressed(keyEvent0);
      StringContent stringContent0 = new StringContent(33);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = jDayChooser0.locale;
      Locale locale1 = Locale.ITALIAN;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale1);
      locale0.getDisplayVariant(locale1);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.updateUI();
      jDayChooser0.setRequestFocusEnabled(false);
      keyEvent0.setKeyChar('k');
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale locale0 = jDayChooser0.locale;
      Locale locale1 = Locale.ITALIAN;
      locale0.getScript();
      locale0.getDisplayVariant(locale1);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1768, 600000L, 36, (-1663), '[');
      keyEvent0.setKeyCode(38);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener1 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      ContainerListener containerListener2 = AWTEventMulticaster.remove(containerListener0, containerListener1);
      ContainerListener containerListener3 = AWTEventMulticaster.add(containerListener2, containerListener2);
      assertNotNull(containerListener3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.list();
      jDayChooser0.setDay(28);
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.setMonth(33);
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.list();
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDay(2097152);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initialized = false;
      jDayChooser0.list();
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.firePropertyChange("day", (-852.1145), 4206.724887);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.drawDays();
      XmlDocument xmlDocument0 = new XmlDocument();
      Locale locale0 = xmlDocument0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 16, 0L, 37, 37, '/', 0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 16, '/', 16, 1043, '/', 0);
      keyEvent1.setKeyCode(20);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.list();
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.firePropertyChange("day", (-852.1145), 4206.724887);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 728, 728, 127, 39, 'R', 4);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.drawDays();
      jDayChooser1.updateUI();
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.drawWeeks();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 16, 0, 0, 16, 'S', 0);
      keyEvent0.setKeyCode(35);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      jDayChooser0.updateUI();
      Random.setNextRandom(35);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initialized = false;
      jDayChooser0.getTopLevelAncestor();
      jDayChooser0.drawWeeks();
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte) (-88);
      byteArray0[2] = (byte)62;
      byteArray0[3] = (byte)55;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)42;
      byteArray0[6] = (byte) (-71);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.day = 0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4231), (-4231), 289, 289, '6');
      keyEvent0.paramString();
      KeyEvent.getExtendedKeyCodeForChar(2);
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemUnknown elemUnknown0 = new ElemUnknown();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemUnknown0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getClosedIcon();
      JButton jButton0 = new JButton("day", icon0);
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.list();
      jDayChooser0.getHierarchyListeners();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.firePropertyChange("day", (-852.1145), 4206.724887);
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 4, (-437L), 0, 4, '(');
      jDayChooser0.keyPressed(keyEvent0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      LocalDate localDate0 = MockLocalDate.now();
      LocalTime localTime0 = MockLocalTime.now();
      LocalDateTime localDateTime0 = MockLocalDateTime.of(localDate0, localTime0);
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1301));
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofInstant(localDateTime0, zoneOffset0, (ZoneId) zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      jDayChooser0.calendar = (Calendar) gregorianCalendar0;
      jDayChooser0.setMonth((-463));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setMonth(33);
      jDayChooser0.setMaxDayCharacters(33);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("day");
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false, mockFileOutputStream0, 2522, 33);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 19, (-2668L), (-1301), 1787, '9', 1);
      jDayChooser0.keyPressed(keyEvent0);
  }
}
