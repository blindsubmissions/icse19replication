/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:32:51 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = JSONObject.quote("{");
      assertEquals("\"{\"", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote(": ");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = (-2257);
      jSONArray0.optJSONObject((-2257));
      String[] stringArray0 = new String[1];
      stringArray0[0] = ": ";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\",\n\"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string1 = jSONObject1.toString(45, (-846));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4375503412075572
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      Double double0 = new Double(0.0);
      Double.max(0.0, 0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
      
      String string1 = JSONObject.doubleToString(53.8);
      assertEquals("53.8", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject.quote(",\n");
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4057382291118443
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = JSONObject.quote("Oh=/xT<O:lot8y");
      JSONObject jSONObject0 = new JSONObject((Object) "\"O\\h=/xT<O:lot8y\"");
      Short short0 = new Short((short) (-755));
      jSONObject0.append("] is not a JSONObject.", short0);
      assertEquals(4, jSONObject0.length());
      
      String string1 = JSONObject.valueToString("\"O\\h=/xT<O:lot8y\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.558255126072715
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JSONObject.quote("e/jm,O2`ej^p8C");
      assertEquals("\"e/jm,O2`ej^p8C\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"\\e/jm,O2`ej^p8C\"");
      boolean boolean0 = jSONObject0.optBoolean("e/jm,O2`ej^p8C");
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.quote("y)s");
      assertEquals("\"y)s\"", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("0");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject.quote("Oh=/xTnT<O:7+t8y");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Oh=/xTnT<O:7+t8y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Oh=/xTnT<O:7+t8y
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject.quote("Oh=/xT<O:lot8y");
      JSONTokener jSONTokener0 = new JSONTokener("\"O\\h=/xT<O:lot8y\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"O\\h=/xT<O:lot8y\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.quote("Bad value from toJSONString: ");
      Float float0 = new Float(0.0);
      JSONObject.testValidity(float0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONTokener jSONTokener0 = new JSONTokener("{K74r(XHnQi)GA!");
      jSONTokener0.syntaxError("\t");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 15 of {K74r(XHnQi)GA!
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = JSONObject.quote("Oh=/xT<O:lot8y");
      Byte byte0 = new Byte((byte)116);
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = JSONObject.quote("Oh=/xT<O:lot8y");
      Double double0 = new Double(0.0);
      String string1 = JSONObject.valueToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9536870968261045
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject.quote("e/jm,O2`ej^p8C");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("toB", 50);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getdoubleToRawLongBits";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      linkedList0.add(jSONObject0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = JSONObject.quote("e/jm,O2`ej^p8C");
      assertEquals("\"e/jm,O2`ej^p8C\"", string0);
      
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString(1, 42);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = JSONObject.quote("e/jm,O2`ej^p8C");
      Long long0 = new Long(1L);
      String string1 = JSONObject.numberToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1923957433509245
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = JSONObject.quote("e/jm,O2`ej^p8C");
      assertEquals("\"e/jm,O2`ej^p8C\"", string0);
      
      Byte byte0 = new Byte((byte)92);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString((int) (byte)92, (int) (byte)92);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1923957433509247
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject.quote("Oh=/xT<O:lot8y");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"O\\h=/xT<O:lot8y\"";
      stringArray0[1] = "\"O\\h=/xT<O:lot8y\"";
      stringArray0[2] = "Oh=/xT<O:lot8y";
      stringArray0[3] = "\"O\\h=/xT<O:lot8y\"";
      stringArray0[4] = "Oh=/xT<O:lot8y";
      stringArray0[5] = "\"O\\h=/xT<O:lot8y\"";
      stringArray0[6] = "Oh=/xT<O:lot8y";
      stringArray0[7] = "\"O\\h=/xT<O:lot8y\"";
      stringArray0[8] = "Oh=/xT<O:lot8y";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("=/i5t6j", (-2187L));
      try { 
        jSONObject1.getBoolean("y~t\"-@oc26r1|Gy*#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y~t\\\"-@oc26r1|Gy*#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      String string0 = ",\n";
      String string1 = "isdoubleToLongBits";
      jSONObject0.optLong("isdoubleToLongBits");
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = JSONObject.quote("\f");
      assertEquals("\"\\f\"", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6845649069716608
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("getnotify");
      JSONObject jSONObject1 = jSONObject0.put("czoA1", (Object) "czoA1");
      try { 
        jSONObject1.getBoolean("czoA1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"czoA1\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("pB@wG2gG]:\"XE6\"##");
      String string0 = JSONObject.quote("pB@wG2gG]:\"XE6\"##");
      assertEquals("\"pB@wG2gG]:\\\"XE6\\\"##\"", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2265558156134033
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<JSONArray, String> hashMap0 = new HashMap<JSONArray, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString((-4103));
      linkedList0.add(jSONObject0);
      String string0 = JSONObject.valueToString(linkedList0);
      String string1 = JSONObject.quote("[wheel.json.JSONObject@0000000001]");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Double double0 = new Double((-603.4687220103075));
      Double.min(0.0, 1.0);
      Double.min((-603.4687220103075), 1.0);
      Double.isFinite((-603.4687220103075));
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      
      String string0 = JSONObject.doubleToString((-603.4687220103075));
      assertEquals("-603.4687220103075", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = JSONObject.quote("e/jm,O2q`ej^p8C");
      assertEquals("\"e/jm,O2q`ej^p8C\"", string0);
      
      Float float0 = new Float(0.0F);
      String string1 = JSONObject.numberToString(float0);
      String string2 = JSONObject.valueToString(float0, 46, 46);
      assertTrue(string2.equals((Object)string1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0, 34, 34);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject.quote("e/jdsO2Yet^pD_C");
      String string0 = JSONObject.quote("\"\\e/jdsO2Yet^pD_C\"");
      assertEquals("\"\\\"\\\\e/jdsO2Yet^pD_C\\\"\"", string0);
      
      String string1 = JSONObject.valueToString("\"\"\\\\e/jdsO2Yet^pD_C\"\"", 106, 60);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.toString(62, 62);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject.quote("Unclosed comment");
      HashMap<Long, Short> hashMap0 = new HashMap<Long, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("2YXRF}{h-\"KzC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2YXRF}{h-\\\"KzC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 123, 123);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      // Undeclared exception!
      try { 
        linkedList0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0437938808441543
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("false", (-1042L));
      // Undeclared exception!
      try { 
        linkedList0.add(2375, jSONObject1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2375, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("par");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.getBoolean("% 3.HD/(");
      String string0 = jSONObject0.optString("% 3.HD/(");
      Float float0 = new Float(1245.50523452);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = JSONObject.quote("e/jm,O2`ej^p8C");
      assertEquals("\"e/jm,O2`ej^p8C\"", string0);
      
      String string1 = JSONObject.valueToString("e/jm,O2`ej^p8C");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashMap<Float, String> hashMap0 = new HashMap<Float, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = JSONObject.quote("U~%Z2q #0]J}{eqAg%");
      assertEquals("\"U~%Z2q #0]J}{eqAg%\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, (-3983), (-3983));
      assertEquals("null", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-2041));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("f0pgL}'K-s]Z");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Double double0 = new Double((-603.4687220103075));
      Double.min((-603.4687220103075), 1.0);
      Double.isFinite((-603.4687220103075));
      JSONObject jSONObject0 = new JSONObject(double0);
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("flo", object0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      linkedList0.offerFirst(boolean0);
      JSONObject.valueToString(linkedList0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long long0 = new Long(1915L);
      hashMap0.put(long0, "' and instead saw '");
      Long long1 = new Long(1L);
      Long.min(1L, 1L);
      hashMap0.put(long1, "istoOctalString");
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681098
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0, (-1964), (-1964));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.quote("% 3.HD/(");
      jSONObject0.put("", (-2446));
      Boolean.getBoolean("");
      String string0 = jSONObject0.optString("");
      Float float0 = new Float(1245.50523452);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.310262480099327
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject.quote("e/jm,O2`ej^p8C");
      long long0 = (-13L);
      Long.valueOf((-13L));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(":+K", (Object) ":+K");
      try { 
        jSONObject0.getBoolean(":+K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":+K\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8840633284714166
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(42);
      jSONObject0.accumulate("mzoU1", integer0);
      jSONObject0.optInt("mzoU1");
      JSONObject jSONObject1 = jSONObject0.put("mzoU1", (Object) "mzoU1");
      jSONObject0.optInt("Expected '", 20);
      jSONObject1.getString("mzoU1");
      try { 
        jSONObject1.getBoolean("mzoU1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mzoU1\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("kB&\"VW|lO&");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8437189802566052
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Byte byte0 = new Byte((byte)19);
      Byte.compare((byte)29, (byte)19);
      JSONObject jSONObject0 = new JSONObject(byte0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      jSONObject0.optJSONObject("\"$2L9");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("istoHexString", (-4181.73210479488));
      jSONObject0.optDouble("istoHexString", (-3292.6));
      String string0 = "gettoBinaryString";
      try { 
        jSONObject0.get("gettoBinaryString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoBinaryString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "{");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, 11.576653621075039);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7202025435261348
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(49);
      jSONObject0.accumulate("gethashCode", "gethashCode");
      try { 
        jSONObject0.getJSONObject("gethashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethashCode\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("0", object0);
      try { 
        jSONObject2.append("0", "0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[0] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object1);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject0.put("My", (Collection) linkedList1);
      Long long0 = new Long((-1L));
      jSONObject2.append("My", long0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Byte byte0 = new Byte((byte)68);
      Byte.compare((byte) (-7), (byte)68);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(byte0, (-75), (-75));
      StringWriter stringWriter0 = new StringWriter();
      boolean boolean0 = jSONObject0.has("N5j:>g{bVZ,?");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.9210648813071531
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Short short0 = new Short((short)160);
      Byte byte0 = new Byte((byte)1);
      Byte.compare((byte)1, (byte)59);
      Short.toUnsignedInt((short)1140);
      Byte.compare((byte)59, (byte)58);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short) (-1111), (byte)58);
      jSONObject0.optDouble("?,HKTZ=");
      JSONObject jSONObject1 = jSONObject0.put("?,HKTZ=", 65);
      Short.toUnsignedInt((byte)59);
      jSONObject1.getLong("?,HKTZ=");
      Long long0 = new Long(65);
      jSONObject0.accumulate("?,HKTZ=", long0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Byte byte0 = new Byte((byte)68);
      Byte byte1 = new Byte((byte)68);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "i)|&";
      JSONObject jSONObject1 = jSONObject0.put("i)|&", 10);
      try { 
        jSONObject1.getJSONArray("i)|&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"i)|&\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(903, 939.8520508979246);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        Double.valueOf("toS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8073365769337295
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("getnotify");
      String string0 = "vzoU1";
      JSONObject jSONObject1 = jSONObject0.put("vzoU1", (Object) "vzoU1");
      try { 
        jSONObject1.getInt("vzoU1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"vzoU1\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      Integer integer0 = new Integer((-3099));
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[5];
      stringArray0[4] = "*";
      stringArray0[2] = "*";
      stringArray0[4] = "gettoString";
      JSONObject jSONObject1 = new JSONObject(linkedList0, stringArray0);
      jSONObject1.append("] notNfonby", "gettoString");
      JSONArray jSONArray0 = jSONObject1.optJSONArray("] notNfonby");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.976620921118269
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "0";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.put("0", object0);
      jSONObject1.optLong("0");
      try { 
        jSONObject1.getBoolean("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Integer integer0 = new Integer((-3099));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Collection) linkedList0);
      Float float0 = new Float(1.0F);
      jSONObject1.accumulate("] not found.", float0);
      Double double0 = new Double(0.0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HashMap<JSONArray, JSONObject> hashMap0 = new HashMap<JSONArray, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, 58, 58);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.1602008635892145
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Integer integer0 = new Integer((-3099));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Collection) linkedList0);
      Integer.compare((-3099), (-1481));
      jSONObject1.toString((-3099), 12);
      JSONObject jSONObject2 = new JSONObject("{\n\"java.lang.String@0000000003\": [],\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\"\n            }");
      Integer.sum(275, 275);
      JSONObject jSONObject3 = jSONObject2.put("{\n\"java.lang.String@0000000003\": [],\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\"\n            }", true);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject3.write(stringWriter0);
      jSONObject3.write(writer0);
      jSONObject0.toString(12, 12);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("Pcix-.");
      assertEquals("\"Pcix-.\"", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "istoJSONArray";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.accumulate("istoJSONArray", jSONObject0);
      JSONObject jSONObject3 = jSONObject2.getJSONObject("istoJSONArray");
      assertNotSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("A JSONObject text must end with '}'", (Object) float0);
      double double0 = jSONObject0.getDouble("A JSONObject text must end with '}'");
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("V67lt\"<Pd", jSONArray0);
      StringWriter stringWriter0 = new StringWriter(8);
      jSONObject0.putOpt("V67lt\"<Pd", jSONObject1);
      // Undeclared exception!
      jSONObject1.write(stringWriter0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.0081668230070933
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Integer integer0 = new Integer((-3099));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Collection) linkedList0);
      jSONObject1.getJSONArray("] not found.");
      jSONObject1.toString((-3099), 12);
      assertEquals(2, jSONObject0.length());
      
      String string0 = JSONObject.quote("] not found.");
      assertEquals("\"] not found.\"", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String string0 = "{`3j4lsoDch:,+bB";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{`3j4lsoDch:,+bB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 13 of {`3j4lsoDch:,+bB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.2033320406994705
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "{`3j4lso=4h:+bB";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{`3j4lso=4h:+bB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {`3j4lso=4h:+bB
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("LF}L<Y", (Object) boolean0);
      boolean boolean1 = jSONObject1.getBoolean("LF}L<Y");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.doubleToString((-62164681));
      assertEquals("-6.2164681E7", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Integer integer0 = new Integer((-3099));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String string0 = "] not found.";
      Boolean boolean0 = new Boolean(true);
      jSONObject0.put("] not found.", (Object) boolean0);
      jSONObject0.getBoolean("] not found.");
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONArray0.getJSONObject((-3099));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3099] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("YgSeC32jZ'g ");
      JSONObject jSONObject1 = jSONObject0.accumulate("YgSeC32jZ'g ", jSONObject0);
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      jSONObject1.put("YgSeC32jZ'g ", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("YgSeC32jZ'g ");
      assertNotSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "4d");
      String string0 = jSONObject0.toString(60, 60);
      Float float0 = new Float(0.0F);
      Float.min(0.0F, 0.0F);
      String string1 = JSONObject.valueToString(float0, 3, 34);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = JSONObject.quote("ww1</m");
      assertEquals("\"ww1<\\/m\"", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "true";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("true", (Object) "true");
      jSONObject1.getBoolean("true");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getBoolean(95);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[95] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Float float0 = new Float(136.19524160662462);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      try { 
        jSONObject0.getBoolean("[J>@5Y[WCZ%\"hG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[J>@5Y[WCZ%\\\"hG\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("false", (Object) "false");
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.getBoolean("false");
      try { 
        Byte.valueOf("false", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 0 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }
}
