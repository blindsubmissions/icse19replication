/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:32:15 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import org.apache.derby.catalog.UUID;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.jdbcx.JdbcConnectionPool;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("Z[Qx|56\"Sn=", "Z[Qx|56\"Sn=", "Z[Qx|56\"Sn=");
      assertEquals("'Z[Qx|56\"Sn='", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9035282968222415
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("w,rGM>rY", false);
      assertEquals("w, rGM > rY", string0);
      
      System.setCurrentTimeMillis(2876L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ROLE", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("w,rGM>rY", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "create table ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create table \" UNIQUE ()", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.normalize("3e7+$ca+&QBJ=apAZ", true);
      int int0 = (-740);
      DBDataType.getInstance((-740), "rD(@[)\"61B(=j~t$Po");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "\"/";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "rD(@[)\"61B(=j~t$Po";
      stringArray0[1] = "truncate+g8<?jfyp";
      stringArray0[2] = "3e7 + $ ca + & QBJ = apAZ";
      stringArray0[3] = "rD(@[)\"61B(=j~t$Po";
      stringArray0[4] = "3e7+$ca+&QBJ=apAZ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\"/", false, stringArray0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "rD(@[)\"61B(=j~t$Po", (-740), (-69));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -740, end -69, s.length() 18
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5775137153768709
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.normalize("Ow*+(/UhGp", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Ow * + (/ UhGp", defaultDBTable0, 895, "ZE>HVN\"RJa=11vg@");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "M]:%z[#K";
      stringArray0[1] = "Ow*+(/UhGp";
      stringArray0[2] = "Ow * + (/ UhGp";
      stringArray0[3] = "M]:%z[#K";
      stringArray0[4] = "ZE>HVN\"RJa=11vg@";
      stringArray0[5] = "Ow*+(/UhGp";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "M]:%z[#K", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("Ow*+(/UhGp", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.append((CharSequence) "M]:%z[#K", 12, (-1366));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 12, end -1366, s.length() 8
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("update.5v,>r3jv#jwr_~");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update.5v,>r3jv#jwr_~", false, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      String string0 = "nyu<'6u6";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("getindexablerow");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.normalize("3e7+$ca+&QBJ=apAZ", true);
      boolean boolean0 = SQLUtil.isQuery("3e7+$ca+&QBJ=apAZ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.join("", "ds", stringArray0, (String) null, "ds", stringArray0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "null as ds on ");
      StringBuilder stringBuilder0 = new StringBuilder("ds");
      char[] charArray0 = new char[30];
      charArray0[0] = 'W';
      charArray0[2] = '*';
      charArray0[3] = 'W';
      charArray0[4] = '*';
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "!wVK2|u";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("!wVK2|u", (String[]) null, "!wVK2|u", "!wVK2|u", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = "?";
      stringArray0[1] = "?";
      stringArray0[3] = "?";
      stringArray0[4] = "?";
      stringArray0[5] = "call";
      SQLUtil.join("?", "?", stringArray0, "ALTER TABLE ", "MIN ", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "? join ALTER TABLE  as MIN  on ?.null = MIN .null and ?.? = MIN .? and ?.null = MIN .null and ?.? = MIN .? and ?.? = MIN .? and ?.call = MIN .call");
      stringBuilder0.reverse();
      StringBuffer stringBuffer0 = new StringBuffer(":A2");
      DBDataType dBDataType0 = DBDataType.getInstance((-138), " and ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ALTER TABLE ", (DBTable) null, dBDataType0);
      assertNull(defaultDBColumn0.getDoc());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addRequiredCondition("FOREIGN KEY ", stringBuilder0);
      assertEquals("FOREIGN KEY ", stringBuilder0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = SQLUtil.normalize("ph]w7LY1S5']", true);
      assertEquals("ph ] w7LY1S5 ']'", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((CharSequence) "+");
      SQLUtil.addRequiredCondition("+", stringBuilder0);
      assertEquals("+ and +", stringBuilder0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Z[Qx|56\"Sn=", (String[]) null, "Z[Qx|56\"Sn=", "Z[Qx|56\"Sn=", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z[Qx|56\"Sn=");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3068291534409705
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.normalize("Ow*+(/UhGp", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      jdbcClob jdbcClob0 = new jdbcClob("Ow * + (/ UhGp");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("truncatKux.'>:{$p trwca~");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("rename");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[7];
      SQLUtil.mutatesDataOrStructure(" U}\"J[!0{mh#5(");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("renametable null", false);
      assertEquals("renametable null", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("renametable null");
      DBSchema dBSchema0 = new DBSchema("T|wi[GM,", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("T|wi[GM,", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "renametable null";
      stringArray0[1] = ",";
      stringArray0[2] = "renametable null";
      stringArray0[3] = "T|wi[GM,";
      stringArray0[4] = ",";
      stringArray0[5] = "T|wi[GM,";
      stringArray0[6] = ",";
      stringArray0[7] = ",";
      stringArray0[8] = "renametable null";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ",", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT , PRIMARY KEY (renametable null, ,, renametable null, T|wi[GM,, ,, T|wi[GM,, ,, ,, renametable null)", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = SQLUtil.normalize("/CGg[]C\"VhW}k", true);
      assertEquals("/ CGg [ ] C \"VhW}k\"", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("updateNCharacterStream(int, Reader, int)");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog updateNCharacterStream(int, Reader, int)", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = "\n\n";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "alter materialized view";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized view", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.mutatesStructure("alter materialized view");
      SQLUtil.removeComments("alter materialized view");
      SQLUtil.normalize("alter materialized view", true);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\n\n", defaultDBTable0, 44, "oJ#F");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(44, "alter materialized view");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("alter materialized view", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      defaultDBColumn1.setFractionDigits(integer0);
      defaultDBTable0.toString();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn(" and ", defaultDBTable0, 44, "alter materialized view");
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.isDDL("\n\n");
      SQLUtil.normalize("alter materialized view", true);
      Random.setNextRandom(5);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[3];
      SQLUtil.renderColumnListWithTableName("alter sessionwf@\"*wjw", stringArray0);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      FBObjectListener.ResultSetListener fBObjectListener_ResultSetListener0 = mock(FBObjectListener.ResultSetListener.class, new ViolatedAssumptionAnswer());
      Random.setNextRandom((-396));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "M]:%z[#K";
      stringArray0[3] = "M]:%z[#K";
      stringArray0[4] = "ZE>HVN\"RJa=11vg@";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "M]:%z[#K", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuffer stringBuffer0 = new StringBuffer("FOREIGN EY ");
      assertEquals(12, stringBuffer0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      SQLUtil.ownerDotComponent(tableContainer0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl2 = new DataDictionaryImpl();
      assertEquals(0, dataDictionaryImpl2.getCollationTypeOfUserSchemas());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("x)c-+vm-HM0", true);
      assertEquals("x) c - + vm - HM0", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      StringBuilder stringBuilder0 = new StringBuilder(":Fa4|FVA;9");
      StringBuilder stringBuilder1 = new StringBuilder(":Fa4|FVA;9");
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition(":Fa4|FVA;9", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(32767, 'd');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Can't set fetch direction");
      SQLUtil.addOptionalCondition("Can't set fetch direction", stringBuilder0);
      assertEquals("Can't set fetch direction", stringBuilder0.toString());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "update.5v,>r3jv#jwr_~", false, (String[]) null);
      dBPrimaryKeyConstraint0.setName((String) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      String string0 = "nyu<'6u6";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("getindexablerow");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-630);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("eJ*\"$vM^0j");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "eJ*\"$vM^0j";
      stringArray0[1] = "eJ*\"$vM^0j";
      stringArray0[3] = "eJ*\"$vM^0j";
      stringArray0[4] = "eJ*\"$vM^0j";
      stringArray0[5] = "eJ*\"$vM^0j";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("eJ*\"$vM^0j", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      SQLUtil.removeComments("eJ*\"$vM^0j");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Character character0 = new Character('N');
      Character.lowSurrogate((-1327));
      SQLUtil.substituteMarkers("Y>|hKy", "Y>|hKy", character0);
      PipedReader pipedReader0 = new PipedReader();
      Long long0 = new Long(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.parseNumbers();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      UUID uUID0 = basicDatabase0.getId();
      assertNull(uUID0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-630), "eJ*\"vM^0j");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("eJ*\"vM^0j", (DBTable) null, dBDataType0, integer0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "eJ*\"vM^0j");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("eJ*\"vM^0jEJ*\"VM^0J(3)EJ*\"VM^0J(3)", stringBuilder0.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("drop table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z*EV>(R", dBSchema0);
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("0`Rm", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      File file0 = FileUtil.canonicalFile("0`Rm");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("0`Rm", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.7371823152157604
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = SQLUtil.normalize("uk?q0xf)E._&ZhkgY-", false);
      assertEquals("uk ? q0xf) E._ & ZhkgY -", string0);
      
      Random.setNextRandom((-2319));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*fN\"4`aSsV<\u0006`iZ");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("callinner", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY () REFERENCES *fN\"4`aSsV<\u0006`iZ()", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.removeComments("Y>|hKy");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-trace", (DBTable) null, 49, "Y>|hKy");
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      linkedList0.add((DBColumn) defaultDBColumn0);
      linkedList0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
      assertEquals("-trace, -trace", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer((String) null);
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      byte[] byteArray0 = new byte[4];
      byteArray0[2] = (byte) (-47);
      BasicDatabase basicDatabase0 = new BasicDatabase();
      basicDatabase0.getId();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("^QF^.");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      dBForeignKeyConstraint0.setDoc("F;!d30k$-EB");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
      String string0 = "C";
      // Undeclared exception!
      try { 
        DBDataType.getInstance((-860), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize("select^.i63r^hbhgyz(>j", true);
      assertEquals("select ^.i63r ^ hbhgyz (> j", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("truncate");
      ErrorMessages errorMessages0 = new ErrorMessages();
      StringReader stringReader0 = new StringReader("select into");
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("delete", false, dBUniqueConstraint0);
      SQLUtil.ownerDotComponent(dBUniqueIndex0);
      TableContainer tableContainer0 = new TableContainer("null.delete");
      BasicUUID basicUUID0 = new BasicUUID();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      DataDictionaryImpl dataDictionaryImpl2 = new DataDictionaryImpl();
      Random.setNextRandom(271);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.mutatesStructure("exec");
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("select into", true, "select into", "f&k!T/wv='nlBAg@+s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.isQuery("select into");
      Random.setNextRandom(321);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("execp?my29*h", true);
      assertEquals("execp ? my29 * h", string0);
      
      System.setCurrentTimeMillis((-1721L));
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, "execp ? my29 * h", "callexec");
      dBCheckConstraint0.setDoc("callexec");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK callexec", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = SQLUtil.normalize("grf;>XE,H", true);
      assertEquals("grf ; > XE, H", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("renameu}\"j[-!0{mh#5(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: renameu}\"j[-!0{mh#5(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionselect * from");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.303092403761719
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l}|6Q4!NMa.8");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "l}|6Q4!NMa.8";
      stringArray0[1] = "l}|6Q4!NMa.8";
      stringArray0[2] = "l}|6Q4!NMa.8";
      stringArray0[3] = "l}|6Q4!NMa.8";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "l}|6Q4!NMa.8", true, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "w::'$F7AkRNE/";
      stringArray0[2] = null;
      stringArray0[4] = "w::'$F7AkRNE/";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "w::'$F7AkRNE/";
      stringArray0[8] = "w::'$F7AkRNE/";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("w::'$F7AkRNE/", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("- ");
      char[] charArray0 = new char[16];
      charArray0[0] = '#';
      mockPrintWriter0.println(charArray0);
      PrintWriter printWriter0 = mockPrintWriter0.format("truncate", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      assertNull(dBTable0.getDoc());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultDBTable0.getColumns();
      DBDataType dBDataType0 = DBDataType.getInstance(8, "ALTER TABLE ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ALTER TABLE ", defaultDBTable0, dBDataType0, (Integer) null);
      defaultDBTable0.equals(defaultDBColumn0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\nReason: ");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setBoolean(String,boolean)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTable("");
      DBDataType dBDataType0 = DBDataType.getInstance((-128), "");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", (DBTable) null, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDefaultValue("");
      SQLUtil.renderColumn(defaultDBColumn0);
      BasicDatabase basicDatabase0 = new BasicDatabase();
      UUID uUID0 = basicDatabase0.getId();
      assertNull(uUID0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-472.237);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 472.237", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TableContainer tableContainer0 = new TableContainer("C");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(3317, "C");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C", defaultDBTable0, dBDataType0, integer0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, 491, ",");
      SQLUtil.renderColumn(defaultDBColumn1);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Ow*+(ZUhGp");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ow*+(ZUhGp");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Ow*+(ZUhGp";
      stringArray0[1] = "Ow*+(ZUhGp";
      stringArray0[2] = "Ow*+(ZUhGp";
      stringArray0[6] = "Ow*+(ZUhGp";
      stringArray0[4] = "rename";
      stringArray0[5] = "Ow*+(ZUhGp";
      stringArray0[6] = "Ow*+(ZUhGp";
      stringArray0[7] = "Ow*+(ZUhGp";
      stringArray0[8] = "Ow*+(ZUhGp";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Ow*+(ZUhGp", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("Ow*+(ZUhGp", defaultDBTable0.getName());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Random.setNextRandom(1110);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("*a1};N()Wb", defaultDBTable0, 1110, "*a1};N()Wb");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 1103.5562;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1103.5562", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = SQLUtil.normalize("Qy_@6L+G$y7--/", false);
      assertEquals("Qy_ @ 6L + G $ y7 -- /", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      TableContainer tableContainer0 = new TableContainer("F`eW^~.z");
      tableContainer0.getTable("gGS<b:#~z");
      DBDataType dBDataType0 = DBDataType.getInstance((-2021161078), "CLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("gGS<b:#~z", (DBTable) null, dBDataType0, integer0, integer0);
      tableContainer0.setDoc("~S[");
      defaultDBColumn0.setDefaultValue("gGS<b:#~z");
      SQLUtil.renderColumn(defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("F`eW^~.z", true, "F`eW^~.z", "F`eW^~.z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("DECIMAL", 376);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis(0L);
      SQLUtil.normalize(")", true);
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")", defaultDBTable0, 153, ")");
      defaultDBTable0.getComponents();
      defaultDBColumn0.setNullable(false);
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBTable0.requiresProvider((-434));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jdbcClob jdbcClob0 = new jdbcClob("$");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = (double) 13;
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.894908860244636
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("insert", false, "Not a supported collection type: ", "insert");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      defaultDBTable0.getReferrers();
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      SQLUtil.removeComments("8z+~]/?ke [X");
      SQLUtil.normalize("insert", false);
      SQLUtil.typeAndName(defaultDBTable0);
      System.setCurrentTimeMillis((-751L));
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint("insert", true, defaultDBTable0, "s");
      dBCheckConstraint0.isEquivalent(dBCheckConstraint1);
      SQLUtil.removeComments("truncate");
      SQLUtil.normalize("truncate", false);
      NameSpec nameSpec1 = NameSpec.NEVER;
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("s", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil.removeComments("Not a supported collection type: ");
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec1);
      String string1 = SQLUtil.removeComments("selectnmeox@108");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, (String) null, "inner");
      String string0 = SQLUtil.typeAndName(dBCheckConstraint0);
      assertEquals("check constraint constraint", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SQLUtil.removeComments("m/oG*N@_Gy_@Cs)R");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m/oG*N@_Gy_@Cs)R", defaultDBTable0, 895, "ZE>HVN\"RJa=11vg@");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "M]:%z[#K";
      stringArray0[1] = "m/oG*N@_Gy_@Cs)R";
      stringArray0[2] = "m/oG*N@_Gy_@Cs)R";
      stringArray0[3] = "M]:%z[#K";
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "M]:%z[#K", true, "m/oG*N@_Gy_@Cs)R");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("m/oG*N@_Gy_@Cs)R NOT NULL", string0);
  }
}
