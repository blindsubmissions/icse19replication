/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:29:29 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setIndent("");
      outputFormat0.setNewlines(false);
      outputFormat0.setIndentSize(4688);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setEncoding(".Y$NJZWn");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.isOmitEncoding();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.isPadText();
      outputFormat0.setLineSeparator(".Y$NJZWn");
      outputFormat0.setNewLineAfterDeclaration(true);
      assertEquals(".Y$NJZWn", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("+s]pcOKH]`u\"X=", false, "+s]pcOKH]`u\"X=");
      boolean boolean0 = outputFormat0.isXHTML();
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("+s]pcOKH]`u\"X=", outputFormat0.getIndent());
      assertEquals("+s]pcOKH]`u\"X=", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtmly!W";
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isOmitEncoding());
      
      outputFormat0.setOmitEncoding(true);
      int int0 = outputFormat0.parseOptions(stringArray0, 2245);
      assertTrue(outputFormat0.isOmitEncoding());
      assertEquals(2245, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.7201248812718097
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, false);
      outputFormat0.setIndent(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "Cv~LLr*U>^|z>l^]=gn";
      stringArray0[2] = null;
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.parseOptions(stringArray0, 284);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-368));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -368
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('(');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (()
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(".2\"", true);
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.setExpandEmptyElements(true);
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", true);
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-expandEmpty";
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(';');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (;)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-padText";
      outputFormat0.setSuppressDeclaration(true);
      stringArray0[1] = "-padText";
      outputFormat0.parseOptions(stringArray0, 598);
      outputFormat0.parseOptions(stringArray0, 598);
      outputFormat0.parseOptions(stringArray0, 4517);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('D');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (D)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtmly!W";
      stringArray0[0] = "-xhtmly!W";
      stringArray0[3] = "-xhtmly!W";
      OutputFormat outputFormat0 = new OutputFormat("-xhtmly!W", true);
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      outputFormat0.setLineSeparator((String) null);
      int int0 = outputFormat0.parseOptions(stringArray0, 32);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(32, int0);
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("-xhtmly!W", outputFormat0.getIndent());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true, "");
      outputFormat0.setIndent(false);
      outputFormat0.getLineSeparator();
      outputFormat0.setNewLineAfterNTags(115);
      assertEquals(115, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("");
      outputFormat0.setPadText(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(true);
      outputFormat0.getEncoding();
      outputFormat0.setPadText(false);
      outputFormat0.isSuppressDeclaration();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat1.isTrimText());
      
      outputFormat1.setTrimText(false);
      assertEquals("UTF-8", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-suppressDeclaration");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('(');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (()
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = " ";
      OutputFormat outputFormat0 = new OutputFormat();
      String string1 = "V";
      outputFormat0.setEncoding("V");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('g');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (g)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtmly!W";
      stringArray0[2] = "-xhtmly!W";
      stringArray0[3] = "-xhtmly!W";
      OutputFormat outputFormat0 = new OutputFormat("-xhtmly!W", true);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, int0);
      assertEquals("-xhtmly!W", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\u0007hVVj>@vhYgR?d\"N?1=");
      OutputFormat outputFormat1 = new OutputFormat("49I~*y;+aCjDt=]c", true);
      outputFormat0.getAttributeQuoteCharacter();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, (-2560));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "HkYOY7pdTX";
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(2, int0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.isOmitEncoding();
      outputFormat0.setNewLineAfterNTags(2397);
      outputFormat0.setNewlines(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "YhaS{fmQ8";
      stringArray0[1] = "";
      stringArray0[2] = "YhaS{fmQ8";
      stringArray0[3] = "YhaS{fmQ8";
      stringArray0[4] = "YhaS{fmQ8";
      stringArray0[5] = "";
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertEquals(2397, outputFormat0.getNewLineAfterNTags());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "C^5n]>";
      OutputFormat outputFormat0 = new OutputFormat("C^5n]>", true);
      String[] stringArray0 = new String[2];
      outputFormat0.setTrimText(true);
      stringArray0[0] = "C^5n]>";
      String string1 = "";
      outputFormat0.setIndent("");
      stringArray0[1] = "C^5n]>";
      int int0 = 2378;
      outputFormat0.parseOptions(stringArray0, 2378);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-6489));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6489
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\u0007hVVj>@vhYgR?d\"N?1=");
      assertEquals("\u0007hVVj>@vhYgR?d\"N?1=", outputFormat0.getIndent());
      
      outputFormat0.setIndent(false);
      outputFormat0.getNewLineAfterNTags();
      boolean boolean0 = outputFormat0.isPadText();
      assertFalse(boolean0);
      
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals('\"', char0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\u0007hVVj>@vhYgR?d\"N?1=";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml", true, ")La@6bQ");
      assertEquals("-xhtml", outputFormat0.getIndent());
      
      outputFormat0.setIndent(true);
      outputFormat0.isNewlines();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")La@6bQ";
      stringArray0[1] = "-xhtml";
      outputFormat0.getLineSeparator();
      assertEquals("  ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setXHTML(true);
      outputFormat0.getIndent();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setSuppressDeclaration(false);
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent("");
      outputFormat1.getIndent();
      outputFormat1.setIndent("");
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("DW-cZ+v8");
      String[] stringArray0 = new String[7];
      stringArray0[6] = "DW-cZ+v8";
      stringArray0[1] = "DW-cZ+v8";
      stringArray0[2] = "DW-cZ+v8";
      stringArray0[3] = "DW-cZ+v8";
      stringArray0[4] = "DW-cZ+v8";
      stringArray0[5] = "DW-cZ+v8";
      stringArray0[6] = "DW-cZ+v8";
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.setXHTML(false);
      outputFormat0.isXHTML();
      outputFormat0.setExpandEmptyElements(false);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
      
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setSuppressDeclaration(false);
      int int1 = outputFormat0.parseOptions(stringArray0, 2);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(2, int1);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("DW-cZ+v8", outputFormat0.getIndent());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("hnhQP_[F", true);
      outputFormat0.setXHTML(true);
      outputFormat0.setIndent(false);
      outputFormat0.setEncoding("hnhQP_[F");
      outputFormat0.isTrimText();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hnhQP_[F";
      stringArray0[1] = "X/ZdH;j";
      stringArray0[2] = "hnhQP_[F";
      stringArray0[3] = "hnhQP_[F";
      stringArray0[5] = "X/ZdH;j";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-253));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -253
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("%_>U/72H-D#^", true, "%_>U/72H-D#^");
      outputFormat0.setIndentSize(1);
      outputFormat0.setTrimText(false);
      assertEquals(" ", outputFormat0.getIndent());
      
      outputFormat0.setIndent((String) null);
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = null;
      String string1 = "LD2n5";
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, "LD2n5");
      String[] stringArray0 = new String[2];
      outputFormat0.setIndent((String) null);
      outputFormat0.setEncoding((String) null);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1234662263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1234662263
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Invalid attribute quote character (");
      OutputFormat outputFormat1 = new OutputFormat("", true, "Mw&JA7h#CdPgQ");
      OutputFormat outputFormat2 = new OutputFormat("m", true);
      assertFalse(outputFormat2.isOmitEncoding());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "Mw&JA7h#CdPgQ";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "";
      stringArray0[4] = "V";
      stringArray0[5] = "-kD-h^fn";
      stringArray0[7] = "m";
      stringArray0[8] = "4o:cag'9VU!i 2E3t!/";
      outputFormat2.parseOptions(stringArray0, 0);
      assertTrue(outputFormat2.isOmitEncoding());
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = "-omitEncoding";
      int int0 = outputFormat0.parseOptions(stringArray1, 1);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml");
      outputFormat0.setIndentSize(0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.dom4j.io.OutputFormat";
      stringArray0[1] = "-padText";
      boolean boolean0 = false;
      OutputFormat outputFormat1 = new OutputFormat("z", false, "yYCWr.!Vh.!-t:NIx");
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indent", true);
      outputFormat0.setIndent(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Cv~LLr*U>^|z>l^]=gn";
      stringArray0[1] = "-indent";
      stringArray0[2] = "-indent";
      stringArray0[3] = "Cv~LLr*U>^|z>l^]=gn";
      OutputFormat outputFormat1 = new OutputFormat("-indent", false, "-suppressDeclaration");
      outputFormat1.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('Y');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (Y)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indent", true, "5w}N23ucG`");
      OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      OutputFormat outputFormat1 = new OutputFormat("-xhtml&-)mV:wZH%", true, "|p]X~B{yFU");
      String[] stringArray0 = new String[5];
      outputFormat1.setNewlines(false);
      outputFormat1.setNewlines(false);
      stringArray0[0] = "-xhtml&-)mV:wZH%";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "bKpOt6,mm";
      stringArray0[3] = "k>73tO'";
      stringArray0[4] = "-xhtml&-)mV:wZH%";
      outputFormat1.parseOptions(stringArray0, 0);
      assertTrue(outputFormat1.isNewlines());
      
      OutputFormat outputFormat2 = new OutputFormat("|p]X~B{yFU");
      outputFormat2.setExpandEmptyElements(false);
      assertFalse(outputFormat2.isOmitEncoding());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty\"B}:>tn]8$Mbuh");
      assertEquals("-expandEmpty\"B}:>tn]8$Mbuh", outputFormat0.getIndent());
      
      outputFormat0.setIndent(false);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getAttributeQuoteCharacter();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-expandEmpty\"B}:>tn]8$Mbuh";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
      
      String[] stringArray1 = new String[9];
      stringArray1[0] = "-expandEmpty\"B}:>tn]8$Mbuh";
      stringArray1[1] = "-expandEmpty\"B}:>tn]8$Mbuh";
      stringArray1[2] = "-expandEmpty\"B}:>tn]8$Mbuh";
      stringArray1[3] = "-expandEmpty\"B}:>tn]8$Mbuh";
      stringArray1[4] = "-expandEmpty\"B}:>tn]8$Mbuh";
      stringArray1[5] = "-expandEmpty\"B}:>tn]8$Mbuh";
      outputFormat0.setAttributeQuoteCharacter('\"');
      stringArray1[6] = "-expandEmpty\"B}:>tn]8$Mbuh";
      stringArray1[7] = "-expandEmpty\"B}:>tn]8$Mbuh";
      stringArray1[8] = "-expandEmpty\"B}:>tn]8$Mbuh";
      int int1 = outputFormat0.parseOptions(stringArray1, 2792);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(2792, int1);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty9!ewTines", true, "-expandEmpty9!ewTines");
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty9!ewTines";
      stringArray0[1] = "-expandEmpty9!ewTines";
      stringArray0[2] = "-expandEmpty9!ewTines";
      stringArray0[3] = "Mw&JA7";
      stringArray0[4] = "-expandEmpty9!ewTines";
      stringArray0[5] = "-expandEmpty9!ewTines";
      stringArray0[6] = "-expandEmpty9!ewTines";
      stringArray0[7] = "-expandEmpty9!ewTines";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Mw&JA7h#CdPgQ");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize(2380);
      OutputFormat outputFormat2 = new OutputFormat("-xhtml&-)mV:wZH%");
      outputFormat1.setPadText(true);
      OutputFormat outputFormat3 = new OutputFormat("-xhtml&-)mV:wZH%");
      outputFormat3.setIndent("-xhtml&-)mV:wZH%");
      outputFormat1.setIndent("-xhtml-xhtmlYhaS{fmQ8");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Mw&JA7h#CdPgQ";
      outputFormat3.parseOptions(stringArray0, 2);
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
      
      int int0 = outputFormat1.parseOptions(stringArray0, 336);
      assertEquals(336, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = new OutputFormat("90&q+k", false, "90&q+k");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtml&-)mV:wZH%";
      stringArray0[1] = "-encoding";
      stringArray0[0] = "F^I5Gr";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml");
      outputFormat0.setIndentSize(0);
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "org.dom4j.io.OutputFormat";
      stringArray0[1] = "-padText";
      outputFormat0.setIndentSize(0);
      stringArray0[2] = "-indentSize";
      outputFormat0.setIndentSize(0);
      stringArray0[3] = "-xhtml";
      outputFormat0.parseOptions(stringArray0, 0);
      stringArray0[4] = "-xhtml";
      stringArray0[5] = "-padText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-xhtml\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat("?_U2a", true, "\"B}:>tn]8$Mbuh");
      outputFormat0.setPadText(false);
      OutputFormat outputFormat2 = new OutputFormat("5w}N23ucG`", false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "5w}N23ucG`";
      stringArray0[2] = "?_U2a";
      stringArray0[3] = "5w}N23ucG`";
      stringArray0[4] = "5w}N23ucG`";
      stringArray0[5] = "qY5Eoo9~8:<lFob^";
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isPadText());
      
      OutputFormat outputFormat3 = new OutputFormat("-suppressDeclaration", true, "-suppressDeclaration");
      int int0 = outputFormat3.parseOptions(stringArray0, 0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(USDqfHe<fVV,";
      stringArray0[1] = "-xhtmly!W";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-xhtmly!W";
      stringArray0[4] = "-trimText";
      stringArray0[5] = "A;&H\t";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent("A;&H\t");
      outputFormat0.parseOptions(stringArray0, 1);
      int int0 = outputFormat0.parseOptions(stringArray0, 248);
      assertEquals("A;&H\t", outputFormat0.getIndent());
      assertEquals(248, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setSuppressDeclaration(false);
      outputFormat1.setIndent("-padText");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat1.getAttributeQuoteCharacter();
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-padText";
      stringArray0[2] = "z{qrRAx[DM oyX";
      stringArray0[3] = "z{qrRAx[DM oyX";
      stringArray0[4] = "z{qrRAx[DM oyX";
      stringArray0[5] = "-padText";
      stringArray0[6] = "z{qrRAx[DM oyX";
      stringArray0[8] = "I";
      outputFormat2.parseOptions(stringArray0, 0);
      assertEquals("-padText", outputFormat2.getLineSeparator());
      
      OutputFormat outputFormat3 = new OutputFormat("-padText");
      int int0 = outputFormat3.getNewLineAfterNTags();
      assertEquals(0, int0);
  }
}
