/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 07:00:45 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6816102690529531
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-2284));
      simpleNode0.jjtSetParent(simpleNode1);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("");
      StringWriter stringWriter0 = new StringWriter(0);
      StringWriter stringWriter1 = stringWriter0.append('P');
      simpleNode0.setIdentifier("|");
      stringWriter0.append((CharSequence) null);
      simpleNode0.dump("&&", stringWriter1);
      simpleNode0.dump("private", stringWriter0);
      assertEquals("Pnull<CompilationUnit>\n  <identifier>|</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>|</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1160);
      simpleNode0.jjtClose();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("X*gjki,K7N");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<{'5G/x^f51R=E(w");
      SimpleNode simpleNode0 = new SimpleNode(73);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      StringWriter stringWriter0 = new StringWriter(73);
      StringWriter stringWriter1 = stringWriter0.append('J');
      stringWriter1.append('J');
      simpleNode0.setIdentifier("|");
      stringWriter1.append((CharSequence) "X*gjki,K7N");
      simpleNode0.dump("|", stringWriter0);
      JavaParser javaParser0 = new JavaParser("X*gjki,K7N");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-1489));
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "X*gjki,K7N", 73, 73);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(44);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(42);
      SimpleNode simpleNode1 = new SimpleNode(60);
      StringWriter stringWriter0 = new StringWriter(81);
      CharBuffer.allocate(81);
      StringWriter stringWriter1 = new StringWriter(936);
      String string0 = "`?tl=G-7R)ui[Ci";
      simpleNode0.jjtGetNumChildren();
      Node node0 = simpleNode1.parent;
      SimpleNode simpleNode2 = new SimpleNode(1);
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 37, 81);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-541));
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("</identifier>", stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.toString();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('J');
      simpleNode0.setIdentifier("|");
      stringWriter2.append('J');
      simpleNode0.setIdentifier("|");
      simpleNode0.dump("u?{<{=?PZ$?Z$ cn0", stringWriter2);
      assertEquals("JJ<AllocationExpression>\n  <identifier>|</identifier>\n  <identifier>|</identifier>\n</AllocationExpression>\n", stringWriter2.toString());
      assertEquals("JJ<AllocationExpression>\n  <identifier>|</identifier>\n  <identifier>|</identifier>\n</AllocationExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(73);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("/8:FxS<>ykz{");
      StringWriter stringWriter0 = new StringWriter(342);
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SimpleNode simpleNode1 = new SimpleNode(73);
      simpleNode1.dump("<", stringWriter0);
      simpleNode0.dump(">>", stringWriter1);
      assertEquals("<Block>\n  <identifier>/8:FxS<>ykz{</identifier>\n</Block>\n", stringWriter1.toString());
      
      SimpleNode simpleNode2 = new SimpleNode(73);
      simpleNode1.toString("<");
      simpleNode2.dump("<", stringWriter0);
      simpleNode1.dump("2rxOe2", stringWriter0);
      simpleNode1.dump("-sTjRg![c`+", stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(73);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.sort(comparator0);
      arrayList0.add("{");
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1994827031));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-1612543461));
      String string0 = "F";
      StringWriter stringWriter0 = new StringWriter(424);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter1 = new StringWriter();
      String string1 = "0?dpETvt;_t[O0pLJ";
      // Undeclared exception!
      try { 
        simpleNode0.dump("0?dpETvt;_t[O0pLJ", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1612543461
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1185);
      SimpleNode simpleNode0 = new SimpleNode((-1185));
      String string0 = "K\\l'Qf";
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetNumChildren();
      String string1 = "*@";
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1185
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(73);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Node node0 = null;
      int int0 = 133;
      SimpleNode simpleNode1 = new SimpleNode(133);
      simpleNode1.jjtAddChild(simpleNode0, 73);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = null;
      JavaParser javaParser0 = new JavaParser((String) null);
      Node node1 = javaParser0.currNode;
      int int1 = (-79185575);
      // Undeclared exception!
      try { 
        simpleNode1.jjtAddChild(simpleNode0, (-79185575));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -79185575
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.jjtAddChild(simpleNode1, 44);
      simpleNode1.toString();
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.popNode();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(73);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.add("4]]I;,SBo3SWPfk\"@U");
      arrayList0.sort(comparator0);
      String string0 = "{";
      arrayList0.add("{");
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      String string1 = ")";
      SimpleNode simpleNode1 = new SimpleNode(73);
      // Undeclared exception!
      try { 
        stringWriter0.write("++X1*A~", 73, 1804);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.add("<");
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter(70);
      stringWriter0.write((-975));
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.dump("<", stringWriter0);
      simpleNode0.dump("<=", stringWriter0);
      assertEquals("\uFC31<AllocationExpression>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n<AllocationExpression>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n<AllocationExpression>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">=");
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      arrayList0.add("<");
      StringWriter stringWriter0 = new StringWriter(116);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      assertEquals("<AllocationExpression>\n  <identifier>*ge</identifier>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n<AllocationExpression>\n  <identifier>*ge</identifier>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n<AllocationExpression>\n  <identifier>*ge</identifier>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(42);
      SimpleNode simpleNode1 = new SimpleNode(81);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode1;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode1;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter(81);
      CharBuffer.allocate(81);
      stringWriter0.append((CharSequence) "Q1}s~@;sjl:");
      StringWriter stringWriter1 = new StringWriter(81);
      StringWriter stringWriter2 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("Q1}s~@;sjl:", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(81);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("{");
      StringWriter stringWriter0 = new StringWriter(1708);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("oqg,(`Zl%", stringWriter0);
      simpleNode0.dump("ArrayDimsAndInits", stringWriter1);
      assertEquals("<WhileStatement>\n</WhileStatement>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.7031315809655685
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(81);
      StringWriter stringWriter0 = new StringWriter();
      CharBuffer.allocate(81);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.toString();
      stringWriter1.append('{');
      stringWriter1.append('^');
      StringReader stringReader0 = new StringReader("=");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 1);
      simpleNode0.setIdentifier(")");
      simpleNode0.dump(";%&@,|P", stringWriter1);
      simpleNode0.dump("\"private\"", stringWriter1);
      assertEquals("{^<WhileStatement>\n  <identifier>)</identifier>\n</WhileStatement>\n<WhileStatement>\n  <identifier>)</identifier>\n</WhileStatement>\n", stringWriter1.toString());
      assertEquals(2, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      StringWriter stringWriter0 = new StringWriter(81);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("#|[*B2T6b9G'", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      StringReader stringReader0 = new StringReader("#|[*B2T6b9G'");
      stringReader0.ready();
      stringReader0.markSupported();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      StringWriter stringWriter3 = stringWriter1.append((CharSequence) "0?dpETvt;_t[O0pLJ");
      simpleNode0.dump((String) null, stringWriter3);
      simpleNode0.dump("#-3?bim?r^", stringWriter1);
      StringWriter stringWriter4 = stringWriter0.append('0');
      simpleNode0.dump("#|[*B2T6b9G'", stringWriter4);
      assertEquals("0", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(73);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("/8:FxS<>ykz{");
      StringWriter stringWriter0 = new StringWriter(342);
      SimpleNode simpleNode1 = new SimpleNode(73);
      simpleNode1.dump("<", stringWriter0);
      simpleNode0.dump(">>", stringWriter0);
      SimpleNode simpleNode2 = new SimpleNode(73);
      simpleNode2.jjtAddChild(simpleNode0, 73);
      simpleNode2.dump("<", stringWriter0);
      simpleNode1.dump("2rxOe2", stringWriter0);
      assertEquals("<Block>\n  <identifier>/8:FxS<>ykz{</identifier>\n</Block>\n<Block><Block>\n  <identifier>/8:FxS<>ykz{</identifier>\n</Block>\n</Block>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.18490739916777568
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">=");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.add("<");
      StringWriter stringWriter0 = new StringWriter(116);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("com.soops.CEN4010.JMCA.JParser.JavaParser$LookaheadSuccess", stringWriter0);
      assertEquals("<AllocationExpression>\n  <identifier>*ge</identifier>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(81);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("{");
      StringWriter stringWriter0 = new StringWriter();
      arrayList0.add("<<");
      StringWriter stringWriter1 = new StringWriter(1);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump(",o", stringWriter1);
      assertEquals("<WhileStatement>\n  <identifier>*lshft</identifier>\n</WhileStatement>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(81);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(">");
      arrayList0.add("{");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('J');
      simpleNode0.setIdentifier("|");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("{", stringWriter2);
      simpleNode0.dump("x##:PYMf$u19P3JvEl", stringWriter1);
      simpleNode0.dump("{", stringWriter1);
      simpleNode0.dump("^E` _ly;LOTVLR-", stringWriter1);
      simpleNode0.dump("^E` _ly;LOTVLR-", stringWriter2);
      assertEquals("<WhileStatement>\n  <identifier>*gt</identifier>\n  <identifier>|</identifier>\n</WhileStatement>\n<WhileStatement>\n  <identifier>*gt</identifier>\n  <identifier>|</identifier>\n</WhileStatement>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.add(">>");
      arrayList0.add("<");
      StringWriter stringWriter0 = new StringWriter(116);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("B", stringWriter0);
      assertEquals("<AllocationExpression>\n  <identifier>*rshft</identifier>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("&&");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.add("<");
      StringWriter stringWriter0 = new StringWriter(116);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.close();
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("com.soops.CEN4010.JMCA.JParser.JavaParser$LookahedSuccess", stringWriter0);
      assertEquals("<AllocationExpression>\n  <identifier>*amp</identifier>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add(";");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.add("<");
      StringWriter stringWriter0 = new StringWriter(116);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      simpleNode0.dump("<", stringWriter1);
      assertEquals("<AllocationExpression>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n<AllocationExpression>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n<AllocationExpression>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      arrayList0.add("&");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*amp</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(73);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("<=");
      arrayList0.add("<");
      simpleNode0.identifiers = arrayList1;
      StringWriter stringWriter0 = new StringWriter(73);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.identifiers.add("<<");
      stringWriter0.append((CharSequence) "{");
      simpleNode0.dump("{", stringWriter1);
      simpleNode0.dump("jEA,<", stringWriter0);
      assertEquals("{<Block>\n  <identifier>*le</identifier>\n  <identifier>*lt</identifier>\n  <identifier>*lshft</identifier>\n</Block>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(68);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("D2hi#");
      arrayList0.add("<");
      arrayList0.add("}");
      StringWriter stringWriter0 = new StringWriter(68);
      StringWriter stringWriter1 = new StringWriter(68);
      simpleNode0.dump("D2hi#", stringWriter1);
      simpleNode0.dump("Sk", stringWriter0);
      assertEquals("<AllocationExpression>\n  <identifier>D2hi#</identifier>\n  <identifier>*lt</identifier>\n</AllocationExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("/8:FxS<>ykz{");
      StringWriter stringWriter0 = new StringWriter(342);
      StringWriter stringWriter1 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(63);
      simpleNode1.dump("<", stringWriter0);
      stringWriter0.append((CharSequence) null);
      simpleNode0.dump(">>", stringWriter1);
      SimpleNode simpleNode2 = new SimpleNode(63);
      simpleNode2.dump("<", stringWriter0);
      simpleNode1.dump("2rxOe2", stringWriter0);
      assertEquals("null", stringWriter0.toString());
  }
}
