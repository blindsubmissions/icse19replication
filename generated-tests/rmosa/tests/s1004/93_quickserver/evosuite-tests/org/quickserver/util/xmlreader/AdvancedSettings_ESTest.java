/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:33:25 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setClientIdentifier("??:FQ");
      advancedSettings0.setDebugNonBlockingMode(true);
      assertEquals("??:FQ", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1));
      assertEquals((-1), advancedSettings0.getSocketLinger());
      
      advancedSettings0.setSocketLinger(0);
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1152);
      advancedSettings0.setPerformancePreferencesLatency(1152);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency((-1433));
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      assertEquals((-1433), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("p:rvH8");
      advancedSettings0.setMaxThreadsForNioWrite(572);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(572);
      assertEquals(572, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getQSObjectPoolMaker();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-644));
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(1538);
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-644), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize((-2259));
      advancedSettings0.setPerformancePreferencesLatency((-2259));
      advancedSettings0.setByteBufferSize((-2259));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings1.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.setUseDirectByteBuffer(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings1.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getUseDirectByteBuffer();
      advancedSettings0.setCharset("");
      assertEquals((-2259), advancedSettings0.getPerformancePreferencesLatency());
      
      advancedSettings1.getUseDirectByteBuffer();
      int int0 = advancedSettings1.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-3618));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getCharset();
      advancedSettings0.setDebugNonBlockingMode(true);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setBacklog(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("VXP)k(<7S7");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // VXP)k(<7S7
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-1753));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize((-857));
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-1753), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass(",1SHHnV;45>\"!uh}|");
      int int0 = (-1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getUseDirectByteBuffer();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset(",1SHHnV;45>\"!uh}|");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ,1SHHnV;45>\"!uh}|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(631);
      advancedSettings0.setQSObjectPoolMaker(")+s*3Ht!|eVINMv7yS");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesLatency();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(631, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1062));
      advancedSettings0.setPerformancePreferencesLatency((-1062));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setSocketLinger(0);
      int int0 = advancedSettings0.getBacklog();
      assertEquals((-1062), advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass(",1SHHnV;#5X\"!u0h}|");
      int int0 = (-1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset(",1SHHnV;#5X\"!u0h}|");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ,1SHHnV;#5X\"!u0h}|
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setQSObjectPoolMaker("|57Bm");
      assertEquals(1, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("U*'R`h");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML((String) null);
      assertEquals("U*'R`h", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1886));
      advancedSettings0.toXML("");
      advancedSettings0.setQSObjectPoolMaker("mxC|v");
      advancedSettings0.setClientSocketSendBufferSize((-1886));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("?jm8YPvdv7D}d");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ?jm8YPvdv7D}d
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertNotNull(string0);
      
      advancedSettings0.setClientSocketTcpNoDelay(false);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(65536, int0);
      
      advancedSettings0.setUseDirectByteBuffer(true);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(5424);
      advancedSettings0.toXML("vQ#di-pJ8cU*>g ");
      advancedSettings0.setPerformancePreferencesLatency(5424);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize(5424);
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(5424, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setMaxThreadsForNioWrite((-1931));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime((-946));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setByteBufferSize((-1931));
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketReceiveBufferSize((-946));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      assertEquals((-946), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("</performance-preferences-latency>\n");
      advancedSettings0.setPerformancePreferencesLatency((-4625));
      advancedSettings0.toXML("=]Cj1{sL4R$p5");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML("K;)+G.(ICS");
      advancedSettings0.setPerformancePreferencesBandwidth((-462));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setUseDirectByteBuffer(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</performance-preferences-latency>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </performance-preferences-latency>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getCharset();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketSendBufferSize((-682));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.getUseDirectByteBuffer();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(0, int0);
  }
}
