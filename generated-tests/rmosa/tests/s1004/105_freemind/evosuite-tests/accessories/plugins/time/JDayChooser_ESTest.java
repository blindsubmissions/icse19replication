/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:56:52 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.mindmapmode.actions.ApplyPatternAction;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeListener;
import java.net.URI;
import java.net.URISyntaxException;
import java.sql.Time;
import java.text.ParsePosition;
import java.time.DateTimeException;
import java.time.LocalTime;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JInternalFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.TransferHandler;
import javax.swing.text.DefaultCaret;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.StandardParserConfiguration;
import org.apache.xerces.parsers.XML11DTDConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileAccess;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.w3c.dom.Document;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-2849));
      try { 
        jDayChooser0.getMousePosition(false);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7886730895804845
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(100);
      ImageIcon imageIcon0 = new ImageIcon("A6.o8%Ell5vWne!6Pgt");
      JCheckBox jCheckBox0 = new JCheckBox(imageIcon0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 42, 100, 2162, 100, 'l');
      KeyEvent.getKeyModifiersText(3347);
      keyEvent0.consume();
      keyEvent0.setKeyCode(33);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.weekOfYearVisible = false;
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser1, 630, 0L, 2162, 110, 'E');
      JDayChooser jDayChooser2 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser2.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6717601208463124
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      assertSame(date1, date0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-473), (-1L), 90, 90, '.', 0);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyTyped(keyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.608820614830946
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setMaxDayCharacters(3);
      Locale locale0 = Locale.JAPAN;
      Color color0 = Color.YELLOW;
      Locale locale1 = Locale.JAPAN;
      jDayChooser0.removeMouseListener(aWTEventMulticaster0);
      String string0 = "B!yQt)HoDb%ECL1";
      HsqlProperties hsqlProperties0 = new HsqlProperties("B!yQt)HoDb%ECL1", (FileAccess) null, true);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      jDayChooser0.setAlignmentY(0.0F);
      jDayChooser0.getDayPanel();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMinSelectableDate(date0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDay(25);
      assertEquals(25, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.JAPANESE;
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      Locale locale1 = Locale.CHINESE;
      Locale.setDefault(locale0);
      jDayChooser0.setLocale(locale0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = (-2070);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", (-2070));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "]Mr=;Cm\"+z[~?_Ae6");
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jInternalFrame0.getJMenuBar();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent((Component) null, 2670, 3780L, '^', 2670, '^');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getFont();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 42, 42, 42, 42, ';');
      jDayChooser0.keyReleased(keyEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.CHINESE;
      Locale.setDefault(locale0);
      jDayChooser0.setLocale(locale0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jDayChooser0.setMaxDayCharacters(1053);
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      int int0 = (-2070);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", (-2070));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.674770277471316
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-2937L));
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.JAPAN;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.setDay(0);
      System.setCurrentTimeMillis(83L);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.640304616117018
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-2937L));
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setMaxDayCharacters(4);
      Locale locale0 = Locale.JAPAN;
      Locale locale1 = Locale.JAPAN;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      jDayChooser0.setDay(0);
      System.setCurrentTimeMillis(83L);
      jDayChooser0.setDay(44);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(164, color0.getBlue());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jDayChooser0.addPropertyChangeListener((PropertyChangeListener) jSpinner_NumberEditor0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = stringArray0[3];
      stringArray0[5] = stringArray0[4];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis((-2937L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, (-2937L), 41, 39, '<');
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7886730895804845
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(100);
      ImageIcon imageIcon0 = new ImageIcon("A6.o8%Ell5vWne!6Pgt");
      JCheckBox jCheckBox0 = new JCheckBox(imageIcon0, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      int int0 = 2162;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 42, 100, 2162, 100, 'l');
      KeyEvent.getKeyModifiersText(3347);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7376047233857554
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setWeekOfYearVisible(false);
      JList<Integer> jList0 = new JList<Integer>();
      Color color0 = jList0.getSelectionBackground();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.validate();
      jDayChooser0.getClientProperty(jDayChooser_DecoratorButton0);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getMinimumSize();
      // Undeclared exception!
      try { 
        jDayChooser0.putClientProperty((Object) null, jDayChooser_DecoratorButton0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputMethodListeners();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      jDayChooser0.setWeekOfYearVisible(true);
      try { 
        MockURI.URI("day", "day", "Metal", "C)}8b", "Windows");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: day://dayMetal?C)%7D8b#Windows
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(100);
      jDayChooser0.getKeyListeners();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jDayChooser0.getTransferHandler();
      jDayChooser0.setTransferHandler((TransferHandler) null);
      KeyEvent.getKeyText(1039);
      KeyEvent.getKeyModifiersText(1045);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ORIENTATION_AUTO;
      jDayChooser0.getMaxSelectableDate();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      ImageIcon imageIcon0 = new ImageIcon();
      JCheckBox jCheckBox0 = new JCheckBox(imageIcon0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      KeyEvent keyEvent0 = new KeyEvent(jCheckBox0, 42, 42, 1568, 1568, 'M');
      Color color0 = Color.lightGray;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int0 = 20;
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutes(20, 44);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 20 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYear(4);
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      processorCharacters0.getOwnerDocument();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D((Document) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // domFactory should not be null
         //
         verifyException("org.apache.batik.svggen.SVGGeneratorContext", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentOrientation();
      SymbolTable symbolTable0 = new SymbolTable();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.defaultMaxSelectableDate = date0;
      symbolTable0.containsSymbol("day");
      int int0 = (-1761);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = null;
      try {
        xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl((-1761));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.util.XMLGrammarPoolImpl", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ImageIcon imageIcon0 = new ImageIcon("A6.o8%Ell5vWne!6Pgt");
      JCheckBox jCheckBox0 = new JCheckBox(imageIcon0, false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 42, 100, 2162, 100, 'l');
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(100);
      mockSimpleDateFormat0.parse("A6.o8%Ell5vWne!6Pgt", parsePosition0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      // Undeclared exception!
      try { 
        pDFDocumentGraphics2D0.setGraphicContext((GraphicContext) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-48));
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jPanel0.addHierarchyListener((HierarchyListener) null);
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 1540, false, jPanel0);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setDay(0);
      jDayChooser0.getMaxSelectableDate();
      Date date0 = jDayChooser0.maxSelectableDate;
      Color color0 = Color.lightGray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-662), true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isPaintingTile();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "tC");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 13, 42, 42, 36, '^');
      jDayChooser1.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(0);
      KeyEvent.getExtendedKeyCodeForChar('6');
      InputEvent.getModifiersExText(0);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      PDFResources pDFResources0 = new PDFResources(0);
      pDFResources0.setObjectNumber(3218);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDayPanel();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid CID font type: ");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setSundayForeground((Color) null);
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMethodListeners();
      JDayChooser jDayChooser1 = new JDayChooser();
      JPanel jPanel0 = jDayChooser1.dayPanel;
      Date date0 = jDayChooser0.getMinSelectableDate();
      java.sql.Date date1 = new java.sql.Date(1754L);
      jDayChooser1.setSelectableDateRange(date0, date1);
      jDayChooser1.setFocus();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String string0 = AbstractButton.TEXT_CHANGED_PROPERTY;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setName((String) null);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.maxSelectableDate;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1568, 0L, (-1500), 1568, 'O');
      KeyEvent.getKeyModifiersText(13);
      keyEvent0.consume();
      keyEvent0.setKeyCode(13);
      JDayChooser jDayChooser1 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser1.setAlwaysFireDayProperty(true);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 38, (-2874L), 38, 3179, 'O');
      jDayChooser1.keyPressed(keyEvent1);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImageIcon imageIcon0 = new ImageIcon("file_not_found");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 100, 100, 2162, 100, 'l');
      String string0 = AbstractButton.DISABLED_SELECTED_ICON_CHANGED_PROPERTY;
      keyEvent0.consume();
      keyEvent0.setKeyCode(33);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, '^', 2108L, '^', 40, '^');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.733603922073186
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      System.setCurrentTimeMillis((-2937L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, (-2937L), 41, 39, '<');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setEnabled(false);
      Color color0 = Color.CYAN;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7100799133333875
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      System.setCurrentTimeMillis((-2947L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth((-2165));
      jDayChooser0.isPaintingTile();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2165), 41, 41, 41, '*');
      KeyEvent.getKeyModifiersText((-501));
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.JAPAN;
      Color color0 = Color.YELLOW;
      Locale locale1 = Locale.JAPAN;
      jDayChooser0.isPaintingTile();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 392, 3, 32, 35, '*');
      keyEvent0.getExtendedKeyCode();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.CHINESE;
      Locale.setDefault(locale0);
      jDayChooser0.isPaintingTile();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1631), 0L, 11, 37, '*');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      ImageIcon imageIcon0 = new ImageIcon();
      JCheckBox jCheckBox0 = new JCheckBox(imageIcon0, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      KeyEvent keyEvent0 = new KeyEvent(jCheckBox0, 42, 42, 1577, 1577, 'M');
      KeyEvent.getKeyModifiersText(42);
      keyEvent0.consume();
      keyEvent0.setKeyCode(42);
      JDayChooser jDayChooser0 = new JDayChooser();
      Class<ApplyPatternAction> class0 = ApplyPatternAction.class;
      defaultListCellRenderer_UIResource0.getListeners(class0);
      KeyEvent keyEvent1 = new KeyEvent(defaultListCellRenderer_UIResource0, 1577, 42, (-725), 38, 'M');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      System.setCurrentTimeMillis((-2947L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isPaintingTile();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-2165), 34, 34, 34, '*');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.maxDayCharacters = 16;
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis((-2937L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVetoableChangeListeners();
      JButton[] jButtonArray0 = new JButton[2];
      jDayChooser0.getMouseListeners();
      jDayChooser0.days = jButtonArray0;
      jDayChooser0.setEnabled(true);
      Color color0 = Color.CYAN;
      // Undeclared exception!
      try { 
        jDayChooser0.setDay(160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
