/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 07:03:53 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.sql.Connection;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.command.dml.ScriptCommand;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("`ROH<};uj$EEq5!2E");
      SQLUtil.normalize("TP.Id~jd>A-;W", true);
      SQLUtil.isQuery("TP.Id~jd>A-;W");
      String string0 = null;
      VersionNumber versionNumber0 = VersionNumber.valueOf("2nh?b6");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("TP.Id~jd>A-;W", (String) null, versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("TP.Id ~ jd > A - ; W");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'TP.Id ~ jd > A - ; W'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9509891646214447
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.normalize("UdnXI3Js03/%Q*PG", true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create materialized vi");
      System.setCurrentTimeMillis((-597L));
      Boolean boolean0 = Boolean.TRUE;
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("UdnXI3Js03 / % Q * PG");
      assertNull(boolean1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string1 = "e(^@(e";
      SQLUtil.join("", ">C..*T#,4:K", stringArray0, "", "e(^@(e", stringArray0);
      SQLUtil.isQuery("");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "#}D0y+_bxX&";
      stringArray0[1] = "#}D0y+_bxX&";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBSchema dBSchema0 = new DBSchema("#}D0y+_bxX&");
      StringBuilder stringBuilder0 = new StringBuilder("#}D0y+_bxX&");
      SQLUtil.addRequiredCondition("#}D0y+_bxX&", stringBuilder0);
      assertEquals("#}D0y+_bxX& and #}D0y+_bxX&", stringBuilder0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBDataType.getInstance(8, "");
      Character character0 = Character.valueOf('Y');
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "%j", character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "'";
      SQLUtil.renderValue("'");
      TableContainer tableContainer0 = new TableContainer("2k8ArSN9P;V");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("rv6!SL<wLMeVW`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.30463609734923813
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil.normalize("h", false);
      SQLUtil.normalize("h", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("h");
      int int0 = 34;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = stringArray0[1];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      System.setCurrentTimeMillis(17996814987294720L);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      tableContainer0.getTable("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[2] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[2] = "XkTdChU";
      stringArray0[4] = "XkTdChU";
      String string0 = SQLUtil.innerJoin("XkTdChU", stringArray0, stringArray0[7], "XkTdChU", stringArray0);
      assertEquals("null as XkTdChU on XkTdChU.null = XkTdChU.null and XkTdChU.null = XkTdChU.null and XkTdChU.XkTdChU = XkTdChU.XkTdChU and XkTdChU.null = XkTdChU.null and XkTdChU.XkTdChU = XkTdChU.XkTdChU and XkTdChU.null = XkTdChU.null and XkTdChU.null = XkTdChU.null and XkTdChU.null = XkTdChU.null and XkTdChU.null = XkTdChU.null", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.7772096817864421
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = SQLUtil.normalize("jz4f)d)[", false);
      assertEquals("jz4f) d) [", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jz4f)d)[");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "jz4f) d) [";
      stringArray0[1] = "jz4f)d)[";
      stringArray0[2] = "jz4f) d) [";
      stringArray0[3] = "jz4f)d)[";
      stringArray0[4] = "jz4f) d) [";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("jz4f) d) [", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (jz4f) d) [, jz4f)d)[, jz4f) d) [, jz4f)d)[, jz4f) d) [) REFERENCES jz4f)d)[(jz4f) d) [, jz4f)d)[, jz4f) d) [, jz4f)d)[, jz4f) d) [)", string1);
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string2 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("FOREIGN KEY (jz4f) d) [, jz4f)d)[, jz4f) d) [, jz4f)d)[, jz4f) d) [) REFERENCES jz4f)d)[(jz4f) d) [, jz4f)d)[, jz4f) d) [, jz4f)d)[, jz4f) d) [)", string2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.renderColumnNames((String[]) null);
      String string0 = "gdB#P|'^0RHbMv~`aK";
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("gdB#P|'^0RHbMv~`aK", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.normalize("create unique index", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "create unique index";
      stringArray0[1] = "create unique index";
      stringArray0[2] = "create unique index";
      stringArray0[3] = "#W;1T8]]K3L!";
      stringArray0[4] = "#N=~LmjyN:=";
      stringArray0[5] = "create unique index";
      stringArray0[6] = "#W;1T8]]K3L!";
      stringArray0[7] = "+!otGU4-W";
      stringArray0[8] = "create unique index";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "#N=~LmjyN:=", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("#N=~LmjyN:=", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-4217), "5kdFhNV~Oc6Ow}");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#W;1T8]]K3L!", dBTable0, dBDataType0, integer0, integer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("alter materialized view", stringBuilder0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'x';
      charArray0[1] = 'P';
      charArray0[2] = '8';
      charArray0[3] = 'M';
      charArray0[4] = 'd';
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2524), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2524
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("#}D0y+_bxX&");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "O9Cr`~&rzO?0Qe#5";
      stringArray0[1] = " EMIT UPDATES";
      stringArray0[1] = "O9Cr`~&rzO?0Qe#5";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "O9Cr`~&rzO?0Qe#5", true, stringArray0);
      defaultDBTable0.getReferrers();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "#}D0y+_bxX&", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("#}D0y+_bxX&", true, dBUniqueConstraint0);
      DBSchema dBSchema0 = new DBSchema("O9Cr`~&rzO?0Qe#5");
      StringBuilder stringBuilder0 = new StringBuilder(" EMIT UPDATES");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "O9Cr`~&rzO?0Qe#5");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      System.setCurrentTimeMillis(582L);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.880524555284045
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("a>?O+-uC", true);
      assertEquals("a > ? O + - uC", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42Z17");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "42Z17";
      stringArray0[1] = "a > ? O + - uC";
      stringArray0[2] = "a > ? O + - uC";
      stringArray0[3] = "a > ? O + - uC";
      stringArray0[4] = "a > ? O + - uC";
      stringArray0[5] = "a>?O+-uC";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "a>?O+-uC", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("42Z17", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("42Z17", true, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT 42Z17 FOREIGN KEY (42Z17, a > ? O + - uC, a > ? O + - uC, a > ? O + - uC, a > ? O + - uC, a>?O+-uC) REFERENCES 42Z17(42Z17, a > ? O + - uC, a > ? O + - uC, a > ? O + - uC, a > ? O + - uC, a>?O+-uC)", string1);
      
      Random.setNextRandom((-953));
      String string2 = SQLUtil.normalize("a > ? O + - uC", true);
      assertEquals("a > ? O + - uC", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      DBSchema dBSchema0 = new DBSchema("bP*jTBf&9s>uNNB'>");
      StringBuilder stringBuilder0 = new StringBuilder("bP*jTBf&9s>uNNB'>");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "bP*jTBf&9s>uNNB'>";
      stringArray0[1] = "meZ6#|";
      stringArray0[2] = "meZ6#|";
      stringArray0[3] = "meZ6#|";
      SQLUtil.leftJoin("meZ6#|", stringArray0, "meZ6#|", "meZ6#|", stringArray0);
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "left join meZ6#| as meZ6#| on meZ6#|.bP*jTBf&9s>uNNB'> = meZ6#|.bP*jTBf&9s>uNNB'> and meZ6#|.meZ6#| = meZ6#|.meZ6#| and meZ6#|.meZ6#| = meZ6#|.meZ6#| and meZ6#|.meZ6#| = meZ6#|.meZ6#|");
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "bP*jTBf&9s>uNNB'>", 25, (-220917350));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 25, end -220917350, s.length() 17
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      String string0 = ",R\"dtshUg|if-/\\Ba.";
      StringBuilder stringBuilder0 = new StringBuilder(",R\"dtshUg|if-/Ba.");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(",R\"dtshUg|if-/Ba.", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(449, ",R\"dtshUg|if-/Ba.");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 449
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.7371823152157604
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = SQLUtil.normalize("-$]X)", true);
      assertEquals("- $ ] X)", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-$]X)";
      stringArray0[1] = "DROP ALIAS IF EXISTS SYSTEM_COMBINE_CLOB";
      stringArray0[2] = "- $ ] X) ";
      stringArray0[3] = "DROP ALIAS IF EXISTS SYSTEM_COMBINE_CLOB";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "DROP ALIAS IF EXISTS SYSTEM_COMBINE_CLOB", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (-$]X), DROP ALIAS IF EXISTS SYSTEM_COMBINE_CLOB, - $ ] X) , DROP ALIAS IF EXISTS SYSTEM_COMBINE_CLOB)", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("#}D0y+_bxX&");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "O9Cr`~&rzO?0Qe#5";
      stringArray0[1] = " EMIT UPDATES";
      stringArray0[1] = "O9Cr`~&rzO?0Qe#5";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "O9Cr`~&rzO?0Qe#5", true, stringArray0);
      defaultDBTable0.getReferrers();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "#}D0y+_bxX&", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("#}D0y+_bxX&", true, dBUniqueConstraint0);
      DBSchema dBSchema0 = new DBSchema("O9Cr`~&rzO?0Qe#5");
      dBUniqueConstraint0.setName("CS/ T&/@J9eZd");
      StringBuilder stringBuilder0 = new StringBuilder(" EMIT UPDATES");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "O9Cr`~&rzO?0Qe#5");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      System.setCurrentTimeMillis(582L);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B,Q+YzWoa[oo Iwh[";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "B,Q+YzWoa[oo Iwh[", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("B,Q+YzWoa[oo Iwh[", true, dBUniqueConstraint0);
      boolean boolean0 = false;
      String string0 = "delete2nh?b6k`ii.os";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("B,Q+YzWoa[oo Iwh[", false, "delete2nh?b6k`ii.os", "vf}4AGcc&pS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Boolean boolean0 = new Boolean("Problem writing to FBBlobOutputStream: ");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("Problem writing to FBBlobOutputStream: ", stringBuilder0);
      System.setCurrentTimeMillis((-268L));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DBObject dBObject0 = null;
      SQLUtil.typeAndName((DBObject) null);
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      int int0 = 2;
      // Undeclared exception!
      try { 
        ScriptCommand.combineClob(jdbcConnection0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertNotNull(string0);
      assertEquals("table ", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.7990591844756405
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.normalize("select?kb6iw", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select?kb6iw");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "select n9 ` ul";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "select?kb6iw", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("select?kb6iw", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "select ? kb  6iw", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      System.setCurrentTimeMillis(1753L);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.normalize("72b5,'=qii]P", true);
      assertEquals("72b5, '=qii]P'", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("Ir0kE(Iv");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: Ir0kE(Iv
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.normalize(",NN!Gq.-@QYI1h6", false);
      assertEquals(", NN ! Gq.- @ QYI1h6", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3445982481028228
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = SQLUtil.normalize("* 'a", true);
      assertEquals("* 'a'", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(218, "!8[v:=K`'Ux[BLF");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("* 'a", defaultDBTable0, dBDataType0);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("* 'a !8[V:=K`'UX[BLF NULL", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.7990591844756405
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.normalize("5\"z*a85?mp{Rc$b", true);
      String string0 = SQLUtil.normalize("5\"z*a85?mp{Rc$b", true);
      assertEquals("5 \"z*a85?mp{Rc$b\"", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "f";
      stringArray0[3] = "5\"z*a85?mp{Rc$b";
      stringArray0[4] = "5\"z*a85?mp{Rc$b";
      stringArray0[5] = "5\"z*a85?mp{Rc$b";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , f, 5\"z*a85?mp{Rc$b, 5\"z*a85?mp{Rc$b, 5\"z*a85?mp{Rc$b)", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0223670722663725
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("a>UHiG(Bxu", true);
      assertEquals("a > UHiG (Bxu", string0);
      
      String string1 = SQLUtil.normalize("gSP[`-", true);
      assertEquals("gSP [ ` -", string1);
      
      System.setCurrentTimeMillis(1408L);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("\"OT24d6E");
      DBSchema dBSchema0 = new DBSchema("EXCEPT", dBCatalog0);
      dBSchema0.setDoc("");
      SQLUtil.ownerDotComponent(dBSchema0);
      System.setCurrentTimeMillis(9223372036825200000L);
      System.setCurrentTimeMillis(9223372036825200000L);
      System.setCurrentTimeMillis((-706L));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("*7Tub)TBR9", false);
      assertEquals("* 7Tub) TBR9", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.839191084712407
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "execselectunknown constraint type:");
      SQLUtil.mutatesDataOrStructure("execselectunknown constraint type:");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "y[27m)[D<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter session", defaultDBTable0, 65, "exec57:vlxc-z.}c[5v");
      defaultDBColumn0.setDoc("create unique index");
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.normalize("drop index57:vlxc-z.}c[5v", true);
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = SQLUtil.normalize("xM\"=-\"@GSRy/?@", true);
      assertEquals("xM \"=-\" @ GSRy / ? @", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize("a>UHiG(Bxu", false);
      assertEquals("a > UHiG (Bxu", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "I 0kE(Iv";
      stringArray0[1] = "I 0kE(Iv";
      stringArray0[3] = "I 0kE(Iv";
      SQLUtil.renderColumnListWithTableName("I 0kE(Iv", stringArray0);
      String string0 = "X0Y56.S";
      // Undeclared exception!
      try { 
        DBDataType.getInstance("X0Y56.S");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.normalize("*'7Tub)TBR9", true);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockFile mockFile0 = new MockFile("c[Eall", "c[Eall");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "G#=&8Q8%)hDx:0", true, stringArray0);
      dBPrimaryKeyConstraint0.addColumnName("G#=&8Q8%)hDx:0");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("G#=&8Q8%)hDx:0", true, dBPrimaryKeyConstraint0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      dBUniqueIndex0.setName("G#=&8Q8%)hDx:0");
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex((String) null, true, dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint1);
      assertNotNull(string0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("O9Cr[~&rzO?0Qe#5");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getReferrers();
      String string0 = SQLUtil.normalize("uoB`", false);
      assertEquals("uoB `", string0);
      
      String string1 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.777209681786442
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("?#0H(\f@%l`", true);
      assertEquals("? # 0H (\f @ % l `", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("maintainParentLinks", false, "? # 0H ( f @ % l `", "maintainParentLinks");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT maintainParentLinks CHECK maintainParentLinks", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "execselectunknown constraint type:");
      System.setCurrentTimeMillis((-597L));
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter tabletruncate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DataFileCache.close() : close";
      stringArray0[1] = "alter tabletruncate";
      stringArray0[2] = "DataFileCache.close() : close";
      stringArray0[2] = "DataFileCache.close() : close";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "DataFileCache.close() : close", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("alter tabletruncate", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getName());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DBDataType dBDataType0 = DBDataType.getInstance(478, ")");
      Integer integer0 = new Integer(478);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`ROH<};uj$EEq5!2E", (DBTable) null, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(")", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer1 = new Integer((-2));
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("iEp&CL^", (DBTable) null, dBDataType0, integer1);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn(")", (DBTable) null, dBDataType0, integer1);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("`ROH<};uj$EEq5!2E", (DBTable) null, dBDataType0, integer2, integer3);
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("drop index", (DBTable) null, dBDataType0, integer3);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn5;
      DefaultDBColumn defaultDBColumn6 = new DefaultDBColumn(")", (DBTable) null, 478, ")");
      dBColumnArray0[6] = (DBColumn) defaultDBColumn6;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("`ROH<};uj$EEq5!2E, ), iEp&CL^, ), `ROH<};uj$EEq5!2E, drop index, )", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("O9Cr`~&rzO?0Qe#5", defaultDBTable0, (DBDataType) null, integer0, integer0);
      defaultDBColumn0.setFractionDigits(integer0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      Boolean boolean0 = new Boolean("Unknown constraint type: ");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("O9Cr`~&rzO?0Qe#5");
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.isQuery("O9Cr`~&rzO?0Qe#5");
      Random.setNextRandom((-3645));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9035282968222415
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SQLUtil.normalize("(>qp", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter indexalter indexgpbgr+e19";
      stringArray0[1] = "(> qp";
      stringArray0[2] = "alter indexalter indexgpbgr+e19";
      stringArray0[3] = "alter indexalter indexgpbgr+e19";
      stringArray0[4] = "(> qp";
      stringArray0[5] = "/NM|T|y^2M";
      stringArray0[6] = "(>qp";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter indexalter indexgpbgr+e19", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("(>qp", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("tp.id~j", "/NM|T|y^2M");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, mockPrintWriter0);
      assertSame(dBTable0, defaultDBTable0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "SELECT * FROM ");
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("2Nh?b6k`Ii.OS");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "2Nh?b6k`Ii.OS";
      stringArray0[1] = "2Nh?b6k`Ii.OS";
      stringArray0[2] = "2Nh?b6k`Ii.OS";
      stringArray0[3] = "2Nh?b6k`Ii.OS";
      stringArray0[4] = "2Nh?b6k`Ii.OS";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("2Nh?b6k`Ii.OS", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      mockPrintWriter0.println((Object) dBForeignKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(8589934594L);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      String string0 = SQLUtil.normalize("2Nh?b6k`Ii.OS", true);
      assertEquals("2Nh ? b6k ` Ii.OS", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType.getInstance(2920, "");
      jdbcClob jdbcClob0 = new jdbcClob("drop index");
      Reader reader0 = jdbcClob0.getCharacterStream();
      reader0.mark(1375);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.resetSyntax();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
      
      String string1 = SQLUtil.normalize("drop index", false);
      assertEquals("drop index", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("4DH8B1AcaQ+{");
      StringReader stringReader0 = new StringReader("4DH8B1AcaQ+{");
      stringReader0.mark(1375);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 0.25;
      SQLUtil.renderNumber(streamTokenizer0);
      DBSchema dBSchema0 = new DBSchema("4DH8B1AcaQ+{");
      assertEquals("schema", dBSchema0.getObjectType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Random.setNextRandom((-165005079));
      String string0 = SQLUtil.normalize("\n/* distinct */", false);
      assertEquals("/* distinct */", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "execrena(e)6ebu";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "execrena(e)6ebu");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execrena(e)6ebu", (DBSchema) null);
      int int0 = 1266;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("execrena(e)6ebu", defaultDBTable0, 1266, "execrena(e)6ebu");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("drop index");
      String string0 = SQLUtil.removeComments("\n/* distinct */");
      assertEquals("\n", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter materialized view", false, (String[]) null);
      defaultDBTable0.getReferrers();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("jjb5.", false, dBPrimaryKeyConstraint0);
      DBSchema dBSchema0 = new DBSchema("jjb5.");
      StringBuilder stringBuilder0 = new StringBuilder("xis,.b");
      stringBuilder0.append((CharSequence) "alter materialized view");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      System.setCurrentTimeMillis((-2911L));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(2920, "");
      jdbcClob jdbcClob0 = new jdbcClob("drop index");
      Reader reader0 = jdbcClob0.getCharacterStream();
      reader0.mark(1375);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("9ir", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      OutputStream outputStream0 = fileUtil0.openOutputStreamElement(" and ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0, false);
      Locale locale0 = Locale.JAPAN;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) reader0;
      outputStream0.close();
      objectArray0[1] = (Object) locale0;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      System.setCurrentTimeMillis(2920);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("inner", true, " and ", "DWEr&%P=sWZ!)CjwAkQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = null;
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(" is : ", (String) null, (VersionNumber) null);
      String string1 = "org.apache.derby.impl.store.raw.data.LogicalPageOperation";
      boolean boolean0 = false;
      defaultDatabase0.getTable("org.apache.derby.impl.store.raw.data.LogicalPageOperation", false);
      int int0 = (-1918731142);
      String string2 = "setClob(String, Reader, long)";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(" is : ", (DBTable) null, (-1918731142), "setClob(String, Reader, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("create unique indexalter materialized view");
      StringReader stringReader0 = new StringReader("create unique indexalter materialized view");
      stringReader0.mark(1383);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) 1383;
      SQLUtil.renderNumber(streamTokenizer0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)3;
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-52);
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)41;
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "?Kb6IW");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DBSchema dBSchema0 = new DBSchema("Bt])lAVsU");
      SQLUtil.isQuery("select into");
      Random.setNextRandom((byte)41);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("drop index");
      Reader reader0 = jdbcClob0.getCharacterStream();
      reader0.mark(1375);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.nval = (-0.6573729133961855);
      streamTokenizer0.resetSyntax();
      SQLUtil.renderNumber(streamTokenizer0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String[] stringArray0 = new String[9];
      stringArray0[3] = "- 0.6573729133961855";
      stringArray0[4] = null;
      stringArray0[5] = "drop index";
      VersionNumber versionNumber0 = VersionNumber.valueOf(stringArray0[1]);
      assertNotNull(versionNumber0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(38, "");
      String string0 = "drop index";
      jdbcClob jdbcClob0 = new jdbcClob("drop index");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, (Integer) (-4));
      defaultDBColumn0.setDefaultValue("");
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      System.setCurrentTimeMillis((-597L));
      Boolean boolean0 = new Boolean("alter materialized view");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Random.setNextRandom(3605);
      SQLUtil.mutatesDataOrStructure("alter session");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized view");
      // Undeclared exception!
      try { 
        defaultDBTable0.allRows((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = SQLUtil.normalize(")]Q5Y#oG-?bua*/", false);
      assertEquals(") ] Q5Y # oG - ? bua  */", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      DBDataType dBDataType0 = DBDataType.getInstance(47, "update");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("update", defaultDBTable0, dBDataType0, integer0, integer2);
      StringBuilder stringBuilder0 = new StringBuilder(47);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1723);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      dBDataType0.isAlpha();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      stringBuilder1.reverse();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop index", defaultDBTable0, dBDataType0, integer1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(76, charArrayWriter0.size());
      assertEquals("create table update (\n\tupdate UPDATE(1,3) NULL,\n\tdrop index UPDATE(0) NULL\n)", charArrayWriter0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update");
      DBDataType dBDataType0 = DBDataType.getInstance(47, "update");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBDataType.getInstance(7, "drop indexaler -nbexopbgrt12");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", defaultDBTable1, dBDataType0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderColumn(defaultDBColumn0);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer(14);
      DBCatalog dBCatalog0 = new DBCatalog("CLOB");
      boolean boolean0 = false;
      dBCatalog0.getTable("CLOB", false);
      DBDataType dBDataType0 = DBDataType.getInstance("CLOB");
      Integer integer1 = new Integer(14);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, dBDataType0, integer0, integer1);
      StringBuilder stringBuilder0 = new StringBuilder(14);
      stringBuilder0.reverse();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CLOB");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) stringBuilder0, 461, 14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 14
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)31;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("F", false, defaultDBTable0, "F");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|cVK-&NS8p");
      PrintWriter printWriter0 = mockPrintWriter0.append('6');
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, printWriter0);
      assertSame(mockPrintWriter0, printWriter0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("`roh<}");
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte) (-52);
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)95;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("?Kb6IW");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("F", true, "F", "F");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK F", string0);
      
      byteArray0[4] = (byte)80;
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-81);
      byteArray0[7] = (byte) (-111);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.normalize("TP.Id~jd>A-;W", false);
      boolean boolean0 = SQLUtil.isQuery("TP.Id~jd>A-;W");
      assertFalse(boolean0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CHECK F", defaultDBTable0, 39, "TP.Id ~ jd > A - ; W");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("CHECK F TP.ID ~ JD > A - ; W NULL", string1);
      
      Random.setNextRandom((byte) (-81));
      String string2 = SQLUtil.normalize("`ROH<};uj$EEq5!2E", false);
      assertEquals("` ROH < } ; uj $ EEq5 ! 2E", string2);
      
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "!O@ E6;9Ui", true, "CHECK F");
      dBNotNullConstraint0.setDoc("selectcreate unique index");
      String string3 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("CHECK F NOT NULL", string3);
  }
}
