/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:44:08 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "w/";
      Object object0 = new Object();
      jSONObject0.isNull("w/");
      String string1 = "";
      try { 
        jSONObject0.get("getreplaceFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getreplaceFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2067368439362582
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong(" t_(Ag7[$i4pUM>");
      try { 
        jSONObject0.getInt("Pu0@]8#XI=k");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Pu0@]8#XI=k\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7793778057291478
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] is not a Boolean.", (Object) null);
      jSONObject0.remove("AY");
      jSONObject1.optInt("val");
      try { 
        jSONObject0.getJSONObject("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = JSONObject.quote("\u0004;\n");
      assertEquals("\"\\u0004;\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(858, 858);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = Boolean.valueOf("JSONArray initial value should be a string or collection or array.");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "JSONArray initial value should be a string or collection or array.";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Predicate<JSONObject> predicate0 = Predicate.isEqual((Object) jSONObject0);
      Predicate<JSONObject> predicate1 = predicate0.negate();
      boolean boolean1 = predicate1.test(jSONObject0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)921);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 102, 102);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "\\u\n";
      JSONObject.quote(string0);
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("\"\\u\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\\u\\n\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject.quote("fg$>G.3| B7n!Z");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "Missing value";
      jSONObject0.keys();
      jSONObject0.optString("Missing value");
      int int0 = 1374;
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must begin with '{'");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of A JSONObject text must begin with '{'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      short short0 = (short) (-453);
      Short short1 = new Short((short) (-453));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("null", false);
      String string0 = "iJpk";
      jSONObject0.accumulate("iJpk", "iJpk");
      try { 
        jSONObject0.getBoolean("iJpk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iJpk\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6914343362809567
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] is not a Boolean.", (Object) null);
      jSONObject1.optBoolean("\f");
      try { 
        jSONObject0.getJSONObject("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2852930241200995
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(1346);
      String string1 = JSONObject.valueToString(jSONObject0, 13, 13);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject.quote("\u0004;\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\u0004;\n");
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("\"\\4;\n\"");
      assertEquals("\"\\\"\\\\4;\\n\\\"\"", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = JSONObject.quote("\u0004;\n");
      Float float0 = new Float(0.0F);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = JSONObject.quote("fg$>*G.3e B7FnhAZ");
      assertEquals("\"fg$>*G.3e B7FnhAZ\"", string0);
      
      Long long0 = new Long((-1690L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toString(64, (-2233));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6001660731596457
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte0 = new Byte((byte)115);
      linkedList0.add(byte0);
      String string0 = JSONObject.valueToString(linkedList0, 64, 64);
      assertNotNull(string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = JSONObject.quote("\u0004;\n");
      assertEquals("\"\\u0004;\\n\"", string0);
      
      String string1 = JSONObject.valueToString("\u0004;\n", (-437), (-437));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = new Object();
      Short short0 = new Short((short)123);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames((Object) jSONArray0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      // Undeclared exception!
      try { 
        linkedList1.addAll((Collection<? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double double0 = new Double(0.13077975258601188);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[2] = ")|7O%wp;'wrn6";
      stringArray0[0] = ")|7O%wp;'wrn6";
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\u";
      String string1 = jSONObject0.optString(string0, string0);
      assertEquals("\\u", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.quote("0JM\"`JweO+nb?`K");
      assertEquals("\"0JM\\\"`JweO+nb?`K\"", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject.quote("yBK=!#*]%");
      JSONObject jSONObject0 = new JSONObject((Object) "yBK=!#*]%");
      // Undeclared exception!
      jSONObject0.toString(665, 665);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = JSONObject.quote(" at character ");
      assertEquals("\" at character \"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) " at character ");
      jSONObject0.toString((-996), (-2635));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "\\u\n";
      JSONObject.quote(string0);
      Long long0 = new Long(177L);
      String string1 = JSONObject.valueToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "\\u\n";
      String string1 = JSONObject.quote(string0);
      assertEquals("\"\\\\u\\n\"", string1);
      
      String string2 = JSONObject.valueToString("\"\\u\n\"");
      assertFalse(string2.equals((Object)string1));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7166072543958493
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short) (-453));
      JSONObject jSONObject0 = new JSONObject(short0);
      StringWriter stringWriter0 = new StringWriter();
      Short.compare((short)69, (short)69);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      jSONObject0.write(stringWriter1);
      Long long0 = new Long(599L);
      JSONObject jSONObject1 = new JSONObject(short0);
      boolean boolean0 = jSONObject1.optBoolean("zY]PS5V9wWfrd7!:/", false);
      assertEquals(1, jSONObject1.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$Null", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(23);
      stringWriter0.write(23);
      jSONObject1.write(stringWriter0);
      Long long0 = new Long(599L);
      Boolean boolean0 = new Boolean("wheel.json.JSONObject$Null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.633154994636022
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Short short0 = new Short((short) (-453));
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = "-2298.67052859687560";
      JSONObject jSONObject1 = jSONObject0.accumulate("-2298.67052859687560", short0);
      jSONObject1.optLong("-2298.67052859687560", (long) (short) (-453));
      Boolean boolean0 = Boolean.TRUE;
      try { 
        jSONObject1.get("Ery;/wJ4BG.rG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ery;/wJ4BG.rG\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.257133793549772
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("0", (Object) linkedList0);
      try { 
        jSONObject0.getJSONArray("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "gettoString";
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (-1.0));
      jSONObject1.optInt("gettoString");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject1.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject(".)K");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "\\u;\n";
      JSONObject.quote(string0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"\\u;\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"\\u;
         // \"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject.quote("fg$>*G.3| B7nhAZ");
      JSONObject.doubleToString(826.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\"fg$>*G.3| B7nhAZ\"";
      stringArray0[1] = "fg$>*G.3| B7nhAZ";
      stringArray0[2] = "\"fg$>*G.3| B7nhAZ\"";
      stringArray0[3] = "fg$>*G.3| B7nhAZ";
      stringArray0[4] = "fg$>*G.3| B7nhAZ";
      stringArray0[5] = "\"fg$>*G.3| B7nhAZ\"";
      stringArray0[6] = "fg$>*G.3| B7nhAZ";
      stringArray0[7] = "826";
      stringArray0[8] = "fg$>*G.3| B7nhAZ";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.511485454794382
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject.quote("Ery;/wJ4BG.rG");
      Integer integer0 = new Integer(21);
      JSONObject.numberToString(integer0);
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      hashMap0.put((Byte) null, "Ery;/wJ4BG.rG");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getBoolean("Ery;/wJ4BG.rG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ery;/wJ4BG.rG\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5985754382128206
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] is not a Boolean.", (Object) null);
      jSONObject1.names();
      try { 
        jSONObject0.getJSONObject("] is not a Boolean.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a Boolean.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("/WD[4r4x807h4~+qZk", (Collection) linkedList0);
      jSONObject1.remove("wheel.json.JSONObject$Null");
      Object object0 = new Object();
      jSONObject0.accumulate("wheel.json.JSONObject$Null", object0);
      jSONObject0.optString("wheel.json.JSONObject$Null", "\"{9a&IBcuAI");
      short short0 = (short) (-639);
      Short short1 = new Short((short) (-639));
      JSONObject.numberToString(short1);
      try { 
        jSONObject0.getJSONObject("n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("Null pointer");
      Object object0 = new Object();
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("] is not a number.");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<String, Long> hashMap0 = new HashMap<String, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 125);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      String string1 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      jSONObject0.putOpt("getvalueOf", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)86);
      jSONObject0.putOpt("&", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8258578953647173
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "\\Anu";
      jSONObject1.accumulate("Anu", "Anu");
      int int0 = 90;
      try { 
        jSONObject1.getLong("Anu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Anu\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8073365769337295
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      short short0 = (short) (-427);
      Short short1 = new Short((short) (-427));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JiJpk";
      JSONObject jSONObject1 = jSONObject0.accumulate("JiJpk", "JiJpk");
      try { 
        jSONObject1.getInt("JiJpk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JiJpk\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = JSONObject.quote("Ery/wJ4BG.rG");
      assertEquals("\"Ery/wJ4BG.rG\"", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("iJ^pk", (-1.0));
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.optDouble("iJ^pk", (double) (short) (-453));
      StringWriter stringWriter1 = stringWriter0.append('*');
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "iJ^pk", (int) (short) (-453), 1015);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.put((Integer) null, boolean0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject.quote("fg$>G.3| B7n!Z");
      Float float0 = new Float(3928.3183);
      Float.max(3618.0F, 3618.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.quote("fg$>G.3| B7n!Z");
      assertEquals("\"fg$>G.3| B7n!Z\"", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float((-4521.7007705));
      JSONObject jSONObject0 = new JSONObject((Object) "\n");
      String string0 = jSONObject0.toString();
      String string1 = JSONObject.valueToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = JSONObject.quote("fg$>*G.3| B7nhAZ");
      HashMap<JSONObject, JSONArray> hashMap0 = new HashMap<JSONObject, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("c<!cWrAy");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject.getNames((Object) null);
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-2864.166136165964));
      assertEquals("-2864.166136165964", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      jSONObject0.put("(F/YQ1", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(1823);
      jSONObject0.write(stringWriter0);
      JSONArray jSONArray0 = new JSONArray();
      JSONTokener jSONTokener0 = new JSONTokener(".");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of .
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = JSONObject.quote("fg$>G.3| B7n!Z");
      assertEquals("\"fg$>G.3| B7n!Z\"", string0);
      
      Float float0 = new Float(3928.3183);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString(1218, 52);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList0, 64, 64);
      assertEquals("[]", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, (-796), (-62473106));
      assertEquals("null", string1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "4)q02/+(mq6>/Ynh_";
      try { 
        jSONObject0.getString("4)q02/+(mq6>/Ynh_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4)q02/+(mq6>/Ynh_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte byte0 = new Byte((byte) (-77));
      Predicate<JSONObject> predicate0 = Predicate.isEqual((Object) byte0);
      Predicate<JSONObject> predicate1 = predicate0.negate();
      jSONArray0.optJSONObject(120);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      boolean boolean0 = predicate1.test(jSONObject0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.toArray();
      linkedList0.add((Byte) null);
      Float.isFinite((-2902L));
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, object0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      short short0 = (short) (-453);
      Short short1 = new Short((short) (-453));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "VJpk";
      jSONObject0.accumulate("VJpk", "VJpk");
      try { 
        jSONObject0.getBoolean("VJpk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VJpk\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      short short0 = (short) (-453);
      Short short1 = new Short((short) (-453));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "VJpk";
      JSONObject jSONObject1 = jSONObject0.accumulate("VJpk", "VJpk");
      Double double0 = new Double((short) (-453));
      jSONObject1.put("VJpk", (Object) double0);
      try { 
        jSONObject0.getBoolean("VJpk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"VJpk\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0);
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.accumulate("VJpC", boolean0);
      jSONObject0.getBoolean("VJpC");
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "{?";
      JSONTokener jSONTokener0 = new JSONTokener("{?");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short short0 = new Short((short) (-427));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JiJpk";
      jSONObject0.accumulate("JiJpk", "JiJpk");
      jSONObject0.accumulate("JiJpk", "JiJpk");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((short) (-427));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-427] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      Predicate<JSONObject> predicate0 = Predicate.isEqual(object0);
      predicate0.negate();
      boolean boolean0 = predicate0.test(jSONObject0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((-12469270));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-12469270] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Short short0 = new Short((short) (-453));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "VJpk";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("VJpk", (Collection) linkedList0);
      Map<Double, Short> map0 = null;
      Object object0 = JSONObject.NULL;
      jSONObject1.accumulate("VJpk", "VJpk");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((short) (-453));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-453] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      jSONObject0.toJSONArray(jSONArray0);
      try { 
        jSONObject0.getBoolean("2F&O5PXPNfTD%It");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"2F&O5PXPNfTD%It\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(459.6636);
      JSONObject jSONObject1 = jSONObject0.accumulate("iJpk", double0);
      jSONObject1.getDouble("iJpk");
      JSONObject jSONObject2 = new JSONObject();
      Integer integer0 = new Integer((short) (-453));
      JSONObject.testValidity(integer0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("%x", (Collection) linkedList0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("%x");
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a number.";
      jSONObject0.put("] is not a number.", (Object) "] is not a number.");
      try { 
        jSONObject0.append("] is not a number.", (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a number.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("&V;%wm7[*loJE?U1Z!", (Collection) linkedList0);
      jSONObject1.append("&V;%wm7[*loJE?U1Z!", jSONObject1);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("] is not a Boolean.", (Object) null);
      JSONArray jSONArray0 = jSONObject1.getJSONArray("] is not a Boolean.");
      try { 
        jSONArray0.toJSONObject(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$Null", (Collection) linkedList0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>(84);
      jSONObject0.put("wheel.json.JSONObject$Null", (Map) hashMap0);
      JSONObject.valueToString(jSONObject1);
      jSONObject0.optJSONObject("wheel.json.JSONObject$Null");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3532333045654685
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = JSONObject.quote(": ");
      assertEquals("\": \"", string0);
      
      Long long0 = new Long((-2902L));
      Long.getLong("gettoString", (-2902L));
      JSONObject.numberToString(long0);
      String string1 = JSONObject.valueToString(hashMap0, (-3996), (-3996));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "^\\u";
      JSONObject jSONObject1 = new JSONObject();
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject2 = jSONObject1.accumulate(string0, boolean0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.toJSONArray(jSONArray0);
      jSONObject2.getBoolean(string0);
      Integer integer0 = new Integer((-2058));
      Integer.getInteger(string0, integer0);
      Long long0 = new Long((-2058));
      assertEquals((-2058L), (long)long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "{bUU?M:h,y\\Ge~ ";
      JSONTokener jSONTokener0 = new JSONTokener("{bUU?M:h,yGe~ ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 14 of {bUU?M:h,yGe~ 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "{UU?M:h:y\\GE~ ";
      JSONTokener jSONTokener0 = new JSONTokener("{UU?M:h:yGE~ ");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 9 of {UU?M:h:yGE~ 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.0294345465035737
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject1 = jSONObject0.put("&V;%wm7[*loJE?U1Z!", (Collection) linkedList0);
      jSONObject0.toString((-4), (-4));
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000003\": [],\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\"\n}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      JSONObject.valueToString(jSONObject1);
      JSONObject.testValidity(jSONObject2);
      JSONObject.valueToString(jSONObject1, (-4), (-4));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-44510525));
      assertEquals("-4.4510525E7", string0);
      
      String string1 = JSONObject.valueToString("-4.4510525E7", (-44510525), (-44510525));
      String string2 = JSONObject.quote("\"java.lang.String@0000000001\"");
      assertFalse(string2.equals((Object)string1));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "VJpk");
      assertEquals(3, jSONObject1.length());
      
      Object object0 = JSONObject.NULL;
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject2 = jSONObject0.put("(F/YQ1", (Map) hashMap0);
      jSONObject2.getJSONObject("(F/YQ1");
      jSONObject2.accumulate("(F/YQ1", "VJpk");
      String string0 = JSONObject.doubleToString(1772.0);
      assertEquals("1772", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = JSONObject.quote("</");
      assertEquals("\"<\\/\"", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      short short0 = (short)34;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "true";
      JSONObject.valueToString(jSONObject0);
      jSONObject0.accumulate("true", "true");
      jSONObject0.getBoolean("true");
      try { 
        jSONObject0.getJSONArray("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "{UU?M=NK:h:y\\E~";
      JSONTokener jSONTokener0 = new JSONTokener("{UU?M=NK:h:yE~");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 10 of {UU?M=NK:h:yE~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
