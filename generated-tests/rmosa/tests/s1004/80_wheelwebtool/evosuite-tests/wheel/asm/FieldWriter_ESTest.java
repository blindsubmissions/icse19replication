/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:40:04 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6554817739013927
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(826);
      classWriter0.visitField(826, ",\" ", ",\" ", ",\" ", ",\" ");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, ",\" ", ",\" ", "", "");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.next;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-6);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1257));
      ClassWriter classWriter1 = new ClassWriter((-459));
      ClassWriter classWriter2 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, (-1096), "RuntimeVisibleParameterAnnotations", "AnnotationDefault", (String) null, (Object) null);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      ClassWriter classWriter0 = new ClassWriter(64);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "", "", "", (Object) null);
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      ByteVector byteVector0 = new ByteVector(2);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "2G]C#HK!(~S&p7", "", "SourceFile", "2G]C#HK!(~S&p7");
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.visitEnd();
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.next;
      fieldWriter0.visitAttribute(attribute0);
      assertTrue(attribute0.isUnknown());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ClassWriter classWriter0 = new ClassWriter(1082);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 181, "#J[]|=PEQKvA;;An", "#J[]|=PEQKvA;;An", "#J[]|=PEQKvA;;An", "#J[]|=PEQKvA;;An");
      ByteVector byteVector0 = new ByteVector(1082);
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1239));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1066), " ", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter", "wheel.asm.FieldWriter");
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation(" ", true);
      assertNotNull(annotationVisitor0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0360334832009355
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1257));
      ClassWriter classWriter1 = new ClassWriter((-459));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, (-1096), "RuntimeVisibleParameterAnnotations", "AnnotationDefault", (String) null, (Object) null);
      fieldWriter0.visitAnnotation("ConstantValue", false);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(32, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1257));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "U?r5", "U?r5", "U?r5", "U?r5");
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("U?r5");
      ClassWriter classWriter1 = new ClassWriter((-1257));
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1257));
      ClassWriter classWriter1 = new ClassWriter((-459));
      ClassWriter classWriter2 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, (-1096), "RuntimeVisibleParameterAnnotations", "AnnotationDefault", (String) null, (Object) null);
      fieldWriter0.visitAnnotation("ConstantValue", true);
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.put(byteVector0);
      int int0 = fieldWriter0.getSize();
      assertEquals(32, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-1257));
      ClassWriter classWriter1 = new ClassWriter((-459));
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, (-459), "Code", "", (String) null, classWriter1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@a
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }
}
