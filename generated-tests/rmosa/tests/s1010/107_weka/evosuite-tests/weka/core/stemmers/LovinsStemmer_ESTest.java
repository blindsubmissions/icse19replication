/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:40:27 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8185418789114838
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("gD8urA*R");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("manual");
      assertEquals("manu", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8185418789114838
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("XDG) *3S");
      assertEquals("xdg) *3", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("manual");
      assertEquals("manu", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8317603713216299
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ence");
      lovinsStemmer0.stem("Original array (doubles): ");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("ence");
      assertEquals("enc", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8185418789114838
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("arize");
      assertEquals("ariz", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("manual");
      assertEquals("manu", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9071380966380936
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("x5$`'az");
      assertEquals("x5$`'az", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("manual");
      assertEquals("manu", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.949553320165402
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("ementend");
      assertEquals("ementens", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0453253715103137
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stem("Induction of decision trees");
      lovinsStemmer0.stemString("p.lql;ex");
      lovinsStemmer0.stem("p.lql;ex");
      String string1 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string1);
      
      String string2 = lovinsStemmer0.stemString("p.lql;ex");
      assertEquals("p.lql;ex", string2);
      
      String string3 = lovinsStemmer0.stemString("rI 5c2:");
      assertEquals("ri 5c2:", string3);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ement");
      assertEquals("ement", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9521118178850133
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufman publishes", string0);
      
      lovinsStemmer0.stem("morgan kaufman publishes");
      lovinsStemmer0.stemString("morgan kaufman publishes");
      String string1 = lovinsStemmer0.stemString("FaQXtal error.");
      assertEquals("faqxt error.", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.008199841034891
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("g9oarerid");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("dex");
      String string0 = lovinsStemmer0.stemString("iful");
      assertEquals("ifl", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9858957711110369
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0028730850667493
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      String string1 = lovinsStemmer0.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      assertEquals("th nam of a ser or ses of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th book is publ.", string1);
      
      String string2 = lovinsStemmer0.stemString("th nam of a ser or ses of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th book is publ.");
      assertEquals("th nam of a ser or se of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-vol se in which th book is publ.", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9042448340582876
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("ation");
      assertEquals("ation", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0818311437543144
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("1sD6ez");
      assertEquals("1sd6ez", string0);
      
      String[] stringArray0 = new String[1];
      String string1 = lovinsStemmer0.stemString("edityt");
      assertEquals("editys", string1);
      
      stringArray0[0] = "ingness";
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("1iine");
      assertEquals("1i", string2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9847721156937755
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("itlid");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = "c8P";
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0272498857938808
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("vad");
      assertEquals("vas", string0);
      
      lovinsStemmer0.stem("");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer1.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9941814492125127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("bex");
      lovinsStemmer0.stem("");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer1.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1320126423255035
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'vso9eUS({M;_O%f";
      stringArray0[1] = "'vso9eUS({M;_O%f";
      stringArray0[2] = "'vso9eUS({M;_O%f";
      stringArray0[3] = "'vso9eUS({M;_O%f";
      stringArray0[4] = "'vso9eUS({M;_O%f";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("'vso9eUS({M;_O%f");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("jurtyz");
      assertEquals("jurtys", string1);
      
      lovinsStemmer0.stemString("d3H2`6[630uoast");
      lovinsStemmer0.stem("'vso9eUS({M;_O%f");
      String string2 = lovinsStemmer0.stemString("'vso9eUS({M;_O%f");
      assertEquals("'vso9eus({m;_o%f", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9568695775492988
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("8034ax");
      String string0 = lovinsStemmer0.stem("tex");
      assertEquals("tic", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("Original array (doubles): ");
      lovinsStemmer0.stem("OI1Z2gR5T");
      String string1 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string1);
      
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0551849196849754
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("1wgvadix");
      assertEquals("1wgvadic", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("Yz-LOD!1+08}A");
      assertEquals("yz-lod!1+08}a", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      String string2 = lovinsStemmer0.stemString("editor");
      assertEquals("edit", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9868024485112278
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("end");
      String string0 = lovinsStemmer0.stemString("lidcid");
      assertEquals("lidcis", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
      
      String string2 = lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.059040719729163
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("'vso9eUS({M;_O%f");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("'vso9eUS({M;_O%f");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("aqbb9n6mie8emuad");
      assertEquals("aqbb9n6mie8emuas", string1);
      
      lovinsStemmer0.stemString("d3H2`6[630uoast");
      lovinsStemmer0.stem("'vso9eUS({M;_O%f");
      String string2 = lovinsStemmer0.stemString("'vso9eUS({M;_O%f");
      assertEquals("'vso9eus({m;_o%f", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9568695775492988
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Min index (ints): ");
      String string0 = lovinsStemmer0.stemString("Min index (ints): ");
      assertEquals("min indic (int): ", string0);
      
      lovinsStemmer0.stem("tex");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("Original array (doubles): ");
      lovinsStemmer0.stem("OI1Z2gR5T");
      String string1 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string1);
      
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("istr");
      assertEquals("ister", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0160461446860283
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appGars in the cite command and at the beginning of the dataase entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appgar in th cit command and at th begin of th dataas entr.", string0);
      
      String string1 = lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appgar in th cit command and at th begin of th dataas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appgar in th cit command and at th begin of th data entr.", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0082180853257063
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ond");
      String string0 = lovinsStemmer0.stem("ond");
      assertEquals("ons", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      String string2 = lovinsStemmer0.stemString("The alternating deciJion tree learning algorithm");
      assertEquals("th altern decij tre learn algorithm", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0264127076831109
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("c8P");
      String string0 = lovinsStemmer0.stemString("rud");
      assertEquals("rus", string0);
      
      String string1 = lovinsStemmer0.stem("Eg~LYl");
      assertEquals("eg~lyl", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0224378241270138
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lidcid");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("ert");
      assertEquals("ers", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stem("aSton");
      assertEquals("ast", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string0);
      
      String string1 = lovinsStemmer0.stemString("arra-dimens of 'new string[3][4][]': ");
      assertEquals("ar-dimen of 'new string[3][4][]': ", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0819441523477364
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("Induction of decision trees");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string0);
      
      lovinsStemmer0.stemString("p.lql;ex");
      String string1 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string1);
      
      String string2 = lovinsStemmer0.stemString("p.lql;ex");
      assertEquals("p.lql;ex", string2);
      
      String string3 = lovinsStemmer0.stemString("rI 5c2:");
      assertEquals("ri 5c2:", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9847721156937754
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string0);
      
      String string1 = lovinsStemmer0.stemString("ental");
      assertEquals("ent", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("FataX err:or.");
      assertEquals("fatac er:or.", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("dex");
      assertEquals("dic", string0);
      
      String string1 = lovinsStemmer0.stemString("Gf[8ACBB-a{7[");
      assertEquals("gf[8acb-a{7[", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("pand");
      assertEquals("pans", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("'855-uSr6Qe{T[kpP");
      assertEquals("'855-usr6q{t[kp", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = "g,7w#&DS@m0|()O1\\u#";
      lovinsStemmer0.stem(string1);
      String string2 = lovinsStemmer0.stemString("metr");
      assertEquals("meter", string2);
      
      String string3 = lovinsStemmer0.stemString("meter");
      assertEquals("meter", string3);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.969125406536672
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("errorlud");
      assertEquals("errorlus", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer0.stem("aton");
      assertEquals("at", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      String string1 = lovinsStemmer0.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      assertEquals("usu th addr of th publish or other typ of institut. for major publ hous, van leun recommen om th inform entir. for smal publish, on th other hand, you can help th reader by giv th compl addr.", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9449222339596707
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lidcid");
      assertEquals("lidcis", string0);
      
      lovinsStemmer0.stem("EDITOR");
      lovinsStemmer0.stem("WQEYEN;<Eh,s9");
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
      
      String string2 = lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0431072776827426
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.004105041085644
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem(",4]q\"hmy7qpex");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("The Mathematical Reviews number.");
      assertEquals("th mathemat review number.", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0601438193452695
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("A document hving an autho and title, but nOt fXrmally published.");
      assertEquals("a docum hving an auth and titl, but not fxrm publ.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer1.stemString("a docum hving an auth and titl, but not fxrm publ.");
      assertEquals("a docum hving an auth and titl, but not fxrm publ.", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lidcid");
      String string0 = lovinsStemmer0.stemString("?8{>8W-{1FTGG");
      assertEquals("?8{>8w-{1ftg", string0);
      
      String string1 = lovinsStemmer0.stemString("lidcis");
      assertEquals("lidc", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Indices fromstable sort (doules): ");
      assertEquals("indic fromst sort (doul): ", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("qqonet");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.956571697226191
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("oid");
      lovinsStemmer0.stemString("oid");
      lovinsStemmer0.stemString("oid");
      String string0 = lovinsStemmer0.stemString("3pansend");
      assertEquals("3pansens", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.04058255963887
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("anj");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ix";
      stringArray0[1] = "){WT2#&aF40X";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("){WT2#&aF40X");
      lovinsStemmer0.stemString("lidcid");
      lovinsStemmer0.stem("kqW.7}@6~5ru[F0");
      String string0 = lovinsStemmer0.stemString("F_XJrSUM+f.&5YB");
      assertEquals("f_xjrsum+f.&5yb", string0);
      
      String string1 = lovinsStemmer0.stemString("lidcid");
      assertEquals("lidcis", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("@8*||c->V\"vaSauL|");
      assertEquals("@8*||c->v\"vasaul|", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rpt");
      assertEquals("rb", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0106064704531454
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ancies");
      assertEquals("anci", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("Fatal error.");
      assertEquals("fat error.", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("eta");
      assertEquals("es", string1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0496105499888926
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("umpt");
      assertEquals("um", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer1.stemString("Fatal error.");
      assertEquals("fat error.", string2);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("<]aC!X$d9mRyL");
      assertEquals("<]ac!x$d9mr", string0);
      
      lovinsStemmer0.stem("ciou");
      String string1 = lovinsStemmer0.stemString("ChzTX<XQ7R");
      assertEquals("chztx<xq7r", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("ert");
      assertEquals("ers", string0);
      
      String string1 = lovinsStemmer0.stemString("EFj}FLAr(");
      assertEquals("efj}fl(", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Induction of decision treeN");
      String string0 = lovinsStemmer0.stemString("Induction of decision treeN");
      assertEquals("induc of decis treen", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("d3H2`6[630uoast");
      assertEquals("d3h2`6[630uoast", string0);
      
      lovinsStemmer0.stem("'vso9eUS({M;_O%f");
      String string1 = lovinsStemmer0.stemString("c8pher");
      assertEquals("c8pher", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer1.stemString("iev");
      assertEquals("ief", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("_j2s:d0 [W;1.YBcINe");
      assertEquals("_j2s:d0 [w;1.ybcin", string0);
      
      String string1 = lovinsStemmer0.stemString("*$Y]-%G#**CcrAn");
      assertEquals("*$y]-%g#**ccran", string1);
      
      String string2 = lovinsStemmer0.stemString("1iine");
      assertEquals("1i", string2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("}leVtndex");
      assertEquals("}levtndic", string0);
      
      lovinsStemmer0.stem("s{iKv6Yt[Y,@KKdv^");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("C.5: Proramsor Macbine Learning");
      assertEquals("c.5: prorams macb learn", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("g9oarerid");
      assertEquals("g9oareris", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "g9oareris";
      stringArray0[1] = "g9oareris";
      stringArray0[2] = "g9oareris";
      stringArray0[4] = "dex";
      stringArray0[5] = "g9oareris";
      stringArray0[6] = "g9oarerid";
      stringArray0[7] = "g9oareris";
      stringArray0[6] = "g9oarerid";
      String string1 = lovinsStemmer0.stemString("iul");
      assertEquals("iul", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0191593986624707
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("editex");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("editex");
      assertEquals("editic", string0);
      
      String string1 = lovinsStemmer0.stemString("editic");
      assertEquals("edit", string1);
  }
}
