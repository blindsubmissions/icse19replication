/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:35:24 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      String string0 = "1#WXrrh";
      advancedSettings0.getPerformancePreferencesBandwidth();
      int int0 = 0;
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-2560));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("1#WXrrh");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 1#WXrrh
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertNotNull(string0);
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      
      advancedSettings0.setByteBufferSize((-2934));
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(0, int0);
      
      int int1 = advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("0,");
      int int2 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertTrue(int2 == int1);
      
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesLatency(0);
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(boolean0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-755));
      advancedSettings0.setClientSocketSendBufferSize((-755));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      assertEquals((-755), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setDebugNonBlockingMode(false);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesConnectionTime(1215);
      advancedSettings0.setBacklog(454);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize((-896));
      assertEquals(454, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize(1932);
      advancedSettings0.setQSObjectPoolMaker("");
      assertEquals(1932, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setBacklog(65536);
      advancedSettings0.getClientIdentifier();
      assertEquals(65536, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientIdentifier("_eT=fP*");
      advancedSettings0.setMaxThreadsForNioWrite((-746));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("_eT=fP*");
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals("_eT=fP*", advancedSettings0.getClientIdentifier());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketReceiveBufferSize(3099);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientIdentifier("w+kBL$Ru4?f");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(815);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setQSObjectPoolMaker("");
      assertEquals(815, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      int int1 = advancedSettings0.getClientSocketSendBufferSize();
      assertTrue(int1 == int0);
      
      String string0 = advancedSettings0.toXML("1#WXrrh");
      assertEquals("1#WXrrh<advanced-settings>\n1#WXrrh\t<charset>ISO-8859-1</charset>\n1#WXrrh\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n1#WXrrh\t<byte-buffer-size>65536</byte-buffer-size>\n1#WXrrh\t<backlog>0</backlog>\n1#WXrrh\t<socket-linger>-1</socket-linger>\n1#WXrrh\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n1#WXrrh\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n1#WXrrh\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n1#WXrrh\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n1#WXrrh\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n1#WXrrh\t<performance-preferences-latency>0</performance-preferences-latency>\n1#WXrrh\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n1#WXrrh\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n1#WXrrh</advanced-settings>\n", string0);
      
      advancedSettings0.getQSObjectPoolMaker();
      int int2 = advancedSettings0.getByteBufferSize();
      assertEquals(65536, int2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-2674));
      advancedSettings0.setClientSocketReceiveBufferSize((-551));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setMaxThreadsForNioWrite((-551));
      assertEquals((-551), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 246;
      advancedSettings0.setClientSocketSendBufferSize(246);
      advancedSettings0.setSocketLinger((-1881));
      int int1 = (-1867);
      advancedSettings0.setBacklog((-1881));
      String string0 = ".";
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketReceiveBufferSize(2907);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset(".");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "J*Vdg3%?";
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setByteBufferSize((-1694));
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setPerformancePreferencesBandwidth((-1694));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("J*Vdg3%?");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // J*Vdg3%?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = 0;
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      int int1 = (-1838);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.xmlreader.AdvancedSettings");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.xmlreader.AdvancedSettings
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(289);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("\t<client-socket-send-buffer-size>");
      advancedSettings0.getCharset();
      assertEquals(289, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1607));
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.setBacklog(65536);
      advancedSettings0.setCharset("");
      advancedSettings0.toXML("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</charset>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </charset>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-3256));
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("FlLq6U]] Y^}5N5n)4o");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      assertEquals((-3256), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setBacklog((-1607));
      advancedSettings0.setClientSocketReceiveBufferSize((-1607));
      advancedSettings0.setMaxThreadsForNioWrite(2185);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesLatency(2185);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setDebugNonBlockingMode(false);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }
}
