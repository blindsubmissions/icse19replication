/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:50:07 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2602042855891153
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("H6x");
      assertEquals(Double.NaN, double0, 0.01);
      
      String string0 = JSONObject.valueToString("H6x");
      String string1 = jSONObject0.optString("\"java.lang.String@0000000002\"", "get");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote("s{tCW&)m");
      JSONObject jSONObject0 = new JSONObject((Object) "\"s{tCW&)m\"");
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = JSONObject.quote("6 /?\n");
      assertEquals("\"6 /?\\n\"", string0);
      
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string1 = jSONObject0.toString(48, 1436);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject.quote("wP_V o|\"");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wP_V o|\"";
      stringArray0[1] = "wP_V o|\"";
      stringArray0[2] = "\"wP_V o|\"\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("8bD}e");
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("8bD}e", (Object) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject.quote("/YI-rJ(Ycy4b+");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("/YI-rJ(Ycy4b+");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/YI-rJ(Ycy4b+\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject.quote("/cI-rJ(Ycy4b+");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(1924);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JSONObject.quote("!Hq:\" r;}NpDM}");
      Float float0 = new Float(285.097);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "\"!Hq:\" r;}NpDM}\"";
      stringArray0[1] = "!Hq:\" r;}NpDM}";
      stringArray0[2] = "!Hq:\" r;}NpDM}";
      stringArray0[3] = "\"!Hq:\" r;}NpDM}\"";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.575832360384573
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject.quote("n_6C]$L^=/(L6o3!+S5@");
      Double double0 = new Double(3787.52057477054);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optLong("n_6C]$L^=/(L6o3!+S5@", 1L);
      try { 
        jSONObject0.getDouble("cumj=ekVf3TH");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"cumj=ekVf3TH\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "6 /?\n";
      JSONObject.quote("6 /?\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("6 /?\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 6 /?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.580649125069464
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection) linkedList1);
      linkedList1.containsAll(linkedList0);
      jSONObject1.put("null", (Object) jSONObject0);
      jSONObject0.optInt("] is not a JSONArray.", 17);
      Double double0 = Double.valueOf((double) 17);
      assertEquals(17.0, (double)double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = JSONObject.quote("\"p5Q-%Q2");
      assertEquals("\"\\\"p5Q-%Q2\"", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      String string0 = JSONObject.valueToString(linkedList0, 1542, 20);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4057382291118443
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject.quote("/cI-rJ(Ycy4b+");
      JSONObject jSONObject0 = new JSONObject((Object) "/cI-rJ(Ycy4b+");
      JSONObject.getNames(jSONObject0);
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7502240195160246
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject.quote("M~");
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("M~", jSONObject0);
      JSONObject jSONObject1 = jSONObject0.putOpt("\"M~\"", "\"M~\"");
      JSONObject.quote("M~");
      jSONObject1.optLong("M~");
      jSONObject1.putOpt(":C>KuT&[GeA`cre9i", "M~");
      try { 
        jSONObject0.getBoolean("\"M~\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"M~\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = JSONObject.quote("/YI-rJ(Ycyb+");
      Integer integer0 = new Integer((-893));
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1923957433509245
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = JSONObject.quote("/cI-rJ(Ycy4b+");
      assertEquals("\"/cI-rJ(Ycy4b+\"", string0);
      
      Integer integer0 = new Integer((-1230));
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toString((-2109), 27);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5370360781930825
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "D\n";
      JSONObject.quote("D\n");
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("Y\"s%_@}1'", hashMap0);
      jSONObject0.putOpt("\"D\n\"", "\"D\n\"");
      try { 
        jSONObject0.getBoolean("\"D\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"D\\n\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "]bT}";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("]bT}", "]bT}");
      try { 
        jSONObject1.getLong("]bT}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]bT}\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1255L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8734641445321512
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject.quote("6 ?tx\n");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("iswait");
      try { 
        jSONObject0.getString("6 ?tx\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6 ?tx\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt(" %\"!tho)5sG", double0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3598837001191968
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSONObject.valueToString("H6x");
      Byte byte0 = new Byte((byte)27);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"java.lang.String@0000000001\"";
      stringArray0[1] = "get";
      stringArray0[2] = "\"java.lang.String@0000000001\"";
      stringArray0[3] = "true";
      stringArray0[4] = "H6x";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.accumulate("", "H6x");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3510358436616767
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject.quote("/YI-rJ(Ycy4b+");
      Short short0 = new Short((short) (-17));
      JSONObject.numberToString(short0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("[", false);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.558255126072715
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject.quote("/cI-rJ(Ycy4b+");
      JSONObject jSONObject0 = new JSONObject((Object) "/cI-rJ(Ycy4b+");
      jSONObject0.optBoolean("/cI-rJ(Ycy4b+");
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5002692973717835
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject.quote("n_6C]$L^=/(L6o3!+S5@");
      JSONObject jSONObject0 = new JSONObject((Object) "n_6C]$L^=/(L6o3!+S5@");
      jSONObject0.toString();
      JSONObject.testValidity("n_6C]$L^=/(L6o3!+S5@");
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = JSONObject.quote("6 /?\n");
      Float float0 = new Float(0.0);
      String string1 = JSONObject.valueToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = JSONObject.quote("/YI-rJ(Ycy4b+");
      assertEquals("\"/YI-rJ(Ycy4b+\"", string0);
      
      String string1 = JSONObject.valueToString("\"/YI-rJ(Ycy4b\\+\"");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull(".");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = JSONObject.quote("6\n");
      assertEquals("\"6\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9404479886553263
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Double, JSONObject> hashMap0 = new HashMap<Double, JSONObject>(0);
      jSONArray0.put((Map) hashMap0);
      String string0 = JSONObject.valueToString(jSONArray0, 1870, 1870);
      assertEquals("[{}]", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = (-1L);
      Long long1 = new Long((-1L));
      int int0 = 1438;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.301273572363032
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = JSONObject.quote("/YI-rJ(Ycy4b+");
      assertEquals("\"/YI-rJ(Ycy4b+\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"/YI-rJ(Ycy4b\\+\"");
      jSONObject0.toString((-4606), (-4606));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4057382291118443
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject.quote("/YI-rJ(Ycy4b+");
      Float float0 = new Float(381.5254778);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.quote((String) null);
      int int0 = 8192;
      // Undeclared exception!
      jSONObject0.toString(8192, 8192);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = JSONObject.quote("6 Bq\n");
      assertEquals("\"6 Bq\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"6 Bq\n\"");
      jSONObject0.toString((-251), 128);
      jSONObject0.toString((-251), 97);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.8222900060250078
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject.quote("/YI-rJ(Ycy4b+");
      JSONObject jSONObject0 = new JSONObject((Object) "/YI-rJ(Ycy4b+");
      try { 
        jSONObject0.put((String) null, 153.13689106556);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-540.36452486));
      jSONObject0.accumulate("false", double0);
      jSONObject0.optDouble("false", (-540.36452486));
      JSONObject.testValidity("] is not a JSONArray.");
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      
      JSONObject.testValidity(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6484893275935664
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "n_6C]$L^=/(L6o3!+S5@";
      JSONObject.quote("n_6C]$L^=/(L6o3!+S5@");
      Double double0 = new Double(3787.52057477054);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optInt("N7k|?+;r-Nks+yL6DO");
      try { 
        jSONObject0.getLong("getcopyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcopyValueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = JSONObject.doubleToString(791.5793631860579);
      assertEquals("791.5793631860579", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9573031667032572
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put(": ", (Collection) linkedList0);
      jSONObject1.optLong((String) null);
      linkedList0.spliterator();
      jSONObject1.optLong((String) null, 0L);
      jSONObject0.getJSONArray(": ");
      JSONObject.quote("196t!b{n");
      try { 
        JSONObject.valueToString(float0, 92, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection) linkedList0);
      jSONObject1.put("null", (Object) jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Double double0 = new Double(957.6209651859225);
      JSONObject jSONObject0 = new JSONObject(double0);
      StringWriter stringWriter0 = new StringWriter(123);
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.write(writer0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      linkedList0.add(jSONObject0);
      String string0 = JSONObject.valueToString(linkedList0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Float float0 = new Float((-2857.0));
      JSONObject.numberToString(float0);
      Double double0 = new Double((-1221.712879));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("java.lang.Float@0000000001");
      jSONObject0.optString("java.lang.Float@0000000001");
      String string0 = jSONObject0.optString("Expected '", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ": ");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      jSONObject0.put("]is not a JSONObject.", (Collection) linkedList1);
      jSONObject0.remove(": ");
      try { 
        jSONObject0.getJSONObject("]is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]is not a JSONObject.\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iIWv+eWwTj7", (Object) null);
      assertEquals(0, jSONObject1.length());
      
      Double.valueOf(1.0);
      String string0 = JSONObject.quote("iIWv+eWwTj7");
      assertEquals("\"iIWv+eWwTj7\"", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9901490231872188
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "{Qbn:Y'G";
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("{Qbn:Y'G", object0);
      jSONObject0.put("{Qbn:Y'G", 3301L);
      jSONObject1.optLong("{Qbn:Y'G", 3301L);
      try { 
        jSONObject0.getBoolean("{Qbn:Y'G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{Qbn:Y'G\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("min");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("] is not a JSONArray.", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter(2613);
      jSONObject0.optJSONArray("] is not a JSONArray.");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = new Boolean((String) null);
      jSONObject0.has((String) null);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1628));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection) linkedList0);
      jSONObject1.accumulate("] is not a JSONArray.", linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.484925891109223
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONArray.";
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection) linkedList1);
      linkedList1.containsAll(linkedList0);
      try { 
        jSONObject1.getBoolean("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Float float0 = new Float((-1493.1198079377775));
      String string0 = JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("java.lang.Float@0000000001", false);
      jSONObject0.optJSONArray("java.lang.Float@0000000001");
      jSONObject0.optString("java.lang.Float@0000000001");
      String string1 = JSONObject.numberToString(float0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      String[] stringArray0 = new String[0];
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.put(46);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      String string0 = JSONObject.valueToString(jSONArray1, (-1008), (-1008));
      assertNotSame(jSONArray1, jSONArray0);
      assertEquals("[null]", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.accumulate((String) null, jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.put("null", (Object) jSONObject0);
      JSONObject jSONObject1 = jSONObject0.getJSONObject("null");
      jSONObject1.keys();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      jSONObject0.put("] is not a JSONArray.", (Object) float0);
      jSONObject0.optInt("] is not a JSONArray.", 17);
      Double double0 = Double.valueOf(Double.NaN);
      assertEquals(Double.NaN, (double)double0, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "{<";
      JSONTokener jSONTokener0 = new JSONTokener("{<");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {<
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "e.26#,JpDf<e/";
      short short0 = (short) (-1);
      Short short1 = new Short((short) (-1));
      JSONObject jSONObject1 = jSONObject0.put("e.26#,JpDf<e/", (Object) short1);
      try { 
        jSONObject1.append("e.26#,JpDf<e/", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[e.26#,JpDf<e/] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<JSONObject> linkedList1 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection) linkedList1);
      String[] stringArray0 = new String[25];
      stringArray0[0] = "e";
      stringArray0[1] = null;
      stringArray0[2] = "] is not a JSONArray.";
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "] is not a JSONArray.";
      stringArray0[6] = null;
      stringArray0[5] = null;
      LinkedList<JSONObject> linkedList2 = new LinkedList<JSONObject>();
      linkedList1.addAll((Collection<? extends JSONObject>) linkedList2);
      stringArray0[8] = null;
      jSONObject0.append("] is not a JSONArray.", jSONObject1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = JSONObject.quote("!Hq:\" zr;}NpDM}");
      assertEquals("\"!Hq:\\\" zr;}NpDM}\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 2143, 3464);
      assertEquals("null", string1);
      
      String string2 = JSONObject.valueToString("null");
      String string3 = JSONObject.valueToString("null");
      assertFalse(string3.equals((Object)string2));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.put("/lXz~,QIef+\u0001(", (Object) boolean0);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean1 = jSONObject0.getBoolean("/lXz~,QIef+\u0001(");
      JSONObject.valueToString(jSONObject1);
      assertTrue(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject.quote("/YI-rJ(Ycy4b+");
      Float float0 = new Float(381.5254778);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("\"/YI-rJ(Ycy4b\\+\"", (double) 20);
      String string0 = jSONObject0.toString(20, 31);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String string0 = "{En:4";
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("{En:4", (Object) "{En:4");
      JSONObject jSONObject2 = new JSONObject((Map) null);
      long long0 = (-1L);
      try { 
        jSONObject1.getJSONArray("{En:4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{En:4\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject1.put("null", (Object) jSONObject0);
      JSONObject jSONObject3 = jSONObject0.optJSONObject("null");
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-36763560));
      assertEquals("-3.676356E7", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("{Qbn:M");
      jSONTokener0.syntaxError("ishashCode");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 6 of {Qbn:M
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      String string0 = "{Qbn:Y,|;";
      JSONTokener jSONTokener0 = new JSONTokener("{Qbn:Y,|;");
      jSONTokener0.syntaxError("{Qbn:Y,|;");
      jSONTokener0.syntaxError("{Qbn:Y,|;");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {Qbn:Y,|;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = (JSONObject)jSONTokener0.nextValue();
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7907588115525694
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String string0 = "g";
      JSONObject.quote("g");
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("\"g\"", "\"g\"");
      jSONObject1.putOpt(":C>AKuT&[GeA`cre9i", "g");
      jSONObject1.toString();
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\":\"java.lang.String@0000000003\",\"java.lang.String@0000000004\":\"java.lang.String@0000000004\"}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      jSONTokener0.skipTo('3');
      try { 
        jSONTokener0.next('z');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'z' and instead saw '\u0000' at character 121 of {\"java.lang.String@0000000002\":\"java.lang.String@0000000003\",\"java.lang.String@0000000004\":\"java.lang.String@0000000004\"}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Qbn:Y,|;");
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("{Qbn:Y,|;");
      JSONObject jSONObject1 = jSONObject0.putOpt("{Qbn:Y,|;", boolean0);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getBoolean("{Qbn:Y,|;");
      String string0 = JSONObject.quote("{Qbn:Y,|;");
      assertEquals("\"{Qbn:Y,|;\"", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      String string0 = JSONObject.valueToString(hashMap0, 127, 127);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9164532914985546
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "{Qbn:Y'G";
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("{Qbn:Y'G", object0);
      jSONObject1.optLong("{Qbn:Y'G", 3301L);
      try { 
        jSONObject0.getBoolean("{Qbn:Y'G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{Qbn:Y'G\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject.quote("Z)QZ+j(");
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-2284));
      Short.toUnsignedInt((short) (-2284));
      JSONObject jSONObject1 = jSONObject0.putOpt("^SIu9q@&I3!yU)0", short0);
      jSONObject1.getDouble("^SIu9q@&I3!yU)0");
      try { 
        jSONObject0.getBoolean("\"Z)QZ+j(\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"Z)QZ+j(\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("+");
      JSONObject jSONObject1 = jSONObject0.putOpt("+", boolean0);
      try { 
        jSONObject1.getBoolean("ZUixs8yD0</H'e,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZUixs8yD0<\\/H'e,\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Qbn:Y|;");
      jSONTokener0.syntaxError("{Qbn:Y|;");
      jSONTokener0.syntaxError("{Qbn:Y|;");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 7 of {Qbn:Y|;
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("true", "true");
      boolean boolean0 = jSONObject1.getBoolean("true");
      assertTrue(boolean0);
  }
}
