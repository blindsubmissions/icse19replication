/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:34:42 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMind;
import freemind.main.FreeMindApplet;
import freemind.main.Resources;
import freemind.modes.MindIcon;
import freemind.modes.NodeAdapter;
import freemind.modes.browsemode.BrowseCloudModel;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.common.actions.FindAction;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapToolBar;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Button;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.PopupMenu;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.TextArea;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.File;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.basic.BasicListUI;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.table.DefaultTableModel;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.svggen.ImageHandlerPNGEncoder;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xerces.parsers.SAXParser;
import org.apache.xerces.parsers.StandardParserConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.apache.xml.dtm.ref.CoroutineManager;
import org.apache.xml.dtm.ref.IncrementalSAXSource_Filter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.OsmFileCacheTileLoader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(451);
      HsqlProperties hsqlProperties0 = new HsqlProperties("day");
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("JDayChooser", 62135596800000L, 62135596800000L);
      jDayChooser0.drawDays();
      jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        Color.RGBtoHSB(1904, 10051, 34, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.660187820854415
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Vector<Integer> vector0 = new Vector<Integer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      JTable jTable0 = new JTable(vector0, vector0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 11, 32, 38, 'N');
      keyEvent0.setKeyChar('N');
      KeyEvent.getKeyText(38);
      jDayChooser0.keyPressed(keyEvent0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getUI();
      jDayChooser0.setYear((-2172));
      jDayChooser0.updateUI();
      Date date0 = jDayChooser0.getMinSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setMaxSelectableDate(date0);
      int int0 = 0;
      TextArea textArea0 = null;
      try {
        textArea0 = new TextArea((-2172), 0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7245232524096474
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, (-2672L), 38, 33, '\\');
      keyEvent0.setKeyChar('\\');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.drawWeeks();
      // Undeclared exception!
      try { 
        MockDate.parse("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.init();
      jDayChooser0.getSundayForeground();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-97);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.getDaysInMonth();
      MockDate mockDate0 = new MockDate(28, 49, 414, 414, 49, 71);
      mockDate0.toInstant();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.init();
      jDayChooser0.setYear(71);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(49, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      CoroutineManager coroutineManager0 = new CoroutineManager();
      IncrementalSAXSource_Filter incrementalSAXSource_Filter0 = new IncrementalSAXSource_Filter(coroutineManager0, (-2608));
      MockThread mockThread0 = new MockThread(threadGroup0, incrementalSAXSource_Filter0, "6|p.9B H");
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread0, 71, 28, timeUnit0);
      ActionEvent actionEvent0 = new ActionEvent(scheduledFuture0, (-4993), "day", 414, 414);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6304318051332745
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      jDayChooser0.setDay(14);
      Color color0 = Color.red;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(0);
      jDayChooser0.setDay(2);
      System.setCurrentTimeMillis(0);
      jDayChooser0.setDay(3215);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "|@&^yGE#FC", 63194);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6717601208463133
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setDay(14);
      jDayChooser0.getHierarchyBoundsListeners();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setMonth(14);
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBorder();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 10025);
      String string0 = AbstractButton.DISABLED_ICON_CHANGED_PROPERTY;
      jDayChooser0.focusGained(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isWeekOfYearVisible();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        debugGraphics0.drawRect(942, 942, (-198), (-1813));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.608820614830946
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.getPropertyChangeListeners("day");
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.setMaxDayCharacters(1);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.665301538388675
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      jDayChooser0.setMaxDayCharacters(20);
      jDayChooser0.setDay(14);
      Color color0 = Color.red;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(0);
      jDayChooser0.setDay(2);
      assertEquals(2, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7050115846662113
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      Locale locale0 = Locale.GERMAN;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      mockSimpleDateFormat0.get2DigitYearStart();
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getColor();
      jDayChooser0.sundayForeground = color0;
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.getDaysInMonth();
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      jDayChooser0.setDay(14);
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setSundayForeground(systemColor0);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.getHierarchyBoundsListeners();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setMonth(14);
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isFocusOwner();
      jDayChooser0.setIgnoreRepaint(false);
      jDayChooser0.setWeekOfYearVisible(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2742));
      focusEvent0.paramString();
      JButton jButton0 = new JButton();
      MindIcon mindIcon0 = MindIcon.factory("Q.7&9&WB/s:");
      ImageIcon imageIcon0 = mindIcon0.getIcon();
      JButton jButton1 = new JButton("icons.list", imageIcon0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawDays();
      KeyEvent keyEvent0 = new KeyEvent(jButton1, 0, (-915L), (-1), 0, '0');
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.setFocus();
      Color color0 = Color.BLUE;
      jDayChooser0.setSundayForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JComponent.setDefaultLocale(locale0);
      jDayChooser0.addListeners(12);
      jDayChooser0.getDayPanel();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      ImageHandlerPNGEncoder imageHandlerPNGEncoder0 = null;
      try {
        imageHandlerPNGEncoder0 = new ImageHandlerPNGEncoder("day", (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.getY();
      jDayChooser0.setDay(14);
      jDayChooser0.getHierarchyBoundsListeners();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setMonth(14);
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getUI();
      jDayChooser0.getPropertyChangeListeners("B?;v\u0005|t`<eV4@_");
      jDayChooser0.setMaxDayCharacters((-2623));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      int int0 = SwingConstants.TRAILING;
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setYear(11);
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 0L, 11, 11, 'x');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.662701752014223
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.drawDays();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockDate mockDate0 = new MockDate(546, 968, 7, 968, 28, (-1132));
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.781052333618764
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      Locale locale0 = Locale.GERMAN;
      long long0 = (-1L);
      JButton[] jButtonArray0 = new JButton[5];
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      basicTreeUI0.getExpandedIcon();
      JButton jButton0 = new JButton((Icon) null);
      jButtonArray0[0] = jButton0;
      jDayChooser0.getSelectedDay();
      jButtonArray0[1] = null;
      SchemeMode schemeMode0 = new SchemeMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6741970408327744
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Vector<Integer> vector0 = new Vector<Integer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      JTable jTable0 = new JTable(vector0, vector0);
      int int0 = 11;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 11, 32, 38, 'N');
      keyEvent0.setKeyChar('N');
      int int1 = 64257;
      jDayChooser0.setDay(64257);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 38, 11, 2, 32, 'N');
      jDayChooser0.keyPressed(keyEvent1);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getY();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      jDayChooser0.getHierarchyBoundsListeners();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("Ucu%LDU'tfb", vetoableChangeListener0);
      jDayChooser_DecoratorButton0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      Hashtable<JButton, Calendar> hashtable0 = new Hashtable<JButton, Calendar>();
      HashMap<JButton, MockGregorianCalendar> hashMap0 = new HashMap<JButton, MockGregorianCalendar>();
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)60;
      intArray0[1] = (int) (byte)21;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)55;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDay((-5435));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      jDayChooser0.setDay(14);
      jDayChooser0.getHierarchyBoundsListeners();
      Locale locale0 = Locale.CANADA;
      jDayChooser0.setMonth(14);
      jDayChooser0.setLocale(locale0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      jDayChooser0.setDay(1669);
      jDayChooser0.setMonth(0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6994507830053567
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.blue;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getY();
      jDayChooser0.setDay(14);
      Color color1 = Color.red;
      jDayChooser0.setDecorationBackgroundColor(color1);
      jDayChooser0.setDecorationBackgroundColor(color1);
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.setDay(2);
      jDayChooser0.setEnabled(false);
      assertEquals(2, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Vector<Integer> vector0 = new Vector<Integer>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Date date0 = null;
      jDayChooser0.setMinSelectableDate((Date) null);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      String string0 = "22";
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "22", 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8048118917331997
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.day = 38;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 38, (-2672L), 38, 31, '\\');
      KeyEvent.getExtendedKeyCodeForChar((-45));
      keyEvent0.setKeyChar('\\');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      int int0 = 4;
      jDayChooser0.setMaxDayCharacters(4);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 38, 4, (-652), 238, 'F');
      jDayChooser0.keyPressed(keyEvent1);
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BasicListUI basicListUI0 = new BasicListUI();
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[4];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(defaultTableModelArray0, 38);
      defaultTableModelArray0[0] = defaultTableModel0;
      DefaultTableModel defaultTableModel1 = new DefaultTableModel();
      defaultTableModelArray0[1] = defaultTableModel1;
      DefaultTableModel defaultTableModel2 = null;
      try {
        defaultTableModel2 = new DefaultTableModel(defaultTableModelArray0, (-201));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -201
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3, 3, 2, 32, 'N');
      keyEvent0.setKeyChar('N');
      KeyEvent.getKeyText(3);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser_DecoratorButton0, 32, 622L, (-3198), 40, 'N');
      jDayChooser0.addListeners(6);
      jDayChooser0.keyPressed(keyEvent1);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser1.keyPressed(keyEvent1);
      jDayChooser0.updateUI();
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser1.setDay(40);
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.781052333618764
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      Locale locale0 = Locale.GERMAN;
      int int0 = 286;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 286, (-1L), '\"', '\"', '\"');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Stack<Integer> stack0 = new Stack<Integer>();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      JTable jTable0 = new JTable(stack0, vector0);
      KeyEvent keyEvent0 = new KeyEvent(jTable0, 0, 'N', 2187, 36, 'N');
      keyEvent0.paramString();
      keyEvent0.setKeyChar('N');
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JButton jButton0 = new JButton("day");
      jDayChooser0.selectedDay = jButton0;
      jDayChooser0.setDay((-1480));
      KeyEvent keyEvent0 = new KeyEvent(jButton0, 16, 16, 16, 16, 'V');
      jDayChooser0.keyPressed(keyEvent0);
      SymbolTable symbolTable0 = null;
      try {
        symbolTable0 = new SymbolTable((-1480));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1480
         //
         verifyException("org.apache.xerces.util.SymbolTable", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SVGGeneratorContext.GraphicContextDefaults sVGGeneratorContext_GraphicContextDefaults0 = new SVGGeneratorContext.GraphicContextDefaults();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      JButton jButton0 = new JButton();
      jDayChooser0.selectedDay = jButton0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(0, 10021, intArray0, 10021, 1744);
      jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      jDayChooser0.setDay(14);
      Color color0 = Color.red;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.setDay(2);
      assertEquals(2, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getY();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 0L, 2441, 39, ';');
      keyEvent0.setKeyChar('N');
      jDayChooser0.keyPressed(keyEvent0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.updateUI();
      assertEquals(16, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, 14, (-1447), 35, 't');
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }
}
