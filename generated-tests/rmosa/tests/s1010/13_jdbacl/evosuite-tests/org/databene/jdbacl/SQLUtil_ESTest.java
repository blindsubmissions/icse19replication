/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:48:49 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.engine.SessionRemote;
import org.hsqldb.jdbc.jdbcClob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = SQLUtil.normalize("E \"LD]>A`", false);
      assertEquals("E \"LD]>A`\"", string0);
      
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer((String) null, compositeDBObject0);
      boolean boolean0 = SQLUtil.isDML("'REFERENCES'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3245083869310707
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("\"mG`^Y%gq#~k+aI#|");
      String string0 = SQLUtil.normalize("|@u3{@2_hoz}-&,Av}k", false);
      assertEquals("| @ u3 { @ 2_hoz } - &, Av } k", string0);
      
      boolean boolean0 = SQLUtil.isQuery("truncatederby.storage.checkpointinterval");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9263091598950749
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.normalize("alter materialized view", false);
      SQLUtil.mutatesDataOrStructure("alter materialized view");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) "alter materialized view");
      VersionNumber versionNumber0 = null;
      try {
        versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9509891646214447
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.normalize("&0&^?<E/%*G", true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("& 0 & ^ ? < E / % * G");
      assertNull(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[1] = stringArray0[2];
      stringArray0[4] = "C013800D-00F8-5B53-28A9-00000019ED88";
      String string0 = SQLUtil.leftJoin("C013800D-00F8-5B53-28A9-00000019ED88", stringArray0, stringArray0[2], "C013800D-00F8-5B53-28A9-00000019ED88", stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "WcNv%@#lLCuldT)";
      stringArray0[1] = "USER_NAME";
      stringArray0[0] = "jaqRGoGy";
      stringArray0[4] = "";
      SQLUtil.join("", "jaqRGoGy", stringArray0, "jaqRGoGy", "8r`b2JC@2S)vmSAmb6", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      assertNull(defaultDBTable1.getDoc());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("drop tablejyf", stringArray0, "drop tablejyf", (String) null, stringArray0);
      assertEquals("drop tablejyf as null on ", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String string0 = "B{%!a.";
      String string1 = "";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("", false, "B{%!a.", "B{%!a.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[2] = "elee";
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Ez0^");
      SQLUtil.addOptionalCondition("Ez0^", stringBuilder0);
      assertEquals("Ez0^ or Ez0^", stringBuilder0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = SQLUtil.substituteMarkers("", "", integer0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.normalize("#-LfM8Z)IOGl59", true);
      assertEquals("# - LfM8Z) IOGl59", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "#&|b%Wl9&S\\W";
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("#&|b%Wl9&SW");
      String string1 = "]*r)QW";
      tableContainer0.getTable("]*r)QW");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      TableContainer tableContainer0 = new TableContainer("");
      SQLUtil.ownerDotComponent(tableContainer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      try { 
        pipedReader0.read(charBuffer0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.normalize("#-LfM8Z)IOGl59", false);
      assertEquals("# - LfM8Z) IOGl59", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.normalize("= ?w\"#pQG", false);
      assertEquals("= ? w \"#pQG\"", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog(" as ");
      String string0 = "alter table";
      dBCatalog0.getSchema("alter table");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ", (DBSchema) null);
      DBDataType dBDataType0 = DBDataType.getInstance(110, " as ");
      Integer integer0 = new Integer(110);
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", defaultDBTable0, dBDataType0, integer1, integer2);
      String string1 = "drop materialized view";
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("drop materialized view", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn(" as ", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn2;
      SQLUtil.renderColumnNames(dBColumnArray0);
      StringBuilder stringBuilder0 = new StringBuilder("alter table");
      EvoSuiteFile evoSuiteFile0 = null;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(110, " as ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 110
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      String string1 = "jaqR\\GoGy";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DBDataType dBDataType0 = DBDataType.getInstance((-4044), "WcNv%@#lLCuldT)");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("H^9!OCDB", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = SQLUtil.normalize("\u0001j", true);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("\u0001j", false, "\u0001j", "QE=b");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("n(jT)Hi>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"jT\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter table(pyt > } g : ] < qi @ yu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: alter table(pyt > } g : ] < qi @ yu
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.7188008609386547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("w)2;/f'Lkn!", false);
      assertEquals("w) 2 ; / f 'Lkn!'", string0);
      
      DBSchema dBSchema0 = new DBSchema("alter table", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("w)2;/f'Lkn!", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "row";
      stringArray0[1] = "w) 2 ; / f 'Lkn!'";
      stringArray0[2] = "alter table";
      stringArray0[3] = "q2W,nxB*3\rW9aahqI}";
      stringArray0[4] = "w)2;/f'Lkn!";
      stringArray0[5] = "alter table";
      stringArray0[6] = "w)2;/f'Lkn!";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "w) 2 ; / f 'Lkn!'", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("PRIMARY KEY (row, w) 2 ; / f 'Lkn!', alter table, q2W,nxB*3\rW9aahqI}, w)2;/f'Lkn!, alter table, w)2;/f'Lkn!)", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("l\"pa,_WQ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 1, "");
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals("l\"pa,_WQ.", string0);
      
      String string1 = defaultDBTable0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = SQLUtil.normalize("|@u3{@2_hoz}-&,Av}k", true);
      assertEquals("| @ u3 { @ 2_hoz } - &, Av } k", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop materialized viewy`zq {pn>nz%7n@.v", true);
      assertEquals("drop materialized viewy ` zq { pn > nz % 7n @.v", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 4847.0;
      SQLUtil.renderNumber(streamTokenizer0);
      System.setCurrentTimeMillis(1413L);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      String string0 = "0P000";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("0P000", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(310, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 310
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9035282968222415
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = SQLUtil.normalize("R0)02", true);
      assertEquals("R0) 02", string0);
      
      String string1 = SQLUtil.normalize("update", true);
      assertEquals("update", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("R0) 02");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "update";
      stringArray0[1] = "execute";
      stringArray0[2] = "R0)02";
      stringArray0[3] = "update";
      stringArray0[4] = "update";
      stringArray0[5] = "R0) 02";
      stringArray0[6] = "R0)02";
      stringArray0[7] = "update";
      stringArray0[8] = "R0)02";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "R0)02", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string2 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT R0)02 UNIQUE (update, execute, R0)02, update, update, R0) 02, R0)02, update, R0)02)", string2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("exclusive write lock");
      boolean boolean1 = SQLUtil.isProcedureCall("call9");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      Boolean boolean0 = new Boolean("");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, defaultDBTable0, "INOUT");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "type: ";
      stringArray0[2] = "deletepididz / 3s0";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("type: ", (boolean) boolean0, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog(" as ");
      dBCatalog0.getSchema(" as ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ", (DBSchema) null);
      String[] stringArray0 = new String[7];
      jdbcClob jdbcClob0 = new jdbcClob("garc!<yknoeo#a");
      jdbcClob0.getCharacterStream();
      defaultDBTable0.isIdentical(dBCatalog0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" as ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBTable0.getColumnNames();
      StringBuilder stringBuilder0 = new StringBuilder(1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \" as \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.typeAndName(defaultDBTable0);
      assertEquals("table null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("&0&^?<E/%*G");
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertNotNull(string0);
      assertEquals("schema &0&^?<E/%*G", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      String string0 = null;
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      int int0 = 123;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(123, ']');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      Boolean boolean0 = new Boolean("");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", true, defaultDBTable0, "INOUT");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "type: ";
      stringArray0[2] = "deletepididz / 3s0";
      stringArray0[4] = "";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("type: ", (boolean) boolean0, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setName("--");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SQLUtil.removeComments("z +-wnl]P4Oh");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z +-wnl]P4Oh");
      Integer integer0 = new Integer((-619));
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("z +-wnl]P4Oh", defaultDBTable0, 42111, "q}k\"");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("jQ#W\"3XA|l");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter materialized view", false);
      assertEquals("alter materialized view", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = "alter materialized view";
      stringArray0[2] = "alter materialized view";
      stringArray0[3] = "alter materialized view";
      stringArray0[4] = "create unique index";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter materialized view", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (alter materialized view, alter materialized view, alter materialized view, alter materialized view, create unique index) REFERENCES null(alter materialized view, alter materialized view, alter materialized view, alter materialized view, create unique index)", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      Boolean boolean0 = new Boolean("");
      String[] stringArray0 = new String[6];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Y", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0DhGw8e^W8xqnTU>)");
      Locale locale0 = Locale.JAPANESE;
      mockPrintWriter0.printf(locale0, " e65H_UQcum4[", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("readStatusVector arg:isc_arg_gds int: ");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) nameSpec0);
      SQLUtil.addRequiredCondition("readStatusVector arg:isc_arg_gds int: ", stringBuilder1);
      assertEquals("NEVER and readStatusVector arg:isc_arg_gds int: ", stringBuilder1.toString());
      assertEquals("NEVER and readStatusVector arg:isc_arg_gds int: ", stringBuilder0.toString());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("=ZDoa& \u0005vf~'SkY");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "=ZDoa& \u0005vf~'SkY";
      jdbcClob jdbcClob0 = new jdbcClob("t13t$0ke^ Z4R}");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("deletepididz / 3s0", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      DBSchema dBSchema0 = new DBSchema("=ZDoa& \u0005vf~'SkY");
      dBForeignKeyConstraint0.isIdentical(dBSchema0);
      StringBuilder stringBuilder0 = new StringBuilder("t13t$0ke^ Z4R}");
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      Random.setNextRandom(3);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "f]";
      stringArray0[1] = "I8J(jC|)6i=";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("I8J(jC|)6i=", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append((-3444.574048866551));
      long long0 = 8388608L;
      // Undeclared exception!
      try { 
        stringBuilder2.insert(187, "`u6)2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 187
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog(" as ");
      dBCatalog0.getSchema(" as ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ", (DBSchema) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " as ";
      stringArray0[1] = " as ";
      jdbcClob jdbcClob0 = new jdbcClob("t13t$0ke^ Z4R}");
      defaultDBTable0.isIdentical(dBCatalog0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      Locale locale0 = Locale.JAPANESE;
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.45820823797145316
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = SQLUtil.normalize("&0&^?<E/%*G", true);
      assertEquals("& 0 & ^ ? < E / % * G", string0);
      
      String string1 = SQLUtil.normalize("& 0 & ^ ? < E / % * G", true);
      assertEquals("& 0 & ^ ? < E / % * G", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("deletejaqrgogy");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&0&^?<E/%*G", defaultDBTable0, 147, "& 0 & ^ ? < E / % * G");
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("&0&^?<E/%*G & 0 & ^ ? < E / % * G NULL", string2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DBDataType dBDataType0 = DBDataType.getInstance(74, "enten ");
      VersionNumber.valueOf("42X47");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("42X47", defaultDBTable0, dBDataType0, integer1);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable1, "SYSCS_UNFREEZE_DATABASE");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "42X47");
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder2);
      assertEquals("74X24ENTEN (0)", stringBuilder2.toString());
      assertEquals("74X24ENTEN (0)", stringBuilder0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize("nJ(jT)6i=", true);
      assertEquals("nJ (jT) 6i =", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, defaultDBTable0, "INOUT");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("deletepididz / 3s0");
      Locale locale0 = Locale.CHINA;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("INOUT");
      mockPrintWriter1.print('U');
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertNotSame(mockPrintWriter1, mockPrintWriter0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = SQLUtil.renderColumnListWithTableName(stringArray0[0], stringArray0);
      assertEquals("null.null, null.null, null.null", string0);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("execute");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("cGeate uniqueh index");
      assertFalse(boolean0);
      
      Random.setNextRandom(2849);
      Character character0 = Character.valueOf('c');
      Character.isIdeographic(11);
      Character.isAlphabetic(2849);
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'c'", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog(" as ");
      dBCatalog0.getSchema(" as ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ", (DBSchema) null);
      String[] stringArray0 = new String[7];
      jdbcClob jdbcClob0 = new jdbcClob("garc!<yknoeo#a");
      jdbcClob0.getCharacterStream();
      defaultDBTable0.isIdentical(dBCatalog0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" as ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(200, " as ");
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("executepididz/3s0", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(",iLt']hXU");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(" as ", defaultDBTable0.getName());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("WcNv%@#lLCuldT)", defaultDBTable0, 776, "jaqRGoGy");
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DBDataType dBDataType0 = DBDataType.getInstance(776, "WcNv%@#lLCuldT)");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("H^9!OCDB", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      jdbcClob jdbcClob0 = new jdbcClob("t13t$0ke^ Z4R}");
      defaultDBTable0.isIdentical(defaultDBColumn0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "WcNv%@#lLCuldT)";
      stringArray0[1] = "t13t$0ke^ Z4R}";
      defaultDBColumn1.getForeignKeyConstraint();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("H^9!OCDB");
      SQLUtil.normalize("alter materialized viewalter table'!?-3osxc:+|{u", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable("H^9!OCDB", false);
      dBCatalog0.isIdentical((DBObject) null);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("t13t$0ke^ Z4R}", (DBTable) null, 776, "Ym]Z.r");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0], (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("WcNv%@#lLCuldT)", defaultDBTable0, 776, "jaqRGoGy");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      arrayList0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("L~jRen#EE", defaultDBTable0, 508, "IMXg,m");
      defaultDBColumn0.isIdentical(defaultDBColumn1);
      arrayList0.add((DBColumn) defaultDBColumn1);
      SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
      Random.setNextRandom(508);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("L~jRen#EE", "L~jRen#EE");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // L~jRen#EE
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8775242811493906
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure("select into");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Jebw|<{?&$[M#f(p$I");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog(" as ");
      dBCatalog0.getSchema(" as ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" as ", (DBSchema) null);
      String[] stringArray0 = new String[7];
      jdbcClob jdbcClob0 = new jdbcClob("garc!<yknoeo#a");
      jdbcClob0.getCharacterStream();
      defaultDBTable0.isIdentical(dBCatalog0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" as ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(200, " as ");
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("executepididz/3s0", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setFractionDigits(integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      Random.setNextRandom(200);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("w:J:");
      defaultDBTable0.isIdentical(defaultDBTable1);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "w:J:";
      stringArray0[1] = "drop materialized viewgarc!<yknoeo#a";
      stringArray0[2] = "drop materialized viewgarc!<yknoeo#a";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "alter materialized view", true, stringArray0);
      defaultDBTable1.setPrimaryKey(dBPrimaryKeyConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop materialized viewgarc!<yknoeo#a");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable1.getObjectType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.isIdentical(defaultDBTable0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "w:J:", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.parseColumnTypeAndSize("w:J:");
      File file0 = MockFile.createTempFile("CONSTRAINT w:J: UNIQUE ()", "CONSTRAINT w:J: UNIQUE ()");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 1169.328720911;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1169.328720911", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-1231.1355097);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1231.1355097", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBDataType dBDataType0 = DBDataType.getInstance(93, "");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("-f", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("");
      SQLUtil.renderColumn(defaultDBColumn0);
      Random.setNextRandom((-3306));
      VersionNumber.valueOf("-f (3) DEFAULT  NULL");
      System.setCurrentTimeMillis(538180155470774272L);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Boolean boolean0 = new Boolean("alter talselect intoy*");
      DBSchema dBSchema0 = new DBSchema("alter talselect intoy*");
      dBSchema0.getPackages();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter talselect intoy*", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter talselect intoy*", true, (String[]) null);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)99;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter session");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      
      String string0 = SQLUtil.normalize("U}4(%dTL&cQ~", false);
      assertEquals("U } 4 (% d  TL & cQ ~", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materializeW view");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("drop materializeW view", defaultDBTable0, 147, "setNClob(String, Reader, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isDDL("V/*H2(KGbcN");
  }

  /**
  //Test case number: 67
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("drop materialized view");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view", (DBSchema) null);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "drop materialized view";
      stringArray0[2] = "drop materialized view";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = "drop materialized view";
      stringArray0[6] = "drop materialized view";
      stringArray0[7] = "drop materialized view";
      stringArray0[8] = "drop materialized view";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(200, "DATE");
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ALTER TABLE", defaultDBTable0, dBDataType0, integer1);
      StringBuilder stringBuilder1 = new StringBuilder(200);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      System.setCurrentTimeMillis(200);
      Random.setNextRandom((-3719));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[15];
      stringArray0[0] = "call";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[0] = "1";
      stringArray0[5] = null;
      stringArray0[6] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      jdbcClob jdbcClob0 = new jdbcClob("");
      Reader reader0 = jdbcClob0.getCharacterStream();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCatalog dBCatalog0 = new DBCatalog("");
      defaultDBTable0.isIdentical(dBCatalog0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(200, "update");
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rotL2'*0U<U*m.v;RQT", defaultDBTable0, dBDataType0, (Integer) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Random.setNextRandom(200);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.parseNumbers();
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      Random.setNextRandom((-4));
      defaultDBColumn0.setNullable(false);
      SQLUtil.removeComments("");
      SQLUtil.normalize("K&S$%l`+TtgE?", false);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = SQLUtil.removeComments("create materialized view");
      assertFalse(string1.equals((Object)string0));
  }
}
