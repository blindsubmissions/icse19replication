/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:30:32 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(91);
      StringWriter stringWriter0 = new StringWriter(2384);
      CharBuffer charBuffer0 = CharBuffer.allocate(2384);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) charBuffer0, 91, 91);
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = stringWriter0.append('k');
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "dCzsMrfs;_G'W,wsnl1");
      stringWriter3.write("LXs9~JB`Pi4");
      simpleNode0.setIdentifier("?");
      simpleNode0.dump("ArgumentList", stringWriter4);
      simpleNode0.dump("?", stringWriter1);
      simpleNode0.setIdentifier("['(IYbToY]");
      stringWriter2.append('d');
      stringWriter2.append('+');
      simpleNode0.dump("['(IYbToY]", stringWriter1);
      SimpleNode simpleNode1 = new SimpleNode(2384);
      StringWriter stringWriter5 = stringWriter0.append('+');
      simpleNode1.dump("dCzsMrfs;_G'W,wsnl1", stringWriter5);
      assertSame(stringWriter5, stringWriter2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.42425409852044593
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(2063);
      simpleNode0.dump("_*m^L4YjF8-p!K", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 2063);
      simpleNode0.setIdentifier(";1");
      simpleNode0.dump("_mxmFTZN!5i<D`", stringWriter0);
      assertEquals(2064, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5660857389596289
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("\"switch\"", stringWriter0);
      simpleNode0.dump("\"switch\"", stringWriter0);
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.dump("3h\"4s:FxQG4}y`uPf.", stringWriter0);
      simpleNode0.dump("b:kegr9X*&]:", stringWriter0);
      simpleNode0.dump("\"switch\"", stringWriter0);
      assertEquals("<PackageDeclaration></PackageDeclaration>\n<PackageDeclaration></PackageDeclaration>\n<PackageDeclaration></PackageDeclaration>\n<PackageDeclaration></PackageDeclaration>\n<PackageDeclaration></PackageDeclaration>\n", stringWriter0.toString());
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6691825225299436
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      simpleNode0.jjtAddChild((Node) null, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter0 = new StringWriter(2081);
      String string0 = "_*m^L4YRjF8-!p!K";
      JavaParser javaParser0 = new JavaParser("_*m^L4YRjF8-!p!K");
      try { 
        javaParser0.ReturnStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6691825225299436
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(2081);
      JavaParser javaParser0 = new JavaParser("");
      simpleNode0.dump("", stringWriter0);
      simpleNode0.toString("_*m^L4YRjF8-!p!K");
      simpleNode0.setIdentifier("_*m^L4YRjF8-!p!K");
      simpleNode0.dump("_*m^L4YRjF8-!p!K", stringWriter0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5138165375168556
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("y$:aS-VBLtoOe%Yqt2v", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(18);
      simpleNode1.toString();
      simpleNode1.setIdentifier("9");
      simpleNode1.dump("&&", stringWriter0);
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = null;
      nodeArray0[2] = (Node) simpleNode1;
      simpleNode1.children = nodeArray0;
      charArray0[1] = '[';
      charArray0[2] = '[';
      String string0 = "&";
      simpleNode1.setIdentifier("&");
      // Undeclared exception!
      try { 
        simpleNode1.dump("&", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5028648026341309
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("y$:aS-VBLtoOe%Yqt2v", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(18);
      StringWriter stringWriter1 = stringWriter0.append('u');
      simpleNode0.jjtSetParent((Node) null);
      simpleNode1.setIdentifier("9");
      simpleNode1.dump("&&", stringWriter0);
      char[] charArray0 = new char[7];
      simpleNode0.setIdentifier("\"J-{|360ph4PMV");
      simpleNode1.jjtSetParent((Node) null);
      charArray0[0] = '[';
      charArray0[1] = 'G';
      charArray0[2] = '[';
      char[] charArray1 = new char[0];
      stringWriter0.write(charArray1);
      simpleNode1.setIdentifier("&");
      simpleNode1.dump("&", stringWriter0);
      simpleNode0.dump("&&", stringWriter0);
      simpleNode0.dump("9", stringWriter0);
      simpleNode1.dump("Ty[F2", stringWriter0);
      simpleNode0.dump(">p#D/Nw)&", stringWriter1);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      SimpleNode simpleNode1 = new SimpleNode(1);
      simpleNode0.parent = (Node) simpleNode1;
      simpleNode0.jjtClose();
      Node node0 = simpleNode0.jjtGetParent();
      assertNotSame(node0, simpleNode0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1595888143086257
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      JavaParser javaParser0 = new JavaParser((String) null);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-90));
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter(0);
      String string1 = "RelationalExpression";
      simpleNode0.dump("RelationalExpression", stringWriter0);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter1 = new StringWriter(0);
      // Undeclared exception!
      try { 
        simpleNode0.dump("", stringWriter1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -90
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 120;
      SimpleNode simpleNode0 = new SimpleNode(120);
      int int1 = (-644);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-644));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("]JWXEID.9I%0{");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      stringReader0.mark(0);
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      stringReader0.mark(81);
      StringWriter stringWriter0 = new StringWriter(0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.parent = nodeArray0[4];
      StringWriter stringWriter1 = stringWriter0.append('P');
      stringWriter1.flush();
      StringBuffer stringBuffer0 = new StringBuffer();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) stringBuffer0);
      simpleNode0.dump("]JWXEID.9I%0{", stringWriter2);
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtGetNumChildren();
      int int0 = 128;
      // Undeclared exception!
      try { 
        simpleNode0.dump("]JWXEID.9I%0{", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5305096302300272
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.setIdentifier("<");
      simpleNode0.toString();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(1);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{");
      stringWriter1.append('k');
      stringWriter0.write("L_3:");
      simpleNode0.setIdentifier(";1");
      simpleNode0.dump("{", stringWriter1);
      simpleNode0.dump("{", stringWriter1);
      assertEquals("\u0001{kL_3:<PackageDeclaration>\n  <identifier>*lt</identifier>\n  <identifier>;1</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>*lt</identifier>\n  <identifier>;1</identifier>\n</PackageDeclaration>\n", stringWriter1.toString());
      assertEquals("\u0001{kL_3:<PackageDeclaration>\n  <identifier>*lt</identifier>\n  <identifier>;1</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>*lt</identifier>\n  <identifier>;1</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('l');
      simpleNode0.dump("b:kegr9X*&]:", stringWriter1);
      simpleNode0.dump("b:kegr9X*&]:", stringWriter2);
      assertEquals("l<ClassOrInterfaceType>\n</ClassOrInterfaceType>\n<ClassOrInterfaceType>\n</ClassOrInterfaceType>\n", stringWriter2.toString());
      assertEquals("l<ClassOrInterfaceType>\n</ClassOrInterfaceType>\n<ClassOrInterfaceType>\n</ClassOrInterfaceType>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(96);
      StringWriter stringWriter0 = new StringWriter(96);
      simpleNode0.setIdentifier("<<");
      stringWriter0.write("U");
      StringWriter stringWriter1 = stringWriter0.append('W');
      simpleNode0.setIdentifier("char");
      simpleNode0.dump("com.soops.CEN4010.JMCA.JParser.ParseException", stringWriter0);
      stringWriter1.write(0);
      simpleNode0.dump("rMweSTnuj$FSE~", stringWriter0);
      simpleNode0.dump("com.soops.CEN4010.JMCA.JParser.ParseException", stringWriter1);
      assertEquals("UW<NormalAnnotation>\n  <identifier>*lshft</identifier>\n  <identifier>char</identifier>\n</NormalAnnotation>\n\u0000<NormalAnnotation>\n  <identifier>*lshft</identifier>\n  <identifier>char</identifier>\n</NormalAnnotation>\n<NormalAnnotation>\n  <identifier>*lshft</identifier>\n  <identifier>char</identifier>\n</NormalAnnotation>\n", stringWriter1.toString());
      assertEquals("UW<NormalAnnotation>\n  <identifier>*lshft</identifier>\n  <identifier>char</identifier>\n</NormalAnnotation>\n\u0000<NormalAnnotation>\n  <identifier>*lshft</identifier>\n  <identifier>char</identifier>\n</NormalAnnotation>\n<NormalAnnotation>\n  <identifier>*lshft</identifier>\n  <identifier>char</identifier>\n</NormalAnnotation>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(76);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("}");
      simpleNode0.setIdentifier("}");
      simpleNode0.dump("6)", stringWriter0);
      assertEquals("<EmptyStatement>\n</EmptyStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(96);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("b:kegr9X*&]:");
      stringWriter0.write("{");
      simpleNode0.setIdentifier("{");
      simpleNode0.dump("b:kegr9X*&]:", stringWriter0);
      assertEquals("{<NormalAnnotation>\n  <identifier>b:kegr9X*&]:</identifier>\n</NormalAnnotation>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(76);
      StringWriter stringWriter0 = new StringWriter(76);
      simpleNode0.setIdentifier(";");
      simpleNode0.dump("char", stringWriter0);
      simpleNode0.dump("char", stringWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "YEq");
      simpleNode0.dump(";", stringWriter0);
      assertEquals("<EmptyStatement>\n</EmptyStatement>\n<EmptyStatement>\n</EmptyStatement>\n<EmptyStatement>\n</EmptyStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(0);
      SimpleNode simpleNode0 = new SimpleNode(30);
      JavaParser javaParser0 = new JavaParser("b:kegr9X*&]:");
      simpleNode0.setIdentifier(">>");
      simpleNode0.dump("%f&Qn K;qe\"", stringWriter0);
      simpleNode0.dump(">>", stringWriter0);
      assertEquals("<ClassOrInterfaceType>\n  <identifier>*rshft</identifier>\n</ClassOrInterfaceType>\n<ClassOrInterfaceType>\n  <identifier>*rshft</identifier>\n</ClassOrInterfaceType>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("b:kegr9X*&]:");
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter1 = stringWriter0.append('l');
      simpleNode0.dump(">=", stringWriter1);
      StringWriter stringWriter2 = stringWriter1.append('l');
      simpleNode0.dump(">=", stringWriter2);
      assertEquals("l<ForInit>\n  <identifier>b:kegr9X*&]:</identifier>\n  <identifier>*ge</identifier>\n</ForInit>\nl<ForInit>\n  <identifier>b:kegr9X*&]:</identifier>\n  <identifier>*ge</identifier>\n</ForInit>\n", stringWriter2.toString());
      assertEquals("l<ForInit>\n  <identifier>b:kegr9X*&]:</identifier>\n  <identifier>*ge</identifier>\n</ForInit>\nl<ForInit>\n  <identifier>b:kegr9X*&]:</identifier>\n  <identifier>*ge</identifier>\n</ForInit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(44);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<=");
      stringWriter0.append('');
      simpleNode0.dump("<=", stringWriter0);
      assertEquals("<ExclusiveOrExpression>\n  <identifier>*le</identifier>\n</ExclusiveOrExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("b:kegr9X*&:");
      stringWriter0.write(">");
      simpleNode0.setIdentifier(">");
      SimpleNode simpleNode1 = new SimpleNode(84);
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("><ForInit>\n  <identifier>b:kegr9X*&:</identifier>\n  <identifier>*gt</identifier>\n</ForInit>\n", stringWriter0.toString());
      
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump(";", stringWriter1);
      stringWriter1.append('&');
      stringWriter1.close();
      simpleNode1.dump("super", stringWriter1);
      assertEquals("<ForInit>\n  <identifier>b:kegr9X*&:</identifier>\n  <identifier>*gt</identifier>\n</ForInit>\n&", stringWriter1.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      simpleNode0.setIdentifier("&&");
      simpleNode0.setIdentifier("F^c");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(">=", stringWriter0);
      assertEquals("<ForInit>\n  <identifier>*amp</identifier>\n  <identifier>F^c</identifier>\n</ForInit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      simpleNode0.dump("y$:aS-VBLtoOe%Yqt2v", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(63);
      simpleNode1.setIdentifier("9");
      simpleNode1.dump("&&", stringWriter0);
      simpleNode0.dump("g0,`S20\"dN", stringWriter0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }
}
