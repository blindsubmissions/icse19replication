/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 09:33:36 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Enumeration;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9710922178391429
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=SGARc!<Y");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 122);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 122. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.973085042684338
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=SGARc!<Y");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-126);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1695, (byte)10);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)1, (byte)10);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      byteArrayInputStream1.mark((-1184));
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader1 = new StringReader("[mIN8kz&11{+7Owe1");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.ReInit(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\u0001\" (1), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f^EvW");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 115, (-741));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("break");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-754), 122);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 122, 34);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream1, (-754));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -754. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9382147489904377
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">L?,Y@|+9 <");
      StringReader stringReader0 = new StringReader(">L?,Y@|+9 <");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte) (-48);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[5] = (byte)61;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 1415, 1193);
      javaCharStream0.inBuf = (int) (byte) (-48);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.defaultLexState = 910;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1415, column 1195.  Encountered: \"L\" (76), after : \"\\'\\ufffd\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0117075405925784
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m10Rn'!?-3OSxC:");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 110, 110);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 26, (-13), 14);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m10Rn");
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 110, column 117.  Encountered: \"?\" (63), after : \"\\'!\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9901172232794796
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)93;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)93;
      StringReader stringReader0 = new StringReader("\"assert\"");
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)0, (byte)0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 75, (byte)38);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = token_GTToken0.next;
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(7, javaCharStream1.bufpos);
      assertEquals(45, javaCharStream1.getColumn());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0109337677318408
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-2);
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)9;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-103), (byte) (-2));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)31, 43);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream1);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader0 = new StringReader("k'%iyf/#?4");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.ReInit(javaCharStream2);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Ce[$L=}OY#'[");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 19, 19);
      StringReader stringReader1 = new StringReader("HB`m^bt`!%Qacj,<vU&");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 70, 6833);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 70, column 6835.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.032515707043371
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("||");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-3442), (-334));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-334), javaCharStream0.getBeginColumn());
      assertEquals(97, token0.kind);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0327028119795147
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r07jwShW `mAn`.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"[\"");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("import");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2451, (-1));
      stringReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2451, column 7.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.462990439302899
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, (-754));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-754), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0776644826611148
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("++");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 25, (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(99, token0.kind);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      StringReader stringReader0 = new StringReader("[mIN8kz&11{+7Owe1");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-5205), 78);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.backup((-152));
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(66, token1.kind);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0327028119795147
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r07jwShW `mAn`.");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"[\"");
      stringReader0.reset();
      stringReader0.read();
      StringReader stringReader1 = new StringReader("import");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2451, (-1));
      stringReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = new Token();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2451, column 6.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2270558436906112
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-117);
      StringReader stringReader0 = new StringReader("1");
      int int0 = 78;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1192), (byte) (-117));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2420), 461, 76);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.backup((-2089));
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endLine = 76;
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 66. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6913007185751059
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G4tc");
      StringReader stringReader1 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      StringReader stringReader2 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1531, 739);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 19, (-1));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream2 = new JavaCharStream(sequenceInputStream0, (-1), 739, 13);
      javaCharStream2.backup(4);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(7, javaCharStream1.getEndColumn());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.487290227421259
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s!pB.a9GIalM|");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-61), 2147483643);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = ' ';
      charArray0[2] = '<';
      charArray0[3] = '%';
      stringReader0.read(charArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endColumn = (-61);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(106, token1.kind);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4379432261289864
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lDq2J[ATX4?$w{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 241, 42);
      javaCharStream0.line = 174;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4876317659818405
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r07jwShW `mAn`.");
      JavaCharStream javaCharStream0 = new JavaCharStream((Reader) null, (-1), (-1));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      javaParserTokenManager0.debugStream = (PrintStream) mockPrintStream0;
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 8.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9951194037712623
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G4tc");
      StringReader stringReader1 = new StringReader("G4tc");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-229), (-229));
      javaCharStream0.FillBuff();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-226), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3500938006142753
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Ce[$L=}OY#'[");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V3N}9ESV");
      StringReader stringReader1 = new StringReader("<<=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2179, 40);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = 36;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(40, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4717606562133396
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s!pB.a9GIalM|");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-61), 2147483643);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.endColumn = (-61);
      javaParserTokenManager0.getNextToken();
      token0.beginLine = (-61);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(2147483645, javaCharStream0.getBeginColumn());
      assertEquals(2147483646, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.476903391751985
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y&%QAq_Qv:O");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.tokenBegin = 101;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(108, token0.kind);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&&");
      StringReader stringReader1 = new StringReader("\"]!hw");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 82, 82);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 82, column 87.  Encountered: <EOF> after : \"\\\"]!hw\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("0n@M]");
      char[] charArray0 = new char[2];
      charArray0[0] = 's';
      charArray0[1] = 'Y';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-379), 2);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("M", token0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("0n@M]");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringReader stringReader1 = new StringReader("null");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 36, 2179);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(2182, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5358548212127336
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nvalid escape character at line ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0978237070540595
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      StringReader stringReader0 = new StringReader("\"\r\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 14, 2767, (byte)38);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 14, column 2768.  Encountered: \"\\r\" (13), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4709549498647483
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IQ<c?\"%0.XA");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-162), (-162));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(91, token0.kind);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4689984469508839
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("0n@M]");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, 101);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.ReInit((Reader) stringReader0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(101, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X '@Hl*");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1442), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)93;
      byteArray0[4] = (byte)93;
      StringReader stringReader0 = new StringReader("'}-#fxH1~|Yy)VCdP~");
      StringReader stringReader1 = new StringReader("import");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)93, 1412);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 93, column 1414.  Encountered: \"-\" (45), after : \"\\'}\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.567792949951428
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g4sl");
      StringReader stringReader1 = new StringReader("enum");
      StringReader stringReader2 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1370, (-2539));
      stringReader1.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-2539), javaCharStream0.getBeginColumn());
      assertEquals((-2536), javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2214611102378996
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">L?,Y@|+9 0");
      StringReader stringReader0 = new StringReader(">>");
      StringReader stringReader1 = new StringReader("|>*#bH|T");
      stringReader1.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-380), 40);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager0.debugStream = (PrintStream) mockPrintStream0;
      mockPrintStream0.printf(">L?,Y@|+9 0", (Object[]) javaParserTokenManager0.jjstrLiteralImages);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(">>", token0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5134898227265308
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("transient");
      StringReader stringReader1 = new StringReader(">>>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-4246), 102);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "transient");
      javaParserTokenManager0.image = stringBuffer0;
      javaParserTokenManager0.lengthOfMatch = (-21);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(">>", token0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6984245852958397
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("break");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "break");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-727), 122);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(122, javaCharStream0.getBeginColumn());
      assertEquals(126, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7009527968419345
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "return");
      StringReader stringReader0 = new StringReader("float");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 20, 2145388542);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = javaParserTokenManager0.image;
      javaParserTokenManager0.image = null;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2145388542, javaCharStream0.getBeginColumn());
      assertEquals(33, token0.kind);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7036334627638137
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("short");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)47, Integer.MAX_VALUE);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(47, javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5791852625232707
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$<Cao");
      StringReader stringReader1 = new StringReader("$<Cao");
      StringReader stringReader2 = new StringReader("$<Cao");
      StringReader stringReader3 = new StringReader("this");
      stringReader3.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, 40, 40, 40);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals(43, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1563745537147718
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g/+5rW)=K");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g/+5rW)=K");
      javaCharStream0.backup(927);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 3);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 10.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lDq2J[ATX4?$w{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 241, 241);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.curLexState = 1548;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("", token0.toString());
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("break");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (byte)82, 41, 122);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("R", token0.toString());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 27, 13, 23);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, token1.kind);
      assertEquals("", token1.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9640484747219182
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("package");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-5205), (-634));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals("package", token0.toString());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8221469964556223
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("#Ce[$L=}OY#'[");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#Ce[$L=}OY#'[");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("double");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 64, 26);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.inputStream = (Reader) stringReader1;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8484484759276212
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$<Cao");
      StringReader stringReader1 = new StringReader("$<Cao");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"[\"");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("import");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (-1867), 64);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      javaParserTokenManager0.getNextToken();
      javaCharStream0.nextCharInd = (-1867);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(69, javaCharStream0.getBeginColumn());
      assertEquals(69, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9627793206533894
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extends");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)10, 2070);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-1305), 895);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream1);
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringReader stringReader0 = new StringReader("/=");
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader0, (-1067), 2070, 895);
      javaParserTokenManager0.ReInit(javaCharStream3);
      StringReader stringReader1 = new StringReader("U{ -@<lVdjB");
      JavaCharStream javaCharStream4 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream4);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4796376424874638
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[3] = (byte)93;
      byteArray0[2] = (byte)38;
      StringReader stringReader0 = new StringReader("|N/-An\"t;6,#J&iVe");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)38, 102);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (byte)0, (byte)0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      Token.newToken((byte)38);
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.TokenLexicalActions(token1);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("N", token1.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0019697654201103
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      StringReader stringReader1 = new StringReader("strictfp");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "float");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1335, 2145388542);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 20, 2145388542);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = new Token();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream1.bufpos);
      assertEquals(2145388549, javaCharStream1.getColumn());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0277582128953746
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader("volatile");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-5205), 124);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream0.backup((-5205));
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 62, 935);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.TokenLexicalActions(token0);
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(131, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.693602701361141
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\t");
      StringReader stringReader1 = new StringReader(", column ");
      StringReader stringReader2 = new StringReader("\t");
      StringReader stringReader3 = new StringReader("]<vw");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 21, 33);
      javaCharStream0.BeginToken();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader3, 33, 21);
      MockPrintStream mockPrintStream0 = new MockPrintStream("]<vw");
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      token1.beginLine = 29;
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<HEX_LITERAL>");
      StringReader stringReader1 = new StringReader("<HEX_LITERAL>");
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 121, (-2799));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token0.kind);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1537791771139243
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$<Cao");
      StringReader stringReader1 = new StringReader("$<Cao");
      StringReader stringReader2 = new StringReader("$<Cao");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 9, 40);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4645480542047278
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">Kg@DY3d7");
      StringReader stringReader1 = new StringReader(">Kg@DY3d7");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-5099), 123);
      stringReader0.skip((-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(123, javaCharStream0.getBeginColumn());
      assertEquals(124, token0.kind);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4840762460842831
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("0n@M]");
      stringReader0.read();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 105, 101);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals("@", token0.toString());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r07jwShW `mAn`.");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("double");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0, 1408, 48);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      stringReader1.mark(0);
      int int0 = 47;
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5197288889424205
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      StringReader stringReader0 = new StringReader("-i8Bb6G4QB2Ok");
      StringReader stringReader1 = new StringReader("-i8Bb6G4QB2Ok");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)52, 214);
      javaCharStream0.ReInit((Reader) stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-2147483647));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -2147483647. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.469867062672282
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lDq2J[ATX4?$w{");
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 241, 42);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      StringReader stringReader1 = new StringReader("_CJtP7}N~j:!zT");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 71, 118);
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'C';
      charArray0[2] = 'U';
      charArray0[3] = 'C';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1335, 1335);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(125, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4561492228320698
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringReader stringReader0 = new StringReader("r07jwShW `mAn`.");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("double");
      StringReader stringReader2 = new StringReader("iV=^G#{^'X");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 64, 64);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "iV");
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals(67, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G4tc");
      StringReader stringReader1 = new StringReader(">4<9[x*}");
      StringReader stringReader2 = new StringReader("/Q{^mm{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 113, 113);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, (-1), 480);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals("", token1.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4682917479844904
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g4sl");
      StringReader stringReader1 = new StringReader("enum");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1370, 1370);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), 2204);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)116;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JavaCharStream javaCharStream3 = new JavaCharStream(sequenceInputStream0, 84, 41, (byte)82);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream3);
      javaParserTokenManager0.jjnewStateCnt = (-1);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 84, column 42.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("do");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 935, 40);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("do", token0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 463, 49);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals("{", token0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4789716041289118
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g4sl");
      StringReader stringReader1 = new StringReader("enum");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1370, 1370);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), 2204);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-91);
      byteArray0[5] = (byte)55;
      byteArray0[6] = (byte)21;
      byteArray0[7] = (byte)107;
      byteArray0[8] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)116;
      byteArray1[1] = (byte)116;
      byteArray1[2] = (byte)73;
      byteArray1[3] = (byte)90;
      byteArray1[4] = (byte)82;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      JavaCharStream javaCharStream3 = new JavaCharStream(sequenceInputStream0, 84, 41, (byte)82);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream3);
      javaParserTokenManager0.jjnewStateCnt = (-1);
      sequenceInputStream0.read();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.lengthOfMatch = (-1);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 84, column 46.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("native");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "native");
      StringReader stringReader1 = new StringReader("D?#.8RGy)e@b+{4RR");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 35, 1251);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, (-754));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(74, token0.kind);
      assertEquals("q", token0.toString());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("break");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "break");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 3039, 623);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4602749643502881
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("b?!)H:*-/tcN\"A+DT");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 308, 480);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5000565369330272
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B~>)^");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, (-5205));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, 124, (-1), 2440);
      javaCharStream1.backup((-5205));
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-1727), (-5205));
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.curChar = 'h';
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.2748159233385636
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("synchronized");
      StringReader stringReader1 = new StringReader("Ov)`T4G.~%");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 37, 37);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-1));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.defaultLexState = (-3436);
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.getNextToken();
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 38, 39);
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager3.ReInit(javaCharStream2, 1);
      javaParserTokenManager2.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(37, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=SGARc!<Y");
      char[] charArray0 = new char[5];
      charArray0[0] = 'T';
      charArray0[4] = 'U';
      charArray0[4] = '|';
      charArray0[3] = '|';
      charArray0[4] = '|';
      stringReader0.read(charArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2054, 89);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("<", token0.toString());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5155078380043847
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)93;
      byteArray0[4] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte)38;
      byteArray0[8] = (byte)38;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)38, 26, (byte)38);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("]", token0.toString());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1033409557791356
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      stringReader0.mark(13);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 47. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.514683685828978
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)93, (byte)38);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaCharStream javaCharStream1 = new JavaCharStream(sequenceInputStream0, (-310), (byte)38, 1885);
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, 47, 115, 62);
      javaCharStream2.backup(2440);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      StringReader stringReader1 = new StringReader(".  Encountered: ");
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader1, 1885, 107);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      javaParserTokenManager1.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.MoreLexicalActions();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(53, javaCharStream0.getBeginColumn());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5157061415886155
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B~>)^");
      StringReader stringReader1 = new StringReader(">4<9[x*}");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 113, 113);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-4075), 18);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.MoreLexicalActions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.lengthOfMatch = 113;
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-4075), 18);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(">", token0.toString());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.054343816839281
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("transient");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 11);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("byte");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 47, 47);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1780), 61, 34);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.MoreLexicalActions();
      javaCharStream1.backup(2661);
      StringReader stringReader1 = new StringReader("hgH");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      javaParserTokenManager0.ReInit(javaCharStream2);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(17, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals("byte", token0.toString());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.6629714625306995
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("re0a");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "re0a");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-727), 122);
      JavaCharStream.hexval('6');
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.SkipLexicalActions((Token) null);
      javaParserTokenManager1.TokenLexicalActions((Token) null);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(125, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">L?,Y@|+9 <");
      StringReader stringReader0 = new StringReader(">L?,Y@|+9 <");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      stringReader0.read();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-48), (-4441));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4439), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Ce[$L=}OY#'[");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("V3N}9ESV");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("V3N}9ESV");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 40, 1512);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(40, token0.endLine);
      assertEquals(40, token0.beginLine);
      assertEquals(1514, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1512, token0.beginColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(1514, javaCharStream0.getColumn());
      assertEquals(1512, javaCharStream0.getBeginColumn());
      assertEquals(1514, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals("V3N", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1514, javaCharStream0.getColumn());
      assertEquals(1512, javaCharStream0.getBeginColumn());
      assertEquals(1514, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(40, token0.endLine);
      assertEquals(40, token0.beginLine);
      assertEquals(1514, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1512, token0.beginColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1514, javaCharStream0.getColumn());
      assertEquals(1512, javaCharStream0.getBeginColumn());
      assertEquals(1514, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals("V3N", token0.toString());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.5618408795330998
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g/+5rW)=K");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g/+5rW)=K");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("g", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(104, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("/", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(101, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("+", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals(6, token3.endColumn);
      assertEquals(4, token3.beginColumn);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("5rW", token3.toString());
      assertNotNull(token3);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9-U9gu&.:jwR F](%%A");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("9-U9gu&.:jwR F](%%A");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("=642");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-229), (-1184));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.FillBuff();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1184), token0.beginColumn);
      assertEquals((-1184), token0.endColumn);
      assertEquals((-229), token0.endLine);
      assertEquals((-229), token0.beginLine);
      assertEquals(66, token0.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals((-1184), javaCharStream0.getEndColumn());
      assertEquals((-1184), javaCharStream0.getColumn());
      assertEquals((-229), javaCharStream0.getLine());
      assertEquals((-1184), javaCharStream0.getBeginColumn());
      assertEquals((-229), javaCharStream0.getEndLine());
      assertEquals((-229), javaCharStream0.getBeginLine());
      assertEquals("9", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.2021924526676775
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte) (-46);
      byteArray0[3] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-46), (byte) (-5)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 45, 95);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-46), (byte) (-5)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-46), (byte) (-5)}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(45, token0.beginLine);
      assertEquals(95, token0.beginColumn);
      assertEquals(45, token0.endLine);
      assertEquals(96, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getLine());
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(45, javaCharStream0.getEndLine());
      assertEquals("44", token0.toString());
      assertNotNull(token0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)52, (byte) (-46), (byte) (-5)}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 45, column 97.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5336154373102544
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B~>)^");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">4<9[x*}");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 113, 113);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 480, 113);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token0.kind);
      assertEquals(480, token0.beginLine);
      assertEquals(113, token0.endColumn);
      assertEquals(113, token0.beginColumn);
      assertEquals(480, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(480, javaCharStream1.getBeginLine());
      assertEquals(480, javaCharStream1.getEndLine());
      assertEquals(113, javaCharStream1.getColumn());
      assertEquals(113, javaCharStream1.getEndColumn());
      assertEquals(480, javaCharStream1.getLine());
      assertEquals(113, javaCharStream1.getBeginColumn());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      token0.endLine = 113;
      assertEquals(480, javaCharStream1.getBeginLine());
      assertEquals(480, javaCharStream1.getEndLine());
      assertEquals(113, javaCharStream1.getColumn());
      assertEquals(113, javaCharStream1.getEndColumn());
      assertEquals(480, javaCharStream1.getLine());
      assertEquals(113, javaCharStream1.getBeginColumn());
      assertEquals(">", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token0.kind);
      assertEquals(480, token0.beginLine);
      assertEquals(113, token0.endColumn);
      assertEquals(113, token0.beginColumn);
      assertEquals(113, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(480, javaCharStream1.getBeginLine());
      assertEquals(480, javaCharStream1.getEndLine());
      assertEquals(113, javaCharStream1.getColumn());
      assertEquals(113, javaCharStream1.getEndColumn());
      assertEquals(480, javaCharStream1.getLine());
      assertEquals(113, javaCharStream1.getBeginColumn());
      assertEquals(">", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(480, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(480, token1.beginLine);
      assertEquals(114, token1.beginColumn);
      assertEquals(114, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(480, javaCharStream1.getBeginLine());
      assertEquals(480, javaCharStream1.getEndLine());
      assertEquals(114, javaCharStream1.getEndColumn());
      assertEquals(114, javaCharStream1.getColumn());
      assertEquals(480, javaCharStream1.getLine());
      assertEquals(114, javaCharStream1.getBeginColumn());
      assertEquals("4", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(480, token2.beginLine);
      assertEquals(480, token2.endLine);
      assertEquals(115, token2.beginColumn);
      assertEquals(88, token2.kind);
      assertEquals(115, token2.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(115, javaCharStream1.getEndColumn());
      assertEquals(480, javaCharStream1.getBeginLine());
      assertEquals(115, javaCharStream1.getColumn());
      assertEquals(480, javaCharStream1.getEndLine());
      assertEquals(480, javaCharStream1.getLine());
      assertEquals(115, javaCharStream1.getBeginColumn());
      assertEquals("<", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token2);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(480, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(480, token1.beginLine);
      assertEquals(114, token1.beginColumn);
      assertEquals(114, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(115, javaCharStream1.getEndColumn());
      assertEquals(480, javaCharStream1.getBeginLine());
      assertEquals(115, javaCharStream1.getColumn());
      assertEquals(480, javaCharStream1.getEndLine());
      assertEquals(480, javaCharStream1.getLine());
      assertEquals(115, javaCharStream1.getBeginColumn());
      assertEquals("4", token1.toString());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tPu[i7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1404, 1717986918);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1717986918, token0.beginColumn);
      assertEquals(1404, token0.endLine);
      assertEquals(1717986920, token0.endColumn);
      assertEquals(1404, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1404, javaCharStream0.getBeginLine());
      assertEquals(1404, javaCharStream0.getLine());
      assertEquals(1717986920, javaCharStream0.getEndColumn());
      assertEquals(1717986918, javaCharStream0.getBeginColumn());
      assertEquals(1404, javaCharStream0.getEndLine());
      assertEquals(1717986920, javaCharStream0.getColumn());
      assertEquals("tPu", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.1184473348959003
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)76, (byte) (-40), (byte) (-40), (byte) (-46)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)76, (byte) (-40));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)76, (byte) (-40), (byte) (-40), (byte) (-46)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)76, (byte) (-40), (byte) (-40), (byte) (-46)}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(76, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(76, token0.beginLine);
      assertEquals((-39), token0.endColumn);
      assertEquals((-40), token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals((-39), javaCharStream0.getColumn());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals((-39), javaCharStream0.getEndColumn());
      assertEquals((-40), javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals("4L", token0.toString());
      assertNotNull(token0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)76, (byte) (-40), (byte) (-40), (byte) (-46)}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 76, column -38.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x_n$sp]_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("x_n", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5113050390198552
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lZ[;kZ?q#n.$p");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("lZ", token0.toString());
      assertNotNull(token0);
      
      Token token1 = new Token();
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.7012129104302849
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"protected\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 46, 46);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.lengthOfMatch = 789;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.beginColumn);
      assertEquals(65, token0.kind);
      assertEquals(50, token0.endColumn);
      assertEquals(46, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals("while", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">Kg@DY3d7");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">Kg@DY3d7");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-5092), 123);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      long long0 = stringReader0.skip((-1));
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0L, long0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'F';
      charArray0[1] = 'C';
      charArray0[2] = 'D';
      charArray0[3] = 'C';
      charArray0[4] = 'F';
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'z';
      intArray0[1] = (int) 'C';
      intArray0[2] = (int) 'F';
      intArray0[3] = (-1);
      intArray0[4] = (int) 'F';
      intArray0[5] = 123;
      char char0 = javaCharStream0.ReadByte();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals('>', char0);
      
      intArray0[6] = (-5092);
      javaCharStream0.bufline = intArray0;
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      charArray0[5] = 'z';
      charArray0[6] = 'j';
      charArray0[7] = 's';
      charArray0[8] = 'h';
      javaCharStream0.nextCharBuf = charArray0;
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tdB3n>:O22#piPe,1");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)91;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-83);
      byteArray0[6] = (byte) (-75);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)87, (byte)91, (byte) (-83), (byte)14, (byte) (-83), (byte) (-75)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      boolean boolean1 = stringReader0.ready();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      stringReader0.reset();
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      token0.next = null;
      assertNull(token0.toString());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'U';
      charArray0[1] = ')';
      charArray0[2] = '4';
      charArray0[3] = 'l';
      charArray0[4] = 'h';
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'t', 'd', 'B', '3', 'n'}, charArray0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token0.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token_GTToken0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(124, token2.kind);
      assertEquals(1, token2.endColumn);
      assertEquals(1, token2.beginColumn);
      assertFalse(token2.equals((Object)token_GTToken0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(token3, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(2, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertFalse(token3.equals((Object)token0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(":", token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertNotSame(token3, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(92, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(2, token3.beginColumn);
      assertEquals(2, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertFalse(token3.equals((Object)token0));
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(":", token3.toString());
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9919155408869507
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"throws\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-61);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-107), (byte)4, (byte) (-111), (byte)4, (byte) (-61)}, byteArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals('\"', char0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (byte) (-61), 18, (byte)36);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(59, token0.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("throws", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8226679131839034
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("native");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-572), 1251);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1251, 32);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjimageLen = 55;
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, token0.beginColumn);
      assertEquals(1251, token0.beginLine);
      assertEquals(43, token0.kind);
      assertEquals(1251, token0.endLine);
      assertEquals(37, token0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1251, javaCharStream1.getEndLine());
      assertEquals(37, javaCharStream1.getEndColumn());
      assertEquals(37, javaCharStream1.getColumn());
      assertEquals(32, javaCharStream1.getBeginColumn());
      assertEquals(1251, javaCharStream1.getBeginLine());
      assertEquals(1251, javaCharStream1.getLine());
      assertEquals("native", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(32, token0.beginColumn);
      assertEquals(1251, token0.beginLine);
      assertEquals(43, token0.kind);
      assertEquals(1251, token0.endLine);
      assertEquals(37, token0.endColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1251, javaCharStream1.getEndLine());
      assertEquals(37, javaCharStream1.getEndColumn());
      assertEquals(37, javaCharStream1.getColumn());
      assertEquals(32, javaCharStream1.getBeginColumn());
      assertEquals(1251, javaCharStream1.getBeginLine());
      assertEquals(1251, javaCharStream1.getLine());
      assertEquals("native", token0.toString());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("native");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("TpIBP@}[=*rZY");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 42, 241);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(241, token0.beginColumn);
      assertEquals(42, token0.endLine);
      assertEquals(42, token0.beginLine);
      assertEquals(242, token0.endColumn);
      assertEquals(74, token0.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(42, javaCharStream0.getBeginLine());
      assertEquals(242, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getEndLine());
      assertEquals(242, javaCharStream0.getEndColumn());
      assertEquals(241, javaCharStream0.getBeginColumn());
      assertEquals("Tp", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z2}GtdMCbe");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("z2", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader("y&mXY(6r3mOMS");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("y", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.1359737604281768
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("protected");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 110, 110);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 26, (-13), 14);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(118, token0.endColumn);
      assertEquals(110, token0.beginLine);
      assertEquals(48, token0.kind);
      assertEquals(110, token0.endLine);
      assertEquals(110, token0.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals("protected", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "protected");
      assertFalse(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(118, token1.beginColumn);
      assertEquals(118, token1.endColumn);
      assertEquals(110, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(110, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      StringReader stringReader1 = new StringReader("66A}b");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader1, 443, (-1425));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getBeginColumn());
      
      Token token2 = Token.newToken(118);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNull(token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1423), token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(443, token3.beginLine);
      assertEquals((-1425), token3.beginColumn);
      assertEquals(443, token3.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(443, javaCharStream0.getBeginLine());
      assertEquals((-1423), javaCharStream0.getColumn());
      assertEquals(443, javaCharStream0.getLine());
      assertEquals((-1425), javaCharStream0.getBeginColumn());
      assertEquals(443, javaCharStream0.getEndLine());
      assertEquals((-1423), javaCharStream0.getEndColumn());
      assertEquals("66A", token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1423), token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(443, token3.beginLine);
      assertEquals((-1425), token3.beginColumn);
      assertEquals(443, token3.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(443, javaCharStream0.getBeginLine());
      assertEquals((-1423), javaCharStream0.getColumn());
      assertEquals(443, javaCharStream0.getLine());
      assertEquals((-1425), javaCharStream0.getBeginColumn());
      assertEquals(443, javaCharStream0.getEndLine());
      assertEquals((-1423), javaCharStream0.getEndColumn());
      assertEquals("66A", token3.toString());
      
      Token token4 = Token.newToken(118);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertNull(token4.toString());
      assertNotNull(token4);
      
      javaParserTokenManager0.TokenLexicalActions(token4);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertEquals(443, javaCharStream0.getBeginLine());
      assertEquals((-1423), javaCharStream0.getColumn());
      assertEquals(443, javaCharStream0.getLine());
      assertEquals((-1425), javaCharStream0.getBeginColumn());
      assertEquals(443, javaCharStream0.getEndLine());
      assertEquals((-1423), javaCharStream0.getEndColumn());
      assertNull(token4.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token1);
      assertNotSame(token0, token4);
      assertNotSame(token0, token3);
      assertNotSame(token0, token2);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(118, token0.endColumn);
      assertEquals(110, token0.beginLine);
      assertEquals(48, token0.kind);
      assertEquals(110, token0.endLine);
      assertEquals(110, token0.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token4));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token2));
      assertEquals(443, javaCharStream0.getBeginLine());
      assertEquals((-1423), javaCharStream0.getColumn());
      assertEquals(443, javaCharStream0.getLine());
      assertEquals((-1425), javaCharStream0.getBeginColumn());
      assertEquals(443, javaCharStream0.getEndLine());
      assertEquals((-1423), javaCharStream0.getEndColumn());
      assertEquals("protected", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(443, javaCharStream0.getBeginLine());
      assertEquals((-1423), javaCharStream0.getColumn());
      assertEquals(443, javaCharStream0.getLine());
      assertEquals((-1425), javaCharStream0.getBeginColumn());
      assertEquals(443, javaCharStream0.getEndLine());
      assertEquals((-1423), javaCharStream0.getEndColumn());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-1422), token5.endColumn);
      assertEquals(443, token5.endLine);
      assertEquals(443, token5.beginLine);
      assertEquals(80, token5.kind);
      assertEquals((-1422), token5.beginColumn);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals("}", token5.toString());
      assertEquals(443, javaCharStream0.getBeginLine());
      assertEquals((-1422), javaCharStream0.getColumn());
      assertEquals(443, javaCharStream0.getLine());
      assertEquals((-1422), javaCharStream0.getBeginColumn());
      assertEquals(443, javaCharStream0.getEndLine());
      assertEquals((-1422), javaCharStream0.getEndColumn());
      assertNotNull(token5);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.7368707030297705
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=SGARc!<Y");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)47;
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte) (-126);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2, 1420);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte) (-126), (byte) (-126)}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)47, (byte) (-126));
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-126), byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte) (-126), (byte) (-126)}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("=", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)93;
      byteArray0[4] = (byte)93;
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[5] = (byte)0;
      StringReader stringReader0 = new StringReader(" (");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)93, 112);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      long long0 = stringReader0.skip((-2227L));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(77, token0.kind);
      assertEquals(93, token0.beginLine);
      assertEquals(113, token0.endColumn);
      assertEquals(113, token0.beginColumn);
      assertEquals(93, token0.endLine);
      assertEquals(113, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(113, javaCharStream0.getBeginColumn());
      assertEquals(113, javaCharStream0.getColumn());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals("(", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4769783939144798
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wO<}F7^ 6Ms|}gYQT`");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("wO<}F7^ 6Ms|}gYQT`");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 20, 94);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      
      javaParserTokenManager0.debugStream = printStream0;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(20, token0.endLine);
      assertEquals(94, token0.beginColumn);
      assertEquals(95, token0.endColumn);
      assertEquals(20, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals("wO", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(20, token0.endLine);
      assertEquals(94, token0.beginColumn);
      assertEquals(95, token0.endColumn);
      assertEquals(20, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals("wO", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(88, token1.kind);
      assertEquals(20, token1.beginLine);
      assertEquals(96, token1.endColumn);
      assertEquals(96, token1.beginColumn);
      assertEquals(20, token1.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getEndColumn());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(96, javaCharStream0.getColumn());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals("<", token1.toString());
      assertNotNull(token1);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IQ<c?\"%0.XA");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("U_W5");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-1), (-3070));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      
      JavaCharStream javaCharStream3 = new JavaCharStream(stringReader1, 86, (-112));
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertEquals(0, javaCharStream3.getBeginLine());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertNotNull(javaCharStream3);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream3);
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream3.getBeginLine());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream3, javaCharStream0);
      assertNotSame(javaCharStream3, javaCharStream1);
      assertNotSame(javaCharStream3, javaCharStream2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(3, javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(86, token0.endLine);
      assertEquals(86, token0.beginLine);
      assertEquals((-109), token0.endColumn);
      assertEquals((-112), token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(86, javaCharStream3.getLine());
      assertEquals(86, javaCharStream3.getEndLine());
      assertEquals((-109), javaCharStream3.getEndColumn());
      assertEquals((-112), javaCharStream3.getBeginColumn());
      assertEquals(86, javaCharStream3.getBeginLine());
      assertEquals((-109), javaCharStream3.getColumn());
      assertEquals("U_W5", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("catch");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1117), 26);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1117), token0.endLine);
      assertEquals(26, token0.beginColumn);
      assertEquals((-1117), token0.beginLine);
      assertEquals(19, token0.kind);
      assertEquals(30, token0.endColumn);
      assertEquals((-1117), javaCharStream0.getBeginLine());
      assertEquals((-1117), javaCharStream0.getLine());
      assertEquals((-1117), javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(30, javaCharStream0.getEndColumn());
      assertEquals(30, javaCharStream0.getColumn());
      assertEquals("catch", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t;Ro$=c>Cj");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      assertFalse(boolean0);
      
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginLine());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-4580), 1012);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("t", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.7319037190022346
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("short");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(115, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)47, Integer.MAX_VALUE);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2147483646), token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals(47, token0.beginLine);
      assertEquals(47, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-2147483646), javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals((-2147483646), javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
      assertEquals("hort", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2147483646), javaCharStream0.getEndColumn());
      assertEquals(47, javaCharStream0.getEndLine());
      assertEquals((-2147483646), javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(47, javaCharStream0.getLine());
      assertEquals(47, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$<Cao");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("1xxs<wr");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader1.read();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(49, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 121, 49);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$<Cao");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(121, token0.beginLine);
      assertEquals(51, token0.endColumn);
      assertEquals(49, token0.beginColumn);
      assertEquals(121, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals("xxs", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(88, token1.kind);
      assertEquals(52, token1.endColumn);
      assertEquals(121, token1.endLine);
      assertEquals(52, token1.beginColumn);
      assertEquals(121, token1.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals("<", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(121, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(121, token2.beginLine);
      assertEquals(54, token2.endColumn);
      assertEquals(53, token2.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals("wr", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(121, token3.beginLine);
      assertEquals(54, token3.beginColumn);
      assertEquals(121, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(54, token3.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(121, javaCharStream0.getBeginLine());
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(121, javaCharStream0.getEndLine());
      assertEquals(121, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals("", token3.toString());
      assertNotNull(token3);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.0392470411705146
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7ZIK");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(":");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("\"finally\"");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("=SGARc!<Y");
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertNotNull(stringReader3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '.';
      charArray0[2] = 'v';
      charArray0[3] = ':';
      charArray0[4] = 'W';
      charArray0[5] = '=';
      charArray0[6] = 'I';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("B.v:W=I", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'B', '.', 'v', ':', 'W', '=', 'I'}, charArray0);
      
      int int0 = stringReader3.read(charBuffer0);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.limit());
      assertEquals(7, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(7, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'=', 'S', 'G', 'A', 'R', 'c', '!'}, charArray0);
      
      stringReader3.reset();
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      
      boolean boolean0 = stringReader0.ready();
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1168, 67);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 2, (-1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.format("=SGARc!<Y", (Object[]) javaParserTokenManager0.lexStateNames);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(printStream0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(67, token0.beginColumn);
      assertEquals(1168, token0.beginLine);
      assertEquals(70, token0.endColumn);
      assertEquals(1168, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(1168, javaCharStream0.getEndLine());
      assertEquals(67, javaCharStream0.getBeginColumn());
      assertEquals(1168, javaCharStream0.getBeginLine());
      assertEquals(1168, javaCharStream0.getLine());
      assertEquals("7ZIK", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1168, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(70, token1.endColumn);
      assertEquals(70, token1.beginColumn);
      assertEquals(1168, token1.endLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(70, javaCharStream0.getEndColumn());
      assertEquals(70, javaCharStream0.getColumn());
      assertEquals(70, javaCharStream0.getBeginColumn());
      assertEquals(1168, javaCharStream0.getEndLine());
      assertEquals(1168, javaCharStream0.getBeginLine());
      assertEquals(1168, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|>*#bH|T");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("|>*#bH|T");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 20, (-415));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(106, token0.kind);
      assertEquals((-415), token0.endColumn);
      assertEquals(20, token0.beginLine);
      assertEquals((-415), token0.beginColumn);
      assertEquals(20, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-415), javaCharStream0.getEndColumn());
      assertEquals((-415), javaCharStream0.getColumn());
      assertEquals((-415), javaCharStream0.getBeginColumn());
      assertEquals(20, javaCharStream0.getBeginLine());
      assertEquals(20, javaCharStream0.getEndLine());
      assertEquals(20, javaCharStream0.getLine());
      assertEquals("|", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.4769427205642187
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">L?,Y@|+9 0");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("|>*#bH|T");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("|>*#bH|T");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int0 = stringReader0.read();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(124, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2090, 2090);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean1 = stringReader0.markSupported();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2090, token0.endLine);
      assertEquals(2090, token0.endColumn);
      assertEquals(2090, token0.beginColumn);
      assertEquals(124, token0.kind);
      assertEquals(2090, token0.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(2090, javaCharStream0.getBeginLine());
      assertEquals(2090, javaCharStream0.getLine());
      assertEquals(2090, javaCharStream0.getColumn());
      assertEquals(2090, javaCharStream0.getEndLine());
      assertEquals(2090, javaCharStream0.getEndColumn());
      assertEquals(2090, javaCharStream0.getBeginColumn());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(103, token1.kind);
      assertEquals(2090, token1.endLine);
      assertEquals(2090, token1.beginLine);
      assertEquals(2091, token1.beginColumn);
      assertEquals(2091, token1.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(2090, javaCharStream0.getBeginLine());
      assertEquals(2091, javaCharStream0.getEndColumn());
      assertEquals(2090, javaCharStream0.getLine());
      assertEquals(2091, javaCharStream0.getColumn());
      assertEquals(2091, javaCharStream0.getBeginColumn());
      assertEquals(2090, javaCharStream0.getEndLine());
      assertEquals("*", token1.toString());
      assertNotNull(token1);
      
      javaCharStream0.column = 606;
      assertEquals(2090, javaCharStream0.getBeginLine());
      assertEquals(2091, javaCharStream0.getEndColumn());
      assertEquals(2090, javaCharStream0.getLine());
      assertEquals(2091, javaCharStream0.getColumn());
      assertEquals(2091, javaCharStream0.getBeginColumn());
      assertEquals(2090, javaCharStream0.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 2090, column 2092.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      StringReader stringReader0 = new StringReader("b[YW0!]w");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)52, (-1815));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(52, token0.beginLine);
      assertEquals((-1815), token0.endColumn);
      assertEquals(52, token0.endLine);
      assertEquals((-1815), token0.beginColumn);
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals((-1815), javaCharStream0.getEndColumn());
      assertEquals((-1815), javaCharStream0.getColumn());
      assertEquals((-1815), javaCharStream0.getBeginColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals("b", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 19);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 19. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.9741967300899725
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("tranJit");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tranJit");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("H~7$hb<Ur");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1166), (-1166));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals((-1166), token0.beginLine);
      assertEquals((-1166), token0.endLine);
      assertEquals((-1166), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1160), token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1160), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getBeginLine());
      assertEquals((-1166), javaCharStream0.getEndLine());
      assertEquals((-1166), javaCharStream0.getLine());
      assertEquals((-1166), javaCharStream0.getBeginColumn());
      assertEquals((-1160), javaCharStream0.getEndColumn());
      assertEquals("tranJit", token0.toString());
      assertNotNull(token0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(mockPrintStream0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "tranJit", (Object[]) null);
      assertNotSame(stringReader0, stringReader1);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1160), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getBeginLine());
      assertEquals((-1166), javaCharStream0.getEndLine());
      assertEquals((-1166), javaCharStream0.getLine());
      assertEquals((-1166), javaCharStream0.getBeginColumn());
      assertEquals((-1160), javaCharStream0.getEndColumn());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(printStream0);
      
      javaParserTokenManager0.debugStream = printStream0;
      assertEquals((-1160), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getBeginLine());
      assertEquals((-1166), javaCharStream0.getEndLine());
      assertEquals((-1166), javaCharStream0.getLine());
      assertEquals((-1166), javaCharStream0.getBeginColumn());
      assertEquals((-1160), javaCharStream0.getEndColumn());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1166), token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1166), token1.endLine);
      assertEquals((-1160), token1.endColumn);
      assertEquals((-1160), token1.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1160), javaCharStream0.getBeginColumn());
      assertEquals((-1160), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getBeginLine());
      assertEquals((-1166), javaCharStream0.getEndLine());
      assertEquals((-1166), javaCharStream0.getLine());
      assertEquals((-1160), javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1166), token2.beginLine);
      assertEquals((-1166), token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-1160), token2.endColumn);
      assertEquals((-1160), token2.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-1160), javaCharStream0.getBeginColumn());
      assertEquals((-1160), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getBeginLine());
      assertEquals((-1166), javaCharStream0.getEndLine());
      assertEquals((-1166), javaCharStream0.getLine());
      assertEquals((-1160), javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token3 = token_GTToken0.next;
      assertNull(token3);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1160), javaCharStream0.getBeginColumn());
      assertEquals((-1160), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getBeginLine());
      assertEquals((-1166), javaCharStream0.getEndLine());
      assertEquals((-1166), javaCharStream0.getLine());
      assertEquals((-1160), javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1166), token0.beginLine);
      assertEquals((-1166), token0.endLine);
      assertEquals((-1166), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1160), token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertEquals((-1160), javaCharStream0.getBeginColumn());
      assertEquals((-1160), javaCharStream0.getColumn());
      assertEquals((-1166), javaCharStream0.getBeginLine());
      assertEquals((-1166), javaCharStream0.getEndLine());
      assertEquals((-1166), javaCharStream0.getLine());
      assertEquals((-1160), javaCharStream0.getEndColumn());
      assertEquals("tranJit", token0.toString());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y&%QAq_Qv:O");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 24, 118);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0, (-1), (-899));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("Y", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("Y", token0.toString());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u&%QAq_Qv:O");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaCharStream0.tokenBegin = 101;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("u", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(105, token1.kind);
      assertEquals(2, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("&", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(108, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("%", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gg5rW=K");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.inBuf = (-3738);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gg5rW=K");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2090, 70);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("gg5rW", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(7, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(7, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals("K", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(7, token2.endColumn);
      assertEquals(7, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("case");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 308, 308);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(308, token0.beginLine);
      assertEquals(311, token0.endColumn);
      assertEquals(308, token0.beginColumn);
      assertEquals(18, token0.kind);
      assertEquals(308, token0.endLine);
      assertEquals(308, javaCharStream0.getBeginLine());
      assertEquals(308, javaCharStream0.getLine());
      assertEquals(311, javaCharStream0.getEndColumn());
      assertEquals(311, javaCharStream0.getColumn());
      assertEquals(308, javaCharStream0.getEndLine());
      assertEquals(308, javaCharStream0.getBeginColumn());
      assertEquals("case", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(308, token0.beginLine);
      assertEquals(311, token0.endColumn);
      assertEquals(308, token0.beginColumn);
      assertEquals(18, token0.kind);
      assertEquals(308, token0.endLine);
      assertEquals(308, javaCharStream0.getBeginLine());
      assertEquals(308, javaCharStream0.getLine());
      assertEquals(311, javaCharStream0.getEndColumn());
      assertEquals(311, javaCharStream0.getColumn());
      assertEquals(308, javaCharStream0.getEndLine());
      assertEquals(308, javaCharStream0.getBeginColumn());
      assertEquals("case", token0.toString());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("W");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2090, 2090);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2090, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(2090, token0.beginLine);
      assertEquals(2090, token0.beginColumn);
      assertEquals(2090, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(2090, javaCharStream0.getEndColumn());
      assertEquals(2090, javaCharStream0.getLine());
      assertEquals(2090, javaCharStream0.getColumn());
      assertEquals(2090, javaCharStream0.getBeginLine());
      assertEquals(2090, javaCharStream0.getBeginColumn());
      assertEquals(2090, javaCharStream0.getEndLine());
      assertEquals("W", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2090, token1.endColumn);
      assertEquals(2090, token1.beginColumn);
      assertEquals(2090, token1.beginLine);
      assertEquals(2090, token1.endLine);
      assertEquals(0, token1.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2090, javaCharStream0.getEndColumn());
      assertEquals(2090, javaCharStream0.getLine());
      assertEquals(2090, javaCharStream0.getColumn());
      assertEquals(2090, javaCharStream0.getBeginLine());
      assertEquals(2090, javaCharStream0.getBeginColumn());
      assertEquals(2090, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(2090, token2.endColumn);
      assertEquals(2090, token2.beginColumn);
      assertEquals(2090, token2.endLine);
      assertEquals(2090, token2.beginLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2090, javaCharStream0.getEndColumn());
      assertEquals(2090, javaCharStream0.getLine());
      assertEquals(2090, javaCharStream0.getColumn());
      assertEquals(2090, javaCharStream0.getBeginLine());
      assertEquals(2090, javaCharStream0.getBeginColumn());
      assertEquals(2090, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'H6%:@/'$+L");
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("w`PApK/,");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-290), 117);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      StringBuffer stringBuffer0 = javaParserTokenManager0.image;
      assertNull(stringBuffer0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(117, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(117, token0.endColumn);
      assertEquals((-290), token0.endLine);
      assertEquals((-290), token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-290), javaCharStream0.getEndLine());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals((-290), javaCharStream0.getLine());
      assertEquals((-290), javaCharStream0.getBeginLine());
      assertEquals("w", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("float");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'T';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'f', 'l'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-778), 2054);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2056, token0.endColumn);
      assertEquals((-778), token0.beginLine);
      assertEquals(2054, token0.beginColumn);
      assertEquals((-778), token0.endLine);
      assertEquals(2056, javaCharStream0.getColumn());
      assertEquals((-778), javaCharStream0.getEndLine());
      assertEquals(2054, javaCharStream0.getBeginColumn());
      assertEquals((-778), javaCharStream0.getBeginLine());
      assertEquals((-778), javaCharStream0.getLine());
      assertEquals(2056, javaCharStream0.getEndColumn());
      assertEquals("oat", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2056, token1.beginColumn);
      assertEquals(2056, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-778), token1.endLine);
      assertEquals((-778), token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2056, javaCharStream0.getColumn());
      assertEquals(2056, javaCharStream0.getBeginColumn());
      assertEquals((-778), javaCharStream0.getEndLine());
      assertEquals((-778), javaCharStream0.getBeginLine());
      assertEquals((-778), javaCharStream0.getLine());
      assertEquals(2056, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.1563745537147718
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wO<}F7^ 6Ms|}gYQT`");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "s~3 A;J?$s\"k&}4z");
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("wO<}F7^ 6Ms|}gYQT`");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3540, 2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedPos = 85;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 3540, column 20.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5012946965874954
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m10Rn'!?-3OSxC:");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '(';
      charArray0[1] = 'p';
      charArray0[2] = 'o';
      charArray0[3] = '2';
      charArray0[4] = '!';
      charArray0[5] = '1';
      int int0 = stringReader0.read(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'m', '1', '0', 'R', 'n', '\''}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 110, 110);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 26, (-13), 14);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token0.endColumn);
      assertEquals(110, token0.beginColumn);
      assertEquals(110, token0.beginLine);
      assertEquals(110, token0.endLine);
      assertEquals(89, token0.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(110, javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getColumn());
      assertEquals("!", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!");
      assertFalse(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(111, token1.endColumn);
      assertEquals(91, token1.kind);
      assertEquals(110, token1.endLine);
      assertEquals(110, token1.beginLine);
      assertEquals(111, token1.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(111, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals("?", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token2.beginLine);
      assertEquals(102, token2.kind);
      assertEquals(112, token2.endColumn);
      assertEquals(110, token2.endLine);
      assertEquals(112, token2.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals("-", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token2.beginLine);
      assertEquals(102, token2.kind);
      assertEquals(112, token2.endColumn);
      assertEquals(110, token2.endLine);
      assertEquals(112, token2.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals("-", token2.toString());
      
      Token token3 = Token.newToken(111);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNull(token3.toString());
      assertNotNull(token3);
      
      token3.specialToken = token0;
      assertNull(token3.toString());
      assertEquals("!", token3.specialToken.toString());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals("!", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNull(token3.toString());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token3);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token0.endColumn);
      assertEquals(110, token0.beginColumn);
      assertEquals(110, token0.beginLine);
      assertEquals(110, token0.endLine);
      assertEquals(89, token0.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token1));
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals("!", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token3.specialToken);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertSame(token3.specialToken, token0);
      assertNotSame(token3.specialToken, token1);
      assertNotSame(token3.specialToken, token2);
      assertNotSame(token3.specialToken, token3);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token3);
      assertNotSame(token0, token1);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginColumn);
      assertEquals(110, token3.specialToken.beginColumn);
      assertEquals(110, token3.specialToken.beginLine);
      assertEquals(89, token3.specialToken.kind);
      assertEquals(110, token3.specialToken.endLine);
      assertEquals(110, token3.specialToken.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token0.endColumn);
      assertEquals(110, token0.beginColumn);
      assertEquals(110, token0.beginLine);
      assertEquals(110, token0.endLine);
      assertEquals(89, token0.kind);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.specialToken.equals((Object)token1));
      assertFalse(token3.specialToken.equals((Object)token2));
      assertFalse(token3.specialToken.equals((Object)token3));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token3));
      assertFalse(token0.equals((Object)token1));
      assertNull(token3.toString());
      assertEquals("!", token3.specialToken.toString());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals(112, javaCharStream0.getBeginColumn());
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals("!", token0.toString());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/_d");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(104, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("/", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("_d", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("static");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("static");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), 1370);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(52, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(6, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("static", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5098115722821823
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("strictfp");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1335, 2145388542);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[5];
      charArray0[1] = '3';
      charArray0[2] = 'g';
      charArray0[3] = 'T';
      charArray0[4] = '3';
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'s', 't', 'r', 'i', 'c'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1335, token0.beginLine);
      assertEquals(2145388544, token0.endColumn);
      assertEquals(2145388542, token0.beginColumn);
      assertEquals(1335, token0.endLine);
      assertEquals(1335, javaCharStream0.getEndLine());
      assertEquals(2145388544, javaCharStream0.getEndColumn());
      assertEquals(2145388544, javaCharStream0.getColumn());
      assertEquals(2145388542, javaCharStream0.getBeginColumn());
      assertEquals(1335, javaCharStream0.getBeginLine());
      assertEquals(1335, javaCharStream0.getLine());
      assertEquals("tfp", token0.toString());
      assertNotNull(token0);
      
      Token token1 = new Token();
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2145388544, token2.endColumn);
      assertEquals(1335, token2.endLine);
      assertEquals(2145388544, token2.beginColumn);
      assertEquals(1335, token2.beginLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1335, javaCharStream0.getEndLine());
      assertEquals(2145388544, javaCharStream0.getEndColumn());
      assertEquals(2145388544, javaCharStream0.getColumn());
      assertEquals(2145388544, javaCharStream0.getBeginColumn());
      assertEquals(1335, javaCharStream0.getBeginLine());
      assertEquals(1335, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2145388544, token2.endColumn);
      assertEquals(1335, token2.endLine);
      assertEquals(2145388544, token2.beginColumn);
      assertEquals(1335, token2.beginLine);
      assertEquals(0, token2.kind);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1335, javaCharStream0.getEndLine());
      assertEquals(2145388544, javaCharStream0.getEndColumn());
      assertEquals(2145388544, javaCharStream0.getColumn());
      assertEquals(2145388544, javaCharStream0.getBeginColumn());
      assertEquals(1335, javaCharStream0.getBeginLine());
      assertEquals(1335, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1335, javaCharStream0.getEndLine());
      assertEquals(2145388544, javaCharStream0.getEndColumn());
      assertEquals(2145388544, javaCharStream0.getColumn());
      assertEquals(2145388544, javaCharStream0.getBeginColumn());
      assertEquals(1335, javaCharStream0.getBeginLine());
      assertEquals(1335, javaCharStream0.getLine());
      assertNull(token1.toString());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.1184473348959003
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("||");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte) (-40);
      byteArray0[4] = (byte) (-46);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)68, (byte) (-40), (byte) (-40), (byte) (-46)}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)76, (byte) (-40));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)68, (byte) (-40), (byte) (-40), (byte) (-46)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)68, (byte) (-40), (byte) (-40), (byte) (-46)}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-40), token0.beginColumn);
      assertEquals(76, token0.endLine);
      assertEquals((-39), token0.endColumn);
      assertEquals(76, token0.beginLine);
      assertEquals(70, token0.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(76, javaCharStream0.getLine());
      assertEquals(76, javaCharStream0.getBeginLine());
      assertEquals((-39), javaCharStream0.getEndColumn());
      assertEquals((-39), javaCharStream0.getColumn());
      assertEquals((-40), javaCharStream0.getBeginColumn());
      assertEquals(76, javaCharStream0.getEndLine());
      assertEquals("4D", token0.toString());
      assertNotNull(token0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)52, (byte)68, (byte) (-40), (byte) (-40), (byte) (-46)}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 76, column -38.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<HEX_LITERAL>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("i/iS@&PBanMb}t");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("_}:");
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertNotNull(stringReader3);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, (byte)31, 739);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader4 = new StringReader(")*auA-");
      assertFalse(stringReader4.equals((Object)stringReader2));
      assertFalse(stringReader4.equals((Object)stringReader0));
      assertFalse(stringReader4.equals((Object)stringReader3));
      assertFalse(stringReader4.equals((Object)stringReader1));
      assertNotNull(stringReader4);
      
      StringReader stringReader5 = new StringReader(";");
      assertFalse(stringReader5.equals((Object)stringReader4));
      assertFalse(stringReader5.equals((Object)stringReader1));
      assertFalse(stringReader5.equals((Object)stringReader2));
      assertFalse(stringReader5.equals((Object)stringReader3));
      assertFalse(stringReader5.equals((Object)stringReader0));
      assertNotNull(stringReader5);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader5, 26, (-1124));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader5.equals((Object)stringReader4));
      assertFalse(stringReader5.equals((Object)stringReader1));
      assertFalse(stringReader5.equals((Object)stringReader2));
      assertFalse(stringReader5.equals((Object)stringReader3));
      assertFalse(stringReader5.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(stringReader5.equals((Object)stringReader4));
      assertFalse(stringReader5.equals((Object)stringReader1));
      assertFalse(stringReader5.equals((Object)stringReader2));
      assertFalse(stringReader5.equals((Object)stringReader3));
      assertFalse(stringReader5.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader5, stringReader4);
      assertNotSame(stringReader5, stringReader1);
      assertNotSame(stringReader5, stringReader2);
      assertNotSame(stringReader5, stringReader3);
      assertNotSame(stringReader5, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(26, token0.beginLine);
      assertEquals(83, token0.kind);
      assertEquals(26, token0.endLine);
      assertEquals((-1124), token0.endColumn);
      assertEquals((-1124), token0.beginColumn);
      assertFalse(stringReader5.equals((Object)stringReader4));
      assertFalse(stringReader5.equals((Object)stringReader1));
      assertFalse(stringReader5.equals((Object)stringReader2));
      assertFalse(stringReader5.equals((Object)stringReader3));
      assertFalse(stringReader5.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals((-1124), javaCharStream1.getBeginColumn());
      assertEquals((-1124), javaCharStream1.getEndColumn());
      assertEquals(26, javaCharStream1.getEndLine());
      assertEquals((-1124), javaCharStream1.getColumn());
      assertEquals(";", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader5, stringReader4);
      assertNotSame(stringReader5, stringReader1);
      assertNotSame(stringReader5, stringReader2);
      assertNotSame(stringReader5, stringReader3);
      assertNotSame(stringReader5, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1124), token1.beginColumn);
      assertEquals(26, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals((-1124), token1.endColumn);
      assertEquals(26, token1.endLine);
      assertFalse(stringReader5.equals((Object)stringReader4));
      assertFalse(stringReader5.equals((Object)stringReader1));
      assertFalse(stringReader5.equals((Object)stringReader2));
      assertFalse(stringReader5.equals((Object)stringReader3));
      assertFalse(stringReader5.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals((-1124), javaCharStream1.getBeginColumn());
      assertEquals((-1124), javaCharStream1.getEndColumn());
      assertEquals(26, javaCharStream1.getEndLine());
      assertEquals((-1124), javaCharStream1.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader5, stringReader4);
      assertNotSame(stringReader5, stringReader1);
      assertNotSame(stringReader5, stringReader2);
      assertNotSame(stringReader5, stringReader3);
      assertNotSame(stringReader5, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1124), token2.endColumn);
      assertEquals(26, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals((-1124), token2.beginColumn);
      assertEquals(26, token2.beginLine);
      assertFalse(stringReader5.equals((Object)stringReader4));
      assertFalse(stringReader5.equals((Object)stringReader1));
      assertFalse(stringReader5.equals((Object)stringReader2));
      assertFalse(stringReader5.equals((Object)stringReader3));
      assertFalse(stringReader5.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals((-1124), javaCharStream1.getBeginColumn());
      assertEquals((-1124), javaCharStream1.getEndColumn());
      assertEquals(26, javaCharStream1.getEndLine());
      assertEquals((-1124), javaCharStream1.getColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=2.2058725088512805
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("transiet");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("transiet");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 106, 745);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(752, token0.endColumn);
      assertEquals(106, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(106, token0.beginLine);
      assertEquals(745, token0.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(752, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(752, javaCharStream0.getEndColumn());
      assertEquals(745, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals("transiet", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(752, token1.endColumn);
      assertEquals(752, token1.beginColumn);
      assertEquals(106, token1.beginLine);
      assertEquals(106, token1.endLine);
      assertEquals(0, token1.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(752, javaCharStream0.getBeginColumn());
      assertEquals(752, javaCharStream0.getColumn());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(752, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("i", token0.toString());
      assertNotNull(token0);
      
      stringReader0.mark(13);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(47);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 47. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.483331824316525
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">L?,Y@|+9 <");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(">L?,Y@|+9 <");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, byteArray0.length);
      assertFalse(boolean1);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte) (-48), (-4441));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4441), token0.beginColumn);
      assertEquals((-48), token0.beginLine);
      assertEquals(124, token0.kind);
      assertEquals((-4441), token0.endColumn);
      assertEquals((-48), token0.endLine);
      assertEquals((-48), javaCharStream0.getBeginLine());
      assertEquals((-4441), javaCharStream0.getBeginColumn());
      assertEquals((-4441), javaCharStream0.getEndColumn());
      assertEquals((-48), javaCharStream0.getEndLine());
      assertEquals((-4441), javaCharStream0.getColumn());
      assertEquals((-48), javaCharStream0.getLine());
      assertEquals(">", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-48), javaCharStream0.getBeginLine());
      assertEquals((-4441), javaCharStream0.getBeginColumn());
      assertEquals((-4441), javaCharStream0.getEndColumn());
      assertEquals((-48), javaCharStream0.getEndLine());
      assertEquals((-4441), javaCharStream0.getColumn());
      assertEquals((-48), javaCharStream0.getLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-48), javaCharStream0.getBeginLine());
      assertEquals((-4441), javaCharStream0.getBeginColumn());
      assertEquals((-4441), javaCharStream0.getEndColumn());
      assertEquals((-48), javaCharStream0.getEndLine());
      assertEquals((-4441), javaCharStream0.getColumn());
      assertEquals((-48), javaCharStream0.getLine());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("synchronized");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Ov)`T4G.~%");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("+=");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 13, 20);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      StringBuffer stringBuffer0 = javaParserTokenManager1.image;
      assertNull(stringBuffer0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(13, token0.endLine);
      assertEquals(110, token0.kind);
      assertEquals(13, token0.beginLine);
      assertEquals(20, token0.beginColumn);
      assertEquals(21, token0.endColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(20, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getEndLine());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(13, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getBeginLine());
      assertEquals("+=", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"throws\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("assert");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      stringReader0.reset();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      StringReader stringReader2 = new StringReader("oHK3e+zorZN1(ny");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 3208, 1233);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(3208, token0.endLine);
      assertEquals(1233, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3208, token0.beginLine);
      assertEquals(1237, token0.endColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(1237, javaCharStream0.getEndColumn());
      assertEquals(1237, javaCharStream0.getColumn());
      assertEquals(1233, javaCharStream0.getBeginColumn());
      assertEquals(3208, javaCharStream0.getEndLine());
      assertEquals(3208, javaCharStream0.getLine());
      assertEquals(3208, javaCharStream0.getBeginLine());
      assertEquals("oHK3e", token0.toString());
      assertNotNull(token0);
      
      Token token1 = new Token();
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(101, token2.kind);
      assertEquals(1238, token2.endColumn);
      assertEquals(3208, token2.beginLine);
      assertEquals(3208, token2.endLine);
      assertEquals(1238, token2.beginColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1238, javaCharStream0.getEndColumn());
      assertEquals(1238, javaCharStream0.getColumn());
      assertEquals(1238, javaCharStream0.getBeginColumn());
      assertEquals(3208, javaCharStream0.getEndLine());
      assertEquals(3208, javaCharStream0.getLine());
      assertEquals(3208, javaCharStream0.getBeginLine());
      assertEquals("+", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(1238, javaCharStream0.getEndColumn());
      assertEquals(1238, javaCharStream0.getColumn());
      assertEquals(1238, javaCharStream0.getBeginColumn());
      assertEquals(3208, javaCharStream0.getEndLine());
      assertEquals(3208, javaCharStream0.getLine());
      assertEquals(3208, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(1238, javaCharStream0.getEndColumn());
      assertEquals(1238, javaCharStream0.getColumn());
      assertEquals(1238, javaCharStream0.getBeginColumn());
      assertEquals(3208, javaCharStream0.getEndLine());
      assertEquals(3208, javaCharStream0.getLine());
      assertEquals(3208, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tPu[i7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1404, 1717986918);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1404, javaCharStream0.getBeginLine());
      assertEquals(1404, javaCharStream0.getEndLine());
      assertEquals(1717986918, javaCharStream0.getEndColumn());
      assertEquals(1717986918, javaCharStream0.getBeginColumn());
      assertEquals(1717986918, javaCharStream0.getColumn());
      assertEquals(1404, javaCharStream0.getLine());
      assertEquals('t', char0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1404, javaCharStream0.getBeginLine());
      assertEquals(1404, javaCharStream0.getEndLine());
      assertEquals(1717986918, javaCharStream0.getEndColumn());
      assertEquals(1717986918, javaCharStream0.getBeginColumn());
      assertEquals(1717986918, javaCharStream0.getColumn());
      assertEquals(1404, javaCharStream0.getLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1717986919, token0.beginColumn);
      assertEquals(1717986920, token0.endColumn);
      assertEquals(1404, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1404, token0.beginLine);
      assertEquals(1404, javaCharStream0.getBeginLine());
      assertEquals(1404, javaCharStream0.getEndLine());
      assertEquals(1717986920, javaCharStream0.getEndColumn());
      assertEquals(1717986919, javaCharStream0.getBeginColumn());
      assertEquals(1404, javaCharStream0.getLine());
      assertEquals(1717986920, javaCharStream0.getColumn());
      assertEquals("Pu", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&&");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("-=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(111, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(111, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-=", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertNull(token_GTToken0.toString());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)93;
      StringReader stringReader0 = new StringReader("<EXPONENT>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 110, (-3713), 1148);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token0.endLine);
      assertEquals(110, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals((-3713), token0.endColumn);
      assertEquals((-3713), token0.beginColumn);
      assertEquals((-3713), javaCharStream0.getEndColumn());
      assertEquals((-3713), javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals((-3713), javaCharStream0.getColumn());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{QbnYM");
      assertFalse(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals((-3712), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-3705), token1.endColumn);
      assertEquals(110, token1.endLine);
      assertEquals(110, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-3712), javaCharStream0.getBeginColumn());
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals((-3705), javaCharStream0.getEndColumn());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals((-3705), javaCharStream0.getColumn());
      assertEquals("EXPONENT", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(110, token2.endLine);
      assertEquals((-3704), token2.endColumn);
      assertEquals(124, token2.kind);
      assertEquals(110, token2.beginLine);
      assertEquals((-3704), token2.beginColumn);
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals((-3704), javaCharStream0.getColumn());
      assertEquals((-3704), javaCharStream0.getBeginColumn());
      assertEquals((-3704), javaCharStream0.getEndColumn());
      assertEquals(">", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(110, token0.endLine);
      assertEquals(110, token0.beginLine);
      assertEquals(88, token0.kind);
      assertEquals((-3713), token0.endColumn);
      assertEquals((-3713), token0.beginColumn);
      assertFalse(token0.equals((Object)token1));
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals((-3704), javaCharStream0.getColumn());
      assertEquals((-3704), javaCharStream0.getBeginColumn());
      assertEquals((-3704), javaCharStream0.getEndColumn());
      assertEquals("<", token0.toString());
      
      Token token3 = Token.newToken((-1479));
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNull(token3.toString());
      assertNotNull(token3);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(token1, token0);
      assertNotSame(token1, token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals((-3712), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-3705), token1.endColumn);
      assertEquals(110, token1.endLine);
      assertEquals(110, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token3));
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals((-3704), javaCharStream0.getColumn());
      assertEquals((-3704), javaCharStream0.getBeginColumn());
      assertEquals((-3704), javaCharStream0.getEndColumn());
      assertEquals("EXPONENT", token1.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(110, token4.endLine);
      assertEquals(0, token4.kind);
      assertEquals(110, token4.beginLine);
      assertEquals((-3704), token4.endColumn);
      assertEquals((-3704), token4.beginColumn);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertEquals(110, javaCharStream0.getLine());
      assertEquals(110, javaCharStream0.getEndLine());
      assertEquals(110, javaCharStream0.getBeginLine());
      assertEquals((-3704), javaCharStream0.getColumn());
      assertEquals((-3704), javaCharStream0.getBeginColumn());
      assertEquals((-3704), javaCharStream0.getEndColumn());
      assertEquals("", token4.toString());
      assertNotNull(token4);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("#Ce[$L=}OY#'[");
      assertNotNull(stringReader0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#Ce[$L=}OY#'[");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("wd[(e@i0w\u0001-");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 64, 26);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.inputStream = (Reader) stringReader1;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(27, token0.endColumn);
      assertEquals(64, token0.endLine);
      assertEquals(26, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(64, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals("wd", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(28, token1.beginColumn);
      assertEquals(81, token1.kind);
      assertEquals(64, token1.beginLine);
      assertEquals(28, token1.endColumn);
      assertEquals(64, token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals("[", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(29, token2.endColumn);
      assertEquals(64, token2.beginLine);
      assertEquals(29, token2.beginColumn);
      assertEquals(64, token2.endLine);
      assertEquals(77, token2.kind);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals("(", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".  Encountered: ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)93, (byte)38);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      StringReader stringReader1 = new StringReader("^A Cq}si");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("^A Cq}si");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 26, 91);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token0.beginColumn);
      assertEquals(107, token0.kind);
      assertEquals(26, token0.beginLine);
      assertEquals(26, token0.endLine);
      assertEquals(91, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(91, javaCharStream1.getEndColumn());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals(91, javaCharStream1.getColumn());
      assertEquals(26, javaCharStream1.getEndLine());
      assertEquals(91, javaCharStream1.getBeginColumn());
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals("^", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(93, token1.beginLine);
      assertEquals(38, token1.beginColumn);
      assertEquals(38, token1.endColumn);
      assertEquals(93, token1.endLine);
      assertEquals(85, token1.kind);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(".", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(93, token1.beginLine);
      assertEquals(38, token1.beginColumn);
      assertEquals(38, token1.endColumn);
      assertEquals(93, token1.endLine);
      assertEquals(85, token1.kind);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(91, javaCharStream1.getEndColumn());
      assertEquals(26, javaCharStream1.getLine());
      assertEquals(91, javaCharStream1.getColumn());
      assertEquals(26, javaCharStream1.getEndLine());
      assertEquals(91, javaCharStream1.getBeginColumn());
      assertEquals(26, javaCharStream1.getBeginLine());
      assertEquals(".", token1.toString());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("^|&U 7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4836, 48);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.prevCharIsLF = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = new Token();
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      token0.specialToken = (Token) token_GTToken0;
      assertNull(token0.toString());
      assertNull(token_GTToken0.toString());
      assertNull(token0.specialToken.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4837, token1.beginLine);
      assertEquals(107, token1.kind);
      assertEquals(4837, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(4837, javaCharStream0.getLine());
      assertEquals(4837, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(4837, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("^", token1.toString());
      assertNotNull(token1);
      
      token0.next = token1;
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(4837, javaCharStream0.getLine());
      assertEquals(4837, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(4837, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertEquals("^", token1.toString());
      assertEquals("^", token0.next.toString());
      
      JavaCharStream javaCharStream1 = null;
      try {
        javaCharStream1 = new JavaCharStream((InputStream) null, 701, 11);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extends");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)22;
      byteArray0[1] = (byte)39;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)39, 4038);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 39, column 4039.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)19}, byteArray0);
      
      StringReader stringReader0 = new StringReader("IQ<c?\"%0.XA");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 7, 106);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'U';
      charArray0[1] = '3';
      charArray0[2] = 'U';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = '3';
      charArray0[6] = 'T';
      charArray0[7] = ':';
      int int0 = stringReader0.read(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, int0);
      assertArrayEquals(new char[] {'I', 'Q', '<', 'c', '?', '\"', '%', '0'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 1394, (byte)19);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1394, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals(19, token0.beginColumn);
      assertEquals(1394, token0.endLine);
      assertEquals(19, token0.endColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(".", token0.toString());
      assertEquals(19, javaCharStream1.getBeginColumn());
      assertEquals(1394, javaCharStream1.getEndLine());
      assertEquals(1394, javaCharStream1.getBeginLine());
      assertEquals(19, javaCharStream1.getEndColumn());
      assertEquals(1394, javaCharStream1.getLine());
      assertEquals(19, javaCharStream1.getColumn());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1394, token1.endLine);
      assertEquals(20, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(21, token1.endColumn);
      assertEquals(1394, token1.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals("XA", token1.toString());
      assertEquals(20, javaCharStream1.getBeginColumn());
      assertEquals(21, javaCharStream1.getColumn());
      assertEquals(1394, javaCharStream1.getEndLine());
      assertEquals(1394, javaCharStream1.getBeginLine());
      assertEquals(1394, javaCharStream1.getLine());
      assertEquals(21, javaCharStream1.getEndColumn());
      assertNotNull(token1);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("%)<{[");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "kw%}FX;w");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("%", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(")", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(88, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("<", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.1846935532108698
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("transit");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("transit");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("transit");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 106, 1081);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(106, token0.beginLine);
      assertEquals(106, token0.endLine);
      assertEquals(1087, token0.endColumn);
      assertEquals(1081, token0.beginColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(1081, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(1087, javaCharStream0.getColumn());
      assertEquals(1087, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals("transit", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1087, token1.endColumn);
      assertEquals(106, token1.beginLine);
      assertEquals(1087, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(106, token1.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(1087, javaCharStream0.getColumn());
      assertEquals(1087, javaCharStream0.getBeginColumn());
      assertEquals(1087, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(1087, javaCharStream0.getColumn());
      assertEquals(1087, javaCharStream0.getBeginColumn());
      assertEquals(1087, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(106, token2.endLine);
      assertEquals(106, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1087, token2.beginColumn);
      assertEquals(1087, token2.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(106, javaCharStream0.getEndLine());
      assertEquals(1087, javaCharStream0.getColumn());
      assertEquals(1087, javaCharStream0.getBeginColumn());
      assertEquals(1087, javaCharStream0.getEndColumn());
      assertEquals(106, javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.SwitchTo(1087);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1087. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">L?,Y@|+9 0");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("%=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1324, (-162));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.curChar = '`';
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1324, token0.endLine);
      assertEquals(1324, token0.beginLine);
      assertEquals((-162), token0.beginColumn);
      assertEquals((-161), token0.endColumn);
      assertEquals(117, token0.kind);
      assertEquals((-161), javaCharStream0.getEndColumn());
      assertEquals((-161), javaCharStream0.getColumn());
      assertEquals(1324, javaCharStream0.getEndLine());
      assertEquals(1324, javaCharStream0.getLine());
      assertEquals((-162), javaCharStream0.getBeginColumn());
      assertEquals(1324, javaCharStream0.getBeginLine());
      assertEquals("%=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1324, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1324, token1.endLine);
      assertEquals((-161), token1.beginColumn);
      assertEquals((-161), token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-161), javaCharStream0.getEndColumn());
      assertEquals((-161), javaCharStream0.getColumn());
      assertEquals(1324, javaCharStream0.getEndLine());
      assertEquals(1324, javaCharStream0.getLine());
      assertEquals(1324, javaCharStream0.getBeginLine());
      assertEquals((-161), javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(1324, token2.beginLine);
      assertEquals((-161), token2.beginColumn);
      assertEquals(1324, token2.endLine);
      assertEquals((-161), token2.endColumn);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-161), javaCharStream0.getEndColumn());
      assertEquals((-161), javaCharStream0.getColumn());
      assertEquals(1324, javaCharStream0.getEndLine());
      assertEquals(1324, javaCharStream0.getLine());
      assertEquals(1324, javaCharStream0.getBeginLine());
      assertEquals((-161), javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g/+5rW)=K");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.inBuf = (-3738);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g/+5rW)=K");
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2090, 70);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("g", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(101, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("+", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(6, token2.endColumn);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals("rW", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.8646085689856675
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Ce[$L=}OY#'[");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("doulre");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 64, 26);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.inputStream = (Reader) stringReader1;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(26, token0.beginColumn);
      assertEquals(31, token0.endColumn);
      assertEquals(64, token0.beginLine);
      assertEquals(64, token0.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals("doulre", token0.toString());
      assertNotNull(token0);
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(64, token1.endLine);
      assertEquals(64, token1.beginLine);
      assertEquals(31, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(31, token1.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(31, token2.beginColumn);
      assertEquals(31, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(64, token2.beginLine);
      assertEquals(64, token2.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(31, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(31, javaCharStream0.getEndColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals(31, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lDq2J[ATX4?$w{");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      stringReader0.mark(108);
      charArray0[0] = 'V';
      charArray0[1] = 'Q';
      charArray0[2] = '$';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'l', 'D', 'q', '2'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 241, 42);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(42, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(241, token0.endLine);
      assertEquals(241, token0.beginLine);
      assertEquals(42, token0.beginColumn);
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(241, javaCharStream0.getEndLine());
      assertEquals(241, javaCharStream0.getBeginLine());
      assertEquals(241, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals("J", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)76;
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)52, 117);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(52, token0.beginLine);
      assertEquals(117, token0.beginColumn);
      assertEquals(118, token0.endColumn);
      assertEquals(52, token0.endLine);
      assertEquals(96, token0.kind);
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals("!=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(52, token1.endLine);
      assertEquals(52, token1.beginLine);
      assertEquals(118, token1.beginColumn);
      assertEquals(118, token1.endColumn);
      assertEquals(0, token1.kind);
      assertFalse(token1.equals((Object)token0));
      assertEquals(118, javaCharStream0.getColumn());
      assertEquals(118, javaCharStream0.getEndColumn());
      assertEquals(52, javaCharStream0.getLine());
      assertEquals(52, javaCharStream0.getEndLine());
      assertEquals(52, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[3] = (byte)93;
      byteArray0[2] = (byte)38;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)38, (byte)0, (byte)38, (byte)93, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      
      StringReader stringReader0 = new StringReader("!k201!%>SNm0Nc_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)38, (byte)38);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(38, token0.beginColumn);
      assertEquals(38, token0.endColumn);
      assertEquals(38, token0.endLine);
      assertEquals(38, token0.beginLine);
      assertEquals(38, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getLine());
      assertEquals("!", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(38, token0.beginColumn);
      assertEquals(38, token0.endColumn);
      assertEquals(38, token0.endLine);
      assertEquals(38, token0.beginLine);
      assertEquals(38, javaCharStream0.getBeginLine());
      assertEquals(38, javaCharStream0.getEndLine());
      assertEquals(38, javaCharStream0.getBeginColumn());
      assertEquals(38, javaCharStream0.getEndColumn());
      assertEquals(38, javaCharStream0.getColumn());
      assertEquals(38, javaCharStream0.getLine());
      assertEquals("!", token0.toString());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[5];
      StringReader stringReader0 = new StringReader("-i8Bb6G4QB2Ok");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("-i8Bb6G4QB2Ok");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pR`h} dLp+WqK");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader2 = new StringReader("pR`h} dLp+WqK");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (-1300), 121);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1300), token0.endLine);
      assertEquals(122, token0.endColumn);
      assertEquals(121, token0.beginColumn);
      assertEquals((-1300), token0.beginLine);
      assertEquals(74, token0.kind);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals((-1300), javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals((-1300), javaCharStream0.getLine());
      assertEquals((-1300), javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getColumn());
      assertEquals("pR", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals((-1300), javaCharStream0.getBeginLine());
      assertEquals(121, javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndColumn());
      assertEquals((-1300), javaCharStream0.getLine());
      assertEquals((-1300), javaCharStream0.getEndLine());
      assertEquals(122, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)38;
      byteArray0[1] = (byte)93;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)93;
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)93;
      StringReader stringReader0 = new StringReader("F=2~7N,YRiZLAK");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("F", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(87, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("=", token1.toString());
      assertNotNull(token1);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<=");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("<=");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<=");
      assertFalse(boolean0);
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("import");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1867), 13);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1867), token0.beginLine);
      assertEquals((-1867), token0.endLine);
      assertEquals(13, token0.beginColumn);
      assertEquals(94, token0.kind);
      assertEquals(14, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals((-1867), javaCharStream0.getBeginLine());
      assertEquals((-1867), javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals((-1867), javaCharStream0.getEndLine());
      assertEquals("<=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = new Token();
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(14, token2.endColumn);
      assertEquals(14, token2.beginColumn);
      assertEquals((-1867), token2.beginLine);
      assertEquals((-1867), token2.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals((-1867), javaCharStream0.getBeginLine());
      assertEquals((-1867), javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals((-1867), javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals((-1867), javaCharStream0.getBeginLine());
      assertEquals((-1867), javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals((-1867), javaCharStream0.getEndLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(14, javaCharStream0.getColumn());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals((-1867), javaCharStream0.getBeginLine());
      assertEquals((-1867), javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getEndColumn());
      assertEquals((-1867), javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("eT~*(n/mcDpj5F-j]");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("B~>)^");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 26, 26);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(26, token0.beginColumn);
      assertEquals(26, token0.beginLine);
      assertEquals(26, token0.endLine);
      assertEquals(27, token0.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(27, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals("eT", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(90, token1.kind);
      assertEquals(26, token1.beginLine);
      assertEquals(28, token1.beginColumn);
      assertEquals(28, token1.endColumn);
      assertEquals(26, token1.endLine);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals(28, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(28, javaCharStream0.getEndColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals("~", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(103, token2.kind);
      assertEquals(26, token2.beginLine);
      assertEquals(29, token2.beginColumn);
      assertEquals(26, token2.endLine);
      assertEquals(29, token2.endColumn);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(26, javaCharStream0.getEndLine());
      assertEquals(26, javaCharStream0.getBeginLine());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals(29, javaCharStream0.getBeginColumn());
      assertEquals(26, javaCharStream0.getLine());
      assertEquals("*", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("#Ce[$L=}OY#'[");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("#Ce[$L=}OY#'[");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader2 = new StringReader("const");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 40, 47);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(40, token0.beginLine);
      assertEquals(51, token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(22, token0.kind);
      assertEquals(47, token0.beginColumn);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals("const", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(47, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getBeginLine());
  }

  /**
  //Test case number: 153
  /*Coverage entropy=2.063416944178977
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nativ4");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("nativ4");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 128, 787);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(128, token0.endLine);
      assertEquals(787, token0.beginColumn);
      assertEquals(128, token0.beginLine);
      assertEquals(792, token0.endColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(128, javaCharStream0.getBeginLine());
      assertEquals(792, javaCharStream0.getColumn());
      assertEquals(787, javaCharStream0.getBeginColumn());
      assertEquals(128, javaCharStream0.getLine());
      assertEquals(128, javaCharStream0.getEndLine());
      assertEquals(792, javaCharStream0.getEndColumn());
      assertEquals("nativ4", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(792, token1.endColumn);
      assertEquals(792, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(128, token1.beginLine);
      assertEquals(128, token1.endLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(128, javaCharStream0.getBeginLine());
      assertEquals(792, javaCharStream0.getBeginColumn());
      assertEquals(792, javaCharStream0.getColumn());
      assertEquals(128, javaCharStream0.getLine());
      assertEquals(128, javaCharStream0.getEndLine());
      assertEquals(792, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(128, token2.endLine);
      assertEquals(792, token2.endColumn);
      assertEquals(792, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(128, token2.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(128, javaCharStream0.getBeginLine());
      assertEquals(792, javaCharStream0.getBeginColumn());
      assertEquals(792, javaCharStream0.getColumn());
      assertEquals(128, javaCharStream0.getLine());
      assertEquals(128, javaCharStream0.getEndLine());
      assertEquals(792, javaCharStream0.getEndColumn());
      assertEquals("", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("short");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"int\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals('\"', char0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      StringReader stringReader2 = new StringReader("\"synchronized\"");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      int int0 = stringReader2.read();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(34, int0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token0.endColumn);
      assertEquals(40, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("int", token0.toString());
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("naive");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("en_um");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("naive");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1375, 1375);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), (-2558));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1375, token0.beginColumn);
      assertEquals(1375, token0.endLine);
      assertEquals(1379, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1375, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1375, javaCharStream0.getEndLine());
      assertEquals(1379, javaCharStream0.getColumn());
      assertEquals(1379, javaCharStream0.getEndColumn());
      assertEquals(1375, javaCharStream0.getBeginColumn());
      assertEquals(1375, javaCharStream0.getLine());
      assertEquals(1375, javaCharStream0.getBeginLine());
      assertEquals("en_um", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1375, token0.beginColumn);
      assertEquals(1375, token0.endLine);
      assertEquals(1379, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1375, token0.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1375, javaCharStream0.getEndLine());
      assertEquals(1379, javaCharStream0.getColumn());
      assertEquals(1379, javaCharStream0.getEndColumn());
      assertEquals(1375, javaCharStream0.getBeginColumn());
      assertEquals(1375, javaCharStream0.getLine());
      assertEquals(1375, javaCharStream0.getBeginLine());
      assertEquals("en_um", token0.toString());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.093744602424499
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StringReader stringReader0 = new StringReader("extends");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)39;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)39, (byte)22, (byte)39}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)22, (byte)39}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)22, 2017);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)22, (byte)39}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)22, (byte)39}, byteArray0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(22, token0.beginLine);
      assertEquals(2019, token0.endColumn);
      assertEquals(72, token0.kind);
      assertEquals(2017, token0.beginColumn);
      assertEquals(22, token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(2019, javaCharStream0.getColumn());
      assertEquals(2017, javaCharStream0.getBeginColumn());
      assertEquals(2019, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals("'\u0016'", token0.toString());
      assertNotNull(token0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)22, (byte)39}, byteArray0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(22, javaCharStream0.getBeginLine());
      assertEquals(22, javaCharStream0.getLine());
      assertEquals(2019, javaCharStream0.getColumn());
      assertEquals(2017, javaCharStream0.getBeginColumn());
      assertEquals(2019, javaCharStream0.getEndColumn());
      assertEquals(22, javaCharStream0.getEndLine());
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)22, (byte)39}, byteArray0);
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">L?,Y@|+9 0");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)14;
      byteArray0[2] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 2);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)0, (byte) (-6)}, byteArray0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 780, 1420);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertEquals((-777), byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)0, (byte) (-6)}, byteArray0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("7E#G|7l9#");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("7E", token0.toString());
      assertNotNull(token0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 66, 76, (byte) (-6));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotNull(javaCharStream2);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)14, (byte)0, (byte) (-6)}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-905));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -905. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("10)Ienv");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals('1', char0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertNotNull(javaCharStream1);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(0, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(0, javaCharStream2.getColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("0", token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(78, token2.kind);
      assertEquals(1, token2.beginLine);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(")", token2.toString());
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token3.beginLine);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(7, token3.endColumn);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("Ienv", token3.toString());
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token4.kind);
      assertEquals(0, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(0, token4.endColumn);
      assertEquals(1, token4.beginLine);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(0, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(0, javaCharStream2.getColumn());
      assertEquals("", token4.toString());
      assertNotNull(token4);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|=");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("|=");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 3528, 63);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3528, token0.beginLine);
      assertEquals(3528, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(62, token0.endColumn);
      assertEquals(62, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(3528, javaCharStream0.getLine());
      assertEquals(3528, javaCharStream0.getEndLine());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(3528, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(62, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(3528, token1.endLine);
      assertEquals(62, token1.beginColumn);
      assertEquals(3528, token1.beginLine);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3528, javaCharStream0.getLine());
      assertEquals(3528, javaCharStream0.getEndLine());
      assertEquals(62, javaCharStream0.getEndColumn());
      assertEquals(62, javaCharStream0.getBeginColumn());
      assertEquals(3528, javaCharStream0.getBeginLine());
      assertEquals(62, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 3528, 62);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3528, token2.endLine);
      assertEquals(63, token2.endColumn);
      assertEquals(3528, token2.beginLine);
      assertEquals(62, token2.beginColumn);
      assertEquals(115, token2.kind);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(3528, javaCharStream1.getBeginLine());
      assertEquals(3528, javaCharStream1.getLine());
      assertEquals(62, javaCharStream1.getBeginColumn());
      assertEquals(3528, javaCharStream1.getEndLine());
      assertEquals(63, javaCharStream1.getColumn());
      assertEquals(63, javaCharStream1.getEndColumn());
      assertEquals("|=", token2.toString());
      assertNotNull(token2);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 7. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Ce[$L=}OY#'[");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("At|,%l`/d");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("At|,%l`/d");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 11, 86);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(11, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(86, token0.beginColumn);
      assertEquals(11, token0.beginLine);
      assertEquals(87, token0.endColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals("At", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(88, token1.endColumn);
      assertEquals(11, token1.beginLine);
      assertEquals(106, token1.kind);
      assertEquals(88, token1.beginColumn);
      assertEquals(11, token1.endLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals("|", token1.toString());
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(11, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(86, token0.beginColumn);
      assertEquals(11, token0.beginLine);
      assertEquals(87, token0.endColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals("At", token0.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(11, token2.endLine);
      assertEquals(84, token2.kind);
      assertEquals(89, token2.endColumn);
      assertEquals(89, token2.beginColumn);
      assertEquals(11, token2.beginLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(",", token2.toString());
      assertNotNull(token2);
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("2eR$0~@x]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)52, (byte)52);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">>>");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("2eR$0", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(90, token1.kind);
      assertEquals(6, token1.beginColumn);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("~", token1.toString());
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 4. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "wTbT");
      assertFalse(boolean0);
      
      stringReader1.reset();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("94iWr6y/O");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 64, 39);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(39, token0.beginColumn);
      assertEquals(64, token0.beginLine);
      assertEquals(64, token0.endLine);
      assertEquals(45, token0.endColumn);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(39, javaCharStream0.getBeginColumn());
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(45, javaCharStream0.getEndColumn());
      assertEquals(45, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals("94iWr6y", token0.toString());
      assertNotNull(token0);
      
      Token token1 = new Token();
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token2.beginColumn);
      assertEquals(64, token2.beginLine);
      assertEquals(46, token2.endColumn);
      assertEquals(104, token2.kind);
      assertEquals(64, token2.endLine);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      assertEquals("/", token2.toString());
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(64, javaCharStream0.getLine());
      assertEquals(64, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getColumn());
      assertEquals(64, javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$<Cao");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("$<Cao");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("$<Cao");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)121;
      byteArray0[4] = (byte)111;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-76), (byte)0, (byte)121, (byte)111}, byteArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 112, 103);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-76), (byte)0, (byte)121, (byte)111}, byteArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-76), (byte)0, (byte)121, (byte)111}, byteArray0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 112, column 108.  Encountered: <EOF> after : \"\\\"\\ufffdyo\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringReader stringReader0 = new StringReader("transient");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">>>");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-4246), 102);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4246), token0.endLine);
      assertEquals((-4246), token0.beginLine);
      assertEquals(104, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(102, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals((-4246), javaCharStream0.getLine());
      assertEquals((-4246), javaCharStream0.getBeginLine());
      assertEquals((-4246), javaCharStream0.getEndLine());
      assertEquals(">>>", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(4094, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-4246), token0.endLine);
      assertEquals((-4246), token0.beginLine);
      assertEquals(104, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(102, token0.beginColumn);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-4246), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(">>>", token0.toString());
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">L?,Y@|+9 <");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader(">L?,Y@|+9 <");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      StringReader stringReader1 = new StringReader("continue");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("continue");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      StringReader stringReader3 = new StringReader("continue");
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertNotNull(stringReader3);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, 214, (byte)39);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.ReInit((Reader) stringReader3);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(8, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(23, token0.kind);
      assertEquals(1, token0.endLine);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("continue", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(8, token1.endColumn);
      assertEquals(8, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 38);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 38. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }
}
