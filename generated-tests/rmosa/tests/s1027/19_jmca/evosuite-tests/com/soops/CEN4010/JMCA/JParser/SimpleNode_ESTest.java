/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:48:03 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.EmptyStackException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4349442022582592
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(88);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 347);
      Node node1 = simpleNode0.parent;
      simpleNode0.setIdentifier(":");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(")", stringWriter0);
      assertEquals(348, simpleNode0.jjtGetNumChildren());
      
      SimpleNode simpleNode1 = new SimpleNode(88);
      stringWriter0.close();
      simpleNode1.dump("MemberValuePairs", stringWriter0);
      StringWriter stringWriter1 = new StringWriter(1);
      simpleNode1.dump(":", stringWriter0);
      simpleNode1.dump("MemberValuePairs", stringWriter0);
      assertEquals("<ContinueStatement>\n  <identifier>:</identifier>\n</ContinueStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(95);
      Node node0 = simpleNode0.parent;
      int int0 = 1910;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
      
      simpleNode0.toString();
      String string0 = simpleNode0.toString();
      assertEquals("EnumConstant", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      JavaParser javaParser0 = new JavaParser("U");
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 1);
      simpleNode1.setIdentifier("e(//gZzFVZ}LAE?)qK");
      StringWriter stringWriter0 = new StringWriter(84);
      SimpleNode simpleNode2 = new SimpleNode(2294);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.toString();
      StringWriter stringWriter2 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      JavaParser javaParser1 = new JavaParser("N");
      SimpleNode simpleNode3 = new SimpleNode(javaParser0, 33);
      simpleNode0.setIdentifier("Initializer");
      simpleNode1.dump("U", stringWriter2);
      simpleNode1.dump("true", stringWriter2);
      simpleNode0.dump("Dc?,>3B~Ok];uR/b~", stringWriter2);
      simpleNode1.dump("e;4j=", stringWriter2);
      simpleNode3.dump("e;4j=", stringWriter2);
      simpleNode3.dump("U", stringWriter1);
      SimpleNode simpleNode4 = new SimpleNode(1);
      simpleNode3.dump((String) null, (Writer) null);
      simpleNode2.dump("zK+", stringWriter2);
      assertEquals("<PackageDeclaration>\n  <identifier>e(//gZzFVZ}LAE?)qK</identifier>\n</PackageDeclaration>\n<PackageDeclaration>\n  <identifier>e(//gZzFVZ}LAE?)qK</identifier>\n</PackageDeclaration>\n<ForInit>\n  <identifier>Initializer</identifier>\n</ForInit>\n<PackageDeclaration>\n  <identifier>e(//gZzFVZ}LAE?)qK</identifier>\n</PackageDeclaration>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.537368801781397
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(27);
      SimpleNode simpleNode1 = new SimpleNode(27);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtOpen();
      simpleNode0.setIdentifier("n");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(0);
      stringWriter1.append((CharSequence) "n");
      simpleNode0.dump("n", stringWriter1);
      simpleNode1.dump("TUX?rqN}<", stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode1.dump("H{E}3|R", stringWriter1);
      assertEquals(1, simpleNode1.jjtGetNumChildren());
      
      simpleNode0.dump("n", stringWriter2);
      assertEquals("<Initializer>\n  <identifier>n</identifier>\n</Initializer>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(23);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 40);
      simpleNode0.setIdentifier("%f2eL");
      simpleNode0.jjtGetNumChildren();
      JJTJavaParserState jJTJavaParserState0 = new JJTJavaParserState();
      // Undeclared exception!
      try { 
        jJTJavaParserState0.closeNodeScope(simpleNode0, 40);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      simpleNode0.setIdentifier("U");
      StringWriter stringWriter0 = new StringWriter(2761);
      SimpleNode simpleNode1 = new SimpleNode((-1994463376));
      simpleNode1.jjtSetParent(simpleNode0);
      StringWriter stringWriter1 = new StringWriter();
      simpleNode1.dump("U", stringWriter1);
      simpleNode0.dump("U", stringWriter0);
      String string0 = null;
      // Undeclared exception!
      try { 
        simpleNode0.dump((String) null, (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode0 = new SimpleNode(239);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.jjtClose();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.7031315809655685
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      simpleNode0.toString("n");
      simpleNode0.setIdentifier("n");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "n");
      simpleNode0.dump("n", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("n", stringWriter2);
      simpleNode0.dump(" 9My5@0H\"\"ha[9", stringWriter1);
      assertEquals("n<RelationalExpression>\n  <identifier>n</identifier>\n</RelationalExpression>\n<RelationalExpression>\n  <identifier>n</identifier>\n</RelationalExpression>\n", stringWriter1.toString());
      assertEquals("n<RelationalExpression>\n  <identifier>n</identifier>\n</RelationalExpression>\n<RelationalExpression>\n  <identifier>n</identifier>\n</RelationalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.677908725644198
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("X9Yn");
      JavaParser javaParser1 = new JavaParser("X9Yn");
      SimpleNode simpleNode0 = new SimpleNode(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      SimpleNode simpleNode2 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("X9Yn", stringWriter0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
      
      stringWriter0.write(0);
      SimpleNode simpleNode3 = new SimpleNode(2677);
      simpleNode3.dump("X9Yn", stringWriter0);
      assertEquals("<CompilationUnit></CompilationUnit>\n\u0000", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2729);
      SimpleNode simpleNode1 = new SimpleNode(997);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "J\"\"d>PRkqwW1!");
      SimpleNode simpleNode2 = new SimpleNode(1963);
      simpleNode1.jjtAddChild(simpleNode0, 48);
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter1.write("J\"\"d>PRkqwW1!", 48, 997);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      Node node0 = simpleNode0.parent;
      simpleNode0.setIdentifier("==");
      StringWriter stringWriter0 = new StringWriter(48);
      simpleNode0.toString();
      SimpleNode simpleNode1 = new SimpleNode(1142);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.setIdentifier("==");
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-2034504285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.44624376141549005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(95);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 1910);
      Node node1 = simpleNode0.parent;
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(187);
      StringWriter stringWriter1 = new StringWriter(1910);
      simpleNode1.dump("EVb& YiHhAm45*/I", stringWriter0);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode1.dump("<=", stringWriter0);
      assertEquals("<Annotation>\n  <identifier>*amp</identifier>\n</Annotation>\n<Annotation>\n  <identifier>*amp</identifier>\n</Annotation>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("]LI", stringWriter0);
      simpleNode0.dump("*lshft", stringWriter0);
      simpleNode0.dump("Literal", stringWriter0);
      simpleNode0.dump(";", stringWriter0);
      simpleNode0.dump("Literal", stringWriter0);
      simpleNode0.dump(">", stringWriter0);
      assertEquals("<InstanceOfExpression>\n</InstanceOfExpression>\n<InstanceOfExpression>\n</InstanceOfExpression>\n<InstanceOfExpression>\n</InstanceOfExpression>\n<InstanceOfExpression>\n</InstanceOfExpression>\n<InstanceOfExpression>\n</InstanceOfExpression>\n<InstanceOfExpression>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(84);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("&&", stringWriter0);
      simpleNode0.dump("\"/\"", stringWriter0);
      simpleNode0.dump("\"/\"", stringWriter0);
      simpleNode0.dump("\"/\"", stringWriter0);
      assertEquals("<ForInit>\n  <identifier>*amp</identifier>\n</ForInit>\n<ForInit>\n  <identifier>*amp</identifier>\n</ForInit>\n<ForInit>\n  <identifier>*amp</identifier>\n</ForInit>\n<ForInit>\n  <identifier>*amp</identifier>\n</ForInit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      simpleNode0.setIdentifier("U");
      int int0 = 2761;
      StringWriter stringWriter0 = new StringWriter(2761);
      SimpleNode simpleNode1 = new SimpleNode((-1994463376));
      simpleNode1.dump("adn>4b[;-U", stringWriter0);
      StringReader stringReader0 = new StringReader("adn>4b[;-U");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.setIdentifier("<");
      simpleNode0.dump("gw", stringWriter0);
      simpleNode1.dump("U", stringWriter0);
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(45);
      simpleNode0.setIdentifier("{");
      Node node0 = simpleNode0.parent;
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "{");
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals("{<AndExpression>\n</AndExpression>\n", stringWriter1.toString());
      assertEquals("{<AndExpression>\n</AndExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(88);
      Node node0 = simpleNode0.parent;
      Node node1 = simpleNode0.parent;
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(347);
      simpleNode0.dump(">", stringWriter0);
      StringWriter stringWriter1 = new StringWriter(88);
      simpleNode0.dump(">", stringWriter0);
      assertEquals("<ContinueStatement>\n  <identifier>*gt</identifier>\n</ContinueStatement>\n<ContinueStatement>\n  <identifier>*gt</identifier>\n</ContinueStatement>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(86);
      SimpleNode simpleNode1 = new SimpleNode(10);
      simpleNode1.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ">>");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "_ri)=l*{C8W");
      simpleNode1.dump("?&", stringWriter1);
      simpleNode1.dump("?&", stringWriter0);
      simpleNode0.dump(">>", stringWriter0);
      assertEquals(">><EnumConstant>\n  <identifier>*rshft</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*rshft</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(86);
      simpleNode0.setIdentifier("{");
      simpleNode0.setIdentifier("?&");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.close();
      simpleNode0.dump("MemberValuePairs", stringWriter1);
      simpleNode0.setIdentifier("<<");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode1 = new SimpleNode(43);
      simpleNode1.dump(",2I=e[L;3}HMUR", stringWriter1);
      simpleNode0.dump(" ", stringWriter1);
      StringReader stringReader0 = new StringReader("RelationalExpression");
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream(stringReader0, 3592, (-807), (-807));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(86);
      simpleNode0.jjtOpen();
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(86);
      stringWriter1.close();
      simpleNode0.dump(">=", stringWriter1);
      simpleNode0.dump((String) null, stringWriter1);
      simpleNode0.dump("v", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.dump(">=", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(22);
      Node node0 = simpleNode0.parent;
      simpleNode0.setIdentifier("==");
      StringWriter stringWriter0 = new StringWriter(22);
      SimpleNode simpleNode1 = new SimpleNode(36);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter1 = new StringWriter(76);
      stringWriter0.close();
      simpleNode0.dump("ArrayDimsAndInits", stringWriter0);
      String string0 = "<=";
      simpleNode1.setIdentifier("<=");
      StringWriter stringWriter2 = new StringWriter();
      simpleNode1.dump(".  Encountered: ", stringWriter1);
      // Undeclared exception!
      try { 
        stringWriter2.append((CharSequence) "<=", (-1983271269), (-1983271269));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(93);
      JavaParser javaParser0 = new JavaParser("");
      SimpleNode simpleNode1 = new SimpleNode(93);
      simpleNode1.jjtAddChild(simpleNode0, 0);
      Node node0 = simpleNode1.parent;
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode2 = new SimpleNode(3);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      simpleNode2.dump((String) null, stringWriter2);
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) stringBuffer0);
      simpleNode2.setIdentifier("D^OKfOoX(Q");
      simpleNode1.dump("e0o5", stringWriter3);
      JavaParser javaParser1 = new JavaParser(javaParser0.token_source);
      StringWriter stringWriter4 = new StringWriter(2605);
      simpleNode2.dump("D^OKfOoX(Q", stringWriter0);
      simpleNode2.dump("", stringWriter1);
      SimpleNode simpleNode3 = new SimpleNode(3);
      Node[] nodeArray0 = new Node[0];
      simpleNode3.children = nodeArray0;
      simpleNode3.dump(";", stringWriter3);
      assertEquals(63, stringBuffer0.length());
      assertEquals("<RUNSIGNEDSHIFT><RUNSIGNEDSHIFT>\n</RUNSIGNEDSHIFT>\n</RUNSIGNEDSHIFT>\n", stringWriter2.toString());
  }
}
