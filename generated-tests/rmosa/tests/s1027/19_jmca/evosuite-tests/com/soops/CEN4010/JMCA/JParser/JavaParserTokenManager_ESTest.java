/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:06:18 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 122, 122, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      javaParserTokenManager0.curChar = 'c';
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, (-1), 26);
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4239042075359816
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">>>=");
      StringReader stringReader1 = new StringReader(">>>=");
      int int0 = 36;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 36, 1775);
      stringReader1.mark(36);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      char[] charArray0 = new char[6];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = '>';
      charArray0[5] = '>';
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 36);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 36. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9700110994524641
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$cG");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.jjimageLen = 74;
      try { 
        javaCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9106860237635703
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<SINGLE_LINE_COMMENT>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "./\"?]");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)95;
      byteArray0[3] = (byte)95;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)95, (byte)95);
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      StringBuffer stringBuffer0 = new StringBuffer((byte)95);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 95, column 97.  Encountered: \"\" (0), after : \"\\'_\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8790288262580901
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#._o2F`P$");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = 5;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9727037742643809
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X<\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager1.jjnewStateCnt = 0;
      Token.GTToken token_GTToken1 = new Token.GTToken();
      javaParserTokenManager1.TokenLexicalActions(token_GTToken1);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("X", token0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.990821077963976
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B9Ir$g/HI");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2814, (-888), 2814);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-887), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0580110948799226
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      StringReader stringReader0 = new StringReader("#._o2F`P$");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.read();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaCharStream0.column = (-125);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column -121.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9965600634111641
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|=");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1892), 2538);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(2538, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4379432261289864
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v9uZ@");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2744, 20);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals("v9uZ", token0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1038901004869288
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9f_FO6o%&");
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'T';
      charArray0[2] = '7';
      charArray0[3] = 'V';
      charArray0[4] = 'P';
      charArray0[5] = 'n';
      charArray0[6] = 'o';
      stringReader0.read(charArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8568781011566626
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ivMML+{-O");
      StringReader stringReader0 = new StringReader("public");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = new Token();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3784619193202972
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/*8,ffh6F");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 11.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5522404920261001
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StringReader stringReader0 = new StringReader("this");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.inputStream = (Reader) stringReader0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("this", token0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2195745472732102
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("<<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?");
      StringReader stringReader1 = new StringReader("<<");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = new Token();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      
      token1.specialToken = (Token) token_GTToken0;
      Token.newToken(4802);
      javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.getNextToken();
      token2.specialToken = token1.specialToken;
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals("<<", token1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4883883156991622
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader(">>>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 51, 2141);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 0, column 0.  Encountered: \"\" (0), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.551618916818454
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("void");
      StringReader stringReader1 = new StringReader("Ai%DS=2(*Iy\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjnewStateCnt = (-1);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(63, token0.kind);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5513623368348444
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">>>=");
      StringReader stringReader1 = new StringReader(">>>=");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-545), 2338);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager1.jjimageLen = (-1074);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(2338, javaCharStream0.getBeginColumn());
      assertEquals((-545), javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4761650446296883
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"t\u0001rue\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 37, (-1703));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\u0001\" (1), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.130202219051288
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("3");
      StringReader stringReader1 = new StringReader("3");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 12, 12);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0286981091569798
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"t\u0001rue\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      stringReader0.mark(3102);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\">>\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals("\">>\"", token0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yd?w*<`$");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)52, (byte)39);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("Yd", token0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0213125104613126
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("IN_MULTI_LINE_COMMENT");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 76);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(20, javaCharStream0.bufpos);
      assertEquals(96, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.501117640872113
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wf");
      StringReader stringReader1 = new StringReader("wf");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      PrintStream printStream0 = mockPrintStream0.append('q');
      javaParserTokenManager0.debugStream = printStream0;
      javaCharStream0.bufcolumn = javaParserTokenManager0.jjnewLexState;
      Token token0 = token_GTToken0.specialToken;
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager0.jjFillToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0794914849296755
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W}JW_Il-|Q[-2ljr");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1704), (-875));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = new Token();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals((-874), javaCharStream0.getBeginColumn());
      assertEquals(80, token1.kind);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6984245852958397
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"const\"");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringReader stringReader0 = new StringReader("break");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.ready();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("break", token0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8213629586325257
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader1 = new StringReader("/");
      StringReader stringReader2 = new StringReader("final");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 912, 912);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 912, (-1), 912);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(3, javaCharStream1.getBeginColumn());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8231613161908344
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("assert");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjround = 113;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.684239607557355
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.Token$GTToken");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1554), 80);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(83, javaCharStream0.getBeginColumn());
      assertEquals(".", token0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5674887992821336
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      StringReader stringReader0 = new StringReader("byte");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 24, 24);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(24, javaCharStream0.getBeginColumn());
      assertEquals(27, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7426841791596748
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"true\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.skip(1L);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1703), 94);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.kind = 100;
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.479457863328369
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StringReader stringReader0 = new StringReader("aAY`^wSAk'kGBT0q");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-84);
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)59;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader1 = new StringReader("instanceof");
      StringReader stringReader2 = new StringReader("aAY`^wSAk'kGBT0q");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringReader0.ready();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xY`Y5{MC8");
      StringReader stringReader1 = new StringReader("xY`Y5{MC8");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4645480542047278
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringReader stringReader0 = new StringReader("P=ZUiA~EY=y");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2054, 2069);
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.ReadByte();
      javaCharStream0.prevCharIsLF = true;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("=", token0.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.4452455364359686
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J.7RM4-E4O");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.skip((-1703));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 598, 598);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager1.getNextToken();
      token0.kind = 109;
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token1);
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(4, javaCharStream1.bufpos);
      assertEquals(74, token2.kind);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0108609233724895
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v0l]");
      StringReader stringReader1 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0586210171826074
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("++");
      StringReader stringReader1 = new StringReader("++");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 656, 801);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaCharStream0.tokenBegin = 83;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.bufcolumn = javaParserTokenManager1.jjnewLexState;
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager1.TokenLexicalActions(token0);
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("++", token0.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0082401628947881
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ew8ho'_B=<%dJ");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 798, 107);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager1.TokenLexicalActions(token_GTToken0);
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(111, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.482181779452992
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BWMY95&F");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 90, 9);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 90, 1489);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager0.getNextToken();
      char[] charArray0 = new char[2];
      charArray0[0] = 'i';
      charArray0[1] = 'd';
      stringReader0.read(charArray0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      javaParserTokenManager1.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.015637246469352
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      StringReader stringReader1 = new StringReader("&JV ?r(!YNO;%8=Qpb");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedKind = 27;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(8, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2900364147160288
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("<<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?");
      StringReader stringReader1 = new StringReader("<<");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = new Token();
      javaParserTokenManager0.curLexState = 34;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      Token token1 = javaParserTokenManager0.getNextToken();
      token1.specialToken = (Token) token_GTToken0;
      Token.newToken(4802);
      javaParserTokenManager0.getNextToken();
      Token token2 = javaParserTokenManager0.getNextToken();
      token2.specialToken = token1.specialToken;
      javaParserTokenManager0.SkipLexicalActions(token2);
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.MoreLexicalActions();
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Gdg4:v5.g{,x9P");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5522404920261001
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringReader stringReader0 = new StringReader("enum");
      int int0 = 33;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 33, 72);
      javaCharStream0.column = 33;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      try { 
        javaCharStream0.ReadByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.8334414285945849
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringReader stringReader0 = new StringReader("B9Ir$g/HI");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-72);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-857), (-1230));
      byteArrayInputStream0.read();
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-2);
      intArray0[1] = (int) (byte) (-72);
      javaCharStream0.bufline = intArray0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -857, column -1229.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4727735820813344
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fUYe*@fz8+?rV#3");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1531), 23);
      stringReader0.ready();
      stringReader0.reset();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(28, javaCharStream0.getBeginColumn());
      assertEquals((-1531), javaCharStream0.getLine());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T'(]$Nm5o");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      assertEquals("T", token0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("byte");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4225), (-4225));
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals("yte", token0.toString());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("d>Djm`~");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1798, 39);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(39, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4635111875584401
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l-b#OmPkyi.");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'p';
      stringReader0.read(charArray0);
      javaParserTokenManager1.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qhis");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.inputStream = (Reader) stringReader0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".3SC`r2Tdl+e#b/");
      StringReader stringReader1 = new StringReader("k.'|8!LvK");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals("k", token0.toString());
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.483331824316525
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<SINGLE_LINE_COMMENT>");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(19, javaCharStream0.bufpos);
      assertEquals(20, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1dqlQRo#5&d_LNvtK");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1390, 1390);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals("1dqlQRo", token0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4623334549774576
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/NOs8T-BrR:*Xo)");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 36, (-1532));
      stringReader0.ready();
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 8, 22);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.kind = 8;
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals("/", token0.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/=");
      stringReader0.skip((-3336L));
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1161), (-1161));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-1161), javaCharStream0.getBeginColumn());
      assertEquals((-1160), javaCharStream0.getColumn());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5089471148467175
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z1Eq3Tr,2|.h++E&");
      StringReader stringReader1 = new StringReader("ivMML+{-O");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = new Token();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      token_GTToken0.specialToken = token0;
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(7, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      StringReader stringReader1 = new StringReader("'Z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2232, 654);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaCharStream0.ReadByte();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals("", token1.toString());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4810027589652939
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L3h>@k<Le^VfR9O&pq");
      stringReader0.ready();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-409), (-409));
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-405), javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<token of kind 7>");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-762), 12);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("<", token0.toString());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader1 = new StringReader("OjZKE'KF;~+YewB");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token.GTToken token_GTToken0 = new Token.GTToken();
      Token token0 = new Token();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(5, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.4590810680286423
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)74;
      byteArray0[3] = (byte)95;
      byteArray0[4] = (byte)40;
      StringReader stringReader0 = new StringReader("n&");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2534, 1667);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjmatchedPos = 1101;
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("n", token0.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("super");
      StringReader stringReader1 = new StringReader("super");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 46, 46);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals("", token0.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9421893119448201
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("impl+ment");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 790, 790);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = Token.newToken(74);
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token1);
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(790, javaCharStream0.getLine());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8306293574767907
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"tru@\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.skip(1L);
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1703), 98);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      token0.image = "\"tru@\"";
      javaParserTokenManager0.jjimageLen = (-708);
      javaParserTokenManager0.jjmatchedKind = 74;
      token0.kind = 100;
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-876), 6);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("", token0.toString());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4539482212483625
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v0l]");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = Token.newToken((-1));
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.934814750669732
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Y");
      StringReader stringReader1 = new StringReader("'Z");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      javaCharStream0.line = 70;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 70, column 3.  Encountered: <EOF> after : \"\\'Z\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4629172022904247
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/:\"rYl");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      StringReader stringReader0 = new StringReader("r.2{;");
      StringReader stringReader1 = new StringReader("v0l]");
      StringReader stringReader2 = new StringReader("v0l]");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (byte)33);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("r", token0.toString());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~a(6\"TT;@9xncAd'`");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-888), 30, 47);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("~", token0.toString());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.1001121539371455
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implements");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 790, 790);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token.newToken(37);
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(790, javaCharStream0.getBeginColumn());
      assertEquals(37, token0.kind);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.000335268265058
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("abstract");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 3593, 9);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(16, javaCharStream0.getBeginColumn());
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9580083339296832
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      StringReader stringReader1 = new StringReader("boolean");
      stringReader1.skip((-1));
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-1));
      FileSystemHandling.shouldAllThrowIOExceptions();
      javaCharStream0.ReInit((Reader) stringReader1);
      javaCharStream1.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(7, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9491788551539369
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LxB:&aB|P\"e_kg");
      StringReader stringReader1 = new StringReader("private");
      stringReader1.markSupported();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(0, token0.kind);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4487189960630174
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">!P|'.JZtN6");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      token0.image = ">!P|'.JZtN6";
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager2.debugStream = javaParserTokenManager1.debugStream;
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4645480542047278
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<O8NP`/gq85");
      StringReader stringReader1 = new StringReader("<O8NP`/gq85");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 12, 6, 12);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(88, token0.kind);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fUYe*@fz8+?rV#3");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1531), 23);
      stringReader0.ready();
      javaCharStream0.AdjustBuffSize();
      char[] charArray0 = new char[6];
      charArray0[0] = 'j';
      charArray0[1] = '8';
      charArray0[2] = '[';
      charArray0[3] = 'b';
      charArray0[4] = '1';
      charArray0[5] = 'b';
      stringReader0.read(charArray0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(26, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nM?mD_S:#bl<{%");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-848), 798);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager1.getNextToken();
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5671361364322165
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)74;
      StringReader stringReader0 = new StringReader("long");
      stringReader0.mark((byte)1);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals("long", token0.toString());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9571588128723199
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      StringReader stringReader1 = new StringReader("finally");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      Token token1 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.SkipLexicalActions(token1);
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte)43;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9oQ");
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)33, (byte)33);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("!", token0.toString());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1290776739720856
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte) (-68);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.reset();
      byteArrayInputStream0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      byteArrayInputStream0.close();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.jjnewStateCnt = (int) (byte) (-61);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.debugStream = null;
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implemPents");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 790, 790);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(10, javaCharStream0.bufpos);
      assertEquals(800, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4975278708517947
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"t\u0001rue\"");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      stringReader0.skip(1L);
      StringReader stringReader1 = new StringReader("7tb<H9ll4US%");
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, (-1), 35);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      Token token0 = javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.TokenLexicalActions(token0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1, column 43.  Encountered: \"\\u007f\" (127), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("qQ,>x4");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.4845749919016977
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|(/K=gbyt");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.ReadByte();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.getNextToken();
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6j");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      javaCharStream0.inputStream = (Reader) stringReader0;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals("6j", token0.toString());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<DZr8^w]r=y1E=8X");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1704), 290);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(290, token0.endColumn);
      assertEquals(290, token0.beginColumn);
      assertEquals(88, token0.kind);
      assertEquals((-1704), token0.beginLine);
      assertEquals((-1704), token0.endLine);
      assertEquals((-1704), javaCharStream0.getBeginLine());
      assertEquals((-1704), javaCharStream0.getEndLine());
      assertEquals(290, javaCharStream0.getEndColumn());
      assertEquals(290, javaCharStream0.getBeginColumn());
      assertEquals((-1704), javaCharStream0.getLine());
      assertEquals(290, javaCharStream0.getColumn());
      assertEquals("<", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)23;
      byteArray0[2] = (byte) (-58);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)52;
      byteArray0[7] = (byte)93;
      byteArray0[8] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)10, (byte)23, (byte) (-58), (byte) (-55), (byte)23, (byte)10, (byte)52, (byte)93, (byte)45}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2094), 24);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte)23, (byte) (-58), (byte) (-55), (byte)23, (byte)10, (byte)52, (byte)93, (byte)45}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.line = (int) (byte) (-58);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)10, (byte)23, (byte) (-58), (byte) (-55), (byte)23, (byte)10, (byte)52, (byte)93, (byte)45}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -57, column 1.  Encountered: \"\\u0017\" (23), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KP-[3]pB]$m}^(W.");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1892), 2538);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-1892), token0.endLine);
      assertEquals(2538, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2539, token0.endColumn);
      assertEquals((-1892), token0.beginLine);
      assertEquals((-1892), javaCharStream0.getEndLine());
      assertEquals(2539, javaCharStream0.getColumn());
      assertEquals((-1892), javaCharStream0.getLine());
      assertEquals((-1892), javaCharStream0.getBeginLine());
      assertEquals(2539, javaCharStream0.getEndColumn());
      assertEquals(2538, javaCharStream0.getBeginColumn());
      assertEquals("KP", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2540, token1.beginColumn);
      assertEquals((-1892), token1.beginLine);
      assertEquals(2540, token1.endColumn);
      assertEquals(102, token1.kind);
      assertEquals((-1892), token1.endLine);
      assertEquals((-1892), javaCharStream0.getEndLine());
      assertEquals(2540, javaCharStream0.getColumn());
      assertEquals((-1892), javaCharStream0.getLine());
      assertEquals(2540, javaCharStream0.getBeginColumn());
      assertEquals((-1892), javaCharStream0.getBeginLine());
      assertEquals(2540, javaCharStream0.getEndColumn());
      assertEquals("-", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.1587256873573146
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"true\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)77;
      byteArray0[2] = (byte) (-59);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 3985, (byte)75);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertNotNull(javaParserTokenManager0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream3 = new JavaCharStream(sequenceInputStream0, (byte)75, (byte) (-59));
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream3);
      
      javaCharStream2.AdjustBuffSize();
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(3, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream3);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream3));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      StringBuffer stringBuffer0 = new StringBuffer((byte)77);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(75, token0.beginColumn);
      assertEquals(3985, token0.beginLine);
      assertEquals(76, token0.endColumn);
      assertEquals(3985, token0.endLine);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(76, javaCharStream1.getEndColumn());
      assertEquals(76, javaCharStream1.getColumn());
      assertEquals(3985, javaCharStream1.getBeginLine());
      assertEquals(75, javaCharStream1.getBeginColumn());
      assertEquals(3985, javaCharStream1.getEndLine());
      assertEquals(3985, javaCharStream1.getLine());
      assertEquals("KM", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream3);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream3);
      assertEquals((-1), javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream3.getBeginLine());
      assertEquals(0, javaCharStream3.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, token1.kind);
      assertEquals(75, token1.beginLine);
      assertEquals((-60), token1.beginColumn);
      assertEquals((-60), token1.endColumn);
      assertEquals(75, token1.endLine);
      assertEquals(0, javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("", token1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(75, javaCharStream3.getBeginLine());
      assertEquals((-60), javaCharStream3.getColumn());
      assertEquals((-60), javaCharStream3.getBeginColumn());
      assertEquals((-60), javaCharStream3.getEndColumn());
      assertEquals(75, javaCharStream3.getEndLine());
      assertEquals(75, javaCharStream3.getLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream3, javaCharStream1);
      assertNotSame(javaCharStream3, javaCharStream2);
      assertNotSame(javaCharStream3, javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertNotNull(token1);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(0, javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(75, token0.beginColumn);
      assertEquals(3985, token0.beginLine);
      assertEquals(76, token0.endColumn);
      assertEquals(3985, token0.endLine);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(76, javaCharStream1.getEndColumn());
      assertEquals(76, javaCharStream1.getColumn());
      assertEquals(3985, javaCharStream1.getBeginLine());
      assertEquals(75, javaCharStream1.getBeginColumn());
      assertEquals(3985, javaCharStream1.getEndLine());
      assertEquals(3985, javaCharStream1.getLine());
      assertEquals(75, javaCharStream3.getBeginLine());
      assertEquals((-60), javaCharStream3.getColumn());
      assertEquals((-60), javaCharStream3.getBeginColumn());
      assertEquals((-60), javaCharStream3.getEndColumn());
      assertEquals(75, javaCharStream3.getEndLine());
      assertEquals(75, javaCharStream3.getLine());
      assertEquals("KM", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaCharStream3, javaCharStream1);
      assertNotSame(javaCharStream3, javaCharStream2);
      assertNotSame(javaCharStream3, javaCharStream0);
      assertNotSame(token0, token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      assertFalse(token0.equals((Object)token1));
      
      Token token2 = new Token();
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      javaParserTokenManager1.TokenLexicalActions(token2);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, javaCharStream3.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(75, javaCharStream3.getBeginLine());
      assertEquals((-60), javaCharStream3.getColumn());
      assertEquals((-60), javaCharStream3.getBeginColumn());
      assertEquals((-60), javaCharStream3.getEndColumn());
      assertEquals(75, javaCharStream3.getEndLine());
      assertEquals(75, javaCharStream3.getLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream3, javaCharStream1);
      assertNotSame(javaCharStream3, javaCharStream2);
      assertNotSame(javaCharStream3, javaCharStream0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream1));
      assertFalse(javaCharStream3.equals((Object)javaCharStream2));
      assertFalse(javaCharStream3.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)75, (byte)77, (byte) (-59)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(token2.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(76, javaCharStream1.getEndColumn());
      assertEquals(76, javaCharStream1.getColumn());
      assertEquals(3985, javaCharStream1.getBeginLine());
      assertEquals(75, javaCharStream1.getBeginColumn());
      assertEquals(3985, javaCharStream1.getEndLine());
      assertEquals(3985, javaCharStream1.getLine());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)85;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)85, 1184, 1818);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1184, token0.endColumn);
      assertEquals(85, token0.endLine);
      assertEquals(1184, token0.beginColumn);
      assertEquals(85, token0.beginLine);
      assertEquals(74, token0.kind);
      assertArrayEquals(new byte[] {(byte)85}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(1184, javaCharStream0.getBeginColumn());
      assertEquals(1184, javaCharStream0.getColumn());
      assertEquals(1184, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("U", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.504767900022683
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m@b=o:,or>$!NEFYpe");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("m", token0.toString());
      assertNotNull(token0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      assertNotNull(mockFileInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(mockFileInputStream0, 1, (-129));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      javaParserTokenManager0.input_stream = javaCharStream1;
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(fileDescriptor0.valid());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(0, javaParserTokenManager0.input_stream.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'c';
      int int1 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'\u0000', 'c'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager2.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("@", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals((-130), token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals((-130), token2.beginColumn);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertEquals(1, token3.beginLine);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals("b", token3.toString());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertNotNull(token3);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(87, token4.kind);
      assertEquals(4, token4.beginColumn);
      assertEquals(4, token4.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("=", token4.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertNotNull(token4);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0750853875290418
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c$;[n;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 36, 36);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaCharStream0.ReInit((Reader) stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals('c', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("$", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(83, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(";", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(81, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("[", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.5439538760685847
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c$;[n;");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-172), 9);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-418));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(10, token0.endColumn);
      assertEquals((-172), token0.beginLine);
      assertEquals((-172), token0.endLine);
      assertEquals((-172), javaCharStream0.getBeginLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals((-172), javaCharStream0.getEndLine());
      assertEquals((-172), javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals("c$", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, int0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, token1.endColumn);
      assertEquals((-172), token1.endLine);
      assertEquals(83, token1.kind);
      assertEquals((-172), token1.beginLine);
      assertEquals(11, token1.beginColumn);
      assertEquals((-172), javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals((-172), javaCharStream0.getEndLine());
      assertEquals((-172), javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(";", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-172), javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals((-172), javaCharStream0.getEndLine());
      assertEquals((-172), javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-172), javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals((-172), javaCharStream0.getEndLine());
      assertEquals((-172), javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-172), token2.beginLine);
      assertEquals((-172), token2.endLine);
      assertEquals(81, token2.kind);
      assertEquals(12, token2.endColumn);
      assertEquals(12, token2.beginColumn);
      assertEquals(12, javaCharStream0.getEndColumn());
      assertEquals((-172), javaCharStream0.getBeginLine());
      assertEquals(12, javaCharStream0.getBeginColumn());
      assertEquals((-172), javaCharStream0.getEndLine());
      assertEquals((-172), javaCharStream0.getLine());
      assertEquals(12, javaCharStream0.getColumn());
      assertEquals("[", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|;%XcI[s");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(106, token0.kind);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("|", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(83, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(";", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("v8C*g/*la");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("Ai%DS=2(*Iy\"");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("Ai", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(token0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.4845817694585648
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".3SC`r2Tdl+e#b/");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.prevCharIsCR = true;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(70, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endLine);
      assertEquals(2, token0.beginLine);
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals(".3", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getEndLine());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w2aEB`OT4]m5{&T");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1570, 49);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1570, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(53, token1.endColumn);
      assertEquals(1570, token1.endLine);
      assertEquals(49, token1.beginColumn);
      assertEquals(1570, javaCharStream0.getEndLine());
      assertEquals(1570, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(1570, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals("w2aEB", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1570, javaCharStream0.getEndLine());
      assertEquals(1570, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(1570, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getColumn());
      assertNull(token0.toString());
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      
      Token token2 = new Token();
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1570, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(53, token1.endColumn);
      assertEquals(1570, token1.endLine);
      assertEquals(49, token1.beginColumn);
      assertEquals(1570, javaCharStream0.getEndLine());
      assertEquals(1570, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getBeginColumn());
      assertEquals(1570, javaCharStream0.getLine());
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals("w2aEB", token1.toString());
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.015199034498166
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)39;
      byteArray0[8] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 114, (-274));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.AdjustBuffSize();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      StringBuffer stringBuffer0 = new StringBuffer(82);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(114, token0.beginLine);
      assertEquals((-274), token0.beginColumn);
      assertEquals((-272), token0.endColumn);
      assertEquals(72, token0.kind);
      assertEquals(114, token0.endLine);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("'t'", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-272), javaCharStream0.getColumn());
      assertEquals((-274), javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals((-272), javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 114, column -270.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.9419813162990491
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("brea@k");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("brea", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("brea", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      StringReader stringReader0 = new StringReader("h@ n+KOT,[$N!R'-w");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("h", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("uM/=D");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 55, 55);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(55, token0.beginLine);
      assertEquals(55, token0.beginColumn);
      assertEquals(56, token0.endColumn);
      assertEquals(55, token0.endLine);
      assertEquals(55, javaCharStream0.getBeginLine());
      assertEquals(56, javaCharStream0.getColumn());
      assertEquals(55, javaCharStream0.getEndLine());
      assertEquals(56, javaCharStream0.getEndColumn());
      assertEquals(55, javaCharStream0.getLine());
      assertEquals(55, javaCharStream0.getBeginColumn());
      assertEquals("uM", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-68);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("DEFAULT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("DEFAULT", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.input_stream = javaCharStream0;
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaParserTokenManager0.input_stream.getBeginColumn());
      assertEquals(7, javaParserTokenManager0.input_stream.getColumn());
      assertEquals(1, javaParserTokenManager0.input_stream.getEndLine());
      assertEquals(1, javaParserTokenManager0.input_stream.getBeginLine());
      assertEquals(7, javaParserTokenManager0.input_stream.getEndColumn());
      assertEquals(1, javaParserTokenManager0.input_stream.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(7, token1.endColumn);
      assertEquals(7, token1.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(7, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(7, token2.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0442591801951526
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"\r\"");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-3336L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1161), (-1161));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedPos = (-1161);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -1161, column -1160.  Encountered: \"\\r\" (13), after : \"\\\"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)108;
      byteArray0[1] = (byte) (-10);
      byteArray0[3] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9oQ");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte) (-10), (byte)0, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)33, (byte)33);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)33, (byte) (-10), (byte)0, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)33, (byte) (-10), (byte)0, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(33, token0.endLine);
      assertEquals(33, token0.beginLine);
      assertEquals(33, token0.beginColumn);
      assertEquals(33, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)33, (byte) (-10), (byte)0, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(33, token0.endLine);
      assertEquals(33, token0.beginLine);
      assertEquals(33, token0.beginColumn);
      assertEquals(33, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)33, (byte) (-10), (byte)0, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 33, column 34.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.0129847780282972
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.jd)I#xe");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("9.jd)I#xe");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, Integer.MAX_VALUE, 2226, 104);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      javaCharStream0.column = 2226;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(70, token0.kind);
      assertEquals(2227, token0.beginColumn);
      assertEquals(2228, token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(2227, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals(2228, javaCharStream0.getColumn());
      assertEquals(2228, javaCharStream0.getEndColumn());
      assertEquals("9.", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token1.beginLine);
      assertEquals(2230, token1.endColumn);
      assertEquals(Integer.MAX_VALUE, token1.endLine);
      assertEquals(2229, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(2230, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals(2229, javaCharStream0.getBeginColumn());
      assertEquals(2230, javaCharStream0.getEndColumn());
      assertEquals("jd", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(2231, token2.beginColumn);
      assertEquals(2231, token2.endColumn);
      assertEquals(Integer.MAX_VALUE, token2.endLine);
      assertEquals(78, token2.kind);
      assertEquals(Integer.MAX_VALUE, token2.beginLine);
      assertEquals(2231, javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals(2231, javaCharStream0.getBeginColumn());
      assertEquals(2231, javaCharStream0.getEndColumn());
      assertEquals(")", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<SINGLE_LINE_COMMENT>");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "./\"?]");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)39;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      StringBuffer stringBuffer0 = new StringBuffer((byte)0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)39, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\" (0), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"t\u0001rue\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"t\u0001rue\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"\\\"\" (34), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.464894698969361
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c$;[n;");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("|(/K=gbyt");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      boolean boolean1 = stringReader0.ready();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(106, token0.kind);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("|", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token1 = token_GTToken0.specialToken;
      assertNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0666715644010116
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"co^ste");
      assertFalse(boolean0);
      
      int int0 = 765;
      StringReader stringReader0 = new StringReader("0'DF");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 765, 765);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(765, token0.endColumn);
      assertEquals(765, token0.beginColumn);
      assertEquals(765, token0.endLine);
      assertEquals(765, token0.beginLine);
      assertEquals(765, javaCharStream0.getEndLine());
      assertEquals(765, javaCharStream0.getBeginLine());
      assertEquals(765, javaCharStream0.getColumn());
      assertEquals(765, javaCharStream0.getLine());
      assertEquals(765, javaCharStream0.getEndColumn());
      assertEquals(765, javaCharStream0.getBeginColumn());
      assertEquals("0", token0.toString());
      assertNotNull(token0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)40;
      byteArray0[1] = (byte)126;
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(765, javaCharStream0.getEndLine());
      assertEquals(765, javaCharStream0.getBeginLine());
      assertEquals(765, javaCharStream0.getColumn());
      assertEquals(765, javaCharStream0.getLine());
      assertEquals(765, javaCharStream0.getEndColumn());
      assertEquals(765, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.setDebugStream(javaParserTokenManager0.debugStream);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(765, javaCharStream0.getEndLine());
      assertEquals(765, javaCharStream0.getBeginLine());
      assertEquals(765, javaCharStream0.getColumn());
      assertEquals(765, javaCharStream0.getLine());
      assertEquals(765, javaCharStream0.getEndColumn());
      assertEquals(765, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 765, column 769.  Encountered: <EOF> after : \"\\'DF\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+=");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("finally");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 32, (-2234));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2234), token0.beginColumn);
      assertEquals((-2233), token0.endColumn);
      assertEquals(32, token0.endLine);
      assertEquals(110, token0.kind);
      assertEquals(32, token0.beginLine);
      assertEquals((-2233), javaCharStream0.getEndColumn());
      assertEquals((-2234), javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals((-2233), javaCharStream0.getColumn());
      assertEquals("+=", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2233), token1.endColumn);
      assertEquals((-2233), token1.beginColumn);
      assertEquals(32, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(32, token1.endLine);
      assertEquals((-2233), javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals((-2233), javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals((-2233), javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2233), token2.beginColumn);
      assertEquals((-2233), token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(32, token2.beginLine);
      assertEquals(32, token2.endLine);
      assertEquals((-2233), javaCharStream0.getEndColumn());
      assertEquals(32, javaCharStream0.getEndLine());
      assertEquals((-2233), javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      assertEquals(32, javaCharStream0.getLine());
      assertEquals((-2233), javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C09bVcR:YC`>8I$@");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("'Z");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1976), 112);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(113, token0.endColumn);
      assertEquals((-1976), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1976), token0.beginLine);
      assertEquals(112, token0.beginColumn);
      assertEquals((-1976), javaCharStream1.getEndLine());
      assertEquals((-1976), javaCharStream1.getLine());
      assertEquals((-1976), javaCharStream1.getBeginLine());
      assertEquals(113, javaCharStream1.getColumn());
      assertEquals(112, javaCharStream1.getBeginColumn());
      assertEquals(113, javaCharStream1.getEndColumn());
      assertEquals("C0", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5704958603340844
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)120;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      byteArray0[2] = (byte) (-100);
      StringReader stringReader0 = new StringReader("%4:I|");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader1 = new StringReader("%4:I|");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      boolean boolean1 = stringReader1.ready();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = stringReader1.ready();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("%", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = '6';
      charArray0[2] = '$';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'?', '6', '$'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), int0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(108, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("%", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("4", token1.toString());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertNotSame(token1, token0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token1);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"t\u0001rue\"");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"t\u0001rue\"");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-100);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-100)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 2885, 2594);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-100)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-100)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-100)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2594, token0.endColumn);
      assertEquals(2885, token0.beginLine);
      assertEquals(2594, token0.beginColumn);
      assertEquals(2885, token0.endLine);
      assertEquals(74, token0.kind);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-100)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2885, javaCharStream0.getBeginLine());
      assertEquals(2594, javaCharStream0.getEndColumn());
      assertEquals(2885, javaCharStream0.getLine());
      assertEquals(2594, javaCharStream0.getColumn());
      assertEquals(2594, javaCharStream0.getBeginColumn());
      assertEquals(2885, javaCharStream0.getEndLine());
      assertEquals("\u011C", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2594, token1.beginColumn);
      assertEquals(2885, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(2594, token1.endColumn);
      assertEquals(2885, token1.beginLine);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-100)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2885, javaCharStream0.getBeginLine());
      assertEquals(2594, javaCharStream0.getEndColumn());
      assertEquals(2885, javaCharStream0.getLine());
      assertEquals(2594, javaCharStream0.getColumn());
      assertEquals(2594, javaCharStream0.getBeginColumn());
      assertEquals(2885, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oZ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("oZ", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5083893499256826
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)43;
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9ov");
      assertFalse(boolean0);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)33, (byte)108, (byte)108, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)33, (byte)33);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)33, (byte)108, (byte)108, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)33, (byte)108, (byte)108, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(89, token0.kind);
      assertEquals(33, token0.beginColumn);
      assertEquals(33, token0.endLine);
      assertEquals(33, token0.endColumn);
      assertEquals(33, token0.beginLine);
      assertArrayEquals(new byte[] {(byte)33, (byte)108, (byte)108, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(33, javaCharStream0.getEndColumn());
      assertEquals(33, javaCharStream0.getLine());
      assertEquals(33, javaCharStream0.getColumn());
      assertEquals(33, javaCharStream0.getEndLine());
      assertEquals(33, javaCharStream0.getBeginLine());
      assertEquals(33, javaCharStream0.getBeginColumn());
      assertEquals("!", token0.toString());
      assertNotNull(token0);
      
      byte[] byteArray1 = new byte[3];
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      byteArray1[0] = (byte)43;
      StringReader stringReader0 = new StringReader("!");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(89, token1.kind);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals("!", token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.667899156656349
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringReader stringReader0 = new StringReader("l-b#OmPkyi.");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("l", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'p';
      javaParserTokenManager0.curLexState = 1;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'V', 'p'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(102, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("-", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 13.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.483331824316525
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%W-vyPcA");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 49, (-875));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-875), token1.endColumn);
      assertEquals(108, token1.kind);
      assertEquals(49, token1.beginLine);
      assertEquals((-875), token1.beginColumn);
      assertEquals(49, token1.endLine);
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals((-875), javaCharStream0.getBeginColumn());
      assertEquals((-875), javaCharStream0.getColumn());
      assertEquals((-875), javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals("%", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-875), token1.endColumn);
      assertEquals(108, token1.kind);
      assertEquals(49, token1.beginLine);
      assertEquals((-875), token1.beginColumn);
      assertEquals(49, token1.endLine);
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals((-875), javaCharStream0.getBeginColumn());
      assertEquals((-875), javaCharStream0.getColumn());
      assertEquals((-875), javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertEquals("%", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = new Token();
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(49, javaCharStream0.getEndLine());
      assertEquals((-875), javaCharStream0.getBeginColumn());
      assertEquals((-875), javaCharStream0.getColumn());
      assertEquals((-875), javaCharStream0.getEndColumn());
      assertEquals(49, javaCharStream0.getLine());
      assertEquals(49, javaCharStream0.getBeginLine());
      assertNull(token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lGb#OmPCyiB");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 71);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(73, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(71, token0.beginColumn);
      assertEquals(71, token0.beginLine);
      assertEquals(71, token0.endLine);
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(73, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(73, javaCharStream0.getColumn());
      assertEquals("lGb", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("M5#*d0w|4>al");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("M5#*d0w|4>al");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("M5", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-=oJA]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 93, 3508);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(111, token0.kind);
      assertEquals(93, token0.beginLine);
      assertEquals(93, token0.endLine);
      assertEquals(3508, token0.beginColumn);
      assertEquals(3509, token0.endColumn);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(3508, javaCharStream0.getBeginColumn());
      assertEquals(3509, javaCharStream0.getColumn());
      assertEquals(3509, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals("-=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = Token.newToken(46);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(111, token0.kind);
      assertEquals(93, token0.beginLine);
      assertEquals(93, token0.endLine);
      assertEquals(3508, token0.beginColumn);
      assertEquals(3509, token0.endColumn);
      assertEquals(93, javaCharStream0.getBeginLine());
      assertEquals(3508, javaCharStream0.getBeginColumn());
      assertEquals(3509, javaCharStream0.getColumn());
      assertEquals(3509, javaCharStream0.getEndColumn());
      assertEquals(93, javaCharStream0.getLine());
      assertEquals(93, javaCharStream0.getEndLine());
      assertEquals("-=", token0.toString());
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&&");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("&&");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2538, (-1892));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1892), token0.beginColumn);
      assertEquals(2538, token0.beginLine);
      assertEquals((-1891), token0.endColumn);
      assertEquals(98, token0.kind);
      assertEquals(2538, token0.endLine);
      assertEquals((-1892), javaCharStream0.getBeginColumn());
      assertEquals(2538, javaCharStream0.getLine());
      assertEquals((-1891), javaCharStream0.getColumn());
      assertEquals(2538, javaCharStream0.getBeginLine());
      assertEquals(2538, javaCharStream0.getEndLine());
      assertEquals((-1891), javaCharStream0.getEndColumn());
      assertEquals("&&", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2538, token1.endLine);
      assertEquals((-1891), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals((-1891), token1.beginColumn);
      assertEquals(2538, token1.beginLine);
      assertEquals(2538, javaCharStream0.getLine());
      assertEquals((-1891), javaCharStream0.getBeginColumn());
      assertEquals((-1891), javaCharStream0.getColumn());
      assertEquals(2538, javaCharStream0.getBeginLine());
      assertEquals(2538, javaCharStream0.getEndLine());
      assertEquals((-1891), javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fm=z~J7kH|");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2147467264, (-1704));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'W';
      charArray0[1] = 'h';
      charArray0[2] = 'l';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'f', 'm', '='}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1704), 102, 1955);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals((-1704), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1704), token0.beginLine);
      assertEquals(102, token0.beginColumn);
      assertEquals(102, token0.endColumn);
      assertEquals((-1704), javaCharStream1.getBeginLine());
      assertEquals(102, javaCharStream1.getColumn());
      assertEquals(102, javaCharStream1.getEndColumn());
      assertEquals(102, javaCharStream1.getBeginColumn());
      assertEquals((-1704), javaCharStream1.getLine());
      assertEquals((-1704), javaCharStream1.getEndLine());
      assertEquals("z", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.TokenMgrError");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("com", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(85, token1.kind);
      assertEquals(4, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(".", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals("soops", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(10, token3.endColumn);
      assertEquals(10, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(85, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(".", token3.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/NOs8T-BrR:*Xo)");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 36, (-1532));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9oQ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte) (-125);
      byteArray0[5] = (byte) (-50);
      boolean boolean2 = stringReader0.markSupported();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)80, (byte)14, (byte) (-74), (byte) (-125), (byte) (-50), (byte) (-72), (byte)12, (byte) (-6)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, 55, (byte) (-74));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-74), (byte)80, (byte)14, (byte) (-74), (byte) (-125), (byte) (-50), (byte) (-72), (byte)12, (byte) (-6)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1532), token0.endColumn);
      assertEquals((-1532), token0.beginColumn);
      assertEquals(104, token0.kind);
      assertEquals(36, token0.beginLine);
      assertEquals(36, token0.endLine);
      assertEquals((-1532), javaCharStream0.getColumn());
      assertEquals((-1532), javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals((-1532), javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals("/", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1532), token0.endColumn);
      assertEquals((-1532), token0.beginColumn);
      assertEquals(104, token0.kind);
      assertEquals(36, token0.beginLine);
      assertEquals(36, token0.endLine);
      assertEquals((-1532), javaCharStream0.getColumn());
      assertEquals((-1532), javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals((-1532), javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals("/", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(36, token1.beginLine);
      assertEquals((-1527), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals((-1531), token1.beginColumn);
      assertEquals(36, token1.endLine);
      assertEquals((-1531), javaCharStream0.getBeginColumn());
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals((-1527), javaCharStream0.getEndColumn());
      assertEquals((-1527), javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals("NOs8T", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(36, token2.endLine);
      assertEquals(102, token2.kind);
      assertEquals(36, token2.beginLine);
      assertEquals((-1526), token2.beginColumn);
      assertEquals((-1526), token2.endColumn);
      assertEquals(36, javaCharStream0.getEndLine());
      assertEquals((-1526), javaCharStream0.getColumn());
      assertEquals((-1526), javaCharStream0.getBeginColumn());
      assertEquals((-1526), javaCharStream0.getEndColumn());
      assertEquals(36, javaCharStream0.getLine());
      assertEquals(36, javaCharStream0.getBeginLine());
      assertEquals("-", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 93);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 93. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.089049426189804
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5,`>m`zt~vODf7Pk:%I");
      assertNotNull(stringReader0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-417), (-417));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-417), token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals((-417), token0.endColumn);
      assertEquals((-417), token0.beginLine);
      assertEquals((-417), token0.beginColumn);
      assertEquals((-417), javaCharStream0.getBeginLine());
      assertEquals((-417), javaCharStream0.getBeginColumn());
      assertEquals((-417), javaCharStream0.getEndColumn());
      assertEquals((-417), javaCharStream0.getEndLine());
      assertEquals((-417), javaCharStream0.getLine());
      assertEquals((-417), javaCharStream0.getColumn());
      assertEquals("5", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.1096545945938798
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">>>=");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-1), 114);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 214, (-2934));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      
      javaCharStream2.prevCharIsCR = false;
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      javaCharStream2.AdjustBuffSize();
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      StringBuffer stringBuffer0 = new StringBuffer(794);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1), token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals(117, token0.endColumn);
      assertEquals(114, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("2222", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals((-1), token1.beginLine);
      assertEquals(117, token1.beginColumn);
      assertEquals(117, token1.endColumn);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals((-1), token1.beginLine);
      assertEquals(117, token1.beginColumn);
      assertEquals(117, token1.endColumn);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals((-1), token0.beginLine);
      assertEquals(117, token0.endColumn);
      assertEquals(114, token0.beginColumn);
      assertArrayEquals(new byte[] {(byte)50, (byte)50, (byte)50, (byte)50}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(117, javaCharStream0.getColumn());
      assertEquals(117, javaCharStream0.getEndColumn());
      assertEquals(117, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("2222", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(token0, token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(token0.equals((Object)token1));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("`;M-&?; }LE8'");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("4f01v']");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("==");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = stringReader2.ready();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertTrue(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(93, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("==", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(token0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8T_d75G|e^#=;Z9PA~");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(7, token0.endColumn);
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("8T_d75G", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(106, token1.kind);
      assertEquals(8, token1.beginColumn);
      assertEquals(8, token1.endColumn);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("|", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(7, token0.endColumn);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("8T_d75G", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("final-ly");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(31, token0.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("final", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V9*[U_j");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1415, 21);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1415, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(21, token0.beginColumn);
      assertEquals(1415, token0.endLine);
      assertEquals(22, token0.endColumn);
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(1415, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(1415, javaCharStream0.getBeginLine());
      assertEquals(1415, javaCharStream0.getLine());
      assertEquals("V9", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1415, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(21, token0.beginColumn);
      assertEquals(1415, token0.endLine);
      assertEquals(22, token0.endColumn);
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals(1415, javaCharStream0.getEndLine());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(1415, javaCharStream0.getBeginLine());
      assertEquals(1415, javaCharStream0.getLine());
      assertEquals("V9", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StringReader stringReader0 = new StringReader("goto");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("goto");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 122, (-1567));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.endLine);
      assertEquals(35, token0.kind);
      assertEquals((-1567), token0.beginColumn);
      assertEquals((-1564), token0.endColumn);
      assertEquals((-1567), javaCharStream0.getBeginColumn());
      assertEquals((-1564), javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals((-1564), javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("goto", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals((-1567), javaCharStream0.getBeginColumn());
      assertEquals((-1564), javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals((-1564), javaCharStream0.getEndColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1564), token1.beginColumn);
      assertEquals(122, token1.beginLine);
      assertEquals((-1564), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(122, token1.endLine);
      assertEquals((-1564), javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals((-1564), javaCharStream0.getEndColumn());
      assertEquals((-1564), javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(122, token0.beginLine);
      assertEquals(122, token0.endLine);
      assertEquals(35, token0.kind);
      assertEquals((-1567), token0.beginColumn);
      assertEquals((-1564), token0.endColumn);
      assertEquals((-1564), javaCharStream0.getColumn());
      assertEquals(122, javaCharStream0.getBeginLine());
      assertEquals(122, javaCharStream0.getLine());
      assertEquals((-1564), javaCharStream0.getEndColumn());
      assertEquals((-1564), javaCharStream0.getBeginColumn());
      assertEquals(122, javaCharStream0.getEndLine());
      assertEquals("goto", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.9640484747219182
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|=");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("default");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4, 4);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 4, (-104), 1592);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-104), token0.beginColumn);
      assertEquals(24, token0.kind);
      assertEquals(4, token0.beginLine);
      assertEquals((-98), token0.endColumn);
      assertEquals(4, token0.endLine);
      assertEquals((-98), javaCharStream1.getColumn());
      assertEquals((-98), javaCharStream1.getEndColumn());
      assertEquals(4, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getLine());
      assertEquals((-104), javaCharStream1.getBeginColumn());
      assertEquals(4, javaCharStream1.getBeginLine());
      assertEquals("default", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(6, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-98), javaCharStream1.getColumn());
      assertEquals((-98), javaCharStream1.getEndColumn());
      assertEquals(4, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getLine());
      assertEquals((-104), javaCharStream1.getBeginColumn());
      assertEquals(4, javaCharStream1.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(4, token1.beginLine);
      assertEquals((-98), token1.beginColumn);
      assertEquals((-98), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(4, token1.endLine);
      assertEquals((-98), javaCharStream1.getColumn());
      assertEquals((-98), javaCharStream1.getEndColumn());
      assertEquals((-98), javaCharStream1.getBeginColumn());
      assertEquals(4, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getLine());
      assertEquals(4, javaCharStream1.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(4, token1.beginLine);
      assertEquals((-98), token1.beginColumn);
      assertEquals((-98), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(4, token1.endLine);
      assertEquals((-98), javaCharStream1.getColumn());
      assertEquals((-98), javaCharStream1.getEndColumn());
      assertEquals((-98), javaCharStream1.getBeginColumn());
      assertEquals(4, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getLine());
      assertEquals(4, javaCharStream1.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wf");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("wf");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream, false);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(mockPrintStream0);
      
      StringReader stringReader2 = new StringReader("^=");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      boolean boolean0 = stringReader1.ready();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader2, 113, 103, 2328);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(116, token0.kind);
      assertEquals(113, token0.beginLine);
      assertEquals(103, token0.beginColumn);
      assertEquals(104, token0.endColumn);
      assertEquals(113, token0.endLine);
      assertEquals(113, javaCharStream2.getBeginLine());
      assertEquals(104, javaCharStream2.getColumn());
      assertEquals(103, javaCharStream2.getBeginColumn());
      assertEquals(113, javaCharStream2.getEndLine());
      assertEquals(113, javaCharStream2.getLine());
      assertEquals(104, javaCharStream2.getEndColumn());
      assertEquals("^=", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("^");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(107, token0.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("^", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(107, token0.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("^", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  /**
  //Test case number: 137
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"t\u0001rue\"");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("I>5>keF++~hOq");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 94, 4);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream((Reader) null, 119, 93, 32);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(94, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(4, token0.beginColumn);
      assertEquals(94, token0.beginLine);
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals("I", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(94, token1.beginLine);
      assertEquals(94, token1.endLine);
      assertEquals(124, token1.kind);
      assertEquals(5, token1.endColumn);
      assertEquals(5, token1.beginColumn);
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(">", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(94, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(4, token0.beginColumn);
      assertEquals(94, token0.beginLine);
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("I", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      StringReader stringReader0 = new StringReader("class");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 41, 68);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('c', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("lass", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  /**
  //Test case number: 139
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+Y");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1778), (-1778));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 83, 83);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(101, token0.kind);
      assertEquals(83, token0.beginColumn);
      assertEquals(83, token0.endColumn);
      assertEquals(83, token0.endLine);
      assertEquals(83, token0.beginLine);
      assertEquals(83, javaCharStream1.getColumn());
      assertEquals(83, javaCharStream1.getEndColumn());
      assertEquals(83, javaCharStream1.getLine());
      assertEquals(83, javaCharStream1.getBeginColumn());
      assertEquals(83, javaCharStream1.getEndLine());
      assertEquals(83, javaCharStream1.getBeginLine());
      assertEquals("+", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'd';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = 'd';
      charArray0[7] = 'd';
      charArray0[8] = 'd';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'d', 'i', 'i', 'd', 'i', 'i', 'd', 'd', 'd'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(83, token1.endLine);
      assertEquals(83, token1.beginLine);
      assertEquals(84, token1.beginColumn);
      assertEquals(84, token1.endColumn);
      assertEquals(74, token1.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals("Y", token1.toString());
      assertEquals(83, javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getBeginColumn());
      assertEquals(84, javaCharStream1.getColumn());
      assertEquals(83, javaCharStream1.getEndLine());
      assertEquals(83, javaCharStream1.getBeginLine());
      assertEquals(84, javaCharStream1.getEndColumn());
      assertNotSame(token1, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(83, javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getBeginColumn());
      assertEquals(84, javaCharStream1.getColumn());
      assertEquals(83, javaCharStream1.getEndLine());
      assertEquals(83, javaCharStream1.getBeginLine());
      assertEquals(84, javaCharStream1.getEndColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, token2.kind);
      assertEquals(83, token2.beginLine);
      assertEquals(84, token2.endColumn);
      assertEquals(83, token2.endLine);
      assertEquals(84, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals("", token2.toString());
      assertEquals(83, javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getBeginColumn());
      assertEquals(84, javaCharStream1.getColumn());
      assertEquals(83, javaCharStream1.getEndLine());
      assertEquals(83, javaCharStream1.getBeginLine());
      assertEquals(84, javaCharStream1.getEndColumn());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(83, javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getBeginColumn());
      assertEquals(84, javaCharStream1.getColumn());
      assertEquals(83, javaCharStream1.getEndLine());
      assertEquals(83, javaCharStream1.getBeginLine());
      assertEquals(84, javaCharStream1.getEndColumn());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(84, token3.endColumn);
      assertEquals(84, token3.beginColumn);
      assertEquals(83, token3.endLine);
      assertEquals(0, token3.kind);
      assertEquals(83, token3.beginLine);
      assertEquals(83, javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getBeginColumn());
      assertEquals(84, javaCharStream1.getColumn());
      assertEquals(83, javaCharStream1.getEndLine());
      assertEquals(83, javaCharStream1.getBeginLine());
      assertEquals(84, javaCharStream1.getEndColumn());
      assertEquals("", token3.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(0, token4.kind);
      assertEquals(83, token4.beginLine);
      assertEquals(84, token4.beginColumn);
      assertEquals(84, token4.endColumn);
      assertEquals(83, token4.endLine);
      assertEquals(83, javaCharStream1.getLine());
      assertEquals(84, javaCharStream1.getBeginColumn());
      assertEquals(84, javaCharStream1.getColumn());
      assertEquals(83, javaCharStream1.getEndLine());
      assertEquals(83, javaCharStream1.getBeginLine());
      assertEquals(84, javaCharStream1.getEndColumn());
      assertEquals("", token4.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertNotNull(token4);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"true\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader1 = new StringReader("K5Mb^m8vQ?");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("K5Mb^m8vQ?");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-1703));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      StringReader stringReader3 = new StringReader("^^g0Ah8U~K<0}.H`g");
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertNotNull(stringReader3);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader3, 80, (-1), 42);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaCharStream2);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(107, token0.kind);
      assertEquals((-1), token0.endColumn);
      assertEquals(80, token0.endLine);
      assertEquals(80, token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), javaCharStream2.getColumn());
      assertEquals(80, javaCharStream2.getBeginLine());
      assertEquals(80, javaCharStream2.getEndLine());
      assertEquals(80, javaCharStream2.getLine());
      assertEquals((-1), javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getBeginColumn());
      assertEquals("^", token0.toString());
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals((-1), javaCharStream2.getColumn());
      assertEquals(80, javaCharStream2.getBeginLine());
      assertEquals(80, javaCharStream2.getEndLine());
      assertEquals(80, javaCharStream2.getLine());
      assertEquals((-1), javaCharStream2.getEndColumn());
      assertEquals((-1), javaCharStream2.getBeginColumn());
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(0, token1.endColumn);
      assertEquals(107, token1.kind);
      assertEquals(80, token1.endLine);
      assertEquals(80, token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(80, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getColumn());
      assertEquals(80, javaCharStream2.getEndLine());
      assertEquals(80, javaCharStream2.getLine());
      assertEquals(0, javaCharStream2.getEndColumn());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals("^", token1.toString());
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"tgue\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      long long0 = stringReader0.skip(1L);
      assertEquals(1L, long0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1703), 94);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals("tgue", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions((Token) null);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
  }

  /**
  //Test case number: 142
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      StringReader stringReader0 = new StringReader("JPd^oX,,0n-u/X");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("JPd", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager0.SwitchTo(2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'p';
      charArray0[1] = 'Q';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'p', 'Q'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finarly");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("finarly", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(7, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("finarly", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)116;
      byteArray0[2] = (byte)39;
      byteArray0[3] = (byte)39;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)40;
      byteArray0[6] = (byte)39;
      byteArray0[8] = (byte)50;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 114, (-274));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(9, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals((-274), javaCharStream0.getColumn());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals((-274), javaCharStream0.getEndColumn());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals((-274), javaCharStream0.getBeginColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('\'', char0);
      
      StringBuffer stringBuffer0 = new StringBuffer(82);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals((-273), token0.endColumn);
      assertEquals((-273), token0.beginColumn);
      assertEquals(114, token0.beginLine);
      assertEquals(114, token0.endLine);
      assertEquals(74, token0.kind);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)39, (byte)116, (byte)39, (byte)39, (byte)39, (byte)40, (byte)39, (byte)0, (byte)50}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("t", token0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(114, javaCharStream0.getBeginLine());
      assertEquals((-273), javaCharStream0.getColumn());
      assertEquals(114, javaCharStream0.getLine());
      assertEquals((-273), javaCharStream0.getBeginColumn());
      assertEquals(114, javaCharStream0.getEndLine());
      assertEquals((-273), javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 114, column -271.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"co^ste");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("=w,<{V&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(87, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("=", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("w", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(84, token3.kind);
      assertEquals(3, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(",", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.1117772922101405
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c$;[I;");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("instanceof");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 75, (-2445));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.curChar = 'u';
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(75, token0.beginLine);
      assertEquals((-2436), token0.endColumn);
      assertEquals(75, token0.endLine);
      assertEquals((-2445), token0.beginColumn);
      assertEquals(39, token0.kind);
      assertEquals((-2436), javaCharStream0.getColumn());
      assertEquals((-2436), javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals((-2445), javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals("instanceof", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(75, token0.beginLine);
      assertEquals((-2436), token0.endColumn);
      assertEquals(75, token0.endLine);
      assertEquals((-2445), token0.beginColumn);
      assertEquals(39, token0.kind);
      assertEquals((-2436), javaCharStream0.getColumn());
      assertEquals((-2436), javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals((-2445), javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals("instanceof", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(75, token0.beginLine);
      assertEquals((-2436), token0.endColumn);
      assertEquals(75, token0.endLine);
      assertEquals((-2445), token0.beginColumn);
      assertEquals(39, token0.kind);
      assertEquals((-2436), javaCharStream0.getColumn());
      assertEquals((-2436), javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals((-2445), javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals("instanceof", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(75, token0.beginLine);
      assertEquals((-2436), token0.endColumn);
      assertEquals(75, token0.endLine);
      assertEquals((-2445), token0.beginColumn);
      assertEquals(39, token0.kind);
      assertEquals((-2436), javaCharStream0.getColumn());
      assertEquals((-2436), javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals((-2445), javaCharStream0.getBeginColumn());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals("instanceof", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("&JV ?r(!YNO;%8=Qpb");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("wRNJ,AX3m\"");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("wRNJ", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "g>?;I,]e\"");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)43;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)108, (byte)43}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)108, (byte)43}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, (byte)108, 81);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)108, (byte)43}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)108, (byte)43}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(81, token0.beginColumn);
      assertEquals(108, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(108, token0.endLine);
      assertEquals(81, token0.endColumn);
      assertArrayEquals(new byte[] {(byte)108, (byte)43}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals("l", token0.toString());
      assertNotNull(token0);
      
      StringReader stringReader0 = new StringReader("9ov");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)108, (byte)43}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(81, javaCharStream0.getColumn());
      assertEquals(81, javaCharStream0.getBeginColumn());
      assertEquals(81, javaCharStream0.getEndColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(108, token1.beginLine);
      assertEquals(108, token1.endLine);
      assertEquals(82, token1.beginColumn);
      assertEquals(101, token1.kind);
      assertEquals(82, token1.endColumn);
      assertArrayEquals(new byte[] {(byte)108, (byte)43}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(82, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(82, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(82, javaCharStream0.getEndColumn());
      assertEquals("+", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager1.MoreLexicalActions();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)108, (byte)43}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(82, javaCharStream0.getColumn());
      assertEquals(108, javaCharStream0.getEndLine());
      assertEquals(82, javaCharStream0.getBeginColumn());
      assertEquals(108, javaCharStream0.getLine());
      assertEquals(108, javaCharStream0.getBeginLine());
      assertEquals(82, javaCharStream0.getEndColumn());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }

  /**
  //Test case number: 149
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringReader stringReader0 = new StringReader("boolean");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("^EIW");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("^", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
  }

  /**
  //Test case number: 150
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringReader stringReader0 = new StringReader("++");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("++");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte) (-127), (byte)45}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, 16, 20);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte) (-127), (byte)45}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte) (-127), (byte)45}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte) (-127), (byte)45}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0, 1115, (-1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte) (-127), (byte)45}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream2);
      
      javaCharStream2.AdjustBuffSize();
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte) (-127), (byte)45}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      
      StringBuffer stringBuffer0 = new StringBuffer((byte)45);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(100, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte) (-127), (byte)45}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("--", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 3.  Encountered: \"\\ufffd\" (65533), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.8614889010516533
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("/");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("final");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 912, 912);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 912, (-1), 912);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      int int0 = stringReader2.read();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(102, int0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(912, token0.beginLine);
      assertEquals(912, token0.endLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(912, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(912, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(912, javaCharStream1.getBeginLine());
      assertEquals("inal", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(912, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(912, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(912, javaCharStream1.getBeginLine());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(912, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(912, token1.beginLine);
      assertEquals(912, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(912, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(912, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte) (-68);
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(96, token0.kind);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("!=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(96, token0.kind);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("!=", token0.toString());
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.8772645976785047
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"const\"");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringReader stringReader0 = new StringReader("\"const\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\"const\"");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char char0 = javaCharStream0.readChar();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals('\"', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.defaultLexState = 0;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(22, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("const", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(22, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("const", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(22, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(6, token0.endColumn);
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("const", token0.toString());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=rqQ,>x4");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("rqQ", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("rqQ", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("rqQ", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(87, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("=", token0.toString());
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
  }

  /**
  //Test case number: 155
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/*8,ffh6F");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      boolean boolean1 = stringReader1.ready();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('/', char0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      boolean boolean2 = stringReader0.ready();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Token token0 = new Token();
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNull(token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(103, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.1145974168559183
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      StringReader stringReader0 = new StringReader("0000");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("0000", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("0000", token0.toString());
  }

  /**
  //Test case number: 157
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&JV ?r(!YNO;%8=Qpb");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(105, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("&", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=2.081475936311959
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringReader stringReader0 = new StringReader("implegents");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 790, 790);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(790, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(799, token0.endColumn);
      assertEquals(790, token0.beginLine);
      assertEquals(790, token0.endLine);
      assertEquals(790, javaCharStream0.getLine());
      assertEquals(790, javaCharStream0.getBeginColumn());
      assertEquals(790, javaCharStream0.getEndLine());
      assertEquals(790, javaCharStream0.getBeginLine());
      assertEquals(799, javaCharStream0.getEndColumn());
      assertEquals(799, javaCharStream0.getColumn());
      assertEquals("implegents", token0.toString());
      assertNotNull(token0);
      
      Token token1 = Token.newToken(74);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(790, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(799, token0.endColumn);
      assertEquals(790, token0.beginLine);
      assertEquals(790, token0.endLine);
      assertEquals(790, javaCharStream0.getLine());
      assertEquals(790, javaCharStream0.getBeginColumn());
      assertEquals(790, javaCharStream0.getEndLine());
      assertEquals(790, javaCharStream0.getBeginLine());
      assertEquals(799, javaCharStream0.getEndColumn());
      assertEquals(799, javaCharStream0.getColumn());
      assertEquals("implegents", token0.toString());
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(790, javaCharStream0.getLine());
      assertEquals(790, javaCharStream0.getBeginColumn());
      assertEquals(790, javaCharStream0.getEndLine());
      assertEquals(790, javaCharStream0.getBeginLine());
      assertEquals(799, javaCharStream0.getEndColumn());
      assertEquals(799, javaCharStream0.getColumn());
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringReader stringReader0 = new StringReader("impents");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 790, 790);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(790, token0.endLine);
      assertEquals(790, token0.beginLine);
      assertEquals(790, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(796, token0.endColumn);
      assertEquals(790, javaCharStream0.getBeginLine());
      assertEquals(796, javaCharStream0.getEndColumn());
      assertEquals(790, javaCharStream0.getLine());
      assertEquals(790, javaCharStream0.getBeginColumn());
      assertEquals(790, javaCharStream0.getEndLine());
      assertEquals(796, javaCharStream0.getColumn());
      assertEquals("impents", token0.toString());
      assertNotNull(token0);
      
      Token token1 = Token.newToken(74);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(790, token0.endLine);
      assertEquals(790, token0.beginLine);
      assertEquals(790, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(796, token0.endColumn);
      assertEquals(790, javaCharStream0.getBeginLine());
      assertEquals(796, javaCharStream0.getEndColumn());
      assertEquals(790, javaCharStream0.getLine());
      assertEquals(790, javaCharStream0.getBeginColumn());
      assertEquals(790, javaCharStream0.getEndLine());
      assertEquals(796, javaCharStream0.getColumn());
      assertEquals("impents", token0.toString());
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
  }

  /**
  //Test case number: 160
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".%zg;L@'A/R|");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 21, 42);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(42, token1.beginColumn);
      assertEquals(42, token1.endColumn);
      assertEquals(85, token1.kind);
      assertEquals(21, token1.beginLine);
      assertEquals(21, token1.endLine);
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(".", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(42, token1.beginColumn);
      assertEquals(42, token1.endColumn);
      assertEquals(85, token1.kind);
      assertEquals(21, token1.beginLine);
      assertEquals(21, token1.endLine);
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertEquals(".", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = new Token();
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      token2.beginLine = 21;
      assertNull(token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(21, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertNull(token0.toString());
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endLine);
      assertEquals(21, token2.beginLine);
      assertEquals(0, token2.endColumn);
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(21, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getLine());
      assertEquals(42, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getEndLine());
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
  }

  /**
  //Test case number: 161
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fQ!rOU^o4QWU]Qnj8");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("fQ", token0.toString());
      assertNotNull(token0);
  }

  /**
  //Test case number: 162
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("v0l]");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      char char0 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals('v', char0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      char char1 = javaCharStream0.ReadByte();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(char1 == char0);
      assertEquals('0', char1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("l", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("l", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("l", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("]", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 163
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(">>>");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 51, 2141);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      char char0 = javaCharStream0.BeginToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('>', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(124, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(">>", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4095, javaCharStream0.bufpos);
      assertEquals(124, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(">>", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(124, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(">>", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(124, token2.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(">", token2.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(124, token2.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(">", token2.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 164
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*=");
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("*=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(112, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("*=", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = Token.newToken(137);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(2, token3.endColumn);
      assertEquals(2, token3.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("", token3.toString());
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertNotNull(token3);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(2, token4.beginColumn);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(2, token4.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("", token4.toString());
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertNotNull(token4);
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token4);
      assertNotSame(token2, token3);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token4));
      assertFalse(token2.equals((Object)token3));
      
      javaParserTokenManager0.SkipLexicalActions(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(2, token4.beginColumn);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(2, token4.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("", token4.toString());
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      
      javaParserTokenManager0.SkipLexicalActions(token4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(2, token4.beginColumn);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(2, token4.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("", token4.toString());
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
  }

  /**
  //Test case number: 165
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 46);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pushbackInputStream0, 58, 0, 58);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      StringReader stringReader0 = new StringReader("0K<jEf)K4@kS=<");
      assertNotNull(stringReader0);
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(58, token0.beginLine);
      assertEquals(58, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals("0K", token0.toString());
      assertNotNull(token0);
      
      javaParserTokenManager0.curChar = 'B';
      assertEquals(0, pipedInputStream0.available());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(58, token1.beginLine);
      assertEquals(58, token1.endLine);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(88);
      assertEquals(88, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(88, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(88, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(88, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      javaParserTokenManager0.curChar = 'B';
      assertEquals(0, pipedInputStream0.available());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndLine());
      
      int int0 = stringReader0.read(charBuffer0);
      assertEquals(88, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(88, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(88, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(88, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals((-1), int0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndLine());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(58, token0.beginLine);
      assertEquals(58, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals("0K", token0.toString());
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(58, token0.beginLine);
      assertEquals(58, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals("0K", token0.toString());
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(58, token1.beginLine);
      assertEquals(58, token1.endLine);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals("<", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(58, token2.beginLine);
      assertEquals(58, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals("jEf", token2.toString());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(58, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(58, javaCharStream0.getBeginLine());
      assertEquals(58, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  /**
  //Test case number: 166
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e?|.dB:Tk3=O]H");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("uQ");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader(" d`\fgM(_:Vh");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("d", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(token0);
  }

  /**
  //Test case number: 167
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StringReader stringReader0 = new StringReader("instanceof");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 75, (-2445));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.curChar = 'u';
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'u';
      charArray0[1] = 'u';
      charArray0[2] = 'u';
      charArray0[3] = 'u';
      charArray0[4] = 'u';
      int int0 = stringReader0.read(charArray0);
      assertArrayEquals(new char[] {'i', 'n', 's', 't', 'a'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, int0);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(75, token0.beginLine);
      assertEquals((-2441), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(75, token0.endLine);
      assertEquals((-2445), token0.beginColumn);
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals((-2441), javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals((-2441), javaCharStream0.getColumn());
      assertEquals((-2445), javaCharStream0.getBeginColumn());
      assertEquals("nceof", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(75, token1.beginLine);
      assertEquals(75, token1.endLine);
      assertEquals((-2441), token1.beginColumn);
      assertEquals((-2441), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals((-2441), javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals((-2441), javaCharStream0.getBeginColumn());
      assertEquals((-2441), javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(75, token2.endLine);
      assertEquals((-2441), token2.beginColumn);
      assertEquals(75, token2.beginLine);
      assertEquals((-2441), token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(75, javaCharStream0.getBeginLine());
      assertEquals(75, javaCharStream0.getEndLine());
      assertEquals((-2441), javaCharStream0.getEndColumn());
      assertEquals(75, javaCharStream0.getLine());
      assertEquals((-2441), javaCharStream0.getBeginColumn());
      assertEquals((-2441), javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertNotNull(token2);
  }

  /**
  //Test case number: 168
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/:\"rYl");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("v0l]");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("");
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotNull(stringReader2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)98;
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)46;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertArrayEquals(new byte[] {(byte)98, (byte)76, (byte)112, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)98, (byte)98);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)98, (byte)76, (byte)112, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)98, (byte)76, (byte)112, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.SkipLexicalActions((Token) null);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)98, (byte)76, (byte)112, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)98, (byte)76, (byte)112, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(98, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(98, token0.beginColumn);
      assertEquals(100, token0.endColumn);
      assertEquals(98, token0.endLine);
      assertArrayEquals(new byte[] {(byte)98, (byte)76, (byte)112, (byte)46}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(98, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(98, javaCharStream0.getBeginColumn());
      assertEquals(98, javaCharStream0.getLine());
      assertEquals(98, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals("bLp", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 15);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 15. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 169
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(743L);
      assertEquals(9L, long0);
      
      StringReader stringReader1 = new StringReader("9Eir*hy");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 53, 109);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(112, token0.endColumn);
      assertEquals(53, token0.beginLine);
      assertEquals(109, token0.beginColumn);
      assertEquals(53, token0.endLine);
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals("9Eir", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(112, token0.endColumn);
      assertEquals(53, token0.beginLine);
      assertEquals(109, token0.beginColumn);
      assertEquals(53, token0.endLine);
      assertEquals(112, javaCharStream0.getColumn());
      assertEquals(112, javaCharStream0.getEndColumn());
      assertEquals(53, javaCharStream0.getBeginLine());
      assertEquals(53, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getLine());
      assertEquals(109, javaCharStream0.getBeginColumn());
      assertEquals("9Eir", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 86);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 86. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 170
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StringReader stringReader0 = new StringReader("**");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)50;
      byteArray0[2] = (byte)50;
      byteArray0[3] = (byte)50;
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 40, (byte)50);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotNull(javaParserTokenManager0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(40, token0.beginLine);
      assertEquals(103, token0.kind);
      assertEquals(50, token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals("*", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(50, javaCharStream0.getColumn());
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertNotNull(javaParserTokenManager2);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(40, token1.beginLine);
      assertEquals(40, token1.endLine);
      assertEquals(103, token1.kind);
      assertEquals(51, token1.endColumn);
      assertEquals(51, token1.beginColumn);
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals("*", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(40, token0.beginLine);
      assertEquals(103, token0.kind);
      assertEquals(50, token0.endColumn);
      assertEquals(40, token0.endLine);
      assertEquals(50, token0.beginColumn);
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals("*", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token0, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token0.equals((Object)token1));
      
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(40, token1.beginLine);
      assertEquals(40, token1.endLine);
      assertEquals(103, token1.kind);
      assertEquals(51, token1.endColumn);
      assertEquals(51, token1.beginColumn);
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals("*", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(40, token2.beginLine);
      assertEquals(51, token2.beginColumn);
      assertEquals(40, token2.endLine);
      assertEquals(51, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(40, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getLine());
      assertEquals(40, javaCharStream0.getBeginLine());
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals("", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
  }

  /**
  //Test case number: 171
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%=");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(117, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("%=", token0.toString());
      assertNotNull(token0);
      
      Token token1 = Token.newToken(117);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 172
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StringReader stringReader0 = new StringReader("}impments");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("}impments");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = new Token();
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertNull(token0.toString());
      assertNotNull(token0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      assertNotNull(token_GTToken0);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(80, token1.kind);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("}", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(9, token2.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("impments", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNotNull(token2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertNull(token_GTToken0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(9, token3.beginColumn);
      assertEquals(9, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertNotNull(token3);
  }

  /**
  //Test case number: 173
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      StringReader stringReader0 = new StringReader("while");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      StringReader stringReader1 = new StringReader("while");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 4, 4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 800, 800, 4);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(4, token0.beginLine);
      assertEquals(4, token0.endLine);
      assertEquals(65, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(4, token0.beginColumn);
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("while", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(token0);
      
      javaParserTokenManager0.ReInit(javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(800, token1.endLine);
      assertEquals(800, token1.beginLine);
      assertEquals(799, token1.endColumn);
      assertEquals(799, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(4, token0.beginLine);
      assertEquals(4, token0.endLine);
      assertEquals(65, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(4, token0.beginColumn);
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("while", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token1));
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(4, token0.beginLine);
      assertEquals(4, token0.endLine);
      assertEquals(65, token0.kind);
      assertEquals(8, token0.endColumn);
      assertEquals(4, token0.beginColumn);
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals("while", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token1));
  }

  /**
  //Test case number: 174
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9f_FO6o%&");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("&");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      StringReader stringReader2 = new StringReader("fin<");
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotNull(stringReader2);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 912, 912);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 912, (-1), 912);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaParserTokenManager0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(912, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(912, token0.beginLine);
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(912, javaCharStream1.getEndLine());
      assertEquals(912, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(912, javaCharStream1.getLine());
      assertEquals("fin", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(token0);
      
      boolean boolean1 = stringReader2.ready();
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(912, javaCharStream1.getEndLine());
      assertEquals(912, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(912, javaCharStream1.getLine());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(912, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(88, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(912, token1.beginLine);
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(912, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(912, javaCharStream1.getBeginLine());
      assertEquals(912, javaCharStream1.getLine());
      assertEquals("<", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
  }

  /**
  //Test case number: 175
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      StringReader stringReader0 = new StringReader("\"int\"");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (byte)1, (byte)1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotNull(javaCharStream0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 41, 4, 2111);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertNotNull(javaCharStream1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertNotNull(javaParserTokenManager0);
      
      javaCharStream0.FillBuff();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      char char0 = javaCharStream0.readChar();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals('\"', char0);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.beginColumn);
      assertEquals(40, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(4, token0.endColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("int", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertNotNull(token0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "++");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 6.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  /**
  //Test case number: 176
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"I\"");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-3336L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1161), (-1161));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaCharStream0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotNull(javaParserTokenManager0);
      
      javaParserTokenManager0.jjmatchedPos = (-1161);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1159), token0.endColumn);
      assertEquals((-1161), token0.endLine);
      assertEquals((-1161), token0.beginColumn);
      assertEquals(73, token0.kind);
      assertEquals((-1161), token0.beginLine);
      assertEquals((-1161), javaCharStream0.getBeginColumn());
      assertEquals((-1159), javaCharStream0.getColumn());
      assertEquals((-1161), javaCharStream0.getEndLine());
      assertEquals((-1159), javaCharStream0.getEndColumn());
      assertEquals((-1161), javaCharStream0.getBeginLine());
      assertEquals((-1161), javaCharStream0.getLine());
      assertEquals("\"I\"", token0.toString());
      assertNotNull(token0);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-1161), javaCharStream0.getBeginColumn());
      assertEquals((-1159), javaCharStream0.getColumn());
      assertEquals((-1161), javaCharStream0.getEndLine());
      assertEquals((-1159), javaCharStream0.getEndColumn());
      assertEquals((-1161), javaCharStream0.getBeginLine());
      assertEquals((-1161), javaCharStream0.getLine());
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertNotNull(javaParserTokenManager1);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1159), token1.endColumn);
      assertEquals((-1161), token1.endLine);
      assertEquals(0, token1.kind);
      assertEquals((-1159), token1.beginColumn);
      assertEquals((-1161), token1.beginLine);
      assertEquals((-1159), javaCharStream0.getColumn());
      assertEquals((-1161), javaCharStream0.getEndLine());
      assertEquals((-1159), javaCharStream0.getEndColumn());
      assertEquals((-1159), javaCharStream0.getBeginColumn());
      assertEquals((-1161), javaCharStream0.getBeginLine());
      assertEquals((-1161), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertNotNull(token1);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1159), token0.endColumn);
      assertEquals((-1161), token0.endLine);
      assertEquals((-1161), token0.beginColumn);
      assertEquals(73, token0.kind);
      assertEquals((-1161), token0.beginLine);
      assertEquals((-1159), javaCharStream0.getColumn());
      assertEquals((-1161), javaCharStream0.getEndLine());
      assertEquals((-1159), javaCharStream0.getEndColumn());
      assertEquals((-1159), javaCharStream0.getBeginColumn());
      assertEquals((-1161), javaCharStream0.getBeginLine());
      assertEquals((-1161), javaCharStream0.getLine());
      assertEquals("\"I\"", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
  }
}
