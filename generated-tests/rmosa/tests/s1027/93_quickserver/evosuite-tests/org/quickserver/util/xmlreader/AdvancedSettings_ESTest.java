/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:13:04 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "}EW iB)uHH&-qMb";
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("qWJsk@&,fV,4");
      advancedSettings0.getQSObjectPoolMaker();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("qWJsk@&,fV,4");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qWJsk@&,fV,4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog(0);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize((-2346));
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientIdentifier("\t<use-direct-byte-buffer>");
      advancedSettings0.setClientSocketSendBufferSize((-670));
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("5RTOS`T3305{l7PfYp");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(991);
      advancedSettings0.setPerformancePreferencesBandwidth(1185);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(2174);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      assertEquals(991, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setBacklog(10);
      advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(10, advancedSettings0.getBacklog());
      
      advancedSettings0.setBacklog(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setCharset((String) null);
      int int0 = 0;
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      String string0 = "%D:Sz]}G[/c+J<Hrb";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("%D:Sz]}G[/c+J<Hrb");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // %D:Sz]}G[/c+J<Hrb
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1339));
      advancedSettings0.setMaxThreadsForNioWrite(769);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesLatency((-1339));
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.getBacklog();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(769);
      String string0 = "</use-direct-byte-buffer>\n";
      advancedSettings0.setClientSocketTrafficClass("</use-direct-byte-buffer>\n");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</use-direct-byte-buffer>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </use-direct-byte-buffer>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setByteBufferSize((-502));
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("bZ");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger((-502));
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("bZ", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setQSObjectPoolMaker("Z(wX+jQ2/G");
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setUseDirectByteBuffer(false);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth((-2673));
      advancedSettings0.setClientIdentifier("</debug-non-blocking-mode>\n");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setQSObjectPoolMaker("ZFLuWWa]`O");
      advancedSettings0.setQSObjectPoolMaker("Zrt z_Eub8rE[nFE*");
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals("</debug-non-blocking-mode>\n", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("wofr>C");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(787);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("<Uu3uOs2B8");
      advancedSettings0.getBacklog();
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("LPzO");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setMaxThreadsForNioWrite((-843));
      advancedSettings0.getBacklog();
      advancedSettings0.setMaxThreadsForNioWrite((-2205));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getCharset();
      assertEquals(787, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.toXML((String) null);
      advancedSettings0.toXML("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.toXML("%f2eL");
      advancedSettings0.setClientSocketReceiveBufferSize((-661));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(728);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getUseDirectByteBuffer();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals((-661), advancedSettings0.getClientSocketReceiveBufferSize());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-1645);
      advancedSettings0.setMaxThreadsForNioWrite((-1645));
      String string0 = "";
      advancedSettings0.setClientIdentifier("");
      String string1 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Xp\"C");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Xp\"C
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setQSObjectPoolMaker("(k_ud.A.zq=YFi(eA");
      advancedSettings0.setClientIdentifier("(k_ud.A.zq=YFi(eA");
      advancedSettings0.setUseDirectByteBuffer(false);
      int int0 = 0;
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("(k_ud.A.zq=YFi(eA");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // (k_ud.A.zq=YFi(eA
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = ".[-Mll#LON E";
      advancedSettings0.setByteBufferSize((-665));
      advancedSettings0.setSocketLinger((-665));
      advancedSettings0.setQSObjectPoolMaker(".[-Mll#LON E");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset(".[-Mll#LON E");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // .[-Mll#LON E
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-138);
      advancedSettings0.setClientSocketSendBufferSize((-138));
      advancedSettings0.setPerformancePreferencesConnectionTime((-138));
      advancedSettings0.setPerformancePreferencesLatency(1737);
      advancedSettings0.setBacklog((-138));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("9>c7Y");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 9>c7Y
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1836));
      advancedSettings0.setSocketLinger((-844));
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.toXML("wa~zwN(");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketSendBufferSize((-844));
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertEquals((-1836), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = (-1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getCharset();
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setQSObjectPoolMaker("ISO-8859-1");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.toXML("");
      advancedSettings0.setClientIdentifier("I");
      advancedSettings0.setQSObjectPoolMaker("S'8 }A[I7kSv");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1365));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1365));
      advancedSettings0.toXML("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getCharset();
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
  }
}
