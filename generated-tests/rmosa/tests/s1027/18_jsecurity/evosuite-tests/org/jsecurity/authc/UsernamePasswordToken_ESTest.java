/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:46:57 GMT 2018
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "RK]ZN5";
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("RK]ZN5", "RK]ZN5", false);
      char[] charArray0 = new char[1];
      usernamePasswordToken0.setRememberMe(false);
      charArray0[0] = 'P';
      usernamePasswordToken0.setPassword(charArray0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      usernamePasswordToken0.setRememberMe(false);
      byteArray0[1] = (byte)0;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [1, 0]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "!</}EW iB)u", (InetAddress) null);
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      usernamePasswordToken0.setPassword(charArray0);
      charArray0[1] = '{';
      charArray0[2] = '?';
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false", string0);
      
      charArray0[3] = 'p';
      usernamePasswordToken0.setInetAddress((InetAddress) null);
      char[] charArray1 = new char[4];
      charArray1[0] = 'W';
      charArray1[1] = 'p';
      charArray1[2] = 'p';
      charArray1[3] = 'W';
      usernamePasswordToken0.setPassword(charArray1);
      charArray0[4] = ']';
      charArray0[5] = 'e';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setInetAddress((InetAddress) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setPassword(charArray1);
      usernamePasswordToken0.getInetAddress();
      String string1 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      charArray0[1] = '4';
      charArray0[2] = 'k';
      charArray0[3] = 'e';
      charArray0[4] = 'h';
      charArray0[5] = '$';
      charArray0[6] = ')';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(")", charArray0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("1l/$?R->nD6B.y9Y", "1l/$?R->nD6B.y9Y", false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - 1l/$?R->nD6B.y9Y, rememberMe=false", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = ';';
      charArray0[2] = 'Y';
      charArray0[3] = 'i';
      charArray0[4] = '%';
      charArray0[5] = '';
      charArray0[6] = 'd';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Shu*6zSyjF_db1", charArray0, true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setUsername("Shu*6zSyjF_db1");
      usernamePasswordToken0.setRememberMe(false);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'p';
      charArray0[2] = 'c';
      charArray0[3] = 'E';
      charArray0[4] = 'B';
      charArray0[5] = 'p';
      charArray0[6] = ']';
      charArray0[7] = 'V';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false", string0);
      
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("OFkOq5{KtfO_1", "", false);
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getCredentials();
      byte[] byteArray0 = new byte[0];
      try { 
        MockInetAddress.getByAddress("", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: []
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
      
      usernamePasswordToken0.setUsername("(4)6><Hm8f=");
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("MC+b%>");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, inetAddress0);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setPassword((char[]) null);
      InetAddress inetAddress1 = usernamePasswordToken0.getInetAddress();
      InetAddress inetAddress2 = MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.setInetAddress(inetAddress2);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.getCredentials();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (/192.168.1.42)", string0);
      
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setInetAddress(inetAddress2);
      usernamePasswordToken0.setInetAddress(inetAddress1);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setInetAddress(inetAddress2);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'T';
      charArray0[1] = 'C';
      charArray0[2] = ';';
      charArray0[3] = 'Z';
      charArray0[4] = '\"';
      charArray0[5] = '5';
      charArray0[6] = '\"';
      charArray0[7] = 'L';
      charArray0[8] = 'K';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-70);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, charArray0, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (/186.203.0.0)", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = null;
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken", (char[]) null);
      usernamePasswordToken0.clear();
      String string0 = "bZ";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte) (-63);
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)23;
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-29, -63, -92, 0, 0, 23]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken", "W0wwa", false, inetAddress0);
      usernamePasswordToken0.setRememberMe(false);
      char[] charArray0 = usernamePasswordToken0.getPassword();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.setUsername((String) null);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (/127.0.0.1)", string0);
      
      usernamePasswordToken0.getInetAddress();
      InetAddress inetAddress1 = usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.setUsername("org.jsecurity.authc.UsernamePasswordToken");
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setInetAddress(inetAddress1);
      usernamePasswordToken0.setUsername("g\"RthBF`,gl3$-(0+:*");
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = '/';
      charArray0[2] = '\'';
      charArray0[3] = '@';
      charArray0[4] = 'J';
      charArray0[5] = 'D';
      charArray0[6] = '.';
      charArray0[7] = 'z';
      charArray0[8] = ']';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Gx+$)%Yz\";U/", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Vb,]l?D>\"\"7CVz%\"(#r", " &CEU?");
      usernamePasswordToken0.toString();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)41;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte) (-100);
      try { 
        MockInetAddress.getByAddress(", rememberMe=", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [9, 43, 0, 0, 41, 114, 1, -100]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }
}
