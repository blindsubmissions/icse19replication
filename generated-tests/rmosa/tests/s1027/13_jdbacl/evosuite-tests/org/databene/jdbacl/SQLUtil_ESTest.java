/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:08:35 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.rowio.RowOutputTextLog;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4904499103768102
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "}Z-'.\"";
      SQLUtil.isProcedureCall("}Z-'.\"");
      SQLUtil.normalize("}Z-'.\"", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName("org.hsqldb.lib.AsciiStringInputStream");
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9735584326028659
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      SQLUtil.normalize("/&?%j_\"E~!_!f0Ni", true);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/ & ? % j_ \"E~!_!f0Ni\"");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("/ & ? % j_ \"E~!_!f0Ni\"");
      assertNull(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "17t[=4";
      stringArray0[3] = "17t[=4";
      stringArray0[5] = "17t[=4";
      stringArray0[7] = "17t[=4";
      DBSchema dBSchema0 = new DBSchema("17t[=4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yY>g:6?jb(r!", dBSchema0);
      DBTable dBTable0 = dBSchema0.getTable("yY>g:6?jb(r!");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("17t[=4", false, dBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("");
      dBSchema0.getPackages();
      System.setCurrentTimeMillis(598L);
      System.setCurrentTimeMillis(319);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1578638108678707
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("K_+cq?3");
      String[] stringArray0 = new String[5];
      stringArray0[3] = "K_+cq?3";
      String string0 = SQLUtil.normalize("//", false);
      assertEquals("/ /", string0);
      
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "select", false, stringArray0);
      dBUniqueConstraint0.setName("Z&sq");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT Z&sq UNIQUE (, , , K_+cq?3, )", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = stringArray0[0];
      stringArray0[3] = stringArray0[2];
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[5] = null;
      stringArray0[8] = stringArray0[6];
      String string0 = SQLUtil.leftJoin((String) null, stringArray0, (String) null, stringArray0[2], stringArray0);
      assertEquals("left join null as null on null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null and null.null = null.null", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[2] = stringArray0[0];
      SQLUtil.renderColumnListWithTableName("execute}z-'.\"", stringArray0);
      SQLUtil.join("execute}z-'.\"", stringArray0[2], stringArray0, "execute}z-'.\"", stringArray0[1], stringArray0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = SQLUtil.normalize("%*!xS+", false);
      assertEquals("% * ! xS +", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("; = a = c *");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("; = a =", defaultDBTable0, (-3931), "update; = a = c * yxbr $");
      defaultDBColumn0.getForeignKeyConstraint();
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("The Kerberos service name to use when authenticating with GSSAPI.  This is equivalent to libpq's PGKRBSRVNAME environment variable.");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("; = a = c *", defaultDBTable0, (-3931), "The Kerberos service name to use when authenticating with GSSAPI.  This is equivalent to libpq's PGKRBSRVNAME environment variable.");
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("R6as!4~K");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(" ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      Integer integer0 = new Integer((-2671));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" ", defaultDBTable0, (DBDataType) null, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "";
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[1] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5924028775138872
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SQLUtil.isQuery("G/+(w,<+A");
      String string0 = SQLUtil.normalize("G/+(w,<+A", false);
      assertEquals("G / + (w, < + A", string0);
      
      StringReader stringReader0 = new StringReader("G/+(w,<+A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = SQLUtil.isQuery("G/+(w,<+A");
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G / + (w, < + A");
      stringReader0.read();
      streamTokenizer0.sval = "JlF$^'83";
      streamTokenizer0.wordChars(5, 5);
      stringReader0.skip(5);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = 334.35488486528993;
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      SQLUtil.renderNumber(streamTokenizer0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("334.35488486528993", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jR[/XcaV{xV|mf,D");
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append(1.0);
      SQLUtil.addOptionalCondition("jR[/XcaV{xV|mf,D", stringBuilder0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Random.setNextRandom(31);
      Random.setNextRandom(31);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("%*!xS+", true);
      assertEquals("% * ! xS +", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.innerJoin("8XQ-+p4X", stringArray0, "uIu1:KI,9~z7", "uIu1:KI,9~z7", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("5|Z3?2qK?jN1");
      SQLUtil.ownerDotComponent(dBCatalog0);
      SQLUtil.normalize("5|Z3?2qK?jN1", true);
      DBSchema dBSchema0 = new DBSchema("8XQ-+p4X", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SJIS", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("5 | Z3 ? 2qK ? jN1", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      dBSchema0.getPackages();
      SQLUtil.normalize("5|Z3?2qK?jN1", true);
      MockFile mockFile0 = new MockFile("5 | Z3 ? 2qK ? jN1", "u7z+\"&8g\"kw,");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("VpaGpY#n?% 53", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("VpaGpY#n?% 53", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("VpaGpY#n?% 53", defaultDBTable0, 9, "08S01");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      int int0 = 51;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(51, 'X');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[1] = "execute}z-'.\"";
      stringArray0[0] = "execute}z-'.\"";
      SQLUtil.renderColumnListWithTableName("execute}z-'.\"", stringArray0);
      SQLUtil.join("", stringArray0[2], stringArray0, "execute}z-'.\"", "execute}z-'.\"", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute}z-'.\" as execute}z-'.\" on null.execute}z-'.\" = execute}z-'.\".execute}z-'.\" and null.execute}z-'.\" = execute}z-'.\".execute}z-'.\" and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null and null.null = execute}z-'.\".null", (DBSchema) null);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("J|Ci`rGXDC0f(|Kc");
      tableContainer0.getTable("0I/");
      DBDataType.getInstance((-663), "0I/");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("J|Ci`rGXDC0f(|Kc", (DBTable) null, (-663), "0I/");
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = new Integer((-663));
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", (DBTable) null, (-2021963838), "");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      Random.setNextRandom((-663));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      StringBuilder stringBuilder0 = new StringBuilder("");
      stringBuilder0.append("");
      DBDataType.getInstance(545, "TABLETYPES");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "create materialized view";
      stringArray0[2] = "create materialized view";
      stringArray0[3] = "create materialized view";
      stringArray0[4] = " NULL";
      stringArray0[5] = "e<e+Qm";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "e<e+Qm", true, stringArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("truncatenot implemented: prepare must be issued using the same connection that started the transaction");
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint e<e+Qm", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[5] = "17t[=4";
      stringArray0[3] = "17t[=4";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.2161114669123396
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.normalize("G/+(w,<+A", true);
      DBSchema dBSchema0 = new DBSchema("G/+(w,<+A", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CONSTRAINT ", dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "CONSTRAINT ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "A!PQ6p}d", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("h7Qz5wx=H8^lZA", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h7Qz5wx=H8^lZA");
      Locale locale0 = Locale.KOREA;
      locale0.getUnicodeLocaleKeys();
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "CONSTRAINT ", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      assertSame(defaultDBTable0, dBTable0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2722755014019391
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("/&?%j_\"E~!_!f0Ni", true);
      assertEquals("/ & ? % j_ \"E~!_!f0Ni\"", string0);
      
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "/&?%j_\"E~!_!f0Ni";
      stringArray0[1] = "5@OwzJ[-4nT05 ,6=";
      stringArray0[2] = null;
      stringArray0[3] = "setLoginTimeout";
      stringArray0[4] = "=oN05pL|'u";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ";z($Ua(60", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ;z($Ua(60 PRIMARY KEY (/&?%j_\"E~!_!f0Ni, 5@OwzJ[-4nT05 ,6=, , setLoginTimeout, =oN05pL|'u)", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Character character0 = Character.valueOf('W');
      SQLUtil.renderValue(character0);
      DBSchema dBSchema0 = new DBSchema("'W'");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'W'", dBSchema0);
      Character.isIdeographic((byte)47);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(336789563);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 336789563, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jR[/XcaxVemf,D");
      StringBuilder stringBuilder0 = new StringBuilder("alter tabledisconnecting #");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("$dvkV!LhocN,", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(154, 154);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 154
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("K_+cq?3");
      String[] stringArray0 = new String[5];
      stringArray0[3] = "K_+cq?3";
      SQLUtil.normalize("//", false);
      boolean boolean0 = false;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "K_+cq?3", false, stringArray0);
      dBUniqueConstraint0.setName("Z&sq");
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream();
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream1 = new DynamicByteArrayOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream1, false);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      Locale locale0 = Locale.GERMAN;
      mockPrintWriter0.printf(locale0, "PRIMARY KEY ", (Object[]) stringArray0);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) "K_+cq?3");
      // Undeclared exception!
      try { 
        mockPrintWriter0.append((CharSequence) stringBuilder2, 91, 335544778);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 335544778
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "\u0001Mx");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Not implemented: Prepare must be issued using the same connection that started the transaction");
      String[] stringArray0 = new String[5];
      String string0 = SQLUtil.normalize("O}-MOHEG{Oh>amgA<", false);
      assertEquals("O } - MOHEG { Oh > amg  A <", string0);
      
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String[] stringArray1 = new String[9];
      stringArray1[0] = "Not implemented: Prepare must be issued using the same connection that started the transaction";
      stringArray1[1] = "; = a ";
      stringArray1[2] = "O } - MOHEG { Oh > amg  A <";
      stringArray1[3] = "; = a ";
      stringArray1[4] = "Not implemented: Prepare must be issued using the same connection that started the transaction";
      stringArray1[5] = "O } - MOHEG { Oh > amg  A <";
      stringArray1[6] = "; = a ";
      stringArray1[7] = "; = a ";
      stringArray1[8] = "O}-MOHEG{Oh>amgA<";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "; = a ", true, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (Not implemented: Prepare must be issued using the same connection that started the transaction, ; = a , O } - MOHEG { Oh > amg  A <, ; = a , Not implemented: Prepare must be issued using the same connection that started the transaction, O } - MOHEG { Oh > amg  A <, ; = a , ; = a , O}-MOHEG{Oh>amgA<)", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = ";=a=c*yxbr$";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = 71;
      DBDataType dBDataType0 = DBDataType.getInstance(71, "3!$`");
      String string1 = "\"zvt<e-<";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string2 = "CLOB";
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte) (-78);
      byteArray0[5] = (byte) (-109);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.renderValue(defaultDBColumn0);
      DBCatalog dBCatalog0 = new DBCatalog();
      // Undeclared exception!
      try { 
        dBCatalog0.getTable(";=a=c*yxbr$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ';=a=c*yxbr$'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-503), "4kd/");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create materialized viewalter taledisconnecting #", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("create materialized viewalter taledisconnecting # 4KD/(2,2) NULL", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.apache.derby.impl.store.raw.xact.TransactionTable$UpdateTransactionCounter", false);
      assertEquals("org.apache.derby.impl.store.raw.xact.TransactionTable $ UpdateTransactionCounter", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[7] = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      StringBuilder stringBuilder2 = stringBuilder1.append('8');
      StringBuilder stringBuilder3 = stringBuilder2.append((-2123.419603351821));
      char[] charArray0 = new char[14];
      charArray0[6] = '8';
      charArray0[1] = '\u0000';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[6] = '8';
      StringBuilder stringBuilder4 = stringBuilder3.insert(0, charArray0);
      SQLUtil.addOptionalCondition("", stringBuilder4);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", false, stringArray1);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder3);
      assertEquals("\u0000\u0000888\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0000null8-2123.419603351821 or CONSTRAINT  ", stringBuilder3.toString());
      assertEquals("\u0000\u0000888\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0000null8-2123.419603351821 or CONSTRAINT  ", stringBuilder0.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[3] = stringArray0[0];
      DBSchema dBSchema0 = new DBSchema(stringArray0[0]);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yY>g:6?jb(r!", dBSchema0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[7], false, defaultDBTable1, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("");
      dBSchema0.getPackages();
      System.setCurrentTimeMillis(598L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("registerOutParameter(Strng,nt,it)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Strng\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'wV\"Q`=&TOF3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, (-166), "M0(is7Um!3De8~]LeR6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: M0(is7Um!3De8~]LeR6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 1865, "");
      String string0 = SQLUtil.ownerDotComponent(defaultDBColumn0);
      assertEquals(".", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("Wt b6GPvV");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter sessionu7z+\"&8g\"kw,xa1", dBSchema0);
      DBTable dBTable0 = dBSchema0.getTable("alter sessionu7z+\"&8g\"kw,xa1");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter sessionu7z+\"&8g\"kw,xa1", true, dBTable0, (String[]) null, dBTable0, (String[]) null);
      FKChangeRule fKChangeRule0 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("CONSTRAINT \"alter sessionu7z+\"&8g\"kw,xa1\" ");
      dBSchema0.getPackages();
      System.setCurrentTimeMillis((-3617L));
      System.setCurrentTimeMillis((-1643L));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("jR[/XcaxVemf,D");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("jR[/XcaxVemf,D", defaultDBTable0, (DBDataType) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("$dvkV!LhocN,", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(173, 173);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 173
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.mutatesStructure("");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      StringBuilder stringBuilder2 = stringBuilder1.append('8');
      StringBuilder stringBuilder3 = stringBuilder2.append((-2123.419603351821));
      char[] charArray0 = new char[9];
      charArray0[0] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = '8';
      charArray0[7] = '8';
      StringBuilder stringBuilder4 = stringBuilder0.delete(0, '8');
      SQLUtil.addOptionalCondition(stringArray0[4], stringBuilder4);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray1 = new String[2];
      stringArray1[1] = "]";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, stringArray0[4], false, stringArray1);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder3);
      assertEquals("null", stringBuilder3.toString());
      assertEquals("null", stringBuilder0.toString());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("H-*qsBts`(XGGx)}nD", false);
      assertEquals("H - * qsBts ` (XGGx) } nD", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[19];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}4zKZ'U0B");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("}4zKZ'U0B", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      Random.setNextRandom(57);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SQLUtil.isProcedureCall("execute6m,+zte61s*em1s?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setName("execute6m,+zte61s*em1s?");
      assertEquals("execute6m,+zte61s*em1s?", defaultDBTable0.getName());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("TABLETYPES", dBSchema0);
      DBDataType.getInstance((-457644331), "");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer((-1719));
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) integer0;
      objectArray0[3] = (Object) integer0;
      objectArray0[4] = (Object) dBCatalog0;
      objectArray0[5] = (Object) dBCatalog0;
      PrintWriter printWriter0 = mockPrintWriter0.format("execschema l", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = SQLUtil.normalize("}Z-'.\"", true);
      assertEquals("} Z - '.\"'", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-40);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String string0 = SQLUtil.normalize("G/+(w,<+A", false);
      assertEquals("G / + (w, < + A", string0);
      
      StringReader stringReader0 = new StringReader("G/+(w,<+A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[2] = null;
      stringArray0[3] = "create materialized view";
      stringArray0[4] = " NULL";
      stringArray0[5] = "e<e+Qm";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      DBSchema dBSchema0 = new DBSchema(",w`74=(:=f1mCb}r");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("truncatenot implemented: prepare must be issued using the same connection that started the transaction");
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "alter tabledisconnecting #";
      SQLUtil.mutatesDataOrStructure("alter tabledisconnecting #");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(" AND ", compositeDBObject0);
      tableContainer0.getTable("Hostname of the PostgreSQL server; may be specified directly in the JDBC URL.");
      boolean boolean0 = true;
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("truncatef1y8");
      System.setCurrentTimeMillis((-5403L));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6201612999504427
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("*:Ms @{`oq", true);
      assertEquals("* : Ms @ { ` oq", string0);
      
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("5@OwzJ[-4nT05 ,6=", compositeDBObject0);
      tableContainer0.getComponents();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      ArrayList<VersionNumberComponent> arrayList0 = new ArrayList<VersionNumberComponent>();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoalter taledisconnecting #");
      assertFalse(boolean0);
      
      SQLUtil.removeComments("SR}:\"?-44FBO3&!U*");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string1 = SQLUtil.normalize("pO", false);
      assertEquals("pO", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.isDDL("create materialized viewu7z+\"&8g\"kw,xa1");
      SQLUtil.isQuery("select");
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.mutatesDataOrStructure("K");
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      StringBuilder stringBuilder1 = new StringBuilder();
      SQLUtil.mutatesDataOrStructure("K");
      SQLUtil.isQuery("select into");
      System.setCurrentTimeMillis((-1719));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("call");
      assertNull(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DBDataType dBDataType0 = DBDataType.getInstance(24, "Not implemented: Prepare must be issued using the same connection that started the transaction");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ALTER TABLE ", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setDefaultValue("*v5RUp/>s 6#|");
      SQLUtil.normalize("*Ucz$-I=v7", false);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(71, "K_+cq?3");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("K_+cq?3", defaultDBTable0, dBDataType0, (Integer) null, (Integer) null);
      defaultDBColumn0.setType(dBDataType0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "alte session");
      System.setCurrentTimeMillis((-1L));
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      DBDataType.getInstance((int) (byte)61, "alte session");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBDataType dBDataType1 = DBDataType.getInstance(71, "alte session");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("K_+cq?3", defaultDBTable0, dBDataType1, (Integer) null, (Integer) null);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("K_+cq?3, K_+cq?3", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("-Eaw8%P:^1+GE r:Kr?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-Eaw8%P:^1+GE r:Kr?", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec1, mockPrintWriter0);
      String string0 = SQLUtil.normalize("-Eaw8%P:^1+GE r:Kr?", true);
      assertEquals("- Eaw8 % P : ^ 1 + GE r : Kr ?", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = SQLUtil.normalize("nA!Yk#-n", true);
      assertEquals("nA ! Yk # - n", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBSchema dBSchema0 = new DBSchema((String) null, (DBCatalog) null);
      dBSchema0.getTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance("NCLOB");
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("NCLOB", (DBTable) null, dBDataType0, integer2);
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.renderColumn(defaultDBColumn0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("`N-Fh}P0Ltm)?*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '`N-Fh}P0Ltm)?*' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(24, "Not implemented: Prepare must be issued using the same connection that started the transaction");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("buffer.length ", defaultDBTable0, 37, "VARBINARY");
      defaultDBTable0.addColumn(defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ALTER TABLE ", defaultDBTable0, dBDataType0);
      SQLUtil.normalize("*Ucz$-I=v7", false);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("Not implemented: Prepare must be issued using the same connection that started the transaction");
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputTextLog rowOutputTextLog0 = new RowOutputTextLog();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(rowOutputTextLog0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStreamWriter0);
      PrintWriter printWriter0 = mockPrintWriter0.format("@", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.073542846408523
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("n4");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("n4", false, "n4", "n4");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("u7z+\"&8g\"kw,", false, defaultDBTable0, "exec");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK exec", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLUtil.removeComments("aJlce");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("aJlce");
      DBDataType dBDataType0 = DBDataType.getInstance(39, "aJlce");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("aJlce", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("aJlce AJLCE(0) NULL", string0);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("aJlce AJLCE(0) NULL");
      assertEquals(2, objectArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter taledisconnecting");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter taledisconnecting";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter taledisconnecting", true, stringArray0);
      defaultDBTable0.removeUniqueConstraint(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec");
      DBDataType dBDataType0 = DBDataType.getInstance((-1626706849), "exec");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("exec EXEC(3) NOT NULL", string0);
      
      String string1 = SQLUtil.normalize("exec", true);
      assertEquals("exec", string1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = SQLUtil.normalize("/&?%j_\"E~!_.f0Ni", false);
      TableContainer tableContainer0 = new TableContainer("/ & ? % j_ \"E~!_.f0Ni\"");
      SQLUtil.normalize("/&?%j_\"E~!_.f0Ni", false);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(383, "VARCHAR_CASESENSITIVE");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.remainderUnsigned(383, 383);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/ & ? % j_ \"E~!_.f0Ni\"", defaultDBTable0, dBDataType0, integer1, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.removeComments("updatealter taledisconnecting #");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "refereeTable", false, "/ & ? % j_ \"E~!_.f0Ni\"");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter session");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4349442022582592
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[19];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.normalize("G/+(w,<+A", false);
      StringReader stringReader0 = new StringReader("G/+(w,<+A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = 'l';
      charArray0[1] = 'g';
      stringReader0.mark(153);
      charArray0[2] = 'j';
      charArray0[3] = 'q';
      charArray0[4] = 'K';
      stringReader0.read(charArray0);
      streamTokenizer0.nval = 1567.350941733627;
      streamTokenizer0.pushBack();
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.removeComments("G/+(w,<+A");
      SQLUtil.normalize("iR!WRFL+", true);
      System.setCurrentTimeMillis((-4));
      Random.setNextRandom((-2));
      System.setCurrentTimeMillis((-533L));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringReader stringReader0 = new StringReader("99?Ud)L#|O5,(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("99", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SQLUtil.removeComments("/&?%j_\"E~!_!f0Ni");
      String string0 = SQLUtil.removeComments("/* iN$e8sorted */");
      assertEquals("", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G/+(w,<+A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer0.nval = (-1640.73254188712);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1640.73254188712", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = "u7z+\"&8G\"KW,Xa1";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }
}
