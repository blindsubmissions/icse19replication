/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 17:51:56 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "{e=/ \\L^GcJ#TIC4o~";
      JSONObject.quote("{e=/ L^GcJ#TIC4o~");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"{e=/ \\L^GcJ#TIC4o~\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"{e=/ \\L^GcJ#TIC4o~\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject.quote("[\"ISBC~%C1xn BiS");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = JSONObject.quote("Z\n");
      Double double0 = new Double(1078.29311138);
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = JSONObject.quote("Z\n");
      Float float0 = new Float(0.0F);
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject.valueToString(linkedList0, (-2565), (-2565));
      String string0 = JSONObject.valueToString(linkedList0, 3, (-2565));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = JSONObject.quote("{e=/ L^GcJ#TIC4o~");
      assertEquals("\"{e=/ L^GcJ#TIC4o~\"", string0);
      
      String string1 = JSONObject.valueToString("\"{e=/ \\L^GcJ#TIC4o~\"", (-1903), (-886));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, 77);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.551888093566232
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JSONObject.quote(",]n1jGef");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("\",]n1jGef\"");
      jSONObject0.optJSONObject("ishashCode");
      Double double0 = new Double(2048.0743855);
      String string1 = JSONObject.valueToString(double0, 13, 13);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",\n";
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = JSONObject.quote("Z\n");
      Integer integer0 = new Integer((-1));
      String string1 = JSONObject.valueToString(integer0, (-6254807), (-1));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject.quote("[\"ISBC~%C1xn BiS");
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"[\"ISB\\C~%C1xn BiS\"";
      stringArray0[1] = "[\"ISBC~%C1xn BiS";
      stringArray0[2] = "\"[\"ISB\\C~%C1xn BiS\"";
      stringArray0[3] = "\"[\"ISB\\C~%C1xn BiS\"";
      stringArray0[4] = "[\"ISBC~%C1xn BiS";
      stringArray0[5] = "\"[\"ISB\\C~%C1xn BiS\"";
      stringArray0[6] = "[\"ISBC~%C1xn BiS";
      stringArray0[7] = "\"[\"ISB\\C~%C1xn BiS\"";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JSONObject.quote("{e=/ L^GcJ#TIC4o~");
      assertEquals("\"{e=/ L^GcJ#TIC4o~\"", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "isintBitsToFloat";
      JSONObject jSONObject0 = new JSONObject("{e=/ L^GcJ#TIC4o~", stringArray0);
      String string1 = jSONObject0.toString(32, (-771));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = stringArray0[2];
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull(stringArray0[0]);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = JSONObject.quote("{e=/ L^GcJ#TIC4o~");
      assertEquals("\"{e=/ L^GcJ#TIC4o~\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
      
      String string2 = JSONObject.valueToString("null");
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.137808159182962
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("e%`");
      try { 
        jSONObject0.getJSONObject("7CVz%\"(#rE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7CVz%\\\"(#rE\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[2] = "";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[6] = stringArray0[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.has(stringArray0[8]);
      jSONObject0.optJSONArray("@pk>%eG");
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Double double0 = new Double((-2089.0));
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (byte) (-29), (byte) (-29));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = JSONObject.quote("jZ\"z)z@X$5");
      assertEquals("\"jZ\\\"z)z@X$5\"", string0);
      
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString(1, 1);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
      
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(8);
      String string1 = jSONObject0.toString(103, (-2924));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2403514954838357
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject.quote("{e=/ L^GcJ#TIC4o~");
      JSONObject jSONObject0 = new JSONObject((Object) "{e=/ L^GcJ#TIC4o~");
      jSONObject0.putOpt("{e=/ L^GcJ#TIC4o~", "\"{e=/ \\L^GcJ#TIC4o~\"");
      assertEquals(4, jSONObject0.length());
      
      String string0 = JSONObject.quote("IET:1d4l\"z3yFVb>");
      assertEquals("\"IET:1d4l\\\"z3yFVb>\"", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3689223607402194
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.toString(8, 8);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.558255126072715
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = JSONObject.quote("{e=/ L^GcJ#TIC4o~");
      assertEquals("\"{e=/ L^GcJ#TIC4o~\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "{e=/ L^GcJ#TIC4o~");
      boolean boolean0 = jSONObject0.optBoolean("\"{e=/ \\L^GcJ#TIC4o~\"");
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
      
      String string1 = JSONObject.quote("-2131.0");
      assertEquals("\"-2131.0\"", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 178L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject.quote("Bad value from toJSONString: ");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Bad value from toJSONString: ";
      stringArray0[1] = "\"Bad value from toJSONString: \"";
      stringArray0[2] = "\"Bad value from toJSONString: \"";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-42));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(8, true);
      JSONObject.valueToString(jSONArray0);
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString("wheel.json.JSONArray@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject.quote("{e=/ L^GcJ#TIC4o~");
      Float float0 = new Float(3326.77604325);
      String string0 = JSONObject.valueToString(float0);
      Double double0 = new Double(3326.77604325);
      String string1 = JSONObject.valueToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "gettoString";
      JSONObject.quote("gettoString");
      HashMap<JSONArray, Object> hashMap0 = new HashMap<JSONArray, Object>();
      Integer integer0 = new Integer((-3592));
      hashMap0.put((JSONArray) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-3592), (-3592));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      Integer integer0 = new Integer((-9));
      hashMap0.put((Object) null, integer0);
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7369191732074523
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject.quote(",]n1jGef");
      JSONObject jSONObject0 = new JSONObject((Object) "\",]n1jGef\"");
      jSONObject0.toString();
      String string0 = JSONObject.valueToString(jSONObject0);
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject.quote("~\n");
      JSONObject jSONObject0 = new JSONObject((Object) "~\n");
      Boolean boolean0 = new Boolean("\"~\n\"");
      Boolean.logicalXor(true, false);
      jSONObject0.append("5", boolean0);
      try { 
        jSONObject0.getBoolean("~\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"~\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2852930241200995
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("] not found.", "isN");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("5");
      assertEquals("", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("JSONArray initial value should be a string or collection or array.", "JSONArray initial value should be a string or collection or array.");
      assertEquals("JSONArray initial value should be a string or collection or array.", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.getNames(object0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6200597967800971
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Float float0 = new Float((-125.92274F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.getNames(jSONObject0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte byte0 = (byte)93;
      byte byte1 = (byte) (-72);
      Byte byte2 = new Byte((byte) (-72));
      Byte.toUnsignedLong((byte)16);
      byte byte3 = (byte)60;
      Byte.toUnsignedLong((byte)60);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      jSONObject0.putOpt((String) null, byte2);
      Object object0 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = JSONObject.quote("mO&I7n38\"?IR");
      assertEquals("\"mO&I7n38\\\"?IR\"", string0);
      
      JSONObject.testValidity("mO&I7n38\"?IR");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0, (-8323580), (-8323580));
      assertEquals("{}", string1);
      
      String string2 = JSONObject.valueToString(jSONObject0);
      assertFalse(string2.equals((Object)string1));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0, 3823, 3823);
      assertEquals("[]", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 3823, 3823);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5171515848932913
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject.doubleToString(1.3629659);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.names();
      JSONObject.testValidity("1.3629659");
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7084937265854603
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Float float0 = new Float((-125.92274F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject.numberToString(float0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "java.lang.Float@0000000002");
      StringWriter stringWriter2 = stringWriter1.append('t');
      Writer writer0 = jSONObject0.write(stringWriter2);
      jSONObject0.write(writer0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3718061232922236
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ro";
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("ro", jSONArray0);
      try { 
        jSONObject0.getJSONObject("ro");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ro\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("ro", jSONArray0);
      Float float0 = new Float(0.0F);
      Object object0 = new Object();
      jSONObject0.accumulate("ro", object0);
      try { 
        jSONArray0.getBoolean((-463));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-463] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject.valueToString(jSONObject0, 32, (-171));
      Byte byte0 = new Byte((byte)34);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-26729033));
      assertEquals("-2.6729033E7", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("}o", jSONArray0);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject0.append("}o", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ro", (Object) "ro");
      Long long0 = new Long((-1470L));
      Double double0 = new Double((-771.5137428832));
      Short short0 = new Short((short)66);
      JSONObject.testValidity(short0);
      try { 
        jSONObject0.append("ro", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[ro] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ro";
      JSONArray jSONArray0 = new JSONArray();
      Long long0 = new Long((-1451L));
      jSONObject0.append("ro", long0);
      try { 
        jSONObject0.getLong("ro");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ro\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.836226374499039
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte byte0 = (byte)93;
      Byte byte1 = new Byte((byte)93);
      Byte.toUnsignedLong((byte) (-29));
      Byte.toUnsignedLong((byte)93);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Wqy2F";
      JSONObject jSONObject1 = jSONObject0.putOpt("Wqy2F", "Wqy2F");
      try { 
        jSONObject1.getInt("Wqy2F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Wqy2F\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("Expected a ':' after a key", jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("ro", jSONArray0);
      jSONObject1.optJSONArray("ro");
      JSONTokener jSONTokener0 = new JSONTokener("ro");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("ro", jSONArray0);
      jSONArray0.toJSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject1.getJSONArray("ro");
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.append("ro", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('W');
      jSONObject0.write(stringWriter1);
      int int0 = (-50462719);
      try { 
        Float.valueOf("ro");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put((Object) jSONObject0);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "0laa%b,}e";
      Float float0 = new Float(0.0);
      jSONObject0.putOpt("0laa%b,}e", float0);
      jSONObject0.optDouble("0laa%b,}e");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextValue();
      JSONObject.testValidity("{}");
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Ss&O");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 5 of {Ss&O
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1579052743957625
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Float float0 = new Float((-125.92274F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Short short0 = new Short((short)33);
      jSONObject0.append("`+z-/&jh", short0);
      String string0 = jSONObject0.toString(1354);
      JSONObject jSONObject1 = new JSONObject(string0);
      JSONObject.testValidity(string0);
      JSONObject.testValidity(string0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = JSONObject.valueToString(hashMap0, 1899, 8192);
      assertEquals("{}", string0);
      
      String string1 = jSONObject0.toString(108, 108);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.484925891109223
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "ro";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("ro", jSONArray0);
      try { 
        jSONObject1.getBoolean("ro");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ro\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ro", 769L);
      jSONObject0.getLong("ro");
      Long.getLong("ro");
      Double double0 = new Double((-771.5137428832));
      assertEquals((-771.5137428832), (double)double0, 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Byte byte0 = new Byte((byte)62);
      byte byte1 = (byte)108;
      Byte.toUnsignedLong((byte)108);
      Byte.toUnsignedLong((byte) (-29));
      JSONObject jSONObject0 = new JSONObject();
      Byte byte2 = new Byte((byte)4);
      JSONObject jSONObject1 = jSONObject0.putOpt("X2# hboDpnJnI6E", byte2);
      Object object0 = JSONObject.NULL;
      Byte.toUnsignedInt((byte)4);
      JSONObject jSONObject2 = jSONObject1.putOpt("wheel.json.JSONObject", (Object) null);
      jSONObject2.getInt("X2# hboDpnJnI6E");
      JSONObject.quote("Unclosed comment");
      try { 
        jSONObject0.getBoolean("TQ%MoEU");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"TQ%MoEU\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("ro", jSONArray0);
      String string0 = jSONObject1.optString("ro", "ro");
      assertNotNull(string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = JSONObject.quote("ux$N/</)]wYvH2>");
      assertEquals("\"ux$N/<\\/)]wYvH2>\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "getnames";
      JSONObject jSONObject1 = jSONObject0.putOpt("getnames", "iJnames");
      try { 
        jSONObject1.getJSONArray("getnames");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getnames\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("true", (Map) hashMap0);
      jSONObject1.getJSONObject("true");
      JSONObject.getNames((Object) jSONObject0);
      Double double0 = new Double(2171.94356);
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.8073365769337295
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("nutpl", "nutpl");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.put("nutpl", true);
      jSONObject1.optDouble("SPV");
      jSONObject0.getBoolean("nutpl");
      JSONObject.quote(": ");
      String string0 = JSONObject.quote("SPV");
      assertEquals("\"SPV\"", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6425559869377249
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte byte0 = (byte)93;
      Byte byte1 = new Byte((byte)93);
      Byte.toUnsignedLong((byte) (-29));
      Byte.toUnsignedLong((byte)93);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("Wqy2F", "Wqy2F");
      Object object0 = JSONObject.NULL;
      jSONObject1.putOpt("Wqy2F", object0);
      JSONObject.quote("Wqy2F");
      try { 
        jSONObject0.getBoolean("Wqy2F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Wqy2F\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("true", (Map) hashMap0);
      jSONObject1.accumulate("true", "2^ &ic*");
      Double double0 = new Double(0.0);
      Object object0 = new Object();
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{e:=2 L^G]J#TIC4o~");
      jSONTokener0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 3 of {e:=2 L^G]J#TIC4o~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{e=2 L^G]J#TIC4o~");
      jSONTokener0.toString();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 9 of {e=2 L^G]J#TIC4o~
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0283370711801276
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Float float0 = new Float((-125.92274F));
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = jSONObject0.toString(1354);
      JSONObject jSONObject1 = new JSONObject(string0);
      assertEquals(3, jSONObject1.length());
      
      JSONObject.testValidity(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5538483415669473
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("L3|^", "L3|^");
      try { 
        jSONObject1.getBoolean("L3|^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"L3|^\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-7));
      Byte.toUnsignedLong((byte) (-29));
      Byte.toUnsignedLong((byte) (-29));
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = new Boolean("Wqy2F");
      jSONObject0.putOpt("Wqy2F", boolean0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("Wqy2F", boolean0);
      jSONObject1.getBoolean("Wqy2F");
      JSONObject.quote("sum");
      try { 
        jSONObject1.getBoolean("\"sum\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"sum\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("true", 753.966117605);
      double double0 = jSONObject1.getDouble("true");
      assertEquals(753.966117605, double0, 0.01);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      HashMap<JSONObject, Integer> hashMap1 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("true", (Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      Integer integer0 = new Integer(45);
      hashMap1.put(jSONObject1, integer0);
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      JSONObject jSONObject2 = jSONObject1.put("", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      JSONObject.testValidity("");
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", jSONObject0);
      jSONObject0.optJSONObject("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("6eu57ZO;`]lr", "true");
      jSONObject1.optDouble("bz1U!}");
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getBoolean("6eu57ZO;`]lr");
      String string0 = "\\u";
      String string1 = JSONObject.quote(string0);
      assertEquals("\"\\\\u\"", string1);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Byte byte0 = new Byte((byte)93);
      Byte.toUnsignedLong((byte)93);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("false", "false");
      Object object0 = JSONObject.NULL;
      JSONObject.quote("getcompare");
      jSONObject1.getBoolean("false");
      Object object1 = JSONObject.NULL;
      assertSame(object1, object0);
  }
}
