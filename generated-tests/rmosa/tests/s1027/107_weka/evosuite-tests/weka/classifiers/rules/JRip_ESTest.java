/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:08:50 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Attribute attribute0 = new Attribute("u+ZdZzFBIsdt", (List<String>) null, 749);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 749);
      Instances instances1 = new Instances(instances0, (-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NominalAntd0.splitData(instances0, 11, 2);
      Instances instances2 = null;
      try {
        instances2 = new Instances(instances0, (-3122), 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-H <num>", arrayList0);
      Attribute.typeToString((-273));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) 1;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "numeric");
      jRip_NumericAntd0.getRevision();
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      jRip_NumericAntd0.covers(sparseInstance0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      Properties properties0 = new Properties();
      properties0.setProperty("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)", "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[0];
      attribute0.setWeight(Double.NaN);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, 0);
      try { 
        principalComponents0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5737848031422668
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      arrayList0.add(attribute0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.kNearestNeighbours(binarySparseInstance1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("8118", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      try { 
        AbstractClassifier.makeCopies(jRip0, (-3221));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertFalse(jRip0.getDebug());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(0L);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(2050);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.optimizationsTipText();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("The number of optimization runs.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals("JRIP: No model built yet.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      long long0 = jRip0.getSeed();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, long0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("5|`aUX?C");
      attribute0.addRelation((Instances) null);
      jRip0.setMinNo(4);
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether pruning is performed.", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.foldsTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JRip.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.debugTipText();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(399);
      assertEquals(399, jRip0.getFolds());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(69);
      assertEquals(69, jRip0.getOptimizations());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4205719259467042
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "IN7=W[";
      jRip0.setOptions(stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray1 = new String[0];
      jRip0.setOptions(stringArray1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      jRip_NominalAntd0.covers(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute isn't relation-valued!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AbstractClassifier.makeCopy(jRip0);
      Attribute attribute0 = new Attribute("G@]6bkzA8<V2H", linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, int0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("H<z2Dhgqj9", (-64));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals("H<z2Dhgqj9 = ", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("\nGrowing and pruning Replace ...", arrayList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      jRip_RipperRule0.copy();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.longs();
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, 1073741817, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SparseInstance sparseInstance0 = new SparseInstance(70);
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("", "", 70);
      attribute0.equals(linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertFalse(jRip1.getDebug());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      linkedList0.add("relational");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.relationalValue(2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      JRip jRip1 = new JRip();
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(3, jRip1.getFolds());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.seedTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals("The seed used for randomizing the data.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\n*** Optimization: run #";
      stringArray0[1] = "-N";
      stringArray0[2] = "(useAccuray? ";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "P";
      stringArray0[1] = "-S";
      stringArray0[2] = "Whether counts at leaves are smoothed based on Laplace.";
      stringArray0[3] = "FxL.]x_lU{anR";
      stringArray0[4] = "Before optimization(";
      stringArray0[5] = "-:&<hU<rl9EI,<";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Whether counts at leaves are smoothed based on Laplace.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip0.setOptions(stringArray0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(11, stringArray0.length);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jRip0.setDebug(true);
      jRip0.getOptions();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setUsePruning(false);
      try { 
        jRip0.rulesetForOneClass(0.0, (Instances) null, 0.0, 12.381872817124258);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SystemInUtil.addInputLine("pred");
      Attribute attribute0 = new Attribute("-H <num>", arrayList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      sparseInstance0.setMissing(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.rulesetForOneClass(6.7, (Instances) null, 211.9, 6.7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("u+dZzFBIsdt", linkedList0, 490);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Instances instances0 = new Instances("u+dZzFBIsdt", arrayList1, 0);
      SparseInstance sparseInstance0 = new SparseInstance(58);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 1, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("0");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("date", arrayList0, 3);
      SparseInstance sparseInstance0 = new SparseInstance(5);
      instances0.add((Instance) sparseInstance0);
      jRip_NominalAntd0.splitData(instances0, 3, 2);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.69240886298655
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 6);
      Instances instances1 = new Instances(instances0);
      Attribute attribute0 = new Attribute("@relation", instances0, 6);
      SparseInstance sparseInstance0 = new SparseInstance(7);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      SparseInstance sparseInstance1 = new SparseInstance(3, doubleArray0);
      sparseInstance1.setValue(69, (double) 2);
      jRip_RipperRule0.covers(sparseInstance1);
      jRip0.getOptions();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances0, (-11.0), 69);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2554823251787535
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("H <um>", "H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      binarySparseInstance0.toString(attribute0, 1);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      attribute0.copy("1");
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[3];
      doubleArray0[2] = (double) 0;
      doubleArray0[1] = (double) 0;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(715.969708878818, doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.prune(instances0, true);
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\"&_F20a^(6gL";
      stringArray0[1] = "";
      stringArray0[2] = "[ghVil)@p}6|Z%g2w;;";
      stringArray0[3] = "RcKeJo=<";
      stringArray0[4] = "-P";
      stringArray0[5] = "http.proxyPassword";
      stringArray0[6] = "13=87B=8!kgkHmcl}X";
      stringArray0[7] = "=u";
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-H <num>", arrayList0, 69);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(Double.NaN);
      jRip_RipperRule0.grow(instances0);
      Random.setNextRandom(2761);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute("u+dZzFBIsdt", list0, 116);
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@end", arrayList1, 116);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(183);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(183);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "real");
      arrayList0.add(attribute0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      DenseInstance denseInstance0 = new DenseInstance(487);
      try { 
        coverTree0.kNearestNeighbours(denseInstance0, 31);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-H <num>", arrayList0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-H <num>", arrayList1, 69);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(69);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-0.25));
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      // Undeclared exception!
      try { 
        binarySparseInstance0.setClassValue((double) 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("date", linkedList0, 3);
      arrayList0.add(attribute1);
      jRip_RipperRule0.setConsequent(64.0);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<JRip.RipperRule> arrayList0 = new ArrayList<JRip.RipperRule>();
      Attribute attribute0 = new Attribute("uZdZzFBIsdt", linkedList0, 490);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList1, 1);
      linkedList0.clone();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      binarySparseInstance0.setMissing(1257);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, (-3166.9), (-41.3851));
      assertEquals(0.0, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      arrayList0.add(attribute0);
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      try { 
        jRip2.rulesetForOneClass((-1.0), instances0, (-1.0), 314.00926);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7751250090009734
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-H <num>");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-H <num>", arrayList1, 1);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      arrayList1.add(attribute0);
      jRip_RipperRule0.setConsequent(90.0);
      jRip_RipperRule0.grow(instances0);
      try { 
        jRip0.rulesetForOneClass((-1542.627439), instances0, (-1558.5853627), (-2326.152188916689));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Should never happen: dl in building stage NaN or infinite!
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6095464819696321
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      jRip0.setUsePruning(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tIf set, classifier is run in debug mode and\n\tmay output additional info to the console", arrayList0, 114);
      try { 
        jRip0.rulesetForOneClass((-294.3601052308), instances0, 114, (-3449.938));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6429407231085187
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      arrayList0.add(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      instances0.meanOrMode(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.update(binarySparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // BottomUpConstruction method does not allow addition of new Instances.
         //
         verifyException("weka.core.neighboursearch.CoverTree", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      arrayList0.add(attribute0);
      JRip jRip1 = new JRip();
      attribute0.equals(instances0);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.setConsequent(2);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.kNearestNeighbours(binarySparseInstance1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-H <num>");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-H <num>", arrayList1, 69);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(69);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.setConsequent(1);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.kNearestNeighbours(binarySparseInstance0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      int[] intArray0 = new int[9];
      intArray0[0] = (-73);
      intArray0[1] = (-73);
      intArray0[2] = (-1315);
      intArray0[3] = 80;
      intArray0[4] = (-3183);
      intArray0[2] = (-73);
      intArray0[7] = (-73);
      intArray0[8] = 5652;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0888999753452238
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";yplwbL";
      stringArray0[1] = "The rule covers: ";
      stringArray0[2] = "-E";
      stringArray0[3] = "w]3Zn{N2";
      stringArray0[4] = "";
      stringArray0[5] = "[q%<";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getCheckErrorRate());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray1 = new String[0];
      jRip0.setOptions(stringArray1);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("u+ZdZzFBIsdt", (List<String>) null, 749);
      JRip jRip1 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 749);
      Instances instances1 = new Instances(instances0, (-1));
      jRip_NominalAntd0.accu = (double) 0;
      jRip_NominalAntd0.maxInfoGain = (-30.51);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NominalAntd0.splitData(instances0, 11, 2);
      Instances instances2 = null;
      try {
        instances2 = new Instances(instances0, (-3122), 11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)22;
      byteArray0[3] = (byte)22;
      // Undeclared exception!
      try { 
        jRip0.getMeasure("measureNumRules");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.1608811098870975
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-H <num>");
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("-H <num>", arrayList1, 1);
      instances0.setClass(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      arrayList1.add(attribute0);
      jRip_RipperRule0.setConsequent(90.0);
      jRip_RipperRule0.grow(instances0);
      Utils.SMALL = (-25.0385359);
      try { 
        jRip0.rulesetForOneClass((-1542.627439), instances0, (-1558.5853627), (-2326.152188916689));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Should never happen: dl in building stage NaN or infinite!
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(1.0);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals("(H <um> >= 1) => H <um>=", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(1.0);
      jRip_RipperRule0.grow(instances0);
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      instances0.meanOrMode(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(1.0);
      assertEquals(1.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.grow(instances0);
      jRip_RipperRule0.grow(instances0);
      jRip_RipperRule0.hasAntds();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals("(H <um> >= 1) and (H <um> >= 1) => H <um>=", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9197895645929073
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances1 = null;
      attribute0.addRelation((Instances) null);
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      instances0.meanOrMode(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      instances0.add((Instance) binarySparseInstance0);
      jRip_RipperRule0.grow(instances0);
      Attribute attribute1 = new Attribute("", "");
      CoverTree coverTree0 = new CoverTree();
      jRip_RipperRule0.prune(instances0, false);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9556919452806247
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>", "H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      jRip0.getCheckErrorRate();
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      instances0.meanOrMode(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      jRip_RipperRule0.grow(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.prune(instances0, true);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      jRip0.setDebug(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      instances0.meanOrMode(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree1 = new CoverTree();
      coverTree1.listOptions();
      try { 
        coverTree1.kNearestNeighbours(binarySparseInstance0, 1614);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9347253160503013
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>", "H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@end");
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      jRip0.getCheckErrorRate();
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      instances0.meanOrMode(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      jRip_RipperRule0.grow(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.covers(binarySparseInstance1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      instances0.meanOrMode(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      jRip_RipperRule0.grow(instances0);
      jRip_RipperRule0.grow(instances0);
      jRip_RipperRule0.covers(binarySparseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance1);
      Random.setNextRandom((-2363));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      SystemInUtil.addInputLine("H <um>");
      Attribute attribute0 = new Attribute("H <um>");
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("H <um>", arrayList0, 1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      instances0.setClass(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.addRelation((Instances) null);
      instances0.add(0, (Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      instances0.meanOrMode(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      instances0.add((Instance) binarySparseInstance0);
      jRip_RipperRule0.grow(instances0);
      jRip_RipperRule0.grow(instances0);
      Attribute attribute1 = new Attribute("", "");
      CoverTree coverTree0 = new CoverTree();
      jRip_RipperRule0.prune(instances0, false);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 548);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(548);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("n\"I?0:w9J\"nY", 548);
      binarySparseInstance0.toString(attribute0, 548);
      instances0.add((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2);
      instances0.setClass(attribute0);
      attribute0.copy(".arff");
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip0.getUsePruning();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 715.969708878818;
      doubleArray0[5] = (double) 0;
      jRip0.setDebug(true);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-2105.0), doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.prune(instances0, true);
  }
}
