/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:18:14 GMT 2018
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.OneRAttributeEval;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.rules.PART;
import weka.core.AbstractInstance;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.Tokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      NaiveBayesMultinomialText.main(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      try { 
        Capabilities.forInstances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("The norm of the instances after normalization.", string0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("Whether to convert all tokens to lowercase", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("9122", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.globalInfo();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("The stemming algorithm to use on the words.", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("The LNorm to use for document length normalization.", string0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("The tokenizing algorithm to use on the strings.", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setMinWordFrequency((-1862.5));
      int int0 = 0;
      DenseInstance denseInstance0 = new DenseInstance(0);
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.toString();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_minWordP = 1181.82686253514;
      naiveBayesMultinomialText0.m_normalize = false;
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.getOptions();
      System.setCurrentTimeMillis(1L);
      Random.setNextRandom((-1431655765));
      Random.setNextRandom((-1785));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 12;
      Locale.getISOCountries();
      HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
      naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      Integer integer0 = Integer.valueOf(12);
      LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = new LinkedHashMap<String, NaiveBayesMultinomialText.Count>();
      naiveBayesMultinomialText0.m_norm = (double) 12;
      hashMap0.put(integer0, linkedHashMap0);
      naiveBayesMultinomialText0.pruneDictionary();
      System.setCurrentTimeMillis(12);
      Random.setNextRandom(12);
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      LinkedHashMap<String, NaiveBayesMultinomialText.Count> linkedHashMap0 = naiveBayesMultinomialText0.m_inputVector;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "C";
      stringArray0[1] = "-stemmer";
      stringArray0[2] = "-stemmer";
      stringArray0[3] = "-stemmer";
      stringArray0[4] = "-stemmer";
      stringArray0[5] = "-stopwords";
      stringArray0[6] = "-stemmer";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.595092914109461
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stringKernel0);
      Instances instances0 = testInstances0.generate("-------------\t");
      MockRandom mockRandom0 = new MockRandom((-2));
      testInstances0.setNumRelationalNominal(1983);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setNormalizeDocLength(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-48);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText1.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      naiveBayesMultinomialText1.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText1.setUseStopList(true);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1983, doubleArray0);
      AbstractInstance.s_numericAfterDecimalPoint = (int) (byte) (-48);
      naiveBayesMultinomialText1.distributionForInstance(sparseInstance0);
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("lnorm");
      naiveBayesMultinomialText0.m_stopwordsFile = (File) mockFile0;
      naiveBayesMultinomialText0.getOptions();
      Instance instance0 = null;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.408362910077311
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stringKernel0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "P");
      capabilities0.disableAllClasses();
      Instances instances0 = testInstances0.generate("-------------\t");
      Capabilities.forInstances(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "");
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_ATTRIBUTES;
      capabilities0.enableDependency(capabilities_Capability0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getOptions();
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9594500048969377
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stringKernel0);
      Instances instances0 = testInstances0.generate("-------------\t");
      Capabilities.forInstances(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      instances0.resample(mockRandom0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      testInstances0.getData();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.buildClassifier(instances0);
      naiveBayesMultinomialText1.pruneDictionary();
      String string0 = naiveBayesMultinomialText1.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t6.0\nclass2\t6.0\nclass3\t6.0\nclass4\t6.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\nover\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nthe\t2.718281828459045\t7.38905609893065\t7.38905609893065\t2.718281828459045\t\nThe\t7.38905609893065\t7.38905609893065\t2.718281828459045\t2.718281828459045\t\nquick\t7.38905609893065\t7.38905609893065\t7.38905609893065\t2.718281828459045\t\nlazy\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\njumps\t7.38905609893065\t2.718281828459045\t2.718281828459045\t7.38905609893065\t\nbrown\t2.718281828459045\t7.38905609893065\t7.38905609893065\t7.38905609893065\t\ndog\t7.38905609893065\t2.718281828459045\t2.718281828459045\t7.38905609893065\t\nfox\t2.718281828459045\t2.718281828459045\t7.38905609893065\t7.38905609893065\t\n", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[1] = "@data";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.pruneDictionary();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      
      naiveBayesMultinomialText1.pruneDictionary();
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7826121223721445
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      stringKernel0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      testInstances0.clone();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-2), doubleArray0);
      naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8622016991829657
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OneRAttributeEval oneRAttributeEval0 = new OneRAttributeEval();
      Capabilities capabilities0 = oneRAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(oneRAttributeEval0);
      Instances instances0 = testInstances0.generate("4R }_'pylek");
      Capabilities.forInstances(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      instances0.resample(mockRandom0);
      testInstances0.getData();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t9.0\nclass2\t4.0\nclass3\t7.0\nclass4\t4.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\tclass3\tclass4\t\n", string0);
      
      double[] doubleArray0 = new double[0];
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.m_stopwords = null;
      SparseInstance sparseInstance0 = new SparseInstance(4399.2699906007, doubleArray0);
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertArrayEquals(new double[] {0.3750000000000001, 0.16666666666666669, 0.29166666666666663, 0.16666666666666669}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stringKernel0);
      Instances instances0 = testInstances0.generate("-------------\t");
      Instances instances1 = testInstances0.generate(" ");
      Capabilities.forInstances(instances1);
      MockRandom mockRandom0 = new MockRandom(687L);
      testInstances0.getData();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.debugTipText();
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      double[] doubleArray1 = naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
      assertArrayEquals(new double[] {0.25, 0.25, 0.25, 0.25}, doubleArray1, 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 12;
      HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>> hashMap0 = new HashMap<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>();
      naiveBayesMultinomialText0.reset();
      Integer integer0 = new Integer(12);
      naiveBayesMultinomialText0.m_probOfWordGivenClass = (Map<Integer, LinkedHashMap<String, NaiveBayesMultinomialText.Count>>) hashMap0;
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_norm = (double) 12;
      naiveBayesMultinomialText0.pruneDictionary();
      System.setCurrentTimeMillis(12);
      Random.setNextRandom(12);
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 15;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText1.toString();
      PART pART0 = new PART();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("weka/core/Capabilities.props");
      MockRandom mockRandom0 = new MockRandom((-2));
      Instances instances0 = testInstances0.getData();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText1.toString();
      naiveBayesMultinomialText0.toString();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      System.setCurrentTimeMillis(1957L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.getOptions();
      Random.setNextRandom((-1424));
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("The LNorm to use for document length normalization.", "The LNorm to use for document length normalization.");
      naiveBayesMultinomialText0.setStopwords(file0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2227.434417);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      DenseInstance denseInstance0 = new DenseInstance((-2227.434417), doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom(1);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(12, stringArray1.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stringKernel0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      Capabilities.forInstances(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      instances0.resample(mockRandom0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      testInstances0.getData();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.debugTipText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[1] = "@data";
      naiveBayesMultinomialText0.pruneDictionary();
      Random.setNextRandom(11);
      testInstances0.setHandler(naiveBayesMultinomialText0);
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot((int[]) null, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stringKernel0);
      Instances instances0 = testInstances0.generate("-------------\t");
      Capabilities.forInstances(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      testInstances0.getData();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_lowercaseTokens = true;
      naiveBayesMultinomialText1.buildClassifier(instances0);
      naiveBayesMultinomialText1.pruneDictionary();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stringKernel0);
      Instances instances0 = testInstances0.generate(" ");
      capabilities0.getOtherCapabilities();
      DenseInstance denseInstance0 = new DenseInstance(1);
      instances0.add((Instance) denseInstance0);
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[4] = (-773.5);
      denseInstance0.setDataset(instances0);
      instances0.add((Instance) denseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) denseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 15;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.toString();
      PART pART0 = new PART();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      MockRandom mockRandom0 = new MockRandom((-2));
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText1.toString();
      naiveBayesMultinomialText0.toString();
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      testInstances0.clone();
      SparseInstance sparseInstance0 = new SparseInstance(2066);
      instances0.add((Instance) sparseInstance0);
      boolean boolean0 = true;
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setNormalizeDocLength(false);
      naiveBayesMultinomialText1.buildClassifier(instances0);
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance(5.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stringKernel0);
      Instances instances0 = testInstances0.generate("-------------8\t");
      MockRandom mockRandom0 = new MockRandom((-2));
      testInstances0.setNumRelationalNominal(1983);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setNormalizeDocLength(true);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)122;
      naiveBayesMultinomialText1.setUseWordFrequencies(true);
      byteArray0[3] = (byte) (-48);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText1.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText1.setUseStopList(true);
      naiveBayesMultinomialText1.setOptions(testInstances0.DEFAULT_WORDS);
      System.setCurrentTimeMillis((byte)5);
      Random.setNextRandom(16);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringKernel stringKernel0 = new StringKernel();
      Capabilities capabilities0 = stringKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(stringKernel0);
      Instances instances0 = testInstances0.generate("-------------\t");
      MockRandom mockRandom0 = new MockRandom((-2));
      testInstances0.setNumRelationalNominal(1983);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[2] = (byte) (-1);
      Kernel.makeCopies(stringKernel0, 211);
      byteArray0[3] = (byte)0;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-48);
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.setMinWordFrequency((byte)0);
      naiveBayesMultinomialText0.setUseStopList(true);
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1983, doubleArray0);
      MockFile mockFile0 = new MockFile(" ");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      AbstractInstance.s_numericAfterDecimalPoint = (int) (byte) (-48);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getOptions();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }
}
