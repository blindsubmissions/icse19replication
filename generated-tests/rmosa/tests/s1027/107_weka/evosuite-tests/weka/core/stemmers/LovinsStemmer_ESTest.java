/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:01:33 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("EITOR");
      assertEquals("eit", string0);
      
      String string1 = lovinsStemmer0.stem("RM(zpMFCo+FCDk`JuM");
      assertEquals("rm(zpmfco+fcdk`jum", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8579821683837752
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "editor";
      stringArray0[1] = "n&r";
      String string0 = lovinsStemmer0.stemString("n&r");
      assertEquals("n&r", string0);
      
      stringArray0[2] = "eitix";
      stringArray0[3] = "y0^U=";
      stringArray0[4] = "ization";
      stringArray0[5] = "K";
      stringArray0[6] = "0x(P<6mRxb";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("c-SusuM");
      assertEquals("c-susum", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("RM(zpMFCo+FCDk`JuM");
      assertEquals("rm(zpmfco+fcdk`jum", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8632043078532219
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("*=%4t+7uE_x");
      assertEquals("*=%4t+7u_x", string0);
      
      String string1 = lovinsStemmer0.stem("&5mar");
      assertEquals("&5mar", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8987569626516587
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      String string2 = lovinsStemmer0.stem("learngbex");
      assertEquals("learngbic", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9757674911398136
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      String string1 = lovinsStemmer1.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0253582635920284
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("'3FM\"");
      assertEquals("'3fm\"", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("edition");
      assertEquals("edit", string0);
      
      String string1 = lovinsStemmer0.stemString("lud");
      assertEquals("lus", string1);
      
      lovinsStemmer0.stem("her");
      String string2 = lovinsStemmer0.stem("RM(zpMFCo+FCDk`JuM");
      assertEquals("rm(zpmfco+fcdk`jum", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0303199861578105
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("rpenonderid");
      String string0 = lovinsStemmer0.stemString("yz");
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.stemString("An annotation. It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.");
      lovinsStemmer0.stem("yz");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9071380966380936
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("Sum (doubles): ");
      assertEquals("sum (doubl): ", string0);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("lis@pyl");
      assertEquals("lis@pyl", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.011370485706995
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "uad";
      stringArray0[1] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9854383441454959
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("ful");
      assertEquals("fl", string0);
      
      lovinsStemmer0.stem("fl");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("eflet");
      assertEquals("efles", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.04058255963887
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0262739445377713
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.toString();
      lovinsStemmer0.stem("uasend");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9646247100179742
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("usend");
      String string0 = lovinsStemmer0.toString();
      lovinsStemmer0.stem("krfearrud");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("F");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8208193239410695
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      String string0 = lovinsStemmer0.stem("nltal");
      assertEquals("nlt", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.855986673803638
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ional");
      assertEquals("ion", string0);
      
      String string1 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stem("learngbex");
      assertEquals("learngbic", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.03980222589296
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      assertEquals("titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("BOOKTITLE");
      lovinsStemmer0.stemString("entrmit");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For.major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for.major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8632043078532219
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("lis@pyltex");
      assertEquals("lis@pyltic", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "lis@pyltex";
      stringArray0[1] = "lis@pyltic";
      stringArray0[2] = "p&}AzlL8";
      stringArray0[3] = "lis@pyltic";
      stringArray0[4] = "81-106";
      stringArray0[5] = "lis@pyltic";
      stringArray0[6] = "lis@pyltic";
      stringArray0[7] = "lis@pyltic";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("lis@pyl");
      assertEquals("lis@pyl", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9071380966380936
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ond";
      stringArray0[1] = "V 7R4r";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("lucpand");
      assertEquals("lucpans", string0);
      
      String string1 = lovinsStemmer0.stem("lis@pyl");
      assertEquals("lis@pyl", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("dex");
      assertEquals("dic", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("RM(zpMFCo+FCDk`JuM");
      assertEquals("rm(zpmfco+fcdk`jum", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8909004612556841
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("efletix");
      assertEquals("efletic", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("magazuaduasend");
      assertEquals("magazuaduasens", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.802055016673
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("uad");
      assertEquals("uas", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("RM(zpMFCo+FCDk`JuM");
      assertEquals("rm(zpmfco+fcdk`jum", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.855986673803638
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("masonond");
      String string0 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("learngbex");
      assertEquals("learngbic", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.8447033993444789
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ally");
      assertEquals("al", string0);
      
      lovinsStemmer0.stem("lingupex");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("RM(zpMFCo+FCDk`JuM");
      assertEquals("rm(zpmfco+fcdk`jum", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("magazIadu()end");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.855986673803638
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string0);
      
      lovinsStemmer0.stem("arizer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("learngbex");
      assertEquals("learngbic", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0809445310356398
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("lily");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("lud");
      assertEquals("lus", string0);
      
      String string1 = lovinsStemmer0.stemString("A work that is printed and bound, but without a named publisher or sponsoring institution.");
      assertEquals("a work that is print and bound, but without a nam publishes or sponsor institut.", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.855986673803638
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ert");
      String string0 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("learngbex");
      assertEquals("learngbic", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.03980222589296
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("lux");
      assertEquals("luc", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0272498857938808
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("lid");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9903462046167448
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("vad");
      assertEquals("vas", string0);
      
      lovinsStemmer0.stemString("mustyt");
      String string1 = lovinsStemmer0.stem(".4BD4,V9Gar)p^:S5y");
      assertEquals(".4bd4,v9gar)p^:s5", string1);
      
      String string2 = lovinsStemmer0.stemString(".4BD4,V9Gar)p^:S5y");
      assertEquals(".4bd4,v9gar)p^:s5y", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0272498857938808
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("mustax");
      assertEquals("mustac", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("typher");
      lovinsStemmer0.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("inproceedings");
      lovinsStemmer0.stemString("inproceed");
      String string0 = lovinsStemmer1.stemString("inproceedings");
      assertEquals("inproceed", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.9376319854448161
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.stemString("mitcid");
      lovinsStemmer0.stem("ive");
      stringArray0[0] = "uad";
      stringArray0[1] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      stringArray0[2] = ".";
      stringArray0[3] = "oGW<";
      stringArray0[4] = "used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field sbould not be confused with the key that appears in the cite command and at the beginning of the atabase entry.ond";
      stringArray0[5] = "wka.core.Opton";
      lovinsStemmer0.globalInfo();
      stringArray0[6] = "Wp~!F3,i$BW";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("wka.core.Opton");
      stringArray0[7] = "";
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("editor");
      assertEquals("edit", string0);
      
      String string1 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0471837892537044
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "X)|m#kuA6vhWGJDmAex";
      stringArray0[1] = "X)|m#kuA6vhWGJDmAex";
      stringArray0[2] = "erid";
      stringArray0[3] = "X)|m#kuA6vhWGJDmAex";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("X)|m#kuA6vhWGJDmAex");
      assertEquals("x)|m#kua6vhwgjdmaec", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "%G]s{;(haDB#~R";
      stringArray1[1] = "x)|m#kua6vhwgjdmaec";
      stringArray1[2] = "x)|m#kua6vhwgjdmaec";
      stringArray1[3] = "x)|m#kua6vhwgjdmaec";
      stringArray1[4] = "x)|m#kua6vhwgjdmaec";
      stringArray1[5] = "x)|m#kua6vhwgjdmaec";
      stringArray1[6] = "X)|m#kuA6vhWGJDmAex";
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer1.stem("organization");
      assertEquals("organ", string1);
      
      String string2 = lovinsStemmer0.stemString("yz");
      assertEquals("yz", string2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.203401299667763
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("F@'C9V2VTrpT#po,Pmz");
      assertEquals("f@'c9v2vtrb#po,pmz", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("magazIadu()end");
      assertEquals("magaziadu()ens", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("sed for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stem("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9689692591777699
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("uasend");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("1984yz");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ation");
      assertEquals("ation", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0852430602637115
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A chapter (or section or whatever) number.";
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A chapter (or section or whatever) number.");
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer1.stemString("A chapter (or section or whatever) number.");
      assertEquals("a chapter (or sect or whatever) number.", string1);
      
      String string2 = lovinsStemmer1.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string0);
      
      String string1 = lovinsStemmer0.stemString("arra-dimens of 'new string[3][4][]': ");
      assertEquals("ar-dimen of 'new string[3][4][]': ", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("jO");
      lovinsStemmer1.stemString("VG|3L1dM&R,(ETa");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      assertFalse(lovinsStemmer2.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("+dn-?%<~g1Al_");
      String string0 = lovinsStemmer0.stemString("+dn-?%<~g1Al_");
      assertEquals("+dn-?%<~g1al_", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("encies");
      assertEquals("enci", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("n&r");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("ement");
      assertEquals("ement", string0);
      
      String string1 = lovinsStemmer0.stem("n&r");
      String string2 = lovinsStemmer0.stemString("n&r");
      assertTrue(string2.equals((Object)string1));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The organization that sponsors a conference or that publishes a manual.");
      assertEquals("th organ that sponsor a confer or that publish a manu.", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("th organ that sponsor a confer or that publish a manu.");
      assertEquals("th organ that spons a confer or that publ a manu.", string1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("R';!OPP,j]");
      assertEquals("r';!op,j]", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The number ofa journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      String string1 = lovinsStemmer0.stemString("th number of journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      assertEquals("th number of journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it vol and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9801722585896586
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("istr");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("EDITOR");
      lovinsStemmer0.stem("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      String string1 = lovinsStemmer0.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capit, as shown he; th standard styl conver to lower ca when nec.", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("Mbb");
      assertEquals("mb", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("EDITOR");
      assertEquals("edit", string0);
      
      lovinsStemmer0.stem("iev");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string1);
      
      String string2 = lovinsStemmer0.stemString("ief");
      assertEquals("ief", string2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.stemString("mitcid");
      String string0 = lovinsStemmer0.stem("ive");
      assertEquals("iv", string0);
      
      stringArray0[1] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      String string1 = lovinsStemmer0.stemString("SSzGG");
      assertEquals("sszg", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stem("uad");
      assertEquals("uas", string2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("#OUlL");
      assertEquals("#oul", string0);
      
      String string1 = lovinsStemmer0.stem("arize");
      assertEquals("ariz", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("isbnet");
      String string0 = lovinsStemmer0.stem("Sa{TI");
      assertEquals("sa{t", string0);
      
      String string1 = lovinsStemmer0.stem("isbnet");
      assertEquals("isbnet", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Used for alphabeizing, cross ree7encing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer0.stem("used for alphabeizing, cross ree7encing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("used for alphabeizing, cross ree7encing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string0 = lovinsStemmer1.stemString("used for alphabeizing, cross ree7encing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabeiz, cros ree7, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      String string1 = lovinsStemmer1.stem("used for alphabeizing, cross ree7encing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("used for alphabeizing, cross ree7encing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.", string1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("xv.1i\"c1-bex");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("7cTHuUVw{2tJ ULs");
      assertEquals("7cthuuvw{2tj l", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0099996874274697
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("sed for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[0];
      lovinsStemmer1.stemString("sed for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in thecite command and at the beginning of the database entry.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("sed for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in thecite command and at the beginning of the database entry.");
      String string0 = lovinsStemmer1.stemString("sed for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in thecite command and at the beginning of the database entry.");
      assertEquals("sed for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in thecit command and at th begin of th databas entr.", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.067408605163032
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("C4.5: Programs foMacine Learng");
      assertEquals("c4.5: program fomacin learng", string0);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("~o=zxdzta wre`b0qlid");
      assertEquals("~o=zxdzta wre`b0qlis", string1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("l6is@Ryl");
      assertEquals("l6is@r", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("C4.5: Programs oMaine Learng");
      assertEquals("c4.5: program omain learng", string0);
      
      lovinsStemmer0.stem("ical");
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("OhNK-C?k8:r");
      assertEquals("ohnk-c?k8:r", string1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("A report publshed by a scool or other institton, usually numbered within a series.");
      assertEquals("a report publsh by a scool or other institton, usu number within a ser.", string0);
  }
}
