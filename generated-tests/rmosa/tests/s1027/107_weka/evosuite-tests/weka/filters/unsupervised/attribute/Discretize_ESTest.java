/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 18:08:02 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.Properties;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Discretize.main(stringArray0);
      stringArray0[5] = "=7^5&j/0M";
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      discretize0.setOptions((String[]) null);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-562));
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "j4KND;Gb[U)?";
      Discretize discretize0 = new Discretize("j4KND;Gb[U)?");
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("v");
      discretize0.getBins();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.makeBinaryTipText();
      StringReader stringReader0 = new StringReader("");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // premature end of file, read Token[EOF], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("68,1371,-3088,2,2079,1837,84");
      discretize0.findNumBinsTipText();
      boolean boolean0 = discretize0.m_UseBinNumbers;
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = true;
      discretize0.binsTipText();
      DenseInstance denseInstance0 = new DenseInstance(6);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.03195622385697
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemInUtil.addInputLine("=`^5&n/0M");
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.attributeIndicesTipText();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1717986964));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "I#&|HP^L6(";
      stringArray0[1] = "-M";
      stringArray0[2] = "1'}L7,JTn";
      stringArray0[3] = "I#&|HP^L6(";
      stringArray0[4] = "B";
      stringArray0[5] = "=";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rBlaCXo/21U^nT#b";
      stringArray0[1] = "-B";
      stringArray0[2] = " at version ";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" at version \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "import weka.core.Attribute;";
      stringArray0[1] = "-R";
      stringArray0[2] = "r/g\"RthBF`,gl3$-(";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[1][4];
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-2075900857));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2075900857
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_IgnoreClass = true;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DiscretizeCols = null;
      discretize0.setUseBinNumbers(true);
      // Undeclared exception!
      try { 
        discretize0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1945063128187035
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.55555;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getBinRangesString(8);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 5.55555;
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (double) 8;
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 8;
      intArray0[2] = 89;
      intArray0[3] = 8;
      intArray0[4] = 8;
      intArray0[5] = 8;
      intArray0[6] = 8;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray1, intArray0, 8);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.setIgnoreClass(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(7, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = true;
      discretize0.m_IgnoreClass = true;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0348713328512753
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("*%=xZMQy");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("*%=xZMQy", arrayList0, 0);
      arrayList0.add(attribute0);
      discretize0.getBinRangesString(0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '*%=xZMQy' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(">nV*vx?;v8sY", linkedList0, 70);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(">nV*vx?;v8sY", arrayList0, 0);
      instances0.delete();
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      boolean boolean0 = discretize0.m_FindNumBins;
      Function.identity();
      Attribute.typeToString(82);
      discretize0.isOutputFormatDefined();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(68);
      attribute0.copy("the environment variable ");
      SparseInstance sparseInstance0 = new SparseInstance(68);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '>nV*vx?;v8sY' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(">nV*vx?;v8sY", linkedList0, 74);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(">nV*vx?;v8sY", arrayList0, 0);
      instances0.delete();
      attribute0.addStringValue("Ey8[zi.Ka");
      UnaryOperator.identity();
      arrayList0.add(attribute0);
      arrayList0.add(attribute0);
      Function.identity();
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      AbstractInstance.s_numericAfterDecimalPoint = 74;
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.0578975319224093
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(">nV*vx?;v8sY", linkedList0, 70);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(">nV*vx?;v8sY", arrayList0, 0);
      instances0.delete();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      instances0.replaceAll(unaryOperator0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(">nV*vx?;v8sY", linkedList0, 70);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(">nV*vx?;v8sY", arrayList0, 0);
      UnaryOperator.identity();
      discretize0.setInputFormat(instances0);
      int int0 = 1001;
      try { 
        Filter.filterFile(discretize0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Unable to determine structure as arff (Reason: org.evosuite.runtime.mock.java.lang.MockThrowable: premature end of file, read Token[EOF], line 1).
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4637458918277058
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.indexOfValue(">Fe!{#-{");
      Instances instances0 = new Instances("-M <num>", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      attribute0.equalsMsg(discretize0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      discretize0.isOutputFormatDefined();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      attribute0.copy("@data");
      SparseInstance sparseInstance0 = new SparseInstance(1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      discretize0.convertInstance(binarySparseInstance0);
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8989267893363286
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(">nV*vx?;v8sY", linkedList0, 70);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(">nV*vx?;v8sY", arrayList0, 0);
      instances0.delete();
      discretize0.setDesiredWeightOfInstancesPerInterval(1);
      UnaryOperator.identity();
      Function.identity();
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(1001);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(74);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.608894267346285
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(">nV*vx?;v8sY", arrayList0, 0);
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      instances0.delete();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      double[][] doubleArray3 = new double[1][4];
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = 1.7976931348623157E308;
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 2;
      doubleArray3[0] = doubleArray4;
      discretize0.m_CutPoints = doubleArray3;
      Discretize discretize1 = new Discretize();
      discretize0.setFindNumBins(true);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.findNumBins(0);
      Random.setNextRandom(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      instances0.containsAll(arrayList0);
      arrayList1.add(attribute0);
      boolean boolean0 = discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      Function.identity();
      Attribute.typeToString(100);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(80);
      SparseInstance sparseInstance0 = new SparseInstance(2);
      sparseInstance0.toStringMaxDecimalDigits((-2780));
      discretize0.convertInstance(sparseInstance0);
      discretize0.setOutputFormat();
      discretize0.convertInstance(sparseInstance0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setInvertSelection(true);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@end", arrayList0, 3);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      instances0.containsAll(arrayList1);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'rRZ@\"zX$H&iQKV' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.indexOfValue(">Fe!{#-{");
      Instances instances0 = new Instances("-M <num>", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      attribute0.equalsMsg(discretize0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      discretize0.isOutputFormatDefined();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      discretize0.calculateCutPoints();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      System.setCurrentTimeMillis((-1L));
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      discretize0.convertInstance(denseInstance0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      arrayList0.retainAll(linkedList0);
      arrayList0.trimToSize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("@gn&y*-;}34gX.t", linkedList0, protectedProperties0);
      arrayList0.add(attribute1);
      discretize0.getBinRangesString(0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.getBinRangesString(0);
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(">nV*vx?;v8sY", linkedList0, 70);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(">nV*vx?;v8sY", arrayList0, 0);
      instances0.delete();
      UnaryOperator.identity();
      Function.identity();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      boolean boolean0 = discretize0.m_IgnoreClass;
      discretize0.batchFinished();
      Random.setNextRandom(11);
      discretize0.input(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      discretize0.input(sparseInstance0);
      discretize0.setOutputFormat();
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("rRH@\"zX$HkQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.indexOfValue(">Fe!{K-{");
      Instances instances0 = new Instances("-M <num>", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1);
      boolean boolean0 = discretize0.m_IgnoreClass;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("*%=xZMQy");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      discretize0.m_UseEqualFrequency = true;
      Instances instances0 = new Instances("*%=xZMQy", arrayList0, 0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '*%=xZMQy' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.indexOfValue(">Fe!{#-{");
      Instances instances0 = new Instances("-F", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      attribute0.equalsMsg(discretize0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      discretize0.isOutputFormatDefined();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      attribute0.copy("@data");
      discretize0.setInvertSelection(true);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      discretize0.input(sparseInstance0);
      Random.setNextRandom(2957);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      discretize0.m_UseEqualFrequency = true;
      discretize0.m_CutPoints = doubleArray0;
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      discretize0.getBinRangesString(0);
      discretize0.setFindNumBins(true);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0348713328512753
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 0);
      arrayList0.retainAll(arrayList0);
      arrayList0.trimToSize();
      arrayList0.add(attribute0);
      discretize0.getBinRangesString(0);
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'rRZ@\"zX$H&iQKV' 'rRZ@\"zX$H&iQKV' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5462768217706437
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      instances0.containsAll(arrayList0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(0);
      sparseInstance0.toStringMaxDecimalDigits(2);
      discretize0.findNumBins(4);
      discretize0.convertInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A nominal attribute (rRZ@\"zX$H&iQKV) cannot have duplicate labels ('(0-0]').
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5597906918634017
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("-M <num>", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      attribute0.equalsMsg(discretize0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      discretize0.isOutputFormatDefined();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      attribute0.copy("@data");
      SparseInstance sparseInstance0 = new SparseInstance(1);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      instances0.containsAll(arrayList0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      attribute0.equals((Object) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(0);
      discretize0.findNumBins(4);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.indexOfValue(">Fe!{#-{");
      Instances instances0 = new Instances("-M <num>", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      attribute0.equalsMsg(discretize0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      discretize0.m_MakeBinary = false;
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      attribute0.copy("@data");
      SparseInstance sparseInstance0 = new SparseInstance(1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      discretize0.convertInstance(sparseInstance0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.indexOfValue(">Fe!{#-{");
      Instances instances0 = new Instances("-M <num>", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      attribute0.equalsMsg(discretize0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      discretize0.m_MakeBinary = true;
      discretize0.isFirstBatchDone();
      Function.identity();
      Attribute.typeToString(0);
      discretize0.isOutputFormatDefined();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      attribute0.copy("@data");
      SparseInstance sparseInstance0 = new SparseInstance(1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.setOutputFormat();
      discretize0.convertInstance(binarySparseInstance0);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.indexOfValue(">Fe!{#-{");
      Instances instances0 = new Instances("-M <num>", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      attribute0.equalsMsg(discretize0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      discretize0.isOutputFormatDefined();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      attribute0.copy("@data");
      SparseInstance sparseInstance0 = new SparseInstance(1);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      instances0.containsAll(arrayList0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(0);
      sparseInstance0.toStringMaxDecimalDigits(2);
      discretize0.findNumBins(4);
      discretize0.convertInstance(sparseInstance0);
      discretize0.convertInstance(binarySparseInstance0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      attribute0.indexOfValue(">Fe!{#-{");
      Instances instances0 = new Instances("-M <num>", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances0.setClass(attribute0);
      discretize0.getFindNumBins();
      attribute0.equalsMsg(discretize0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      Function.identity();
      Attribute.typeToString(0);
      discretize0.isOutputFormatDefined();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      attribute0.copy("@data");
      SparseInstance sparseInstance0 = new SparseInstance(1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[20][8];
      Attribute attribute0 = new Attribute("rRZ@\"zX$H&iQKV");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("", arrayList0, 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      discretize0.getFindNumBins();
      instances0.containsAll(arrayList0);
      arrayList1.add(attribute0);
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.m_IgnoreClass;
      Function.identity();
      Attribute.typeToString(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      discretize0.m_CutPoints = doubleArray0;
      SparseInstance sparseInstance0 = new SparseInstance(0);
      sparseInstance0.toStringMaxDecimalDigits(2);
      discretize0.findNumBins(4);
      discretize0.m_UseBinNumbers = true;
      attribute0.copy("@data");
      SparseInstance sparseInstance1 = new SparseInstance(4);
      sparseInstance1.toStringMaxDecimalDigits(99);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      discretize0.convertInstance(sparseInstance1);
  }
}
