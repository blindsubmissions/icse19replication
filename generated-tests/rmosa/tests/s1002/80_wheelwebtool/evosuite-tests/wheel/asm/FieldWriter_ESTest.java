/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:34:02 GMT 2018
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.InputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.Edge;
import wheel.asm.FieldVisitor;
import wheel.asm.FieldWriter;
import wheel.asm.Label;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2766));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2961, "SP-ignature", "", "SP-ignature", "SP-ignature");
      classWriter0.newFieldItem("", "RuntimeVisibleParameterAnnotations", "SP-ignature");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(4096, 4096);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassWriter classWriter0 = new ClassWriter((-2131));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 49, "p}B~", "", (String) null, "p}B~");
      ByteVector byteVector0 = new ByteVector();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteVector byteVector1 = byteVector0.putByte(1868);
      byteVector0.put12(0, 0);
      fieldWriter0.put(byteVector1);
      ClassWriter classWriter1 = new ClassWriter(2721);
      ByteVector byteVector2 = classWriter0.pool;
      fieldWriter0.put(byteVector1);
      assertSame(byteVector0, byteVector1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1174);
      FieldVisitor fieldVisitor0 = classWriter0.visitField(1174, "ConstantValue", "/9R|", "3-U6;{--0]`:q)*z3", "3-U6;{--0]`:q)*z3");
      classWriter0.newFieldItem("3-U6;{--0]`:q)*z3", "3-U6;{--0]`:q)*z3", "java/lang/Throwable");
      FieldWriter fieldWriter0 = classWriter0.firstField;
      fieldWriter0.visitEnd();
      assertSame(fieldWriter0, fieldVisitor0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6546695645285008
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "wheel.asm.MethodWriter", "Signature", "org.apache.commons.io.filefilter.WildcardFilter", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ByteVector byteVector1 = byteVector0.putByte(0);
      ByteVector byteVector2 = byteVector0.put12(131072, 0);
      fieldWriter0.put(byteVector2);
      ClassWriter classWriter1 = new ClassWriter(1);
      ByteVector byteVector3 = classWriter1.pool;
      fieldWriter0.put(byteVector3);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector1);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6108643020548935
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "9iz.", "9iz.", "9iz.", "9iz.");
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "9iz.", "9iz.", "9iz.", "9iz.");
      int int0 = fieldWriter0.getSize();
      assertEquals(24, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.064315403907995
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      int int0 = 0;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 0, "wheel.asm.MethodWriter", "Signature", (String) null, "org.apache.commons.io.filefilter.WildcardFilter");
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.getSize();
      ByteVector byteVector1 = byteVector0.putByte((-644));
      byteVector0.putLong(0L);
      byteVector0.putShort(4096);
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector1);
      fieldWriter0.getSize();
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(248);
      String string0 = "RuntimeInvisibleAnnotations";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "RuntimeInvisibleAnnotations", ">{]nYC", "", "");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte(1);
      fieldWriter0.visitAnnotation("Invalid IOCase name: ", true);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 1, "8\"3=]aO", "Deprecated", "8\"3=]aO", byteVector1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ByteVector@b
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0025953536096894
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "Signature", "a^3y.(GjK).$", "org.apache.commons.io.filefilter.WildcardFilter", "Signature");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte(4096);
      fieldWriter0.put(byteVector1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.io.filefilter.EmptyFileFilter");
      fieldWriter0.visitAnnotation("[~M6xT", true);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4096, "Signature", "a^3y.(GjK).$", "org.apache.commons.io.filefilter.WildcardFilter", "Signature");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte(4096);
      fieldWriter0.put(byteVector1);
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.WildcardFilter", false);
      FieldWriter fieldWriter1 = fieldWriter0.next;
      FieldWriter fieldWriter2 = classWriter0.firstField;
      fieldWriter2.put(byteVector1);
      assertSame(fieldWriter2, fieldWriter0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0360334832009355
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(4096);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1796), "a^3y.(GjK).$", "java/lang/String", "Signature", "org.apache.commons.io.filefilter.WildcardFilter");
      ByteVector byteVector0 = new ByteVector();
      byteVector0.putByte(74);
      fieldWriter0.getSize();
      byteVector0.put11(115, (-1687));
      ByteVector byteVector1 = new ByteVector(2953);
      byteVector1.put11((-2126), (-1796));
      byteVector1.put12(1791, 0);
      fieldWriter0.put(byteVector0);
      fieldWriter0.visitAnnotation("org.apache.commons.io.filefilter.EmptyFileFilter", false);
      int int0 = fieldWriter0.getSize();
      assertEquals(48, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.8599672810355049
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      int int0 = 131072;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "9iz.", "9iz.", "9iz.", "9iz.");
      fieldWriter0.visitAnnotation("9iz.", true);
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      fieldWriter0.getSize();
      String string0 = "j%isj\\ujx&";
      Attribute attribute0 = new Attribute(string0);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "", "", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(36, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(49);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 131072, "wheel.asm.MethodWriter", "Signature", "org.apache.commons.io.filefilter.WildcardFilter", (Object) null);
      Object object0 = new Object();
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 49, "java/lang/Throwable", "org.apache.commons.io.filefilter.WildcardFilter", "java/lang/Throwable", object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value java.lang.Object@16d1023b
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.comons.io.filefilter.WildcardFileFilter";
      classWriter0.visit(1868, 884, "zv1\"&JXQY\"IYXs@H", "org.apache.comons.io.filefilter.WildcardFileFilter", "org.apache.comons.io.filefilter.WildcardFileFilter", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-176), "", "", "", "");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(1, 2);
      fieldWriter0.put(byteVector1);
      fieldWriter0.getSize();
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(0);
      ClassWriter classWriter1 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter1, 4096, "", "{G<Vq", "", "");
      int int0 = fieldWriter0.getSize();
      assertEquals(30, int0);
      
      ByteVector byteVector0 = new ByteVector(2);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{G<Vq";
      stringArray0[1] = "";
      classWriter1.visit(1262, 1, "", "", "{G<Vq", stringArray0);
      ByteVector byteVector1 = classWriter1.pool;
      fieldWriter0.getSize();
      int int1 = fieldWriter0.getSize();
      assertEquals(24, int1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(196);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "wheel.asm.MethodWriter", "8\"3=]aO", "Deprecated", "wheel.asm.MethodWriter");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putByte(1);
      fieldWriter0.getSize();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)124;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)94;
      byteVector1.data = byteArray0;
      Attribute attribute0 = new Attribute("Deprecated");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }
}
