/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:49:05 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("Fq:/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Fq:/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.doubleToString(45);
      String string0 = jSONObject0.optString("45");
      assertEquals("", string0);
      
      JSONObject.doubleToString(1.0);
      String string1 = JSONObject.doubleToString(45);
      assertEquals("45", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 32;
      try { 
        jSONObject0.put((String) null, (long) 32);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.keys();
      try { 
        jSONObject0.getLong("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("iPsuc", (Object) "iPsuc");
      try { 
        jSONObject1.getJSONArray("iPsuc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iPsuc\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "y/,\n";
      JSONObject.quote("y/,\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"y/,\n\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"y/,
         // \"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject.quote("y/,\n");
      JSONTokener jSONTokener0 = new JSONTokener("y/,\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of y/,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = JSONObject.quote("y/,\n");
      assertEquals("\"y/,\\n\"", string0);
      
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString((-3458), (-3458));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject.quote("'\n");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'\n";
      stringArray0[1] = "'\n";
      stringArray0[2] = " vR!}ypr";
      stringArray0[3] = "'\n";
      stringArray0[4] = "'\n";
      stringArray0[5] = "'\n";
      stringArray0[6] = "'\n";
      stringArray0[7] = "'\n";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean("=*6Du1s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=*6Du1s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)65);
      jSONObject0.putOpt("=", byte0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = JSONObject.quote("Fq:/");
      assertEquals("\"Fq:/\"", string0);
      
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      jSONObject0.toString((-2995), (-2995));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject.quote("y/,\n");
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4566966450091385
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = JSONObject.quote("\n");
      assertEquals("\"\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("wheel.json.JSONObject", 2771);
      assertEquals(2771, int0);
      
      String string1 = jSONObject0.toString((-1218), 3326);
      assertEquals("{}", string1);
      
      String string2 = JSONObject.valueToString("wheel.json.JSONObject");
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.766294019897207
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = JSONObject.quote("y/,\n");
      assertEquals("\"y/,\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "y/,\n");
      int int0 = jSONObject0.optInt("\"y/,\n\"");
      assertEquals(0, int0);
      
      boolean boolean0 = jSONObject0.optBoolean("\"y/,\n\"", false);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
      
      String string1 = JSONObject.valueToString("\"y/,\n\"", 12, 16);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("k");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      String[] stringArray0 = JSONObject.getNames((Object) "qD!jl=nvbREY\"?rf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optLong(14);
      jSONArray0.optJSONObject((-298));
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JSONObject.quote("y/,\n");
      Double double0 = new Double((-952.339));
      String string1 = JSONObject.numberToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = JSONObject.quote("y/,\n");
      assertEquals("\"y/,\\n\"", string0);
      
      Byte byte0 = new Byte((byte) (-114));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "y/,\n";
      stringArray0[1] = "y/,\n";
      stringArray0[2] = "\"y/,\n\"";
      stringArray0[3] = "y/,\n";
      stringArray0[4] = "y/,\n";
      stringArray0[5] = "\"y/,\n\"";
      stringArray0[6] = "\"y/,\n\"";
      stringArray0[7] = "y/,\n";
      stringArray0[8] = "y/,\n";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string1 = jSONObject0.toString((int) (byte) (-114), (int) (byte) (-114));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.301273572363032
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = JSONObject.quote("y/,\n");
      assertEquals("\"y/,\\n\"", string0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      JSONArray jSONArray1 = jSONObject0.names();
      assertNotNull(jSONArray1);
      
      jSONObject0.toString((-1598), (-1598));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.450805020083924
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("97p:", true);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("]%+B'butQm`{", (Object) null);
      try { 
        jSONObject0.getJSONArray(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6301931932102298
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = JSONObject.quote("y/,\n");
      assertEquals("\"y/,\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "y/,\n");
      boolean boolean0 = jSONObject0.optBoolean("y/,\n");
      assertFalse(boolean0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = JSONObject.quote(")m?6&Q::IxR31F/T");
      assertEquals("\")m?6&Q::IxR31F/T\"", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.629182143364919
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject.quote("Unclosed comment");
      Double double0 = new Double((-2106.75298));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.getNames(jSONObject0);
      JSONObject.numberToString(double0);
      JSONObject.doubleToString((-2106.75298));
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.testValidity(jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.301273572363032
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = JSONObject.quote("y/,\n");
      assertEquals("\"y/,\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "\"y/,\n\"");
      jSONObject0.toString(10, 10);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7677103011358952
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "issum";
      jSONObject0.put("issum", (Object) "issum");
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", 0L);
      jSONObject1.optInt("JSONObject[");
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.getBoolean("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      String string0 = JSONObject.valueToString("ck");
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.String@0000000002\"", integer0);
      JSONObject.valueToString("ck");
      jSONObject0.optString("\"java.lang.String@0000000002\"", ",\n");
      jSONObject0.length();
      jSONObject1.optString(",\n", "\"java.lang.String@0000000002\"");
      assertEquals(2, jSONObject0.length());
      
      JSONObject.doubleToString((-372.0));
      JSONObject.quote("y/N,~jcxU&W,H");
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1, 13, 160);
      JSONObject.quote("ck");
      String string1 = JSONObject.quote("java.lang.Integer@0000000003");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 16);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Float float0 = new Float(942.8028F);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(128);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("issum", (Object) "issum");
      try { 
        jSONObject1.append("issum", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[issum] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4834996890609111
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject.quote("y/,\n");
      JSONObject jSONObject0 = new JSONObject((Object) "y/,\n");
      jSONObject0.toString();
      Boolean boolean0 = Boolean.valueOf(true);
      boolean boolean1 = Boolean.logicalAnd(false, false);
      JSONObject.testValidity(boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{auUYTTu;. -U");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {auUYTTu;. -U
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.48509409130221154
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject.quote("\n");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "' and instead saw '";
      stringArray0[1] = "\"\n\"";
      stringArray0[2] = "\n";
      stringArray0[3] = "\"\n\"";
      stringArray0[4] = "\"\n\"";
      stringArray0[5] = "\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "issc";
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.getNames((Object) jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("issc");
      try { 
        jSONTokener0.next(43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Substring bounds error at character 0 of issc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9404479886553264
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject.doubleToString((-1036.90648608));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("-1036.90648608");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "issum";
      JSONObject jSONObject1 = jSONObject0.put("issum", (Object) "issum");
      JSONObject jSONObject2 = jSONObject0.put("JSONObject[", 0L);
      jSONObject2.accumulate("JSONObject[", jSONObject1);
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.getBoolean("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("issuc", (Object) "issuc");
      JSONObject jSONObject2 = jSONObject1.accumulate("issuc", "issuc");
      jSONObject2.accumulate("issuc", "issuc");
      Object object0 = new Object();
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "DiPuc";
      jSONObject0.put("DiPuc", (Object) "DiPuc");
      Object object0 = new Object();
      jSONObject0.optLong("isequals", 247L);
      JSONObject.quote("DiPuc");
      try { 
        jSONObject0.getBoolean("DiPuc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DiPuc\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = new Integer(47);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      JSONObject.testValidity(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("JSON does not allow non-finite numbers.");
      Float float0 = new Float(808.4231334545718);
      assertEquals(808.42316F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6845649069716608
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "issuc";
      JSONObject jSONObject1 = jSONObject0.put("issuc", (Object) "issuc");
      JSONObject jSONObject2 = jSONObject1.put("hC)m$", 0L);
      jSONObject2.optLong("hC)m$", 0L);
      try { 
        jSONObject0.getBoolean("issuc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issuc\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = JSONObject.quote("'\n");
      Float float0 = new Float((-462.0F));
      String string1 = JSONObject.valueToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1226.7473306117));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "DiPuc";
      jSONObject0.put("DiPuc", (Object) "DiPuc");
      Object object0 = new Object();
      try { 
        jSONObject0.getLong("DiPuc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DiPuc\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5358551955461082
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("", (Object) "");
      Double.max((-1243.0), 1215.6071);
      Double.min(1.0, 1.0);
      Double.min((-1243.0), 1215.6071);
      Double.isFinite(1.0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(30, true);
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray1);
      assertEquals(31, jSONArray2.length());
      assertNotNull(jSONArray2);
      assertNotSame(jSONArray2, jSONArray0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = JSONObject.quote("y/,\n");
      assertEquals("\"y/,\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      String string0 = JSONObject.valueToString(linkedList0, 19, 19);
      assertEquals("[]", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 19, 19);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.558255126072715
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = JSONObject.quote("y/,\n");
      assertEquals("\"y/,\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "y/,\n");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      Writer writer1 = jSONArray0.write(writer0);
      jSONObject0.write(writer1);
      assertEquals(3, jSONObject0.length());
      
      Float float0 = new Float(0.0);
      JSONObject.numberToString(float0);
      String string1 = JSONObject.valueToString("y/,\n", 52, 1776);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = JSONObject.quote(")m?$&Q::IxR!1F/'bO");
      assertEquals("\")m?$&Q::IxR!1F/'bO\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string1 = JSONObject.valueToString(jSONObject0, (-2078), (-2078));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("C{");
      jSONTokener0.nextClean();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 2 of C{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7677103011358952
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Diptc", (Object) "Diptc");
      jSONObject1.remove("isput");
      jSONObject1.optLong("gettoString");
      try { 
        jSONObject0.getBoolean("Diptc");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Diptc\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "issum";
      jSONObject0.put("issum", (Object) "issum");
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", 0L);
      jSONObject1.put("issum", (double) 0L);
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.getBoolean("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("iG`:oi|U)+RS");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.max((-1243.0), 1215.6071);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      Float float0 = new Float(1.0);
      Double.isFinite((double) float0);
      jSONObject0.append("jhmvvAO", double0);
      jSONObject0.getJSONArray("jhmvvAO");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Fy", (long) 7);
      double double0 = jSONObject0.optDouble("Fy", (double) 298);
      assertEquals(7.0, double0, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a Boolean.", jSONArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("jU. Bg!?Zk2", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(1213);
      jSONObject0.write(stringWriter0);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1864;
      Long long0 = new Long(1864);
      jSONArray0.put(3052, (Object) long0);
      try { 
        jSONArray0.getBoolean(1864);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1864] is not a Boolean.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put(721, (Collection) linkedList0);
      Object object0 = new Object();
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      StringWriter stringWriter0 = new StringWriter(721);
      Writer writer0 = jSONArray1.write(stringWriter0);
      jSONObject0.write(writer0);
      JSONObject.testValidity(jSONArray0);
      Integer integer0 = new Integer(721);
      JSONObject jSONObject1 = jSONArray0.toJSONObject(jSONArray1);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 125, 125);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7677103011358952
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "issum";
      jSONObject0.put("issum", (Object) "issum");
      jSONObject0.put("JSONObject[", 0L);
      Double double0 = new Double(0.0);
      jSONObject0.optInt("issum", (-1));
      try { 
        jSONObject0.getBoolean("issum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issum\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashMap<Integer, Byte> hashMap0 = new HashMap<Integer, Byte>();
      String string0 = JSONObject.valueToString(hashMap0, 888, 888);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("JSONObject[", object0);
      JSONArray jSONArray0 = jSONObject1.optJSONArray("JSONObject[");
      assertEquals(1, jSONArray0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.6845649069716608
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("issum", (Object) "issum");
      jSONObject1.put("issum", false);
      JSONObject jSONObject2 = jSONObject0.put("JSONObject[", 0L);
      jSONObject2.keys();
      Double double0 = new Double(0.0);
      jSONObject0.getBoolean("issum");
      JSONTokener jSONTokener0 = new JSONTokener("issum");
      JSONObject.testValidity(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "issum";
      jSONObject0.put("issum", (Object) "issum");
      jSONObject0.put("JSONObject[", 0L);
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.getJSONObject("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("issum", (Object) "issum");
      JSONObject jSONObject1 = jSONObject0.put("issum", true);
      jSONObject0.put("JSONObject[", 0L);
      Double double0 = new Double(0.0);
      jSONObject0.getBoolean("issum");
      JSONTokener jSONTokener0 = new JSONTokener("issum");
      JSONObject.testValidity(jSONObject0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("=", (Object) jSONObject0);
      JSONObject jSONObject2 = jSONObject1.getJSONObject("=");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("JSONObject[", 0L);
      jSONObject1.getDouble("JSONObject[");
      JSONObject.testValidity(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.70805020110221
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      String string0 = "] not found.";
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] not found.", (Map) hashMap0);
      jSONObject1.optDouble("] not found.", (-2465.0));
      String string1 = "min";
      int int0 = (-1981);
      jSONObject0.toString((-1981), (-1981));
      JSONObject jSONObject2 = jSONObject0.optJSONObject("] not found.");
      String[] stringArray0 = new String[7];
      try { 
        jSONObject2.getDouble("min");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"min\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Integer integer0 = new Integer(119);
      Float float0 = new Float(0.0);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer1 = new Integer(119);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("Fq:/", object0);
      boolean boolean0 = jSONObject1.isNull("Fq:/");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-14530062));
      assertEquals("-1.4530062E7", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      JSONObject.quote("In6SI~b</( jOBu");
      JSONTokener jSONTokener0 = new JSONTokener("In6SI~b</( jOBu");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.0078651529566485
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray1 = jSONArray0.put(721, (Collection) linkedList0);
      Object object0 = new Object();
      JSONObject.testValidity(jSONArray0);
      Integer integer0 = new Integer(721);
      JSONObject jSONObject0 = jSONArray0.toJSONObject(jSONArray1);
      jSONObject0.toString((-298), (-298));
      JSONObject jSONObject1 = new JSONObject("{\n\"java.lang.String@0000000005\": [],\n\"java.lang.String@0000000006\": null\n}");
      String string0 = "`t @";
      JSONObject.quote("`t @");
      jSONObject1.keys();
      JSONObject.valueToString(jSONObject1, 4756, (-298));
      try { 
        jSONArray0.put((-1116245689), (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1116245689] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      String string0 = "{auUYT=uA.B-(";
      JSONTokener jSONTokener0 = new JSONTokener("{auUYT=uA.B-(");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 13 of {auUYT=uA.B-(
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("true", (Object) "true");
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{Y=");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 2 of {Y=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
