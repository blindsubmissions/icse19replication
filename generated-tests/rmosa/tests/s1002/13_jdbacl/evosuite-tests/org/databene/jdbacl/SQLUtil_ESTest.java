/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:39:24 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileNotFoundException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.util.List;
import java.util.Vector;
import java.util.function.Consumer;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNonUniqueIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueLob;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = new String[6];
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "<a";
      stringArray1[4] = "";
      stringArray1[5] = "";
      String string0 = SQLUtil.innerJoin("", stringArray0, "", "<a", stringArray1);
      assertEquals(" as <a on . = <a.null", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.normalize("iCRz8-P-wCVb*$", true);
      assertEquals("iCRz8 - P - wCVb * $", string0);
      
      boolean boolean0 = SQLUtil.isQuery("iCRz8-P-wCVb*$");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ", dBSchema0);
      DBDataType.getInstance(2447, "Xh%Q");
      DBDataType.getInstance(2447, "SELECT * FROM ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "SELECT * FROM ";
      stringArray0[2] = "Xh%Q";
      String string0 = SQLUtil.join("SELECT * FROM ", "SELECT * FROM ", stringArray0, "Xh%Q", "'", stringArray0);
      assertEquals("SELECT * FROM  join Xh%Q as ' on SELECT * FROM .SELECT * FROM  = '.SELECT * FROM  and SELECT * FROM .null = '.null and SELECT * FROM .Xh%Q = '.Xh%Q", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("create materialized view");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("execisvalid(int)");
      String string0 = "Currently positioned before the start of the ResultSet.  You cannot call deleteRow() here.";
      TableContainer tableContainer0 = new TableContainer(" 5'*7l4< ,CLC4");
      tableContainer0.getTable("6|&Cdkpj");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("create materialized view");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iCRz8-PwCVb*$");
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "iCRz8-PwCVb*$");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "intotablepriv");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("intotablepriv", stringBuilder0);
      stringBuilder1.append((CharSequence) stringBuilder0);
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("intotablepriv", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append("iCRz8-PwCVb*$");
      // Undeclared exception!
      try { 
        stringBuilder3.insert(1731, (CharSequence) stringBuilder1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // dstOffset 1731
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.4709001279172663
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("SELECT * FR[OM ");
      String string0 = SQLUtil.normalize("7/MSGI!p^@,", false);
      assertEquals("7 / MSGI !  p ^ @,", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7/MSGI!p^@,", defaultDBTable0, 364, "SELECT * FR[OM ");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("7/MSGI!p^@, SELECT * FR[OM  NULL", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[9];
      stringArray0[2] = "Md=el2Po";
      stringArray0[5] = "?{F_R'(x7jy^K-o";
      stringArray0[6] = "w9(!ui[pDBiX'miL.Su";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , Md=el2Po, , , ?{F_R'(x7jy^K-o, w9(!ui[pDBiX'miL.Su, , )", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "M+/,";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = " x>D#_.I";
      stringArray0[3] = "";
      stringArray0[4] = "M+/,";
      stringArray0[5] = "";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(" x>D#_.I", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("lC`P|Mlh", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("lC`P|Mlh", dBPackage0);
      SQLUtil.ownerDotComponent(dBProcedure0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      String string0 = "z9itmw&SAqYzo";
      TableContainer tableContainer0 = new TableContainer("z9itmw&SAqYzo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("z9itmw&SAqYzo");
      tableContainer0.toString();
      DBDataType dBDataType0 = DBDataType.getInstance((-1431), "z9itmw&SAqYzo");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("z9itmw&SAqYzo", defaultDBTable0, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("z9itmw&SAqYzo", defaultDBTable0, dBDataType0);
      defaultDBColumn1.setTable(defaultDBTable0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.isProcedureCall("z9itmw&SAqYzo");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("z9itmw&SAqYzo, z9itmw&SAqYzo");
      // Undeclared exception!
      try { 
        defaultDBTable1.getUniqueConstraint("z9itmw&SAqYzo");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Character character0 = new Character('P');
      SQLUtil.substituteMarkers(" cLd}J*+>Z6@&t61s$", "g38x", " cLd}J*+>Z6@&t61s$");
      Random.setNextRandom(22);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = " AND ";
      TableContainer tableContainer0 = new TableContainer(" AND ", defaultDBTable0);
      SQLUtil.ownerDotComponent(tableContainer0);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      // Undeclared exception!
      try { 
        DBDataType.getInstance(";{iMu5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "isvalidVin";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, "isvalidVin", "isvalidVin", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2417), " as ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", (DBTable) null, dBDataType0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" as   AS (1) NULL", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.40869772507431423
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("iCRz8-P-wCVb*$", true);
      String string0 = "d)j2x^?-RfT4";
      String string1 = "selectconne";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("insertselectconnectionpooldatasource from", false, "d)j2x^?-RfT4", "selectconne");
      dBCheckConstraint0.setDoc("iCRz8-P-wCVb*$");
      Object object0 = new Object();
      dBCheckConstraint0.equals(object0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.40869772507431423
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.normalize("iCRz8-P-wCVb*$", true);
      boolean boolean0 = false;
      String string0 = "d)j2x^?-RfT4";
      String string1 = "selectconne";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("insertselectconnectionpooldatasource from", false, "d)j2x^?-RfT4", "selectconne");
      dBCheckConstraint0.setName("iCRz8-P-wCVb*$");
      dBCheckConstraint0.setDoc("iCRz8-P-wCVb*$");
      Object object0 = new Object();
      dBCheckConstraint0.equals(object0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "Unknown constraint type: ";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[5] = "Unknown constraint type: ";
      stringArray0[6] = "";
      stringArray0[7] = "#U)-E~yR";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("K]zt9gsSgKCdjv", dBSchema0);
      dBPackage0.toString();
      dBPackage0.setSubObjectName("h");
      SQLUtil.removeComments("K]zt9gsSgKCdjv");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("80000012-00d0-fd77-3ed8-000a0a0b1900");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#U)-E~yR", defaultDBTable0, 7, "Unknown constraint type: ");
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setFractionDigits(integer0);
      SQLUtil.normalize("#U)-E~yR", true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = null;
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("&X(r0iEjn8Tk>21f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '&X(r0iEjn8Tk>21f' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "9_gBA>Pwzw/4\"V}bP";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "selectselect * from", false, stringArray0);
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (9_gBA>Pwzw/4\"V}bP, )", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(94);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".>?vvoZyi<");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".>?vvoZyi<";
      stringArray0[1] = "deleteselectselect * from";
      stringArray0[2] = ".>?vvoZyi<";
      stringArray0[3] = ".>?vvoZyi<";
      stringArray0[4] = "selectji / (gc1q  ? \"%q&\"";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ".>?vvoZyi<", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Integer integer0 = RawTransaction.COMMIT;
      String[] stringArray0 = new String[4];
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  WHERE null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("r_3pw,U~`", true);
      assertEquals("r_3pw, U ~ `", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = SQLUtil.normalize("getNString(String)", true);
      assertEquals("getNString (String)", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      DBDataType dBDataType0 = DBDataType.getInstance(228, "Internal error: class name for user defined type has not been determined yet.");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o0FTF3T$E2`^.", (DBTable) null, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("INTERNAL ERROR: CLASS NAME FOR USER DEFINED TYPE HAS NOT BEEN DETERMINED YET.", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = "create materialized view";
      MockFileWriter mockFileWriter0 = new MockFileWriter("create materialized view");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "create materialized view");
      StringBuilder stringBuilder1 = stringBuilder0.append((StringBuffer) null);
      stringBuilder1.reverse();
      String[] stringArray0 = new String[8];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter index", true, stringArray0);
      SQLUtil.normalize("create materialized view", false);
      boolean boolean0 = true;
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("create materialized view");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "selectselect * from");
      StringWriter stringWriter0 = new StringWriter(1890);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, false, defaultDBTable0, "dkyM8X");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("SELECT * FR[OM ");
      DBSchema dBSchema0 = new DBSchema("SELECT * FR[OM ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FR[OM ", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FR[OM ", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FR[OM ", false, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.45820823797145316
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.normalize("iCRz8-P-wCVb*$", true);
      assertEquals("iCRz8 - P - wCVb * $", string0);
      
      StringReader stringReader0 = new StringReader("truncate>ufspn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
      
      String string2 = SQLUtil.removeComments("iCRz8 - P - wCVb * $");
      assertTrue(string2.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getNString(String)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(";@:3(\"n7");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: ;@:3(\"n7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("SELECT * FR[OM ");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog SELECT * FR[OM ", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = SQLUtil.normalize("Ut}Y4!z/Ze$S4y$b", true);
      assertEquals("Ut } Y4 ! z / Ze $ S4y $ b", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "execute";
      SQLUtil.isProcedureCall("execute");
      StringBuilder stringBuilder0 = null;
      SQLUtil.removeComments(" cLd}J*+>Z6@&t61s$");
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("execute", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(": b-tree leaf ", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("Yg38x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ", dBSchema0);
      String[] stringArray0 = new String[3];
      dBCatalog0.setName("SELECT * FROM ");
      stringArray0[0] = "SELECT * FROM ";
      SQLUtil.removeComments("truncate");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("qkGl_Na");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o0FTF3T$E2`^.", defaultDBTable0, 7, "SELECT * FROM ");
      SQLUtil.removeComments("SELECT * FROM ");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.isDML("insertselectconnectionpooldatasource from");
      SQLUtil.parseColumnTypeAndSize("selectconne");
      String string0 = SQLUtil.removeComments("d)j2x^?-RfT4");
      assertEquals("d)j2x^?-RfT4", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SQLUtil.removeComments("SELECT * FROM ");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("insert");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "isvalid(in";
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, (String) null, (String[]) null, (String) null, "isvalid(in", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "DF&gMXi.0,6|!!I)N");
      String string0 = null;
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("&X(r0iEjn8Tk>21f", stringBuilder0);
      Integer integer0 = RawTransaction.COMMIT;
      stringBuilder1.append((Object) integer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("jI/(GC1QX(?\"%T%", false);
      assertEquals("jI / (GC1QX (? \"%T%\"", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3245083869310707
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = SQLUtil.normalize("tK%k(-*", true);
      assertEquals("tK % k (- *", string0);
      
      boolean boolean0 = SQLUtil.isQuery("selectselectselect * from");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ", dBSchema0);
      String[] stringArray0 = new String[1];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-3083), "org.apache.derby.impl.store.access.RAMTransactionContext");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = new Integer(335544328);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer3 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, dBDataType0, integer3, integer3);
      SQLUtil.renderColumn(defaultDBColumn0);
      Random.setNextRandom(335544328);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(44);
      SQLUtil.addRequiredCondition("iCRz.@d-P-wCVb*$", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iCRz.@d-P-wCVb*$");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("iCRz.@d-P-wCVb*$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'iCRz.@d-P-wCVb*$' not found in table 'iCRz.@d-P-wCVb*$'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = SQLUtil.normalize("Jlsy|4B(]XuAf.}p", false);
      assertEquals("Jlsy | 4B (] XuAf.} p", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("hBRh{9:@>uO`|^", defaultDBTable0, (-2), "XyI \"4:s5");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Vector<DBColumn> vector1 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector1.add((DBColumn) defaultDBColumn0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("hBRh{9:@>uO`|^, hBRh{9:@>uO`|^", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("iCRz8-P-wCVb*$", true, defaultDBTable0, "into");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK into", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("SELECT * FR[OM ");
      DBSchema dBSchema0 = new DBSchema("SELECT * FR[OM ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FR[OM ", dBSchema0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT * FR[OM ", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      SQLUtil.constraintName(dBPrimaryKeyConstraint1);
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop indexl7/l9]'%,", false);
      assertEquals("drop indexl7 / l9 ] '%,'", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = "";
      Character character0 = Character.valueOf('\"');
      SQLUtil.renderValue(character0);
      String string1 = "p{6\\#/w(dG}u?wE;rg<";
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("", true, "", "p$(ws7D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("DATE");
      SQLUtil.removeComments("call");
      Character.valueOf(']');
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("call", defaultDBTable0, 373, "DATE");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderValue(defaultDBColumn0);
      boolean boolean0 = true;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "call : DATE";
      stringArray0[1] = "DATE";
      String string0 = "executegetnstrn(tring)";
      stringArray0[2] = "executegetnstrn(tring)";
      stringArray0[3] = "call";
      stringArray0[3] = "call";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "?Z", true, stringArray0);
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("jV#mFKBQm?", true, "exx*|9aRM(~", "exx*|9aRM(~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBCatalog dBCatalog1 = new DBCatalog("*R$G?'TV]yH+^z7)");
      String string0 = SQLUtil.normalize("7/MSGI!p^@,", true);
      assertEquals("7 / MSGI !  p ^ @,", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("7 / MSGI !  p ^ @,", defaultDBTable0, 364, "truncateorg.databene.jdbacl.sqlutil");
      defaultDBColumn0.setDefaultValue("7/MSGI!p^@,");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("7 / MSGI !  p ^ @, TRUNCATEORG.DATABENE.JDBACL.SQLUTIL DEFAULT 7/MSGI!p^@, NULL", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("cOM7>xy");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("cOM7>xy", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cOM7>xy";
      stringArray0[1] = "cOM7>xy";
      stringArray0[2] = "cOM7>xy";
      stringArray0[3] = "cOM7>xy";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "cOM7>xy", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT cOM7>xy UNIQUE (cOM7>xy, cOM7>xy, cOM7>xy, cOM7>xy)", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iCRz8-PwCVb*$");
      defaultDBTable0.getPrimaryKeyConstraint();
      MockFile.createTempFile("A<ZZ", "O");
      MockFile mockFile0 = new MockFile("vtrzl0");
      mockFile0.setReadOnly();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "O";
      stringArray0[0] = "postgresql";
      stringArray0[2] = "vtrzl0";
      stringArray0[3] = "postgresql";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("rename", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("vtrzl0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.7595473914748635
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.flush();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, true);
      DBDataType dBDataType0 = DBDataType.getInstance(9, "selectany");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vtrzL0EZ", defaultDBTable0, dBDataType0);
      dBDataType0.isNumber();
      defaultDBColumn0.setNullable(false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "vtrzL0EZ");
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "postgresql";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("truncate", 7);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      MockFile.createTempFile("VMS,", "VMS,");
      MockFile mockFile0 = new MockFile("postgresql");
      mockFile0.setReadOnly();
      mockFile0.toURI();
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-87498158));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil.isQuery("alter sessioncreate unique index");
      SQLUtil.mutatesDataOrStructure("alter sessioncreate unique index");
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)44;
      byteArray0[3] = (byte)34;
      byteArray0[6] = (byte) (-40);
      byteArray0[4] = (byte)6;
      byteArray0[6] = (byte) (-87);
      ValueLob valueLob0 = ValueLob.createSmallLob(33, byteArray0);
      Reader reader0 = valueLob0.getReader();
      assertNotNull(reader0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Cannot establish a savepoint in auto-commit mode.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 5.0;
      streamTokenizer0.wordChars((-1256030635), (-1256030635));
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"<YB3Vzb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      String string0 = SQLUtil.typeAndName(dBUniqueConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("getNString(Strng)");
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[2] = "getNString(Strng)";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      assertNull(dBUniqueConstraint0.getName());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PipedWriter pipedWriter0 = new PipedWriter();
      pipedWriter0.flush();
      DBDataType dBDataType0 = DBDataType.getInstance(9, "selectany");
      dBDataType0.isAlpha();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("vtrzL0EZ", defaultDBTable0, dBDataType0);
      dBDataType0.isNumber();
      defaultDBColumn0.setNullable(false);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "vtrzL0EZ");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("vtrzL0EZSELECTANY", stringBuilder0.toString());
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn0.getNotNullConstraint();
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("vtrzL0EZ NOT NULL", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLUtil.isQuery("HCn");
      StringWriter stringWriter0 = new StringWriter();
      SQLUtil.normalize("VXsM,BoX.{ Nv", false);
      Random.setNextRandom(1890);
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 378.0160807702;
      streamTokenizer0.pushBack();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("378.0160807702", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 378.0160807702;
      streamTokenizer0.nval = (-609.0837936511);
      streamTokenizer0.pushBack();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 609.0837936511", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("iCRz8-PwCVb*$");
      defaultDBTable0.getPrimaryKeyConstraint();
      MockFile.createTempFile("A<ZZ", "O");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "vtrzl0";
      stringArray0[1] = "postgresql";
      stringArray0[3] = "iCRz8-PwCVb*$";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte) (-33);
      byteArray0[4] = (byte) (-40);
      byteArray0[5] = (byte) (-73);
      byteArray0[6] = (byte) (-18);
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte) (-90);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[5] = "A<ZZ";
      stringArray0[6] = "alter table";
      stringArray0[7] = "O";
      stringArray0[8] = "O";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("alter table", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("B[ev(!lerJv?k");
      mockPrintStream0.append('=');
      defaultDBTable0.getCheckConstraints();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      Random.setNextRandom(1527);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("agV(");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ")4WBv", false, (String[]) null);
      DBDataType dBDataType0 = DBDataType.getInstance(1425, ")4WBv");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("agV(", defaultDBTable0, dBDataType0, integer0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      SQLUtil.normalize("led5~v", true);
      DBDataType dBDataType1 = DBDataType.getInstance((-4296), "selectselectselect * from");
      dBDataType1.isAlpha();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("selectselectselect * from", defaultDBTable0, dBDataType1);
      SQLUtil.mutatesDataOrStructure("selectselectselect * from");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.isQuery("select into");
      System.setCurrentTimeMillis((-750L));
      System.setCurrentTimeMillis((-750L));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String string0 = " cLd}J.+>\\|6@&W61sH$";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"BLOCK BIGINT PRIMARY KEY\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/%<8,A VUP6y]q``";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "/%<8,A VUP6y]q``", false, stringArray0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte) (-112);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)72;
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte)72;
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("/%<8,A VUP6y]q``", true, dBUniqueConstraint0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBSchema dBSchema0 = new DBSchema("iCRz.@d-P-wCb*$", (DBCatalog) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m", dBSchema0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "m";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "drop materialized view", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("drop materialized viewexecisvalid(int)", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("iCRz.@d-P-wCb*$", false, dBTable0, "Y7");
      dBCheckConstraint0.setDoc("m");
      MockFile mockFile0 = new MockFile("drop materialized viewexecisvalid(int)", "w'&SJ<jVp");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      PrintWriter printWriter0 = mockPrintWriter0.append('h');
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("xG&z??d");
      Random.setNextRandom((-472));
      String string0 = SQLUtil.normalize("/**/", true);
      String string1 = SQLUtil.removeComments("/**/");
      assertTrue(string1.equals((Object)string0));
  }
}
