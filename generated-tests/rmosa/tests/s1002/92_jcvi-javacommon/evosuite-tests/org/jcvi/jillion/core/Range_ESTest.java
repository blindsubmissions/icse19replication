/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:01:31 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 2147483647, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-2040L), (-2040L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(2295L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange("NyN>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse NyN> into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8188800115145765
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(2147486522L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      range0.equals("i},0MyviIh");
      // Undeclared exception!
      try { 
        Range.parseRange("i},0MyviIh", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse i},0MyviIh into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = (-32768L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-32768L));
      range_Builder0.contractEnd((-32768L));
      range_Builder0.shift((-32768L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372032559808512L);
      range_Builder1.expandEnd(9223372032559808512L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = 2170L;
      Range.Builder range_Builder0 = new Range.Builder(2170L);
      range_Builder0.expandBegin((-2048L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2170L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.contains(range0));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6941537039844587
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("V`2KKk \"j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.V`2KKk \"j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967296L);
      long long0 = 578L;
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-654L), 2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.986841428023679
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 325L);
      range0.getEnd();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.936158557953129
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-9223372036854772633L));
      range0.getBegin();
      Long long0 = new Long(1507L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      
      long long1 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-9223372036854772633L), long1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      long long0 = (-2216L);
      range_Builder0.contractBegin((-2216L));
      range_Builder0.contractEnd((-2216L));
      range_Builder0.contractBegin(0L);
      range_Builder0.expandBegin(0L);
      range_Builder0.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("eV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.eV
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.694153703984459
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("V`2KKk \"j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.V`2KKk \"j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7920474405363453
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(319L);
      Range range1 = Range.of(65535L);
      range1.endsBefore(range0);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      List<Range> list0 = range0.split(9191L);
      assertTrue(list0.contains(range0));
      
      Object object0 = new Object();
      Object object1 = new Object();
      long long0 = range0.getBegin();
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 469L, 9223372032559808513L);
      // Undeclared exception!
      try { 
        range0.split(9223372032559808513L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -8589934123 would make range [9223372032559808981 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(1324L);
      range0.split(1324L);
      range0.getBegin();
      Object object0 = new Object();
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 305L, 305L);
      range0.toString();
      Range.of(range_CoordinateSystem0, 922L, 922L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(305L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9190235060608334
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-32768L));
      range0.intersection(range1);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = 9223372036854775803L;
      Range range0 = Range.ofLength(9223372036854775803L);
      Object object0 = new Object();
      range0.getBegin();
      range0.toString();
      Range range1 = Range.ofLength(0L);
      range0.intersection(range1);
      Long long1 = new Long(9223372036854775803L);
      try { 
        Long.parseUnsignedLong("[ 0 .. 9223372036854775802 ]/0B", (-159));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -159 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      range0.getEnd();
      Object object0 = new Object();
      range0.intersects(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-121L));
      Range range1 = Range.of((-115L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      range1.intersects(range0);
      Long long0 = new Long((-121L));
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.complement(range1);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators range_Comparators0 = Range.Comparators.SHORTEST_TO_LONGEST;
      Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.360478832842638
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.ofLength(1L);
      Range range2 = Range.of(1L);
      boolean boolean0 = range0.endsBefore(range2);
      assertFalse(boolean0);
      
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(0, list1.size());
      
      long long0 = range0.getBegin();
      assertEquals(255L, long0);
      
      Object object0 = new Object();
      Range range3 = Range.ofLength(1L);
      boolean boolean1 = range2.equals(range3);
      assertFalse(boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range3.getEnd(range_CoordinateSystem0);
      assertSame(range3, range1);
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.367295829986472
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775800L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("V`2KKk \"j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.V`2KKk \"j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9533508035575085
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 290L, 290L);
      range0.equals("");
      String string0 = range0.toString();
      assertEquals("[ 290 .. 289 ]/0B", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 945L, 945L);
      long long0 = range1.getLength();
      assertEquals(0L, long0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.contains(range0));
      
      Range.CoordinateSystem.values();
      long long1 = range1.getEnd();
      assertTrue(range1.isEmpty());
      assertEquals(944L, long1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.425694050284179
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(745L);
      Range range1 = Range.ofLength(1324L);
      List<Range> list0 = range1.split(745L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(2, list1.size());
      assertFalse(list1.equals((Object)list0));
      
      range1.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(1324L, long0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.758771692455391
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 521L, 9223372036854775559L);
      range0.getBegin();
      range0.getLength();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 521L, 9223372036854775038L);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      long long0 = range0.getEnd();
      assertEquals(9223372036854775558L, long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.212171379561746
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-121L));
      Range range1 = Range.of((-95L));
      range0.toString();
      range1.complement(range0);
      range0.equals("{}dZ-U");
      Long long0 = new Long((-121L));
      range0.equals(range1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ -121 .. -121 ]/0B", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -121 .. -121 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.809783478004049
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2040L), (-2040L));
      long long0 = range0.getEnd();
      assertEquals((-2041L), long0);
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9768269466692368
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = Range.of((-65180L));
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.950137844444038
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long((-2147483648L));
      range0.equals(long0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9728457116721207
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-121L));
      Range range1 = Range.of((-115L));
      Long long0 = new Long((-121L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      String string0 = range1.toString();
      assertEquals("[ -115 .. -115 ]/0B", string0);
      
      range0.equals(range1);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      long long1 = range0.getBegin();
      assertEquals((-121L), long1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8114194983013414
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      String string0 = "V`2KKk \"j";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("V`2KKk \"j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.V`2KKk \"j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.ofLength(9L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.7719278879609686
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of(4294967296L);
      Range.of(4294967296L);
      String string0 = range0.toString();
      assertEquals("[ 4294967296 .. 4294967296 ]/0B", string0);
      
      Range range1 = Range.of(9223372036854775807L);
      Range.CoordinateSystem.values();
      boolean boolean0 = range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2040L), (-2040L));
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.922718206608823
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 470L, 2147483658L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 470L, 2147483658L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 366L, 366L);
      String string0 = range0.toString();
      assertEquals("[ 366 .. 365 ]/0B", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 893L, 893L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Range.Comparators.values();
      Range.Comparators.values();
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(321L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals(321L, long0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Object object0 = new Object();
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Object object0 = new Object();
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.ofLength(4294967323L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.880058105880462
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getBegin();
      Object object0 = new Object();
      range0.iterator();
      Long long0 = new Long(0L);
      range0.equals(object0);
      range0.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-32523L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(9223372034707292162L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.file can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.9237840993113355
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range range0 = Range.of((-472L), (-472L));
      Range range1 = Range.of((-602L), (-472L));
      Long long0 = new Long((-472L));
      Long.getLong("", (-602L));
      range0.equals(range1);
      Object object0 = new Object();
      range0.equals(object0);
      range1.equals(long0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of((-472L));
      range0.getBegin();
      Range range1 = Range.of((-2040L));
      boolean boolean0 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range2 = Range.of((-2040L));
      long long0 = range2.getBegin();
      assertEquals((-2040L), long0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7920474405363453
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = 321L;
      Range range0 = Range.of(321L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.ofLength(255L);
      Range range1 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 255 .. 255 ]/0B", string0);
      
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Long long0 = new Long(65535L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 65535 .. 65536 ]/SB", string0);
      
      range0.isEmpty();
      Object object0 = new Object();
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.953350803557508
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.getBegin();
      Range range1 = Range.of(167L, 4294967295L);
      range1.toString();
      range1.getBegin();
      range0.equals(range1);
      range1.getEnd();
      Range range2 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      range2.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("V`2KKk \"j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.V`2KKk \"j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(4294967296L);
      Range range1 = Range.of(4294967296L);
      long long0 = range1.getEnd();
      assertEquals(4294967296L, long0);
      
      range1.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getEnd();
      Object object0 = new Object();
      Long.getLong("w^/K)");
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range range1 = range0.asRange();
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(139L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getEnd();
      assertEquals((-128L), long0);
      
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators.values();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Long long0 = new Long(4294967295L);
      boolean boolean0 = range0.equals(range0);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.8979325974734658
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getBegin();
      Object object0 = new Object();
      range0.iterator();
      Long long0 = new Long(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.694153703984459
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(4294967295L);
      range0.intersects(range1);
      boolean boolean0 = range1.intersects(range0);
      boolean boolean1 = range1.equals(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      range0.equals(range0);
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      String string0 = range0.toString();
      assertEquals("[ -2147483648 .. -2147483648 ]/0B", string0);
      
      Range range1 = Range.of((-2147483648L));
      Long.getLong("[ -2147483648 .. -2147483648 ]/0B");
      range0.equals((Object) null);
      assertSame(range0, range1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of(321L, 321L);
      range0.getBegin();
      String string0 = range0.toString();
      assertEquals("[ 321 .. 321 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 321L, 1546L);
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      range0.getEnd();
      long long0 = range1.getEnd();
      assertEquals(1545L, long0);
      
      range0.equals((Object) null);
      long long1 = range0.getEnd();
      assertEquals(321L, long1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of((-32770L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.8243659399169285
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 470L, 2147483658L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 469 .. 2147483658 ]/SB", string0);
      
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 470L, 2147483658L);
      boolean boolean0 = range0.equals(range1);
      range1.getEnd();
      range1.getEnd();
      range1.getBegin();
      boolean boolean1 = range0.equals(range_CoordinateSystem2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-9223372036854772682L));
      Long long0 = new Long((-9223372036854772682L));
      Long long1 = new Long(1507L);
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      
      range0.equals((Object) null);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.9293442565360017
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(2147486522L);
      Object object0 = new Object();
      range0.iterator();
      Long long0 = new Long(2147486522L);
      Range range1 = Range.of(4294967295L);
      range1.getEnd();
      range1.endsBefore(range0);
      range0.equals(range1);
      range0.getBegin();
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967341L, 9223372036854775559L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2040L), (-2040L));
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 818L, 9223372036854775685L);
      long long0 = range0.getEnd();
      assertEquals(9223372036854775684L, long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967312L, 9223372036854775559L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.961733480018979
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775803L);
      Object object0 = new Object();
      Range range1 = Range.of(236L, 9223372036854775803L);
      range1.getEnd();
      range0.equals(range1);
      long long0 = range1.getEnd();
      assertEquals(9223372036854775803L, long0);
      
      range1.getBegin();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.056176074369987
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range range0 = Range.of((-9223372036854772654L), (-9223372036854772654L));
      range0.getBegin();
      String string0 = range0.toString();
      assertEquals("[ -9223372036854772654 .. -9223372036854772654 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854772654L), (-9223372036854772654L));
      range1.getEnd();
      long long0 = range1.getEnd();
      assertEquals((-9223372036854772655L), long0);
      
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      long long1 = range0.getEnd();
      assertEquals((-9223372036854772654L), long1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.1408921251271615
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of((-9223372036854772633L), (-9223372036854772633L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854772633L), 526L);
      Long long0 = new Long(526L);
      Long.max(127L, (-579L));
      Long long1 = Long.getLong("", long0);
      range1.equals(long1);
      range0.isSubRangeOf(range1);
      range1.getBegin();
      Long long2 = new Long(65535L);
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854772633L), 526L);
      range2.getBegin(range_CoordinateSystem0);
      range0.equals(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 469L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775803L);
      Object object0 = new Object();
      Long long0 = new Long(320L);
      Long long1 = new Long(320L);
      Long.getLong("xa!t$A(", long1);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("Xne~G69B%f;#v-64-3", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range range1 = Range.of((-1L));
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65533L, 65533L);
      range0.toString(range_CoordinateSystem0);
      boolean boolean0 = range0.equals("[ 65533 .. 65533 ]/SB");
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 65533 .. 65533 ]/SB", string0);
      
      Range range1 = Range.parseRange("[ 65533 .. 65533 ]/SB", range_CoordinateSystem0);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getBegin();
      Object object0 = new Object();
      long long0 = 1L;
      Long long1 = new Long(1L);
      range0.equals(long1);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.8444872614601695
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Long long0 = new Long(65535L);
      range0.equals((Object) null);
      range0.equals(long0);
      range0.toString(range_CoordinateSystem0);
      range0.equals("[ 65535 .. 65535 ]/SB");
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 65535 .. 65535 ]/SB", range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 268L, 268L);
      Long long0 = new Long(948L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(9223372036854775476L);
      Range range1 = Range.of(9223372036854775807L);
      String string0 = range1.toString();
      assertEquals("[ 9223372036854775807 .. 9223372036854775807 ]/0B", string0);
      
      Range.CoordinateSystem.values();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775797L);
      Object object0 = new Object();
      range0.startsBefore(range0);
      range0.iterator();
      range0.getEnd();
      Range range1 = Range.ofLength(9223372036854775796L);
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775559L);
      range0.getEnd();
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 470L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.2188758248681983
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(4294967129L, 4294967129L);
      range0.getBegin();
      String string0 = range0.toString();
      assertEquals("[ 4294967129 .. 4294967129 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967129L, 4294967129L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 4294967129 .. 4294967129 ]/0B", range_CoordinateSystem1);
      range1.getEnd();
      Range range2 = Range.of(4294967128L, 4294967129L);
      boolean boolean0 = range2.equals(range0);
      assertFalse(boolean0);
      
      long long0 = range2.getEnd();
      assertEquals(4294967129L, long0);
      assertFalse(range2.equals((Object)range1));
      
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.8526379562735795
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 469L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 948L, 2147483647L);
      range1.getLength();
      range0.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(2147486522L);
      Range.of(1855L);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775559L);
      long long0 = range0.getLength();
      assertEquals(9223372032559808264L, long0);
      
      long long1 = range0.getEnd();
      assertEquals(9223372036854775558L, long1);
      
      Long long2 = new Long(9223372036854775559L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854775558L);
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775559L);
      long long0 = range0.getLength();
      assertEquals(9223372032559808265L, long0);
      
      long long1 = range0.getEnd();
      assertEquals(9223372036854775558L, long1);
      
      Long long2 = new Long(9223372036854775559L);
      range0.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372036854775558L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(0L);
      range0.equals(range1);
      String string0 = "V`2KKk \"j";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("V`2KKk \"j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.V`2KKk \"j
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-9223372036854772654L), (-9223372036854772654L));
      range0.getBegin();
      String string0 = range0.toString();
      assertEquals("[ -9223372036854772654 .. -9223372036854772654 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-9223372036854772654L), (-9223372036854772654L));
      long long0 = new Long((-9223372036854772654L));
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      
      long long1 = range0.getEnd();
      assertEquals((-9223372036854772654L), long1);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854775559L);
      long long0 = range0.getLength();
      assertEquals(9223372032559808264L, long0);
      
      Long long1 = new Long(9223372036854775559L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967295L, 9223372032559808264L);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
      
      long long2 = range0.getBegin();
      assertEquals(4294967295L, long2);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Long long0 = new Long(65535L);
      range0.equals(long0);
      range0.toString(range_CoordinateSystem0);
      range0.equals("[ 65535 .. 65535 ]/RB");
      range0.toString(range_CoordinateSystem0);
      Range.parseRange("[ 65535 .. 65535 ]/RB", range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("9,0ZPq1$[VS.$Df*", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.0539064307234254
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-65180L), (-65180L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-65180L));
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-2147483648L), long0);
      
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -65180 .. -65180 ]/0B", string0);
      
      Range.Comparators.values();
      Range.Comparators.values();
      range0.equals(range1);
      Long long1 = Long.valueOf(9223372036854774999L);
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      long long2 = range0.getBegin();
      assertEquals((-65180L), long2);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.1711062139668265
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 469L, 9223372032559808513L);
      range0.toString(range_CoordinateSystem0);
      Range.of(9223372032559808513L);
      Range range1 = Range.parseRange("[ 469 .. 9223372032559808513 ]/RB");
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 469 .. 9223372032559808513 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 469 .. 9223372032559808513 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2260L), (-2260L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2260L), (-2260L));
      String string0 = range1.toString();
      assertEquals("[ -2260 .. -2261 ]/0B", string0);
      
      range1.getEnd();
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      
      long long0 = range0.getEnd();
      assertSame(range0, range1);
      assertEquals((-2261L), long0);
  }
}
