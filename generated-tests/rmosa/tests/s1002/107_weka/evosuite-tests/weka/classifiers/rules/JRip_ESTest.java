/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:39:01 GMT 2018
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.JRip;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(3437L);
      assertEquals(3437L, jRip0.getSeed());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.optimizationsTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("The number of optimization runs.", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.usePruningTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether pruning is performed.", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[4];
      JRip.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getFolds();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      int[] intArray0 = new int[18];
      intArray0[1] = 3;
      intArray0[4] = (-64);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      try { 
        inputMappedClassifier0.constructMappedInstance(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      assertEquals(3, jRip0.getFolds());
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      Utils.SMALL = (-839.793965584584);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("JRIP: No model built yet.", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-839.793965584584);
      Locale.getISOLanguages();
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(3, jRip1.getFolds());
      assertNotSame(jRip_RipperRule1, jRip_RipperRule0);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte) (-36);
      byteArray0[3] = (byte) (-36);
      byteArray0[5] = (byte)71;
      byteArray0[6] = (byte) (-4);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip jRip1 = new JRip();
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(3, jRip1.getFolds());
      assertEquals(1L, jRip1.getSeed());
      assertFalse(jRip1.getDebug());
      assertTrue(jRip1.getUsePruning());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      String string0 = jRip_NumericAntd0.getRevision();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "relational";
      Attribute.main(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("R.i1'VI<+YW]", arrayList0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[1] = (-17);
      intArray0[2] = 4;
      intArray0[3] = (-17);
      intArray0[4] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-17), intArray0, (-17));
      instances0.add((Instance) binarySparseInstance0);
      Attribute attribute1 = new Attribute("numeric", (List<String>) null);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 70, (-17));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers((Instance) null);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-13));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds(19);
      assertEquals(19, jRip0.getFolds());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-377.9));
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-1924));
      assertEquals((-1924), jRip0.getOptimizations());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Attribute attribute0 = new Attribute("\nGrowing and pruning a new rule ...", (List<String>) null);
      attribute0.addStringValue("\nGrowing and pruning a new rule ...");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.att = attribute0;
      jRip_NumericAntd0.getAccu();
      SparseInstance sparseInstance0 = new SparseInstance(121);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", (List<String>) null, (-8));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getSplitPoint();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getUsePruning();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.foldsTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0735428464085233
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-839.793965584584);
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(3, jRip1.getFolds());
      assertFalse(boolean0);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptions((String[]) null);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("\tSet minimum number of instances per leaf.", (List<String>) null, (ProtectedProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(boolean0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null, (String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("<t}6V9_UGft(", arrayList0, 0);
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(3, instances0, 1248.6122079965835, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("R.i1'VI<+YW]", arrayList0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[1] = (-17);
      intArray0[2] = 4;
      intArray0[3] = (-17);
      intArray0[4] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-17), intArray0, (-17));
      Attribute attribute1 = new Attribute("numeric", (List<String>) null);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      jRip_NominalAntd0.splitData(instances0, 70, (-17));
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip_RipperRule0.size();
      Random.setNextRandom(15000);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      jRip0.setDebug(true);
      Locale.getISOLanguages();
      jRip0.getOptions();
      assertTrue(jRip0.getDebug());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4205719259467045
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("R.i1'VI<+YW]", arrayList0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[1] = (-17);
      intArray0[2] = 4;
      intArray0[3] = (-17);
      intArray0[4] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-17), intArray0, (-17));
      Attribute attribute1 = new Attribute("numeric", (List<String>) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      jRip_NominalAntd0.splitData(instances0, 70, (-17));
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[5] = (-877.3140606);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-877.3140606), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance((-877.3140606), doubleArray0);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".equals(\"", protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(11, stringArray0.length);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[17];
      doubleArray0[0] = (-877.3140605582926);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-877.3140605582926), doubleArray0);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.filters.SimpleFilter";
      stringArray0[1] = "weka.attributeSelection.OneRAttributeEval";
      stringArray0[2] = "-S";
      stringArray0[3] = "\nrevDL: ";
      stringArray0[4] = "\nrevDL: ";
      stringArray0[5] = "\nrevDL: ";
      stringArray0[6] = "QG>51|/<";
      stringArray0[7] = "would";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"
         // revDL: \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = jRip0.getMinNo();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, double0, 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      Utils.SMALL = 0.0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("\tno test instances provided and -no-cv is used), along with the \n");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = (-2427.90808487722);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("measureNumRules");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("|E7(W TT}x`1UA", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip_NumericAntd0.getCover();
      jRip_NumericAntd0.toString();
      int[] intArray0 = new int[11];
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[6] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(66.65941712, intArray0, 3);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", (List<String>) null, (-8));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("R.i1'VI<+YW]", arrayList0, 0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[1] = (-17);
      intArray0[2] = 4;
      intArray0[3] = (-17);
      intArray0[4] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-17), intArray0, (-17));
      Attribute attribute1 = new Attribute("numeric", (List<String>) null);
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.getRevision();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "string");
      jRip_NominalAntd0.splitData(instances0, 70, (-17));
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = new Attribute("", "");
      JRip jRip0 = new JRip();
      Attribute.typeToString(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertTrue(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      Utils.log2 = (-1.0);
      doubleArray0[7] = (-1.0);
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      ArrayList<String> arrayList0 = new ArrayList<String>(70);
      Attribute attribute0 = new Attribute("", arrayList0, 70);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("C?Yy=%xk", arrayList0, 0);
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      try { 
        jRip0.rulesetForOneClass(4.8, (Instances) null, 4.8, 4.8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("4H073", arrayList0, 224);
      DenseInstance denseInstance0 = new DenseInstance(224);
      instances0.add((Instance) denseInstance0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 224);
      DenseInstance denseInstance0 = new DenseInstance(224);
      MockRandom mockRandom0 = new MockRandom(0L);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      instances0.resampleWithWeights((java.util.Random) mockRandom0, booleanArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(70);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("v2(, )6T5", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances0, 70, 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("");
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 1;
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(224);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "relational";
      jRip_NumericAntd0.accu = (double) 70;
      stringArray0[1] = "@attribute";
      stringArray0[2] = "@end";
      stringArray0[3] = "";
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.value = (-1.0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = 5;
      linkedList0.stream();
      Attribute attribute0 = new Attribute("", linkedList0, 5);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      DenseInstance denseInstance0 = new DenseInstance(308);
      jRip_NominalAntd0.covers(denseInstance0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(3630);
      attribute0.addStringValue((String) null);
      double double0 = 0.0;
      try { 
        AbstractClassifier.makeCopies(jRip0, (-701));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("H073", arrayList0, 224);
      DenseInstance denseInstance0 = new DenseInstance(224);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(224);
      instances0.add((Instance) denseInstance0);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(" after DL reduction procedure", (List<String>) null, 70);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.splitData(instances0, 4, 0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attributeSparse(70);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0.0);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4277601896124021
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-839.793965584584);
      Attribute attribute0 = new Attribute("Should neverhappen: repDin optmz. stage NaN or infinite!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1);
      Instances instances0 = new Instances("real", arrayList0, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-839.793965584584);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      instances0.add((Instance) denseInstance0);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Attribute attribute0 = new Attribute((String) null, (String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2);
      Instances instances0 = new Instances("@end", arrayList0, 2);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      assertEquals("Whether to calculate performance statistics for the NN search or not", coverTree0.measurePerformanceTipText());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.484457535817486
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-839.793965584584);
      Locale.getISOLanguages();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/", arrayList0, 2734);
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      jRip_RipperRule0.prune(instances1, true);
      Properties properties0 = new Properties();
      instances0.remove((Object) inputMappedClassifier0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.setConsequent((-839.793965584584));
      jRip_RipperRule1.grow(instances1);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-839.793965584584);
      doubleArray0[1] = (-839.793965584584);
      doubleArray0[2] = (-839.793965584584);
      doubleArray0[3] = (-1865.698179887);
      int[] intArray0 = new int[1];
      intArray0[0] = 2734;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(2734, doubleArray0, intArray0, 2734);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.740020296461624
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-839.793965584584);
      Attribute attribute0 = new Attribute("Should neverhappen: repDin optmz. stage NaN or infinite!");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(1);
      assertEquals(1.0, jRip_RipperRule0.getConsequent(), 0.01);
      
      Instances instances0 = new Instances("real", arrayList0, 0);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getCheckErrorRate());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";MKPdq+l~RABSnEt";
      stringArray0[1] = "x!0LR/P";
      stringArray0[2] = "-E";
      stringArray0[3] = ",";
      stringArray0[4] = ".y.-sZiE)Twvhx_i#or";
      stringArray0[5] = " Unable to randomize the class orders.";
      stringArray0[6] = "0Dz0wMw";
      stringArray0[7] = "";
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.567081229293324
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.setUsePruning(false);
      Instances instances0 = new Instances("PE/Ux+JEH", arrayList0, 84);
      try { 
        jRip0.rulesetForOneClass(1115.1551657, instances0, 11.0, 2.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@t", arrayList0, 18);
      DenseInstance denseInstance0 = new DenseInstance(18);
      instances0.add((Instance) denseInstance0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", protectedProperties0);
      JRip jRip0 = new JRip();
      Attribute attribute1 = new Attribute("@t", 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.splitData(instances0, 0.0, 3);
      Instances instances1 = null;
      try {
        instances1 = new Instances(instances0, 1, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Parameters first and/or toCopy out of range
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-839.793965584584);
      Locale.getISOLanguages();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/", arrayList0, 2734);
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      jRip_RipperRule0.prune(instances1, true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("@relation", instances1, protectedProperties0);
      arrayList0.add(attribute0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.setConsequent(1);
      Instances instances2 = new Instances("QPdlkpF}!zCrg", arrayList0, 70);
      try { 
        jRip_RipperRule2.grow(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = (-839.793965584584);
      Attribute attribute0 = new Attribute("Should neverhappen: repDin optmz. stage NaN or infinite!");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip_RipperRule0.setConsequent(1);
      jRip0.setDebug(true);
      Instances instances0 = new Instances("real", arrayList0, 0);
      jRip_RipperRule0.grow(instances0);
      CoverTree coverTree0 = new CoverTree();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
  }
}
