/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:59:17 GMT 2018
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[3];
      Discretize.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1383972463477248
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOptions((String[]) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = null;
      try {
        instances0 = new Instances("", arrayList0, (-2122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2122
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.133628922152431
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      
      discretize0.getBinRangesString(0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.globalInfo();
      SystemInUtil.addInputLine("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.");
      int int0 = 1795;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1795);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-1952257859));
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.133628922152431
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      
      discretize0.getBinRangesString(0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[1];
      discretize0.setIgnoreClass(false);
      String string0 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8964");
      double[] doubleArray0 = new double[5];
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.133628922152431
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseBinNumbers = true;
      String[] stringArray0 = discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
      assertEquals(7, stringArray0.length);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.getBinRangesString(0);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("Min index (doubles): ");
      discretize0.invertSelectionTipText();
      boolean boolean0 = discretize0.m_IgnoreClass;
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.binsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("-O");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("CY|{l08|:QV;");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-623,19,196,106,87,4491";
      stringArray0[1] = "-M";
      stringArray0[2] = "-M";
      stringArray0[3] = "(sOs/,FV`up#'p0";
      stringArray0[4] = "(sOs/,FV`up#'p0";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "xkC_~Q%ppIK$Y";
      stringArray0[1] = "-B";
      stringArray0[2] = "106,-1278,-1717986915,-1916,-1882,2355";
      stringArray0[3] = "I8O}B-";
      stringArray0[4] = "z";
      stringArray0[5] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"106,-1278,-1717986915,-1916,-1882,2355\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-R";
      stringArray0[1] = "n%Z3&_<]H(3Z2JO>";
      stringArray0[2] = "Couldn't compress string attribute value - searching uncompressed.";
      stringArray0[3] = "-R";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      Instances instances0 = null;
      discretize0.setIgnoreClass(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setMakeBinary(true);
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[7];
      double[] doubleArray2 = new double[6];
      doubleArray2[3] = 0.0;
      double[] doubleArray3 = new double[8];
      doubleArray2[1] = 0.0;
      doubleArray1[3] = 0.0;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(3257);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3257
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2275247137250096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      discretize0.getOptions();
      discretize0.getBinRangesString(0);
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize1 = new Discretize();
      discretize1.setOutputFormat();
      discretize0.getBinRangesString((-1301));
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[3];
      byteArray0[2] = (byte)6;
      doubleArray1[1] = (double) (byte)6;
      doubleArray1[2] = (double) (-1301);
      doubleArray0[1] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[1] = (double) (-1301);
      doubleArray2[2] = (double) (byte)6;
      doubleArray2[3] = (double) (byte)6;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) (byte)6;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (double) (byte)6;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) (byte)6;
      doubleArray3[1] = (double) (byte)6;
      doubleArray3[2] = (double) (byte)6;
      doubleArray3[3] = (double) (byte)6;
      doubleArray0[3] = doubleArray3;
      doubleArray0[4] = doubleArray1;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = (double) (byte)6;
      doubleArray4[1] = (double) (byte)6;
      doubleArray4[2] = (double) (-1301);
      doubleArray4[3] = (double) 86;
      doubleArray4[4] = 0.0;
      doubleArray4[6] = (double) (byte)6;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = (double) (byte)6;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) (-1301);
      doubleArray5[1] = (double) (-1301);
      doubleArray5[3] = (double) 86;
      doubleArray4[0] = (double) (-1301);
      doubleArray5[5] = (-743.806);
      doubleArray5[6] = (double) (byte)6;
      doubleArray0[6] = doubleArray5;
      double[] doubleArray6 = new double[1];
      doubleArray6[0] = 2.0;
      doubleArray0[7] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = (double) (byte)6;
      doubleArray7[1] = 239.91730553;
      doubleArray7[2] = (double) 86;
      doubleArray5[5] = (double) (byte)6;
      doubleArray7[4] = (double) (byte)6;
      doubleArray7[5] = 2.0;
      doubleArray7[6] = (double) (byte)6;
      doubleArray7[7] = (double) 0;
      doubleArray7[8] = (-743.806);
      doubleArray0[8] = doubleArray7;
      discretize1.m_CutPoints = doubleArray0;
      discretize1.getBinRangesString(6);
      // Undeclared exception!
      try { 
        discretize1.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      Locale.getISOLanguages();
      discretize0.setInvertSelection(true);
      discretize0.getOptions();
      discretize0.setOutputFormat();
      double[] doubleArray0 = new double[1];
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.449441449430586
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Random.setNextRandom(1833);
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine("P1sIK}+");
      discretize0.m_NumBins = 1833;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = discretize0.m_FindNumBins;
      Attribute attribute0 = new Attribute("Weights have to be positive.", linkedList0);
      attribute0.copy("M-in-");
      discretize0.getIgnoreClass();
      SystemInUtil.addInputLine("real");
      Attribute attribute1 = new Attribute("{-2^1qL=0P^", 1);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("M-in-", arrayList0, 4);
      instances0.listIterator();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      attribute0.addStringValue(attribute1, 3);
      FileSystemHandling.createFolder(evoSuiteFile0);
      SystemInUtil.addInputLine("@end");
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        instances0.getRandomNumberGenerator((-1529L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.570143257866865
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("we+'R");
      arrayList0.add(attribute0);
      SystemInUtil.addInputLine("real");
      Instances instances0 = new Instances("relational", arrayList0, 0);
      discretize0.m_NumBins = 2284;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      System.setCurrentTimeMillis(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setMissing(attribute0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      discretize0.convertInstance(binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(961);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 961
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6668355212594603
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("cDh", linkedList0);
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("{-2^1qL=0P^", (-1095));
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("jCx<Ln(:()0n2", arrayList0, 12);
      attribute1.setWeight(4);
      instances0.listIterator();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      attribute1.addStringValue("relational");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      DenseInstance denseInstance0 = new DenseInstance(2404);
      discretize0.input(binarySparseInstance0);
      Attribute.typeToString(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      discretize0.findNumBins(0);
      Integer integer0 = new Integer((-2138));
      attribute0.equalsMsg(integer0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      Random.setNextRandom(2);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(111);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 111
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("cDh", linkedList0);
      Attribute attribute1 = new Attribute("{-2^1qL=0P^", (-1095));
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("jCx<Ln(:()0n2", arrayList0, 12);
      instances0.listIterator();
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      attribute1.value(18);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("we+'R");
      arrayList0.add(attribute0);
      SystemInUtil.addInputLine("real");
      Instances instances0 = new Instances("relational", arrayList0, 0);
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)111;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte) (-57);
      byteArray0[6] = (byte) (-54);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      discretize0.m_NumBins = 2284;
      range0.getRevision();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      System.setCurrentTimeMillis(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setMissing(attribute0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      discretize0.convertInstance(binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(961);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 961
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("cDh", linkedList0);
      attribute0.copy("-R <col1,col2-col4,...>");
      arrayList0.add(attribute0);
      Attribute attribute1 = new Attribute("numeric", 1);
      Attribute attribute2 = new Attribute("relational", linkedList0, 0);
      Instances instances0 = new Instances("integer", arrayList0, 0);
      instances0.listIterator();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      discretize0.input(binarySparseInstance0);
      boolean boolean0 = discretize0.input(binarySparseInstance0);
      assertFalse(discretize0.isNewBatch());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8735105206455305
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("br[{i ");
      arrayList0.add(attribute0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      boolean boolean0 = discretize0.m_FindNumBins;
      discretize0.m_IgnoreClass = true;
      discretize0.getIgnoreClass();
      SystemInUtil.addInputLine("real");
      attribute0.copy("@attribute");
      boolean boolean1 = discretize0.m_UseEqualFrequency;
      Instances instances0 = new Instances("relational", arrayList0, 0);
      discretize0.m_NumBins = 2142;
      Instances instances1 = new Instances(instances0);
      discretize0.setInputFormat(instances1);
      discretize0.setBins(0);
      Instances instances2 = new Instances("integer", arrayList0, 15000);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      System.setCurrentTimeMillis(1);
      boolean boolean2 = discretize0.setInputFormat(instances0);
      assertEquals(0, discretize0.getBins());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("cDh", linkedList0);
      Attribute attribute1 = attribute0.copy("real");
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("jCx<Ln(:()0n2", arrayList0, 12);
      instances0.listIterator();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.batchFinished();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      DenseInstance denseInstance0 = new DenseInstance(1);
      discretize0.convertInstance(denseInstance0);
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertTrue(boolean0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6909158814795204
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("we+'R");
      arrayList0.add(attribute0);
      SystemInUtil.addInputLine("real");
      Instances instances0 = new Instances("relational", arrayList0, 0);
      attribute0.equalsMsg("Last value of copy (internal format): ");
      discretize0.m_NumBins = 2284;
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      DenseInstance denseInstance0 = new DenseInstance(2);
      denseInstance0.value(attribute0);
      discretize0.input(denseInstance0);
      Attribute.typeToString(17);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      discretize0.findNumBins(0);
      Integer integer0 = new Integer(6);
      Object object0 = new Object();
      attribute0.equalsMsg(object0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      Random.setNextRandom(4);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_NumBins = 1833;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Weights have tA beFpositive.", linkedList0);
      Attribute attribute1 = attribute0.copy("M-in-");
      discretize0.getIgnoreClass();
      SystemInUtil.addInputLine("real");
      linkedList0.addLast("@attribute");
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("Sets the desired weight of instances per interval for equal-frequency binning.", arrayList0, 0);
      instances0.listIterator();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.getBinRangesString(0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("we+'R");
      Instances instances0 = new Instances("relational", arrayList0, 0);
      arrayList0.add(attribute0);
      discretize0.m_NumBins = 2312;
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis(0);
      Random.setNextRandom(2);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "we+'R";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      stringArray0[3] = "T1";
      stringArray0[4] = "we+'R";
      stringArray0[5] = ".arff";
      stringArray0[6] = "integer";
      stringArray0[7] = "numeric";
      stringArray0[8] = "relational";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2626);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.retainAll(arrayList0);
      Attribute attribute0 = new Attribute("cDh", linkedList0);
      Attribute attribute1 = attribute0.copy("(-inf-");
      arrayList0.add(attribute1);
      discretize0.setDesiredWeightOfInstancesPerInterval(3193.9);
      Attribute attribute2 = new Attribute("{-2^1qL=0P^", (-1095));
      Instances instances0 = new Instances("(-inf-", arrayList0, 8);
      instances0.listIterator();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9810967544026823
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      discretize0.m_UseEqualFrequency = true;
      byteArray0[1] = (byte)30;
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)23;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Attribute attribute0 = new Attribute("we+'R");
      arrayList0.add(attribute0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      SystemInUtil.addInputLine("real");
      Instances instances0 = new Instances("relational", arrayList0, 0);
      discretize0.m_NumBins = 2284;
      Instances instances1 = new Instances(instances0);
      instances1.listIterator();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      discretize0.setInputFormat(instances1);
      Discretize discretize1 = new Discretize();
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("+\bRaS", (-1095));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("D", arrayList0, 3);
      arrayList0.add(attribute0);
      instances0.setClass(attribute0);
      instances0.listIterator();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '+\bRaS' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Attribute attribute0 = new Attribute("cDh", linkedList0);
      Attribute attribute1 = new Attribute("{-2^1qL=0P^", (-1095));
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("jCx<Ln(:()0n2", arrayList0, 2);
      instances0.setClass(attribute1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      DenseInstance denseInstance0 = new DenseInstance(2404);
      discretize0.input(binarySparseInstance0);
      Attribute.typeToString(2);
      discretize0.setOutputFormat();
      discretize0.setOutputFormat();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)87;
      discretize0.m_FindNumBins = true;
      byteArray0[1] = (byte)30;
      byteArray0[3] = (byte)32;
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)30;
      Attribute attribute0 = new Attribute("we+'R");
      arrayList0.add(attribute0);
      attribute0.equalsMsg(arrayList0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      discretize0.getIgnoreClass();
      Instances instances0 = new Instances("relational", arrayList0, 0);
      discretize0.m_NumBins = 2284;
      Instances instances1 = new Instances(instances0);
      instances1.listIterator();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.findNumBins((byte) (-106));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9730014063936123
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Attribute attribute0 = new Attribute(":a-dhVz]l{UEPcsIWR", linkedList0);
      linkedList0.toArray();
      discretize0.setFindNumBins(true);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(">", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("Title", (List<String>) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.toArray();
      discretize0.m_UseEqualFrequency = true;
      discretize0.setFindNumBins(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("(knD$kB9kEdi", arrayList0, 2112);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Bin number optimization in conjunction with equal-frequency binning not implemented.
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
