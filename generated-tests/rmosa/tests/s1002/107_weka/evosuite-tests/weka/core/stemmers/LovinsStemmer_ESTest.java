/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:31:15 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8022875646715184
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("mit");
      assertEquals("mis", string0);
      
      String string1 = lovinsStemmer0.stem("izational");
      assertEquals("izat", string1);
      
      lovinsStemmer0.stem("publtex");
      String string2 = lovinsStemmer0.stem("lY;uM");
      assertEquals("ly;um", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.844703399344479
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("WI2uekwhBv<7a,%6r");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("_r&Vh;N%0+/>YHh6(>F");
      assertEquals("_r&vh;n%0+/>yhh6(>f", string1);
      
      lovinsStemmer0.stem(";+9|l':H*#s[dy9+Woum");
      String string2 = lovinsStemmer0.stem(";+9|l':h*#s[dy9+woum");
      assertEquals(";+9|l':h*#s[dy9+woum", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9440087775170304
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8J*6tD;";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("ious");
      assertEquals("ious", string0);
      
      lovinsStemmer0.stem("8J*6tD;");
      String string1 = lovinsStemmer0.stem("otide");
      assertEquals("ot", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9550761890182755
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem(").ql17Op;}");
      assertEquals(").ql17op;}", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      assertEquals("key word us for search or pos for annot.", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("8034");
      String string3 = lovinsStemmer0.stem("gO'vFB$B mczTAL");
      assertEquals("go'vfb$b mczt", string3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0077199763927611
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerher");
      assertEquals("weka.core.stemmers.lovinsstemmerhes", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.844703399344479
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("WI2uekwhBv<7a,%6r");
      assertEquals("wi2uekwhbv<7a,%6r", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.stem(";+9|l':H*#s[dy9+Woum");
      String string3 = lovinsStemmer0.stem(";+9|l':h*#s[dy9+woum");
      assertEquals(";+9|l':h*#s[dy9+woum", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8420227150574621
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("Machine Learning");
      assertEquals("machine learn", string1);
      
      lovinsStemmer0.stem(";+9|l':H*#s[dy9+Wum");
      String string2 = lovinsStemmer0.stem("hL|Ob_Wwy;k");
      assertEquals("hl|ob_wwy;k", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.8500444407967098
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ifuly");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8125316447354216
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(=]os";
      stringArray0[1] = "/Z a.";
      stringArray0[2] = "al";
      stringArray0[3] = "#:Wp7lL28*y?G|o)";
      stringArray0[4] = "atory";
      stringArray0[5] = "weka.core.stemmers.lovinsstemmerpicvad";
      stringArray0[6] = "aical";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerpex");
      assertEquals("weka.core.stemmers.lovinsstemmerpic", string0);
      
      String string1 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerpic");
      assertEquals("weka.core.stemmers.lovinsstemmerp", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0222685835903849
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ix");
      assertEquals("ix", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("Usually the address of the publisher or other typ of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("uct");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("acies");
      assertEquals("aci", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.105366707551255
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("mit");
      lovinsStemmer0.stem("izational");
      lovinsStemmer0.stem("izational");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer1.stemString("dex");
      assertEquals("dic", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8740572216168494
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("ul");
      assertEquals("ul", string0);
      
      String string1 = lovinsStemmer0.stem("mrusend");
      assertEquals("mrusens", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9595804244418065
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("lud");
      assertEquals("lus", string0);
      
      lovinsStemmer0.stemString("X9t2");
      lovinsStemmer0.stem("gFB#unP|_Kar");
      String string1 = lovinsStemmer0.stem("gFB#unP|_Kar");
      assertEquals("gfb#unp|_kar", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.898595507248501
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stem("lovinsstemmerher");
      assertEquals("lovinsstemmerhes", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("null");
      assertEquals("nl", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("p{&ubex");
      assertEquals("p{&ubic", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9941814492125127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("RxAFL~X9nSr>Q[");
      String string0 = lovinsStemmer0.stemString("The year of pubication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of pubic or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9634961879042461
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("enting");
      assertEquals("ent", string0);
      
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      assertEquals("arra-dimens of 'new string[3][4][]': ", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0639168234506462
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[2] = "probToLogOdds: probability must bein[0,] ";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("probToLogOdds: probability must bein[0,] ");
      lovinsStemmer0.stem("probToLogOdds: probability must bein[0,] ");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("cisendax");
      String string1 = lovinsStemmer0.stemString("probToLogOdds: probability must bein[0,] ");
      assertEquals("probtologod: prob must bein[0,] ", string1);
      
      String string2 = lovinsStemmer0.stem("editor");
      assertEquals("edit", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9634961879042461
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("null");
      assertEquals("nl", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9634961879042461
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string1);
      
      String string2 = lovinsStemmer0.stem("null");
      assertEquals("nl", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.8579821683837751
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("8J*6tD;");
      String string1 = lovinsStemmer0.stem("otYide");
      assertEquals("oty", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.8723426456222803
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("ifully");
      String string1 = lovinsStemmer0.stem("ifully");
      assertEquals("ifl", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.113010955818556
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("OG");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("vad");
      lovinsStemmer0.stem("og");
      lovinsStemmer0.stemString("soher");
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ening");
      assertEquals("ening", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0153544094023732
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("end");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.");
      assertEquals("th nam of a ser or ses of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th book is publ.", string1);
      
      String string2 = lovinsStemmer0.stemString("th nam of a ser or ses of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-volum ses in which th book is publ.");
      assertEquals("th nam of a ser or se of book. when cit an entir book, th th titl field giv it titl and an opt ser field giv th nam of a ser or mult-vol se in which th book is publ.", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0732732177123485
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("otyyt");
      assertEquals("otyys", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("ioef8gjT54v^I:");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("u5hKF%3SlGEn");
      assertEquals("u5hkf%3slg", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9634961879042461
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("ax");
      assertEquals("ax", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("ond");
      assertEquals("ons", string2);
      
      String string3 = lovinsStemmer0.stem("null");
      assertEquals("nl", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("publex");
      assertEquals("publec", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9013396600891119
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("6/imjt[bgctccid");
      assertEquals("6/imjt[bgctccis", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("8J*6tD;");
      String string1 = lovinsStemmer0.stem("otYide");
      assertEquals("oty", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.99427911026988
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ").ql17Op;}";
      stringArray0[1] = ").ql17Op;}";
      stringArray0[2] = ").ql17Op;}";
      stringArray0[3] = ").ql17Op;}";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem(").ql17Op;}");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("1984yz");
      assertEquals("1984ys", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("8034");
      String string2 = lovinsStemmer0.stem("gO'vFB$B mczTAL");
      assertEquals("go'vfb$b mczt", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.8579821683837751
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("erid");
      assertEquals("eris", string0);
      
      lovinsStemmer0.stem("8J*6tD;");
      String string1 = lovinsStemmer0.stem("otYide");
      assertEquals("oty", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9550761890182755
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("hg2\rud");
      assertEquals("hg2\rud", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem(").ql17Op;}");
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8034");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("g'vFB$ DcTAL");
      assertEquals("g'vfb$ dct", string3);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("OG");
      assertEquals("og", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "og";
      stringArray0[1] = "D')$;";
      stringArray0[2] = "og";
      stringArray0[3] = "OG";
      stringArray0[4] = "mit";
      lovinsStemmer0.stem("og");
      lovinsStemmer0.stemString("og");
      String string1 = lovinsStemmer0.stem("olv");
      assertEquals("olut", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0077199763927611
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lux");
      assertEquals("luc", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerher");
      assertEquals("weka.core.stemmers.lovinsstemmerhes", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.8296412350881615
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("idine");
      assertEquals("id", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ny5rrE$ovP%OX~O<;");
      lovinsStemmer0.stemString("ny5r$ovp%ox~o<;");
      lovinsStemmer0.stemString("is");
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ioef8gjc5v^I:");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("g5px`yPP_^ muCm");
      assertEquals("g5px`yp_^ mucm", string0);
      
      String string1 = lovinsStemmer0.stem("ioef8gjc5v^i:");
      assertEquals("ioef8gjc5v^i:", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9440087775170304
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("pgix");
      assertEquals("pgic", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("8J*6tD;");
      String string2 = lovinsStemmer0.stem("otYide");
      assertEquals("oty", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0876822937680237
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "xzS.^36sO!F.";
      lovinsStemmer0.stemString("URL");
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      stringArray0[2] = "BOOK";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("Fatal error.");
      assertEquals("fat error.", string3);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("icalism");
      assertEquals("ical", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("ical");
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0303889807917344
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("");
      String string0 = lovinsStemmer0.stemString("aton");
      assertEquals("at", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0601463059040168
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("ation");
      assertEquals("ation", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.8805160307348372
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("T>GT$*fkbV:^}");
      lovinsStemmer1.stem(".x");
      lovinsStemmer0.stem(".x");
      String string0 = lovinsStemmer0.stemString("Fw&!sc}3\"H`7:2WE<");
      assertEquals("fw&!sc}3\"h`7:2w<", string0);
      
      lovinsStemmer0.stem("qI&AnVfB;\"+K -1eyL");
      String string1 = lovinsStemmer0.stem("qi&anvfb;\"+k -1eyl");
      assertEquals("qi&anvfb;\"+k -1eyl", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("OG");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("ement");
      assertEquals("ement", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("mit");
      lovinsStemmer0.stem("mit");
      String string0 = lovinsStemmer0.stem("mis");
      assertEquals("mi", string0);
      
      String string1 = lovinsStemmer0.stem("Xn:vI5'w:IEbBa");
      assertEquals("xn:vi5'w:ieb", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("iev");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("5g8^PGG;`Y5");
      assertEquals("5g8^pg;`y5", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("umpt");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("]pl1|[&'");
      assertEquals("]pl1|[&'", string0);
      
      String string1 = lovinsStemmer1.stem("rpt");
      assertEquals("rb", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      String string0 = lovinsStemmer0.stem("Induction of decision trees");
      assertEquals("induction of decision tree", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("uad");
      String string0 = lovinsStemmer0.stemString("metr");
      assertEquals("meter", string0);
      
      String string1 = lovinsStemmer0.stemString("uas");
      assertEquals("ua", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("learnet");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("8034");
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("M-AUlL");
      assertEquals("m-aul", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0791781104483704
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("BOOK");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("book");
      String string0 = lovinsStemmer0.stemString(".nFruM!+7oj");
      assertEquals(".nfr!+7oj", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stemString("8034");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("MacEine Learning");
      assertEquals("macein learn", string2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("f7Iull");
      assertEquals("f7iul", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("_]t~qPcUS,<tbWBnXJ2");
      assertEquals("_]t~qpc,<tbwbnxj2", string2);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("tbwbnxj2lud");
      assertEquals("tbwbnxj2lus", string0);
      
      lovinsStemmer0.stemString("INnSTITUTtON");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("_]t~qPBUS,<tbWBnXJ2");
      assertEquals("_]t~qpbus,<tbwbnxj2", string2);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("The organization that sponsors a conference or that publishes a manual.");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("the organization that sponsors a conference or that publishes a manual.");
      assertEquals("th organ that sponsor a confer or that publish a manu.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("th organ that sponsor a confer or that publish a manu.");
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("izer");
      assertEquals("izer", string1);
  }
}
