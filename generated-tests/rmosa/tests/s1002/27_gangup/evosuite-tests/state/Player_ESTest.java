/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:25:51 GMT 2018
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(236, "", "HiT;%=whgomjX}", (-97), 5);
      player0.getSubparty();
      Player player1 = new Player(236, "module.ModuleBrowserDialog$ModuleFilter", 0);
      player0.setJoinOK(player1, true);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(1, player1.getStrength());
      
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      player0.getName();
      assertEquals("", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals((-97), player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(5, player0.getStrength());
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player1 = new Player((short)4919);
      player0.boss = (Party) player1;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      boolean boolean0 = false;
      player1.setConnected(false);
      player0.setY((-895.2F));
      try { 
        mockFileInputStream0.skip((short)4919);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ(0.0F);
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("Player-1", player0.getName());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      assertFalse(player0.isDead());
      
      player0.setDead(0L);
      assertTrue(player0.isDead());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((-126));
      int int0 = Packable.GAME_STATE;
      player0.getIP();
      Player player1 = new Player();
      player0.setDead(33L);
      assertEquals(33L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-2301), ",&t(X$B*x3W|TD", "state.Party", 2045, (-78));
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      player0.gangStrength();
      player0.gangStrength();
      float float0 = player0.getY();
      assertFalse(player0.isConnected());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setMoney(1.0F);
      Player player1 = new Player();
      player1.head = (Party) player0;
      player0.head = (Party) player1;
      player0.type();
      player0.setY(5);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, (InputStream) null);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      // Undeclared exception!
      try { 
        player1.unpack(dataInputStream1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((-1339));
      player0.isDead();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-126);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-39);
      byteArray0[5] = (byte) (-27);
      player0.setDead();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0);
      player0.toString();
      player0.getPictureId();
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((-135), "", 10);
      Player player1 = new Player((-135));
      player0.head = (Party) player1;
      player0.reset(true);
      player0.getStrength();
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-1329));
      player0.setJoinOK(player0, false);
      player0.remove(player0);
      player0.isJoinOK(player0, false);
      System.setCurrentTimeMillis((-1329));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player();
      player0.setJoinOK(player0, false);
      player0.isBoss();
      player0.remove(player0);
      player0.isConnected();
      System.setCurrentTimeMillis((-1329));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-21), (String) null, (-1329));
      Player player1 = new Player((-1329));
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      player0.isBoss();
      player1.remove(player0);
      player0.reset(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-1329", player1.getName());
      assertEquals("0.0.0.0", player1.getIP());
      assertTrue(player1.isConnected());
      assertFalse(boolean0);
      assertEquals((-1329), player0.getPictureId());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(0, "oRNX<0SAR]8AvuhtV'K", "oRNX<0SAR]8AvuhtV'K", 0, 688);
      player0.getPictureId();
      assertEquals(688, player0.getStrength());
      
      Player player1 = new Player(7333, " ", "0.0.0.0", (-3261), 7333);
      Player player2 = new Player();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)74;
      byteArray0[2] = (byte)41;
      byteArray0[3] = (byte)65;
      byteArray0[4] = (byte) (-47);
      player2.unpack(byteArray0);
      assertEquals("0.0.0.0", player2.getIP());
      assertEquals("Player-1", player2.toString());
      assertEquals(0, player2.getPictureId());
      assertEquals(1, player2.getStrength());
      
      float float0 = player1.getX();
      assertEquals(" ", player1.getIP());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertFalse(player1.isDead());
      assertTrue(player1.isConnected());
      assertEquals((-3261), player1.getPictureId());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player0.isBoss();
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(0, player1.getPictureId());
      assertEquals(1, player1.getStrength());
      assertTrue(player1.isConnected());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals("Player-1", player1.getName());
      assertFalse(boolean0);
      assertFalse(player1.isDead());
      assertEquals("0.0.0.0", player1.getIP());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((-17), (String) null, (-1329));
      player0.setJoinOK(player0, false);
      player0.isBoss();
      player0.setDead((long) (-1329));
      player0.remove(player0);
      player0.isDead();
      System.setCurrentTimeMillis((-1329));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((-1329), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-752));
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      Player player1 = new Player((-1125), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (short)4919);
      player0.setJoinOK(player1, true);
      player0.setDead();
      player1.getTimeOfDeath();
      player1.isJoinOK(player0, true);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      player0.id = 1721;
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }
}
