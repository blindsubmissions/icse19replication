/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 05:40:01 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.Mode;
import freemind.modes.filemode.FileController;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.Checkbox;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.PopupMenu;
import java.awt.SystemColor;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.geom.Dimension2D;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Date;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Stack;
import java.util.Vector;
import javax.swing.AbstractButton;
import javax.swing.Action;
import javax.swing.JButton;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicDesktopPaneUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.metal.MetalSplitPaneUI;
import javax.swing.plaf.metal.MetalToolBarUI;
import javax.swing.plaf.multi.MultiComboBoxUI;
import javax.swing.table.DefaultTableModel;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6904934606669406
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775804L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setEnabled(true);
      jDayChooser0.paintImmediately(34, 4, (-2220), (-2220));
      PopupMenu popupMenu0 = null;
      try {
        popupMenu0 = new PopupMenu(":aT");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.transferFocus();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-282), 0, (-282), 0, 0);
      focusEvent0.setSource(mockGregorianCalendar0);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(238, 0, 2217, 878, 8944);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      mockGregorianCalendar1.clone();
      mockGregorianCalendar1.setFirstDayOfWeek(0);
      mockGregorianCalendar1.after(mockGregorianCalendar0);
      focusEvent0.setSource(mockGregorianCalendar1);
      jDayChooser0.focusGained(focusEvent0);
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      Color.getColor("day", 0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("n($%A(,ersjL@ &h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3041), 160, (-1732), 42, 4, 48);
      mockGregorianCalendar0.setTimeInMillis(0L);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      // Undeclared exception!
      try { 
        Time.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3), 4760L, (-3), 35, 'V', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.keyPressed(menuKeyEvent0);
      Color color0 = jDayChooser0.getSundayForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.KOREAN;
      locale0.getExtensionKeys();
      Locale locale1 = Locale.CANADA;
      locale1.getUnicodeLocaleKeys();
      locale0.getDisplayLanguage(locale1);
      locale0.getDisplayVariant(locale1);
      locale0.getExtensionKeys();
      Locale locale2 = Locale.KOREAN;
      jDayChooser0.setLocale(locale2);
      jDayChooser0.setYear(263);
      jDayChooser0.setEnabled(false);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ENGLISH;
      locale0.getDisplayLanguage(locale0);
      locale0.getDisplayVariant(locale0);
      locale0.getExtensionKeys();
      jDayChooser0.setLocale(locale0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1839, 1839, 5, 0, 'N');
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BasicDesktopPaneUI basicDesktopPaneUI0 = new BasicDesktopPaneUI();
      Dimension dimension0 = basicDesktopPaneUI0.getMaximumSize(jDayChooser_DecoratorButton0);
      dimension0.width = (-311);
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      Dimension dimension1 = metalSplitPaneUI0.getMaximumSize(jDayChooser_DecoratorButton0);
      dimension1.setSize((Dimension2D) dimension0);
      jDayChooser_DecoratorButton0.setSize(dimension1);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      Locale locale0 = jMonthChooser0.getLocale();
      locale0.getUnicodeLocaleKeys();
      jDayChooser1.setLocale(locale0);
      jDayChooser1.drawDays();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getLocale();
      jDayChooser0.getComponentPopupMenu();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      FocusEvent focusEvent0 = null;
      try {
        focusEvent0 = new FocusEvent((Component) null, 1130, true, (Component) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getLocale();
      // Undeclared exception!
      try { 
        Time.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.firePropertyChange("16", (-616.4644F), (-616.4644F));
      jDayChooser0.setMaxDayCharacters(3);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setEnabled(true);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.getWeekdayForeground();
      int int0 = SwingConstants.NORTH;
      assertEquals(1, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6789477095792162
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.setMonth(2970);
      jDayChooser0.setMaxDayCharacters(3);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.drawDays();
      jDayChooser0.setFocus();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BasicDesktopPaneUI basicDesktopPaneUI0 = new BasicDesktopPaneUI();
      basicDesktopPaneUI0.getMaximumSize(jDayChooser_DecoratorButton0);
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setFocus();
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Object[][] objectArray0 = new Object[4][7];
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray1[1] = (Object) jDayChooser0;
      objectArray1[6] = (Object) jDayChooser0;
      objectArray1[3] = (Object) jDayChooser0;
      objectArray1[4] = (Object) jDayChooser0;
      objectArray1[5] = (Object) jDayChooser0;
      objectArray1[6] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[6];
      Object object0 = new Object();
      Object object1 = jDayChooser0.getTreeLock();
      objectArray2[1] = object1;
      objectArray2[2] = objectArray1[0];
      objectArray2[3] = (Object) jDayChooser0;
      objectArray2[4] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[2];
      objectArray3[0] = object0;
      objectArray3[1] = (Object) jDayChooser0;
      objectArray0[2] = objectArray3;
      jDayChooser0.setInheritsPopupMenu(false);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7569120345667457
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.KOREAN;
      jDayChooser0.setMaxDayCharacters(49);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 39, 49, 25, 34, 's', (MenuElement[]) null, (MenuSelectionManager) null);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      BasicDesktopPaneUI basicDesktopPaneUI0 = new BasicDesktopPaneUI();
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      jDayChooser0.setAlwaysFireDayProperty(false);
      metalSplitPaneUI0.getMaximumSize(jDayChooser0);
      TextField textField0 = null;
      try {
        textField0 = new TextField(0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6266116706270752
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint((-255), 11, 4, (-1647));
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(38);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      MultiComboBoxUI multiComboBoxUI0 = new MultiComboBoxUI();
      // Undeclared exception!
      try { 
        multiComboBoxUI0.getMinimumSize(jDayChooser0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[4] = "_DFijmcKGjC4z";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = new Locale("day", "8", "Expected end tag, found start tag ");
      locale0.hasExtensions();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setOpaque(false);
      Color color0 = Color.orange;
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Object[]) null, 3226);
      jDayChooser0.repaint(3226, 3226, 0, 3226);
      JTable jTable0 = new JTable(defaultTableModel0);
      Color color0 = jTable0.getSelectionBackground();
      jDayChooser0.setSundayForeground(color0);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jTable0, 3226, 0, 3226, 3, 'b', (-2108));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.578283520247992
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775795L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setYearChooser((JYearChooser) null);
      // Undeclared exception!
      try { 
        Time.valueOf("10");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      jDayChooser0.drawDays();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7878688604175577
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.grabFocus();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 90, 35, 32, 38, 'w', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      assertEquals(7, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1479), "uvb1;?");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.isOpaque();
      jDayChooser_DecoratorButton0.setDefaultCapable(false);
      jDayChooser0.setDay((-3267));
      assertEquals(1, jDayChooser0.getDay());
      
      jDayChooser0.setDay(10172);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 8811, 183L, 36, 36, 'R');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      // Undeclared exception!
      try { 
        Time.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-11));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setMaxDayCharacters(3);
      System.setCurrentTimeMillis(3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ENGLISH;
      Locale locale1 = Locale.KOREAN;
      locale0.getDisplayLanguage(locale1);
      locale0.getDisplayVariant(locale1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      locale1.getExtensionKeys();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("9", vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setLocale(locale1);
      jDayChooser0.setDay(2092);
      jDayChooser0.setMonth(263);
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-2125), (-2125), (-1294), (-2035), 't', menuElementArray0, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      String string0 = "day";
      // Undeclared exception!
      try { 
        Date.valueOf("28");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ENGLISH;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Vector<Locale> vector0 = new Vector<Locale>();
      Stack<Locale> stack0 = new Stack<Locale>();
      Locale locale1 = Locale.KOREAN;
      String string0 = AbstractButton.ROLLOVER_ICON_CHANGED_PROPERTY;
      locale0.getDisplayVariant(locale1);
      locale1.getExtensionKeys();
      jDayChooser0.setYear(263);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 263, 39L, 100, 'N', 'N');
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 263, true, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.contains(1, 41);
      java.util.Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getIconTextGap();
      jDayChooser0.getGraphics();
      jDayChooser0.setComponentOrientation((ComponentOrientation) null);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setSelectableDateRange((java.util.Date) null, (java.util.Date) null);
      MenuElement[] menuElementArray0 = new MenuElement[6];
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDayBordersVisible(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      // Undeclared exception!
      try { 
        java.util.Date.from((Instant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, 49, 0L, 210, 37, 't', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        Date.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = Locale.CANADA;
      locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.FRANCE;
      locale0.getDisplayLanguage(locale1);
      XmlDocument xmlDocument0 = new XmlDocument();
      String[] stringArray0 = new String[6];
      stringArray0[1] = "anglais";
      stringArray0[2] = "day";
      stringArray0[3] = "anglais";
      stringArray0[4] = "anglais";
      stringArray0[5] = "day";
      locale1.getExtensionKeys();
      Locale locale2 = Locale.KOREAN;
      jDayChooser0.setLocale(locale1);
      jDayChooser0.setYear(263);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = jYearChooser0.dayChooser;
      assertNull(jDayChooser1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, (-2010), (-13L), (-2010), 36, ':', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        Date.valueOf("28");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.669576756952125
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      // Undeclared exception!
      try { 
        Time.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.KOREAN;
      locale0.getExtensionKeys();
      Locale locale1 = Locale.CANADA;
      locale1.getUnicodeLocaleKeys();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jDayChooser0.setMaxSelectableDate((java.util.Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      System.setCurrentTimeMillis((-3406L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-48);
      byteArray0[4] = (byte) (-76);
      byteArray0[0] = (byte) (-66);
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)42;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setEnabled(false);
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      java.util.Date date1 = jDayChooser0.setMinSelectableDate(date0);
      Instant instant0 = MockInstant.ofEpochSecond((-3406L), 0L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      jDayChooser0.setSelectableDateRange(date1, timestamp0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      jDayChooser0.getMaximumSize();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 10, 0L, 10, (-927), '^', 1380);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 2488, 49, 25, 40, 's', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        Date.valueOf("resources_don_t_open_port");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3), 4760L, (-3), 39, 'V', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(16, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "'Ite,Gd");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = jDayChooser0.locale;
      jDayChooser0.selectedColor = null;
      Locale locale1 = Locale.JAPANESE;
      boolean boolean0 = new Boolean(false);
      jDayChooser0.initialized = false;
      jDayChooser0.getTransferHandler();
      jDayChooser0.getInheritsPopupMenu();
      locale0.getDisplayCountry(locale1);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis((-2455));
      MenuElement[] menuElementArray0 = new MenuElement[9];
      FileController fileController0 = null;
      try {
        fileController0 = new FileController((Mode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-3), 4760L, (-3), 33, 'V', (MenuElement[]) null, (MenuSelectionManager) null);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.setMaxDayCharacters(3);
      JButton jButton0 = new JButton("ff22>i");
      jDayChooser0.selectedDay = jButton0;
      System.setCurrentTimeMillis(0L);
      jDayChooser0.drawDays();
      jDayChooser0.setFocus();
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.7537739325537185
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      System.setCurrentTimeMillis(9223372036854775795L);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JPanel jPanel0 = jDayChooser0.weekPanel;
      MenuElement[] menuElementArray0 = new MenuElement[3];
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      JMenu jMenu0 = new JMenu((Action) null);
      JMenu jMenu1 = structuredMenuHolder0.addMenu(jMenu0, "day");
      JMenuItem jMenuItem0 = jMenu1.add((Action) null);
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) null);
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      JMenu jMenu2 = new JMenu();
      menuElementArray0[2] = (MenuElement) jMenu2;
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3), 9223372036854775795L, 2101, (-3), 'A', menuElementArray0, menuSelectionManager0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.keyPressed(menuKeyEvent0);
      jDayChooser1.setYear(2101);
      jDayChooser1.setEnabled(true);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser1.setDay((-3));
      jDayChooser0.setDay((-2390));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775804L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Time time0 = new Time((-9223372036854775804L));
      jDayChooser0.setDay((-609));
      jDayChooser0.setMaxSelectableDate(time0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      jDayChooser0.getClientProperty(mockGregorianCalendar0);
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.setEnabled(true);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      userAgentAdapter0.getViewportSize();
      jDayChooser0.weekOfYearVisible = true;
      jDayChooser0.updateUI();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      SystemColor systemColor0 = SystemColor.window;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Color.getColor("Center", (Color) systemColor0);
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      Color.getColor("OnL:!T%Jlh[m9@");
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser_DecoratorButton0.getHideActionText();
      jDayChooser0.setDay((-627));
      jDayChooser0.setEnabled(true);
      jDayChooser0.getAlignmentX();
      jDayChooser_DecoratorButton0.removeNotify();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.drawDays();
      System.setCurrentTimeMillis((-4759L));
      jDayChooser0.setEnabled(true);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.KOREAN;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 39, 49, 25, 34, 's', (MenuElement[]) null, (MenuSelectionManager) null);
      menuKeyEvent0.setKeyCode(39);
      jDayChooser0.setDay(39);
      jDayChooser0.keyPressed(menuKeyEvent0);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        Date.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }
}
