/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 12:54:35 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.modes.filemode.FileMode;
import freemind.modes.mindmapmode.MindMapController;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.LayoutManager;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.datatransfer.FlavorMap;
import java.awt.datatransfer.SystemFlavorMap;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetListener;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.PrintStream;
import java.sql.Timestamp;
import java.time.temporal.Temporal;
import java.util.Calendar;
import java.util.Date;
import java.util.Hashtable;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.help.HelpSet;
import javax.help.JHelpSearchNavigator;
import javax.help.TOCView;
import javax.help.plaf.basic.BasicSearchNavigatorUI;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.persist.HsqlProperties;
import org.jibx.runtime.IBindingFactory;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7325637712329627
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getSelectedDay();
      Color color0 = Color.CYAN;
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.setMaxDayCharacters(2055);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-3306), (-1115L), 2558, 0, 'Z', 2558);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDebugGraphicsOptions();
      jDayChooser0.focusGained((FocusEvent) null);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.getColorSpace();
      Color color0 = null;
      try {
        color0 = new Color((ColorSpace) null, (float[]) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6729526849488328
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1747);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 39, 2818, 27, 39, 'l');
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 100, (-3376), 100, 2818, 'Y');
      jDayChooser0.keyPressed(keyEvent1);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setDay(28);
      jDayChooser0.keyPressed(keyEvent1);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setBackground(color0);
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.updateUI();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-279), (-279), 2535, (-860), 'k', (-279));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-193));
      Locale locale0 = Locale.JAPANESE;
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getAlignmentX();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.setWeekOfYearVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      stringArray0[2] = "8b";
      stringArray0[3] = "";
      stringArray0[2] = "";
      stringArray0[7] = "accessories.plugins.time.JDayChooser";
      stringArray0[8] = "z3.>u1EH`B-_%jo.n";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 3, 3, (-3342), (-3342));
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 2, "", (-3342));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2294, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JTree jTree0 = new JTree();
      int int0 = 0;
      Rectangle rectangle0 = jTree0.getRowBounds(0);
      jDayChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.getWeekdayForeground();
      long long0 = 0L;
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      // Undeclared exception!
      try { 
        basicComboBoxUI0.getMinimumSize(jTree0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicComboBoxUI", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.698009616895563
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setMaxDayCharacters(90);
      jDayChooser0.drawDays();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jDayChooser0.dayPanel = jPanel0;
      jDayChooser0.setMonth((-1));
      jDayChooser0.updateUI();
      jDayChooser0.updateUI();
      System.setCurrentTimeMillis((-869L));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7244208539528407
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, 34, 34, 'R');
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 34, 0L, (-439), 2213, 'R');
      jDayChooser0.keyPressed(keyEvent1);
      KeyEvent.getKeyModifiersText(5);
      KeyEvent keyEvent2 = new KeyEvent(jDayChooser0, (-3376), 2818, 39, 5, '2');
      JDayChooser jDayChooser1 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = jDayChooser0.getLocale();
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6304702401606765
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-193));
      Locale locale0 = Locale.JAPANESE;
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.setMonth((-1));
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.defaultMaxSelectableDate = date0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jDayChooser0.setAlignmentX(40.0F);
      jDayChooser0.setMaxDayCharacters(4);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getRegisteredKeyStrokes();
      jDayChooser0.setDay((-193));
      Locale locale0 = Locale.JAPANESE;
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.GREEN;
      jDayChooser0.setWeekdayForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser0.isDecorationBackgroundVisible();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection((HsqlProperties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcConnection", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters((-513));
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYear(40);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 24, 240000L, 24, 24, 'b');
      jDayChooser0.keyReleased(keyEvent0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1931), (-1931), 17, (-7), (-1841), (-1841));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1931,MONTH=-1931,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=17,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-7,HOUR_OF_DAY=-7,MINUTE=-1841,SECOND=-1841,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2185, 5L, 2185, 1825, 'q');
      jDayChooser0.keyTyped(keyEvent0);
      IBindingFactory iBindingFactory0 = JiBX_bindingFactory.getInstance();
      int int0 = 308;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext(308, stringArray0, stringArray0, stringArray0, stringArray0, iBindingFactory0);
      // Undeclared exception!
      try { 
        unmarshallingContext0.parseElementDate("K`MQcgSsuiLPYUY=", "day");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7329045285804874
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-193));
      Locale locale0 = Locale.JAPANESE;
      MockDate mockDate0 = new MockDate(0L);
      Date date0 = jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setSelectableDateRange(date0, date0);
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      Dimension dimension0 = new Dimension();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 925, 135L, 24, 36, 'V');
      TimeZone timeZone0 = TimeZone.getTimeZone("24");
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      keyEvent0.setSource(calendar0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      Style style0 = defaultStyledDocument0.addStyle("day", styleContext_NamedStyle0);
      Color color0 = styleContext0.getForeground(style0);
      jDayChooser0.setSundayForeground(color0);
      Locale locale0 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDayBordersVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate(0L);
      jDayChooser0.setMinSelectableDate(mockDate0);
      SystemColor systemColor0 = SystemColor.text;
      assertEquals(1, systemColor0.getTransparency());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getTopLevelAncestor();
      jDayChooser0.getGraphicsConfiguration();
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.965126719128099
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(26);
      jDayChooser0.setDay(2796);
      jDayChooser0.setMonth(28);
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.PRC;
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setEnabled(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1747, 954L, 45, 45, 'c', 3);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters((-4231));
      Color color0 = jDayChooser0.getSundayForeground();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getBackgroundNonSelectionColor();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDecorationBackgroundColor(color0);
      FontInfo fontInfo0 = new FontInfo();
      PDFResources pDFResources0 = new PDFResources(28);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 2796, (-4231));
      pDFPage0.getDocument();
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(false, fontInfo0, (PDFDocument) null, pDFPage0, "day", "org.apache.xpath.functions.Function", 3);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      assertEquals(31, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      jDayChooser0.setAlignmentX(40.0F);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      jDayChooser0.getMaxSelectableDate();
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      HsqlProperties hsqlProperties0 = new HsqlProperties("day", fileUtil0, true);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Trace", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7576264990511326
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.setDay((-193));
      Locale locale0 = Locale.JAPANESE;
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      Vector<Temporal> vector0 = new Vector<Temporal>();
      JTable jTable0 = new JTable(vector0, vector0);
      Color color0 = jTable0.getGridColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeKeyListener((KeyListener) null);
      jDayChooser0.setDay((-193));
      Locale locale0 = Locale.JAPANESE;
      jDayChooser0.maxDayCharacters = 1403;
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.760549098743703
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1747);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2818, (-1L), 2818, 39, 'g');
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, (-3376), 1747, 2818, 1601, 'g');
      jDayChooser0.keyPressed(keyEvent0);
      System.setCurrentTimeMillis(1747);
      jDayChooser0.setMaxDayCharacters(2);
      Color color0 = jDayChooser0.decorationBackgroundColor;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Color color0 = Color.CYAN;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setLayout((LayoutManager) null);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 'd', 0L, (-1995), (-1515), 'd');
      JDayChooser jDayChooser1 = new JDayChooser();
      int int0 = SwingConstants.NORTH_WEST;
      MockDate mockDate0 = new MockDate('d');
      jDayChooser0.getMaxDayCharacters();
      jDayChooser1.setEnabled(true);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.681430215000891
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1747);
      jDayChooser0.setDay(1747);
      jDayChooser0.setMonth(9999);
      jDayChooser0.updateUI();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      FlavorMap flavorMap0 = SystemFlavorMap.getDefaultFlavorMap();
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget(defaultTreeCellRenderer0, (-1369), (DropTargetListener) null, false, flavorMap0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.710079913333388
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-2002), (-201L), 295, 40, 'a', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser1.setMonthChooser((JMonthChooser) null);
      jDayChooser1.drawDays();
      jDayChooser1.setFocus();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.inactiveCaption;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMonth(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      MockDate mockDate0 = new MockDate(6, 0, 160, 0, 6, 30);
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-617), 2306L, 38, 37, '}');
      KeyEvent.getKeyModifiersText(432);
      jDayChooser0.keyPressed(keyEvent0);
      System.setCurrentTimeMillis(37);
      jDayChooser0.updateUI();
      jDayChooser0.updateUI();
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.727060221579733
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(11);
      Locale locale0 = Locale.JAPANESE;
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      Vector<Temporal> vector0 = new Vector<Temporal>();
      JTable jTable0 = new JTable();
      jTable0.getSurrendersFocusOnKeystroke();
      Color color0 = jTable0.getGridColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDay((-846));
      jDayChooser0.drawDays();
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay(1747);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 823, 1747, (-601), 1747, '`');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setDay((-1849));
      jDayChooser0.keyPressed(keyEvent0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.JAPANESE;
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      Vector<Temporal> vector0 = new Vector<Temporal>();
      JTable jTable0 = new JTable();
      jTable0.getSurrendersFocusOnKeystroke();
      Color color0 = jTable0.getGridColor();
      jDayChooser0.setDecorationBackgroundColor(color0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      MockDate mockDate0 = new MockDate(43, (-1509), 925, (-1509), 11);
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setFocus();
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(1747);
      jDayChooser0.setDay((-226));
      jDayChooser0.setMonth((-663));
      jDayChooser0.updateUI();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      FlavorMap flavorMap0 = SystemFlavorMap.getDefaultFlavorMap();
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget(jDayChooser0, 1747, (DropTargetListener) null, true, flavorMap0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDay((-193));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-193), 112L, 37, 38, 'p');
      KeyEvent.getKeyModifiersText(432);
      jDayChooser0.keyPressed(keyEvent0);
      System.setCurrentTimeMillis((-77L));
      jDayChooser0.updateUI();
      jDayChooser0.updateUI();
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initialized = false;
      jDayChooser0.setMonth((-1));
      jDayChooser0.updateUI();
      Locale locale0 = new Locale("M^UQV}TLlrr", "day");
      jDayChooser0.setLocale(locale0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setAlignmentX(40.0F);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 5, 121L, 5, 33, '^');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 27, 0L, 39, 27, '@');
      jDayChooser0.keyPressed(keyEvent0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 1487, 1857L, 891, 35, 'b');
      jDayChooser0.keyPressed(keyEvent1);
      System.setCurrentTimeMillis(0L);
      jDayChooser0.setDay(237);
      jDayChooser0.keyPressed(keyEvent0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockFile mockFile0 = new MockFile("day");
      jDayChooser0.transferFocusBackward();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.print("23");
      mockPrintStream0.append((CharSequence) "day");
      HelpSet helpSet0 = new HelpSet((ClassLoader) null);
      TOCView tOCView0 = new TOCView(helpSet0, "23", "day", (Hashtable) null);
      tOCView0.getLocale();
      JHelpSearchNavigator jHelpSearchNavigator0 = new JHelpSearchNavigator(tOCView0);
      BasicSearchNavigatorUI basicSearchNavigatorUI0 = new BasicSearchNavigatorUI(jHelpSearchNavigator0);
      jDayChooser0.initialized = false;
      jDayChooser0.removeComponentListener(basicSearchNavigatorUI0);
      jDayChooser0.list((PrintStream) mockPrintStream0);
      jDayChooser0.setDayBordersVisible(true);
      System.setCurrentTimeMillis(31536000000L);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.monthChooser = jMonthChooser0;
      jDayChooser0.drawDays();
      Color color0 = jDayChooser0.getBackground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDayBordersVisible(false);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.892393112756046
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(26);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.getPreferredSize();
      jDayChooser0.monthChooser = jMonthChooser0;
      jDayChooser0.setDay(2759);
      jDayChooser0.setMonth(28);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      Locale locale0 = Locale.PRC;
      locale0.getUnicodeLocaleAttributes();
      locale0.hasExtensions();
      jDayChooser0.setLocale(locale0);
      jDayChooser0.decorationBordersVisible = false;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("x", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      jDayChooser0.setEnabled(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1747, 2759, 50, 50, 'c', 3);
      keyEvent0.paramString();
      KeyEvent.getKeyModifiersText(2334);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(19);
      jDayChooser0.keyPressed(keyEvent0);
  }
}
