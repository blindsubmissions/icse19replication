/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 12:36:15 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.8033631566956781
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("G*b?QLmCe");
      assertEquals("g*b?qlmc", string0);
      
      lovinsStemmer0.stem("%yvp2P");
      lovinsStemmer0.stem("h.WW-sL");
      lovinsStemmer0.stem("h.ww-sl");
      String string1 = lovinsStemmer0.stem("uaserislud");
      assertEquals("uaserislus", string1);
      
      lovinsStemmer0.stem("+AV{W]MS<f7RBpCgrl");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer0.stem("ator");
      assertEquals("at", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.017980522445108
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("encing");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9394053272241412
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8'b!");
      lovinsStemmer0.stem("N6zmn^$0.v~");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8'b!");
      lovinsStemmer0.stem("ond");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("PUBLISHER");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.7650300532436863
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acioRaus");
      lovinsStemmer0.stem(")=&kD;0b{K\"PrQ3Y");
      String string0 = null;
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9816528863926617
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acious");
      lovinsStemmer0.stemString("|");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The year of pblication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, suh as 1984, although the standard styles can handle anyDyear whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9687800658478425
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("icide");
      assertEquals("ic", string1);
      
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      String string3 = lovinsStemmer0.stem("Key words used for searching or possibly for annotation.");
      assertEquals("key words used for searching or possibly for annotation.", string3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1341121581979172
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer1.stemString("9|8oum\"F,7nUtIc~5x");
      assertEquals("9|8oum\"f,7nut~5x", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9132076353742664
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("1M]%0/e9/b  gq3'er");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("ily");
      assertEquals("ily", string1);
      
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9537918505259269
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("1M]%0/e9/b  gq3'er");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("1m]%0/e9/b  gq3'er");
      assertEquals("1m]%0/e9/b  gq3'er", string0);
      
      String string1 = lovinsStemmer0.stem("idine");
      assertEquals("id", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0282511227977702
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("8'b!");
      String string0 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, nd should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, nd should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("8'b!");
      String string1 = lovinsStemmer1.stemString("-");
      assertEquals("-", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0990690625621526
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("eless");
      assertEquals("eles", string2);
      
      lovinsStemmer0.stem("can't normalize array. sum is nan.ert");
      String string3 = lovinsStemmer0.stemString("u@send");
      assertEquals("u@sens", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0345502026040092
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("%yvp2perid");
      assertEquals("%yvp2peris", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString(":");
      String string1 = lovinsStemmer0.stem("#DUlE");
      assertEquals("#dl", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1147244031637698
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8092174745484881
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acioRaus");
      String string0 = null;
      lovinsStemmer0.stemString("5zmix");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.017980522445108
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("tex");
      assertEquals("tic", string1);
      
      String string2 = lovinsStemmer0.stemString("encing");
      assertEquals("enc", string2);
      
      lovinsStemmer0.stem("null");
      String string3 = lovinsStemmer0.stem("null");
      assertEquals("nl", string3);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9781999694374823
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("encing");
      assertEquals("enc", string0);
      
      lovinsStemmer0.stem("lux");
      lovinsStemmer0.stem("null");
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0854055849237096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "";
      stringArray0[1] = "INBOOK";
      String string0 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string0);
      
      stringArray0[2] = "pand";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("ozide");
      assertEquals("oz", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8430590354300936
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("lid");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("ful");
      assertEquals("fl", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0517683258470911
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("lz-0aWzE>*?|616KF");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      stringArray0[0] = "edly";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stem("yt");
      assertEquals("yt", string0);
      
      String string1 = lovinsStemmer0.stem("2ldpex");
      assertEquals("2ldpic", string1);
      
      String string2 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8527018325564123
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("acioRaus");
      String string0 = null;
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("1m]%0/e9/b  gq3'errud");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8911290159723069
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("h|36j%pfxend");
      lovinsStemmer0.stemString("z(!hoku}v?gtcid");
      String string0 = lovinsStemmer0.stem("h|36j%pfxend");
      assertEquals("h|36j%pfxens", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("z(!hoku}v?gtcis");
      assertEquals("z(!hoku}v?gtc", string1);
      
      String string2 = lovinsStemmer0.stem("ioning");
      assertEquals("ion", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.075088940286175
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("lid");
      lovinsStemmer0.stem("necyz");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      String string2 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1244153037602356
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.toString();
      stringArray0[0] = "edly";
      String string0 = lovinsStemmer0.stemString("qcuf7r`5vhtc&yhpdex");
      assertEquals("qcuf7r`5vhtc&yhpdic", string0);
      
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("yt");
      assertEquals("yt", string2);
      
      String string3 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9132076353742664
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("bex");
      assertEquals("bic", string0);
      
      lovinsStemmer0.stem("");
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("1M]%0/e9/b  gq3'er");
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem("idine");
      assertEquals("id", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.075088940286175
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("8034vad");
      lovinsStemmer0.stem("lid");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      String string2 = lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      assertEquals("a loc associ with th entr, such as th cit in which a confer took plac.", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("{,Y3AGGWNki %");
      assertEquals("{,y3aggwnk %", string0);
      
      String string1 = lovinsStemmer0.stemString("&3pP`");
      assertEquals("&3p`", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stem("ZQXPgHjPe");
      assertEquals("zqxpghjp", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("ically");
      assertEquals("ical", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("ical");
      String string1 = lovinsStemmer0.stem("ical");
      assertEquals("ical", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9378208645287763
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("encing");
      assertEquals("enc", string0);
      
      lovinsStemmer0.stem("ua_0yt");
      lovinsStemmer0.stem("null");
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("null");
      assertEquals("nl", string0);
      
      String string1 = lovinsStemmer0.stem("8034ex");
      assertEquals("8034ec", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.010464567161243
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("end");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.106191323563367
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("tex");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("tic");
      assertEquals("tic", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("5.7 <= 5.70001 ? ");
      lovinsStemmer0.stem("HRZX&^");
      lovinsStemmer0.stemString("ancies");
      String string0 = lovinsStemmer0.stemString("ancies");
      assertEquals("anci", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.062640026404162
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinl, nd should hae the first letter capitalized, as shown here; he standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordinl, nd should ha th first letter capital, as shown hes; he standard styl convers to lower cas when neces.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("The edition of a book---for example, ``Second''. This should be an ordinl, nd should hae the first letter capitalized, as shown here; he standard styles convert to lower case when necessary.");
      String string2 = lovinsStemmer1.stemString("th edit of a book---for exampl, ``second''. th should be an ordinl, nd should ha th first letter capital, as shown hes; he standard styl convers to lower cas when neces.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordinl, nd should ha th first letter capit, as shown he; he standard styl conver to lower ca when nec.", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("encing");
      assertEquals("enc", string0);
      
      String string1 = lovinsStemmer0.stem("lingurud");
      assertEquals("lingurus", string1);
      
      String string2 = lovinsStemmer0.stem("ional");
      assertEquals("ion", string2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.8527018325564123
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("aciorausuad");
      lovinsStemmer0.stem("acioRaus");
      lovinsStemmer0.stem("acioRaus");
      lovinsStemmer0.getRevision();
      String string0 = null;
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0517683258470911
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Get position of flag -f: ");
      assertEquals("ges posit of flag -f: ", string0);
      
      String[] stringArray0 = new String[3];
      lovinsStemmer0.toString();
      stringArray0[0] = "edly";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("yt");
      assertEquals("yt", string1);
      
      String string2 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.05445978552337
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("name(s) of editor(s), typed as indicated in the latex book. if there is also an author fie'd, then the editor field gives the editor of the book or collection in which the reference appears.lid");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author fie'd, then th edit field giv th edit of th book or collect in which th refer appear.lis", string2);
      
      String string3 = lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author fie'd, then th edit field giv th edit of th book or collect in which th refer appear.lis");
      assertEquals("nam(s) of edit(s), typ as ind in th lat book. if ther is al an author fie'd, then th edit field giv th edit of th book or collect in which th refer appear.li", string3);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9781999694374823
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("mit");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("encing");
      assertEquals("enc", string0);
      
      lovinsStemmer0.stem("null");
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0692390489246728
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer1.stemString("freund, y. and mason, l.end");
      assertEquals("freund, y. and mason, l.ens", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ation");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Morgan Kaufmann Publishers");
      assertEquals("morgan kaufman publishes", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("q$W|SA<(NGH3_");
      String string0 = lovinsStemmer0.stemString("q$w|sa<(ngh3_");
      assertEquals("q$w|sa<(ngh3_", string0);
      
      String string1 = lovinsStemmer0.stemString("acious");
      assertEquals("ac", string1);
      
      String string2 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("RES^Urr");
      assertEquals("res^ur", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1102705527833459
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[5];
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      stringArray0[0] = "ert";
      stringArray0[2] = "ert";
      String string1 = lovinsStemmer0.stemString("lv9entax");
      assertEquals("lv9entac", string1);
      
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "yt";
      String string2 = lovinsStemmer0.stem("ert");
      assertEquals("ers", string2);
      
      String string3 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string3);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("Inducti!n of decision trees");
      assertEquals("inducti!n of decision tree", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("iev");
      assertEquals("ief", string0);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string0);
      
      lovinsStemmer0.stem("I");
      String string1 = lovinsStemmer0.stem("encing");
      assertEquals("enc", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("aning");
      assertEquals("aning", string0);
      
      lovinsStemmer0.stem("aning");
      String string1 = lovinsStemmer0.stem("null");
      assertEquals("nl", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("VOLUME");
      lovinsStemmer0.stem("volum");
      String string0 = lovinsStemmer0.stemString("VOLUME");
      assertEquals("volum", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("uaserislu3shesyt");
      assertEquals("uaserislu3shesys", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("{,3AGG&Nki");
      assertEquals("{,3ag&nk", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("yvp2pher");
      assertEquals("yvp2pher", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("aerislu3sher");
      assertEquals("aerislu3shes", string0);
      
      lovinsStemmer0.stem("learninet");
      lovinsStemmer0.stemString("Xz*");
      String string1 = lovinsStemmer0.stemString("xz*");
      assertEquals("xz*", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9408224727153508
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer0.stem("8034");
      assertTrue(string2.equals((Object)string1));
      
      String string3 = lovinsStemmer0.stem("|[ UTUhqYl");
      assertEquals("|[ utuhqyl", string3);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("uct");
      assertEquals("uc", string0);
      
      lovinsStemmer0.stem("uc");
      String string1 = lovinsStemmer0.stem("uc");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("cbd0aHBBi=pAD.?B$5?");
      assertEquals("cbd0ahb=pad.?b$5?", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("e6cinO");
      String string0 = lovinsStemmer0.stem("ull");
      assertEquals("l", string0);
      
      String string1 = lovinsStemmer0.stemString("e6cinO");
      assertEquals("e6cin", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("rpt");
      assertEquals("rb", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("v|F`,$7wAtp{'fk)");
      String string0 = lovinsStemmer0.stemString("erid");
      assertEquals("eris", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      String string2 = lovinsStemmer0.stemString("k2)IpjDXv7ar`y}1");
      assertEquals("k2)ipjdxv7ar`y}1", string2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Array-Dimensions of 'new String[3][4][]': ");
      String string0 = lovinsStemmer0.stem(";M-V");
      String string1 = lovinsStemmer0.stem("");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      lovinsStemmer1.stem("8034");
      String string0 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      String string0 = lovinsStemmer0.stem("SG'R,PaUL");
      lovinsStemmer0.stem("SG'R,PaUL");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("istr");
      assertEquals("ister", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.06249646397427
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stemString("0u&EKo1JItE HW");
      assertEquals("0u&eko1jit hw", string1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("r\"zHwMgS}Z;rKsor");
      assertEquals("r\"zhwmgs}z;rks", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("|NbIIwx*IfYOUzf!etO");
      assertEquals("|nbiiwx*ifyouzf!es", string0);
      
      String string1 = lovinsStemmer0.stemString("|nbiiwx*ifyouzf!es");
      assertEquals("|nbiiwx*ifyouzf!es", string1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ars");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("$|oule;jbh$Ae>yu");
      assertEquals("$|oul;jbh$ae>yu", string0);
      
      String string1 = lovinsStemmer0.stem("ars");
      assertEquals("ar", string1);
      
      String string2 = lovinsStemmer0.stemString("59@L+*M^8gUM$");
      assertEquals("59@l+*m^8gum$", string2);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0616917288592445
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("learnyzix");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("LOCATION");
      assertEquals("loc", string0);
      
      String string1 = lovinsStemmer0.stemString("Get position of flag -f: ");
      assertEquals("ges posit of flag -f: ", string1);
      
      String string2 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Macine Learnin");
      assertEquals("proceed of th sixteenth intern confer on macin learnin", string2);
  }
}
