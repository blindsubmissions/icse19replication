/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 12:34:54 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONObject.quote("y,\n");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ishashCode
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject.quote("R[J(5vWz/H<#8QNrI");
      JSONTokener jSONTokener0 = new JSONTokener("R[J(5vWz/H<#8QNrI");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of R[J(5vWz/H<#8QNrI
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 408L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6096274235960984
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote(" at character ");
      JSONArray jSONArray0 = jSONObject0.optJSONArray("Y@sRfK");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4216010062582942
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = JSONObject.quote("y,\n");
      JSONObject jSONObject0 = new JSONObject((Object) "y,\n");
      Integer integer0 = new Integer(48);
      jSONObject0.accumulate("\"y\\,\n\"", integer0);
      assertEquals(4, jSONObject0.length());
      
      String string1 = JSONObject.valueToString("\"y\\,\n\"", 92, 92);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject((String) null);
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.7031315809655684
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject.quote("y,\n");
      JSONObject.quote("\"y\\,\n\"");
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONArray("getreverseBytes");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getreverseBytes\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject.quote("] is not a JSONObject.");
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString(",U-46h8)j:=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",U-46h8)j:=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("@G}");
      assertNull(object0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optBoolean("B8%K6Sm,>d3sfI", false);
      try { 
        jSONObject0.get("wheel.json.JSONObject$Null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONObject$Null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.quote("Z\n");
      JSONObject.testValidity("Z\n");
      Integer integer0 = new Integer(47);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "fl";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.optBoolean("fl");
      try { 
        jSONObject0.getBoolean("fl");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fl\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("java.lang.Long@00000000030", (Object) null);
      JSONObject.doubleToString(0.0);
      Double double1 = new Double(0.0);
      JSONObject.testValidity("gettoHexString");
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = JSONObject.quote("r12./\"k}i ");
      assertEquals("\"r12./\\\"k}i \"", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("'!^2p!_W{-,d4Bs}*R");
      JSONTokener jSONTokener0 = new JSONTokener("JSONObject");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.575832360384573
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = JSONObject.quote("y,\n");
      JSONObject jSONObject0 = new JSONObject((Object) "y,\n");
      jSONObject0.optInt("_L'`8XHrQu74LWbUJ", 128);
      Byte byte0 = new Byte((byte)39);
      String string1 = JSONObject.numberToString(byte0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6484893275935664
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject.quote("w1aj/uy!mW= A='");
      JSONObject jSONObject0 = new JSONObject((Object) "w1aj/uy!mW= A='");
      jSONObject0.optInt("w1aj/uy!mW= A='");
      JSONObject.valueToString("w1aj/uy!mW= A='");
      Short short0 = new Short((short)120);
      JSONObject.testValidity(short0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.quote("2-x\n");
      Byte byte0 = new Byte((byte) (-12));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\"2-x\n\"";
      stringArray0[1] = "\"2-x\n\"";
      stringArray0[2] = "2-x\n";
      stringArray0[3] = "\"2-x\n\"";
      stringArray0[4] = "2-x\n";
      stringArray0[5] = "\"2-x\n\"";
      stringArray0[6] = "2-x\n";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.553848341566947
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "DkO<~";
      JSONObject jSONObject1 = jSONObject0.accumulate("DkO<~", "DkO<~");
      try { 
        jSONObject1.getBoolean("DkO<~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DkO<~\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8392629672726304
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(8192, 3923);
      Double double0 = new Double((-573.45));
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("re", object0);
      try { 
        jSONObject0.getBoolean("re");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"re\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.accumulate("true", "true");
      jSONObject0.put("true", true);
      assertEquals(1, jSONObject0.length());
      
      boolean boolean0 = jSONObject0.getBoolean("true");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap1.put("java.lang.Long@00000000020", jSONArray0);
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.getJSONArray("java.lang.Long@00000000020");
      int int0 = 1594;
      StringWriter stringWriter0 = new StringWriter(1594);
      // Undeclared exception!
      try { 
        stringWriter0.write(" at character ", 8, 1594);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.quote("RJ(5vWz/H<#8QNrI");
      assertEquals("\"RJ(5vWz/H<#8QNrI\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      String string1 = jSONObject0.toString(7, 126);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = JSONObject.quote("y,\n");
      assertEquals("\"y,\\n\"", string0);
      
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.valueToString(jSONObject0, (-1), 20);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2238242510353525
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = JSONObject.quote("y,\n");
      assertEquals("\"y,\\n\"", string0);
      
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(0.0);
      jSONObject0.toString(65, 65);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.pollLast();
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      String string0 = JSONObject.valueToString(linkedList0, (-4155), (-4155));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.1985152433458726
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = JSONObject.quote("w1aj/{y!mW= A=9");
      assertEquals("\"w1aj/{y!mW= A=9\"", string0);
      
      String string1 = JSONObject.valueToString("\"w1aj/{y!mW= A=9\"", (-1961), (-1961));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3341923457408336
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject.quote("y,\n");
      JSONObject jSONObject0 = new JSONObject((Object) "\"y\\,\n\"");
      // Undeclared exception!
      jSONObject0.toString(1509, 1509);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString((String) null);
      assertEquals("", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5002692973717837
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = JSONObject.quote("y,\n");
      assertEquals("\"y,\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "y,\n");
      long long0 = jSONObject0.optLong("y,\n", (-67L));
      assertEquals((-67L), long0);
      assertEquals(3, jSONObject0.length());
      
      String string1 = JSONObject.quote("R0jFp");
      assertEquals("\"R0jFp\"", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("882qljVAb#}W9F| ");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = JSONObject.quote("RJ(5vWz/H<#8QNrI");
      Short short0 = new Short((short)387);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = JSONObject.quote("] is nc anu\ber.");
      assertEquals("\"] is nc anu\\ber.\"", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 35.96552);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.quote(" at character ");
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      stringArray0[1] = "1";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject.quote("2(-x\n");
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"2(-x\n\"";
      stringArray0[1] = "\"2(-x\n\"";
      stringArray0[2] = "0";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3030924037617193
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0);
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(44);
      jSONObject0.putOpt("4#}8|e", integer0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "wheel.json.JSONObject$Null";
      String string1 = "gettrim";
      jSONObject0.isNull("gettrim");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.toString();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "wheel.json.JSONObject$Null", 1258, 1258);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = JSONObject.quote("y,\n");
      Short short0 = new Short((short)371);
      String string1 = JSONObject.valueToString(short0, (short)371, 12);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote("y,\n");
      assertEquals("\"y,\\n\"", string0);
      
      JSONObject.valueToString("y,\n", 3453, 3453);
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 1, 1);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8712327562161466
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "79\\f";
      JSONObject jSONObject1 = jSONObject0.accumulate("79\f", "79\f");
      jSONObject1.getLong("79\f");
      String string1 = null;
      jSONObject1.optBoolean(string0);
      try { 
        jSONObject0.getBoolean(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = JSONObject.quote("*><_2/xN%");
      assertEquals("\"*><_2/xN%\"", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4741083800990982
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(683.627);
      jSONObject0.append("\",\n\"", double0);
      String string1 = jSONObject0.toString((-2768), (-2768));
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Float float0 = new Float((-2414.3276F));
      Float.max((-2414.3276F), (-2414.3276F));
      Float.isFinite((-2414.3276F));
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(3, jSONObject0.length());
      assertNotNull(jSONArray0);
      
      String string0 = JSONObject.quote("}g.{hPZV]>5D&=Nj");
      assertEquals("\"}g.{hPZV]>5D&=Nj\"", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = JSONObject.quote("w1aj/uy!mW= A='");
      Integer integer0 = new Integer(2001);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = JSONObject.quote("] is not a JSONObject.");
      assertEquals("\"] is not a JSONObject.\"", string0);
      
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = JSONObject.valueToString(jSONObject0, 2214, 46);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2423808027135204
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      hashMap0.put("lyGncWq;)^AJ3|{", (JSONArray) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.get("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(3);
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Dkh<~";
      jSONObject0.accumulate("Dkh<~", "Dkh<~");
      try { 
        jSONObject0.getInt("Dkh<~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Dkh<~\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.offer(object0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      boolean boolean0 = linkedList0.removeLastOccurrence(object0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.2570699364010605
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject.quote("G(]x\n");
      JSONObject jSONObject0 = new JSONObject((Object) "G(]x\n");
      jSONObject0.toString();
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = JSONObject.quote("y,\n");
      Integer integer0 = new Integer(31);
      String string1 = JSONObject.valueToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      String[] stringArray0 = new String[5];
      stringArray0[3] = "Expected a ',' or '}'";
      stringArray0[0] = "eq";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float(0.0F);
      String string0 = "A9KL~<.%[Q*~W\"A";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("E1,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of E1,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.804318488804226
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("gettoString", false);
      jSONObject0.optBoolean("gettoString");
      JSONObject jSONObject1 = jSONObject0.accumulate("Dkh<~", "Dkh<~");
      try { 
        jSONObject1.getBoolean("Dkh<~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Dkh<~\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5770803233350075
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Double double0 = new Double((-2737.066));
      Double.sum((-2730.29874651141), (-2737.066));
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("Z{\"A}`", object0);
      try { 
        jSONObject1.getJSONArray("Z{\"A}`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z{\\\"A}`\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 572, 572);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "Dkh<~";
      JSONObject jSONObject0 = new JSONObject((Object) "Dkh<~");
      jSONObject0.put("Dkh<~", 710.140992712);
      JSONObject jSONObject1 = jSONObject0.accumulate("ha", "ha");
      jSONObject1.getDouble("Dkh<~");
      try { 
        jSONObject0.getBoolean("Dkh<~");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Dkh<~\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>(60);
      Float float0 = new Float((double) 60);
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte) (-96));
      JSONObject jSONObject1 = jSONObject0.put("oqgq[:vaiqR^}LV", (Object) byte0);
      double double0 = jSONObject1.optDouble("oqgq[:vaiqR^}LV", (double) (byte) (-96));
      assertEquals((-96.0), double0, 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 742);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wheel.json.JSONObject";
      long long0 = 663L;
      Long long1 = new Long(663L);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject", (Object) long1);
      try { 
        jSONObject1.append("wheel.json.JSONObject", "wheel.json.JSONObject");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[wheel.json.JSONObject] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float float0 = new Float((-2941.7283F));
      Float.isFinite((-2941.7283F));
      JSONObject jSONObject0 = new JSONObject((Object) "{P;%`rU+)eU;");
      String string0 = jSONObject0.toString(47, 47);
      String string1 = JSONObject.valueToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean.valueOf("Bad value from toJSONString: ");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) hashMap0);
      String string0 = "*";
      Integer integer0 = new Integer(9);
      jSONObject1.accumulate("Bad value from toJSONString: ", integer0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Bad value from toJSONString: 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.containsAll(linkedList0);
      String string0 = JSONObject.valueToString(linkedList1);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Boolean, Boolean> hashMap0 = new HashMap<Boolean, Boolean>();
      Boolean boolean0 = Boolean.valueOf(":$h");
      hashMap0.put(boolean0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(2608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2608] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject.quote("w1aj/uy!mW= A='");
      Object object0 = new Object();
      JSONObject.valueToString(object0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"w1\\aj/uy!mW= A='\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"w1\\aj/uy!mW= A='\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{o=]E");
      jSONTokener0.syntaxError((String) null);
      jSONTokener0.skipTo('1');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 3 of {o=]E
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      jSONTokener0.nextValue();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6837389058487535
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.504438850338);
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames((Object) linkedList0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.has("' and insted saw'");
      Boolean boolean1 = new Boolean(false);
      assertTrue(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, String> hashMap1 = new HashMap<Object, String>();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put("ZAG", 92);
      int int0 = jSONObject2.optInt("ZAG");
      assertEquals(92, int0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Byte byte0 = new Byte((byte)42);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.put((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Float float0 = new Float(0.0F);
      String string0 = "A9KL~<.%[Q*~W\"A";
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("E1,");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of E1,
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.get(2608);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[2608] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      String string0 = JSONObject.valueToString(hashMap0, 6, 6);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HashMap<Float, Long> hashMap0 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      float float0 = 0.0F;
      Float float1 = new Float(0.0F);
      Float.min(0.0F, 0.0F);
      Float float2 = new Float(0.0F);
      String string0 = "PtReLZ'QDo-SJ>L7=";
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("PtReLZ'QDo-SJ>L7=", object0);
      jSONObject1.accumulate("PtReLZ'QDo-SJ>L7=", "PtReLZ'QDo-SJ>L7=");
      try { 
        jSONObject0.getLong("yS1VR\"0*Rp{$\"ZD#{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"yS1VR\\\"0*Rp{$\\\"ZD#{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("l1~BPE$XzD$N8Lj");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.9713112193042521
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean.valueOf("Bad value from toJSONString: ");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Bad value from toJSONString: ", (Map) hashMap0);
      Byte byte0 = new Byte((byte)13);
      Integer integer0 = new Integer((byte)13);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      LinkedList linkedList1 = (LinkedList)linkedList0.clone();
      linkedList0.containsAll(linkedList0);
      JSONObject jSONObject1 = jSONObject0.put("*", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = (StringWriter)jSONArray0.write(stringWriter0);
      jSONObject1.write(stringWriter1);
      jSONObject0.toString((-2180), (int) (byte)13);
      Long long0 = new Long((-2180));
      JSONObject.valueToString(long0, (-2180), (-2180));
      Short short0 = new Short((short)3);
      JSONObject.testValidity(short0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Boolean, JSONObject> hashMap0 = new HashMap<Boolean, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, LinkedList<Double>> hashMap1 = new HashMap<Integer, LinkedList<Double>>();
      String string0 = "";
      int int0 = 92;
      Boolean boolean0 = Boolean.FALSE;
      Boolean.getBoolean("");
      hashMap0.put(boolean0, jSONObject0);
      jSONObject0.put("", 92);
      short short0 = (short) (-1359);
      Short short1 = new Short((short) (-1359));
      Boolean.getBoolean("");
      Short.toUnsignedLong((short)1);
      jSONObject0.getLong("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>(60);
      Float float0 = new Float(0.0);
      Float.isFinite(60);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      hashMap0.put(float0, jSONObject0);
      Float float1 = new Float((double) 60);
      hashMap0.put(float1, jSONObject0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(60);
      String string0 = JSONObject.quote("isjoin");
      assertEquals("\"isjoin\"", string0);
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "\"isjoin\"");
      jSONObject1.write(stringWriter1);
      String string1 = JSONObject.doubleToString(0.0);
      assertEquals("0", string1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("NM\"<{Fg", object0);
      jSONObject1.keys();
      Integer integer0 = new Integer((-62353088));
      JSONObject jSONObject2 = jSONObject0.append("NM\"<{Fg", integer0);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = JSONObject.quote(" @W#9zi&<MB</o");
      assertEquals("\" @W#9zi&<MB<\\/o\"", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(boolean0);
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean("Bad value from toJSONString ");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString ", (Map) hashMap0);
      jSONObject1.optJSONObject("Bad value from toJSONString ");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject.doubleToString(1606.2083244544);
      JSONObject jSONObject0 = new JSONObject((Object) "1606.2083244544");
      jSONObject0.put("1606.2083244544", 0L);
      jSONObject0.optString("1606.2083244544", "1606.2083244544");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.860089822433768
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(1150, 2081);
      JSONObject jSONObject1 = new JSONObject("{}");
      Float float0 = new Float((double) 2081);
      jSONObject1.append("{}", float0);
      try { 
        jSONObject1.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(1150, 1150);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Float float0 = new Float((double) 1150);
      JSONObject jSONObject2 = jSONObject1.append("{}", float0);
      jSONObject2.optJSONArray("{}");
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{o:X9p;Z/C[suI|Qd");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {o:X9p;Z/C[suI|Qd
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.040839837423239
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{n=A");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 4 of {n=A
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.942194820809461
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Short short0 = new Short((short)1670);
      JSONObject jSONObject0 = new JSONObject(short0);
      Short.compare((short)0, (short)1670);
      String string0 = jSONObject0.toString(1150, 1150);
      assertEquals(1, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      String string1 = jSONObject1.toString(1150, 1150);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean0 = new Boolean("Bad value from toJSONString: ");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", (Map) hashMap0);
      Integer integer0 = new Integer(399);
      JSONObject.getNames((Object) jSONObject1);
      jSONObject0.toString(399, 5);
      jSONObject1.getJSONObject("Bad value from toJSONString: ");
      JSONObject.testValidity(boolean0);
      Integer integer1 = new Integer(399);
      JSONObject.testValidity(integer1);
      assertTrue(integer1.equals((Object)integer0));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject.doubleToString((-70125688));
      Double double0 = new Double((-70125688));
      assertEquals((-7.0125688E7), (double)double0, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float((-2414.3276F));
      Float.isFinite((-2414.3276F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      assertEquals(8, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.071009045822646
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float((-3117.184F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Short.compare((short)0, (short)0);
      String string0 = jSONObject0.toString((-2058), 2622);
      JSONObject jSONObject1 = new JSONObject(string0);
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("true", "true");
      assertEquals(1, jSONObject0.length());
      
      Long long0 = new Long(393L);
      jSONObject1.getBoolean("true");
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Float float0 = new Float((-3640.5583F));
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.accumulate("false", "false");
      jSONObject1.getBoolean("false");
      assertEquals(4, jSONObject0.length());
      
      JSONObject.quote("false");
      String string0 = JSONObject.quote("\"false\"");
      assertEquals("\"\\\"false\\\"\"", string0);
  }
}
