/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 12:20:52 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7201248812718097
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-rimTexct";
      stringArray0[0] = "-rimTexct";
      OutputFormat outputFormat0 = new OutputFormat("-indent", false, "V&V");
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(false);
      OutputFormat outputFormat1 = new OutputFormat("-rimTexct", false, "-indent");
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("V&V", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-indent", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.setPadText(false);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.375024252984546
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-rimTexct";
      stringArray0[0] = "-rimTexct";
      OutputFormat outputFormat0 = new OutputFormat("indent", false, "indent");
      assertEquals("\n", outputFormat0.getLineSeparator());
      
      OutputFormat.createCompactFormat();
      outputFormat0.setLineSeparator("-rimTexct");
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1617);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-rimTexct";
      stringArray0[0] = "-rimTexct";
      OutputFormat outputFormat0 = new OutputFormat("'%fT@%DE_sw@?x", true, "-rimTexct");
      outputFormat0.setNewLineAfterNTags(39);
      outputFormat0.parseOptions(stringArray0, 4667);
      assertEquals(39, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "*mj(vCLM!";
      OutputFormat outputFormat0 = new OutputFormat("*mj(vCLM!");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "*mj(vCLM!";
      stringArray0[1] = "*mj(vCLM!";
      boolean boolean0 = false;
      stringArray0[3] = "*mj(vCLM!";
      outputFormat0.setXHTML(false);
      stringArray0[4] = "*mj(vCLM!";
      stringArray0[5] = "*mj(vCLM!";
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('m');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (m)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("1r+Cc");
      assertEquals("1r+Cc", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("AAuf$2");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('@');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (@)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&@O", false);
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("&@O", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(boolean0);
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      assertEquals("", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setOmitEncoding(false);
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("^03", false);
      outputFormat0.setIndent(true);
      outputFormat0.setEncoding("^03");
      outputFormat0.getEncoding();
      outputFormat0.setXHTML(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('_');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (_)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-rimTexct";
      stringArray0[0] = "-rimTexct";
      int int0 = 0;
      OutputFormat outputFormat0 = new OutputFormat("-indent", false, "V&V");
      outputFormat0.setNewLineAfterDeclaration(false);
      OutputFormat outputFormat1 = new OutputFormat("-rimTexct", false, "-indent");
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('.');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (.)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(">7-G^dRI;^X1U", true);
      outputFormat0.setEncoding(">7-G^dRI;^X1U");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterNTags((-2466));
      outputFormat0.getIndent();
      outputFormat0.setIndent("7Y");
      outputFormat0.setXHTML(false);
      outputFormat0.isTrimText();
      outputFormat0.isOmitEncoding();
      outputFormat0.setEncoding("uuk,u");
      outputFormat0.setNewLineAfterNTags((-1116));
      outputFormat0.setOmitEncoding(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setEncoding("");
      outputFormat0.setIndentSize(39);
      outputFormat0.getIndent();
      outputFormat0.setXHTML(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setIndentSize(39);
      boolean boolean0 = outputFormat0.isNewlines();
      assertTrue(outputFormat0.isXHTML());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "x%_1Yt");
      outputFormat0.setIndent("x%_1Yt");
      outputFormat0.setTrimText(true);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.getLineSeparator();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isXHTML();
      outputFormat0.setIndentSize(0);
      outputFormat0.setExpandEmptyElements(true);
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", false, "-trimText");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-trimText";
      outputFormat0.setIndent("-trimText");
      assertEquals("-trimText", outputFormat0.getIndent());
      
      stringArray0[1] = "-trimText";
      stringArray0[2] = "KJ";
      outputFormat0.setIndent(false);
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
      
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertFalse(boolean0);
      
      outputFormat0.setNewlines(false);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("-trimText", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-padText", false);
      outputFormat0.setTrimText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-padText";
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterNTags(2417);
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.parseOptions(stringArray0, 2417);
      outputFormat0.parseOptions(stringArray0, 2417);
      outputFormat0.parseOptions(stringArray0, 2417);
      outputFormat0.setTrimText(false);
      outputFormat0.parseOptions(stringArray0, 18);
      int int0 = (-644);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-644));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -644
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String string0 = outputFormat0.getIndent();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertNull(string0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(",p)WCs^hz3LZ");
      boolean boolean0 = false;
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setPadText(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setTrimText(true);
      outputFormat0.setNewlines(false);
      String string0 = null;
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isPadText();
      outputFormat0.isSuppressDeclaration();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('i');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (i)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "-trimText";
      OutputFormat outputFormat0 = new OutputFormat("-trimText", false, "-trimText");
      String[] stringArray0 = new String[3];
      outputFormat0.setIndent("-trimText");
      outputFormat0.setIndent(true);
      OutputFormat outputFormat1 = new OutputFormat("", true, "-encoding");
      outputFormat1.setLineSeparator("KJ");
      outputFormat1.setLineSeparator("KJ");
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("ZnY%", true, "  ");
      boolean boolean0 = outputFormat0.isTrimText();
      assertFalse(boolean0);
      
      outputFormat0.setSuppressDeclaration(false);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("ZnY%", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("  ", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true, "");
      outputFormat0.setIndentSize((-1));
      outputFormat0.getIndent();
      outputFormat0.getNewLineAfterNTags();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      outputFormat0.parseOptions(stringArray0, 1726);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setExpandEmptyElements(true);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isOmitEncoding());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-padText", false, "-rimTexct");
      OutputFormat outputFormat1 = new OutputFormat("-rimTexct", false, "xV!K`uTdCN(");
      outputFormat0.setIndent((String) null);
      outputFormat1.setIndent("WoaA-~cr)Q|-ppR;[");
      OutputFormat outputFormat2 = new OutputFormat("-rimTexct", true, "-expandEmptyG*Q~SiT} ]+H1VE+CW|");
      outputFormat1.setLineSeparator("f");
      assertEquals("WoaA-~cr)Q|-ppR;[", outputFormat1.getIndent());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "f";
      stringArray0[1] = "indent";
      stringArray0[2] = null;
      stringArray0[3] = "WoaA-~cr)Q|-ppR;[";
      stringArray0[4] = "-rimTexct";
      stringArray0[5] = "-rimTexct";
      outputFormat2.parseOptions(stringArray0, 0);
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false, "");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("");
      outputFormat0.setNewlines(false);
      outputFormat1.setEncoding("");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isPadText();
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent("");
      outputFormat1.setEncoding("");
      outputFormat0.isOmitEncoding();
      outputFormat1.setLineSeparator("(*qZQA[Hp4yj3p! AR");
      assertEquals("(*qZQA[Hp4yj3p! AR", outputFormat1.getLineSeparator());
      
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setSuppressDeclaration(false);
      outputFormat2.setSuppressDeclaration(false);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-padText";
      stringArray0[1] = "-trimText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isPadText());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterDeclaration(true);
      boolean boolean0 = false;
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setNewlines(false);
      OutputFormat outputFormat2 = new OutputFormat("-suppressDeclaration");
      outputFormat2.setIndent(false);
      outputFormat1.setNewLineAfterDeclaration(false);
      String[] stringArray0 = new String[6];
      stringArray0[1] = ".J8W( 9RD7%uK=e";
      stringArray0[2] = "-suppressDeclaration";
      stringArray0[4] = ".J8W( 9RD7%uK=e";
      stringArray0[5] = ".J8W( 9RD7%uK=e";
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "uX+*F&)<*o4=HFg!";
      stringArray0[1] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding(stringArray0[0]);
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      boolean boolean0 = false;
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-expandEmptyX(";
      String string0 = "OZu_x{bJPyoXQ\\Y";
      stringArray0[1] = "OZu_x{bJPyoXQY";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat0.setIndent("-expandEmptyX(");
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.parseOptions(stringArray0, 2);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-2664));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2664
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = new OutputFormat();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "^|q>";
      stringArray0[1] = "^|q>";
      stringArray0[2] = "";
      outputFormat0.setSuppressDeclaration(true);
      stringArray0[3] = "X^k0Ty?g~";
      outputFormat2.parseOptions(stringArray0, 0);
      outputFormat0.setIndent("XAEu)L:EA");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "-lineSeparator";
      stringArray1[1] = "CMsYLI#";
      stringArray1[2] = "-xhtml";
      outputFormat1.parseOptions(stringArray1, 0);
      outputFormat2.parseOptions(stringArray0, 6);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-1139));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1139
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-padText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-xhtml";
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.setIndentSize(1);
      stringArray0[1] = "-xhtmlOZu_x{bJPyoXQY";
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterNTags((-1806856876));
      outputFormat0.setSuppressDeclaration(false);
      outputFormat1.setNewlines(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-262));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -262
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("x+>Fu6eU]!", false, "Es??EZHq9~31Kl'");
      outputFormat0.setLineSeparator("x+>Fu6eU]!");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "Es??EZHq9~31Kl'";
      stringArray0[2] = "-padText";
      stringArray0[3] = "KJ";
      stringArray0[4] = "-padText";
      stringArray0[5] = "-omitEncoding";
      stringArray0[6] = "!QRS&)CRu";
      stringArray0[7] = "-padText";
      stringArray0[8] = "-omitEncoding";
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("x+>Fu6eU]!", outputFormat0.getLineSeparator());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("PBu", false, "-indent");
      OutputFormat outputFormat1 = new OutputFormat(">6", false, "org.dom4j.io.OutputFormat");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "V&V";
      stringArray0[2] = "org.dom4j.io.OutputFormat";
      stringArray0[3] = ">6";
      stringArray0[4] = "-rimTexct";
      stringArray0[5] = "-lineSeparator";
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("V&V", outputFormat0.getLineSeparator());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indent", false, "kJl+o,=g0}GrU0N-A");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-indent";
      stringArray0[2] = "-indent";
      stringArray0[3] = "kJl+o,=g0}GrU0N-A";
      stringArray0[4] = "kJl+o,=g0}GrU0N-A";
      stringArray0[5] = "kJl+o,=g0}GrU0N-A";
      stringArray0[6] = "-indent";
      stringArray0[7] = "-indent";
      stringArray0[8] = "-indent";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("-indent", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("kJl+o,=g0}GrU0N-A", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(3, int0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3978952727983707
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimText", false, "-trimText");
      OutputFormat outputFormat1 = new OutputFormat("-trimText", true, "-trimText");
      outputFormat0.setIndent("-trimText");
      outputFormat1.setIndent("\"0i93Eh:s]+)Ek");
      outputFormat1.setIndent(false);
      outputFormat0.setIndent(true);
      outputFormat0.setPadText(false);
      outputFormat1.setPadText(true);
      outputFormat1.getNewLineAfterNTags();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.getNewLineAfterNTags();
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat4 = new OutputFormat();
      outputFormat4.setEncoding("-trimText");
      OutputFormat outputFormat5 = new OutputFormat("-trimText", true, "-trimText");
      outputFormat2.setNewlines(true);
      outputFormat5.setEncoding("-padText");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "\"0i93Eh:s]+)Ek";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-padText";
      stringArray0[5] = "\"0i93Eh:s]+)Ek";
      stringArray0[6] = "";
      stringArray0[6] = "{tL*pJ!";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat3.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat3.parseOptions(stringArray0, (-1969238246));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1969238246
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-rimTexct", false, "PBu");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("4,\"[-!:");
      outputFormat1.setIndent(true);
      OutputFormat outputFormat2 = new OutputFormat("-expandEmpty");
      outputFormat2.setPadText(true);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat3.getNewLineAfterNTags();
      outputFormat1.getNewLineAfterNTags();
      OutputFormat outputFormat4 = new OutputFormat((String) null, false, "XNv<LV!){l](Csd4:");
      outputFormat3.setNewlines(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-newlines";
      stringArray0[1] = "}6w6Sj6Tj~bb$";
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = null;
      outputFormat3.parseOptions(stringArray0, 0);
      outputFormat3.parseOptions(stringArray0, 1);
      // Undeclared exception!
      try { 
        outputFormat3.parseOptions(stringArray0, (-323));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -323
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
