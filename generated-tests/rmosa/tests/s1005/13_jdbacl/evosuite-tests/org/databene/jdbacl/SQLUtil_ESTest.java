/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 07:12:38 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.List;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.jni.LocalGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.h2.command.dml.RunScriptCommand;
import org.h2.engine.ConnectionInfo;
import org.h2.engine.Database;
import org.h2.engine.Session;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer((-4090));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      Integer integer3 = RawTransaction.COMMIT;
      Integer integer4 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer5 = RawTransaction.ABORT;
      System.setCurrentTimeMillis(0L);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.normalize("V -+", true);
      System.setCurrentTimeMillis((-4090));
      SQLUtil.mutatesDataOrStructure("create materialized viewselect * from");
      // Undeclared exception!
      try { 
        defaultDBTable0.requiresProvider((-4090));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = SQLUtil.normalize("*d6_r", true);
      assertEquals("* d6_r", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[17];
      stringArray0[0] = "ZQIT]mKH^Il&V8vY@\"";
      stringArray0[1] = "ZQIT]mKH^Il&V8vY@\"";
      String string0 = SQLUtil.innerJoin("ZQIT]mKH^Il&V8vY@\"", stringArray0, "ZQIT]mKH^Il&V8vY@\"", "ZQIT]mKH^Il&V8vY@\"", stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("\"b{e&~%Xj)F]-R");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8381196037849845
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = SQLUtil.normalize("#/l-)[;UDXN:,", true);
      assertEquals("# / l -) [ ; UDXN :,", string0);
      
      DBSchema dBSchema0 = new DBSchema("# / l -) [ ; UDXN :,");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("# / l -) [ ; UDXN :,", dBSchema0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.derby.iapi.store.replication.slave.SlaveFactory";
      stringArray0[1] = "# / l -) [ ; UDXN :,";
      stringArray0[2] = "#/l-)[;UDXN:,";
      stringArray0[3] = "#/l-)[;UDXN:,";
      stringArray0[4] = "#/l-)[;UDXN:,";
      stringArray0[5] = "# / l -) [ ; UDXN :,";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)122;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[6] = "# / l -) [ ; UDXN :,";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "#/l-)[;UDXN:,", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT #/l-)[;UDXN:, PRIMARY KEY (org.apache.derby.iapi.store.replication.slave.SlaveFactory, # / l -) [ ; UDXN :,, #/l-)[;UDXN:,, #/l-)[;UDXN:,, #/l-)[;UDXN:,, # / l -) [ ; UDXN :,, # / l -) [ ; UDXN :,)", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("FOREIGN KEY ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULu");
      String[] stringArray0 = new String[0];
      defaultDBTable0.setOwner(dBSchema0);
      dBSchema0.equals("FOREIGN KEY ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "p[EM1Zie", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBPrimaryKeyConstraint0.equals(dBSchema0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = " (";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " (", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[13];
      boolean boolean0 = true;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = ":0S@_u+ q]he]&gn";
      stringArray0[2] = ":0S@_u+ q]he]&gn";
      SQLUtil.renderColumnListWithTableName(":0S@_u+ q]he]&gn", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      assertNull(dBCatalog0.getDoc());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.880524555284045
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.normalize("truncatev - +", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("select(");
      System.setCurrentTimeMillis((-1735L));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9295224102980398
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      String string0 = SQLUtil.normalize("b-]/SpG'N:~U*@", false);
      assertEquals("b - ] / SpG 'N:~U*@'", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9735584326028659
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)77;
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-28);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-54);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      SQLUtil.normalize("I/(iDc hv", false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("I / (iDc hv");
      assertNull(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers(" on ", "baseConglomerateId", " on ");
      assertEquals(" on ", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.7990591844756405
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = SQLUtil.normalize("EXISTS(", false);
      assertEquals("EXISTS (", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("select into");
      DBSchema dBSchema0 = new DBSchema("EXISTS (", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("EXISTS(", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "select into";
      stringArray0[1] = "<EOF>";
      stringArray0[2] = "zHX?\":F0,";
      stringArray0[3] = "EXISTS(";
      stringArray0[4] = "EXISTS (";
      stringArray0[5] = "EXISTS (";
      stringArray0[6] = "EXISTS(";
      stringArray0[7] = "select into";
      stringArray0[8] = "select into";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop indexselect into", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (select into, <EOF>, zHX?\":F0,, EXISTS(, EXISTS (, EXISTS (, EXISTS(, select into, select into) REFERENCES EXISTS((select into, <EOF>, zHX?\":F0,, EXISTS(, EXISTS (, EXISTS (, EXISTS(, select into, select into)", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", "", (String[]) null, "", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "1o&R?2N3?~u;f5'2.7");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      defaultDBTable0.countProviders();
      String[] stringArray0 = new String[10];
      stringArray0[0] = " (";
      stringArray0[1] = " (";
      stringArray0[2] = " (";
      stringArray0[3] = " (";
      stringArray0[6] = " (";
      SQLUtil.leftJoin(" (", stringArray0, "alter session", "alter materialized view", stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog("select");
      // Undeclared exception!
      try { 
        dBCatalog0.getTable(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ' ('
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      String[] stringArray0 = new String[1];
      stringArray0[0] = " (";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" (", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("dU<YTmcTLeV&IG");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, true);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.format(" (", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, true);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter2);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NOYu");
      String[] stringArray0 = new String[7];
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append((Object) " NOYu");
      SQLUtil.addOptionalCondition("FOR+EIGN KEY ", stringBuilder0);
      assertEquals(" NOYu or FOR+EIGN KEY ", stringBuilder0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u=U8bd[sM");
      defaultDBTable0.countProviders();
      System.setCurrentTimeMillis(0);
      StringBuilder stringBuilder0 = new StringBuilder("u=U8bd[sM");
      SQLUtil.addRequiredCondition("u=U8bd[sM", stringBuilder0);
      int int0 = (-545);
      ArrayList<DBIndex> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<DBIndex>((-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -545
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("w^lHd#f](p4OIq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: w^lHd#f](p4OIq
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3938036725270004
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.normalize("u(iDc hv", false);
      DBCatalog dBCatalog0 = new DBCatalog("", (org.databene.jdbacl.model.Database) null);
      dBCatalog0.getTable("execy", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-954), "> jH7>Ik]zcD 9SAOp");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("u (iDc hv", (DBTable) null, dBDataType0, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.mutatesDataOrStructure("execy");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("> jH7>Ik]zcD 9SAOp");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "create table");
      String string0 = SQLUtil.normalize("truncatev - +", true);
      assertEquals("truncatev - +", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncatev - +");
      boolean boolean0 = SQLUtil.isQuery("truncatev - +");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "truncatev - +";
      stringArray0[1] = "truncatev - +";
      stringArray0[2] = "insert";
      stringArray0[3] = "truncatev - +";
      stringArray0[4] = "truncatev - +";
      stringArray0[5] = "create table";
      stringArray0[6] = "create table";
      stringArray0[7] = "create table";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create table", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (truncatev - +, truncatev - +, insert, truncatev - +, truncatev - +, create table, create table, create table)", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog(",0F=atYn@7R");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "z7({kpr,;R)Bf)!";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("z7({kpr,;R)Bf)!", defaultDBTable0, (-3681), "z7({kpr,;R)Bf)!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{kpr\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 268, "z7({kp;R)Bf)!");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{kp;R\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = " (";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " (";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " (", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = " (";
      SQLUtil.isQuery("=ES");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      pGConnectionPoolDataSource0.getLogWriter();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "=ES";
      stringArray0[3] = "=ES";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "=ES", true, "SELECT * FROM null WHERE null = null AND =ES = '=ES' AND null = null AND =ES = '=ES' AND null = null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'SELECT * FROM null WHERE null = null AND =ES = '=ES' AND null = null AND =ES = '=ES' AND null = null' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XBCM2.S");
      defaultDBTable0.getColumns();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "XBCM2.S", true, (String[]) null);
      SQLUtil.ownerDotComponent(dBUniqueConstraint0);
      defaultDBTable0.getPrimaryKeyConstraint();
      ConnectionInfo connectionInfo0 = new ConnectionInfo("XBCM2.S.XBCM2.S");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XBCM2.S");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, true);
      assertFalse(mockPrintWriter1.equals((Object)mockPrintWriter0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = SQLUtil.normalize("aY|88)b%~xDM", false);
      assertEquals("aY | 88) b % ~ xDM", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      DBSchema dBSchema0 = new DBSchema("execy");
      SQLUtil.ownerDotComponent(dBSchema0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execy", dBSchema0);
      String string0 = "-";
      ConnectionInfo connectionInfo0 = new ConnectionInfo("-");
      Database database0 = null;
      try {
        database0 = new Database(connectionInfo0, "Cpk}!gA?Qfmu4gUN0)`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // IO Exception: \"java.io.IOException: Simulated IOException\"; \"-.h2.db\" [90031-136]
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("FOREIGN KEY ");
      dBSchema0.equals("FOREIGN KEY ");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition(" NULu", stringBuilder0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.5359610497090694
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = SQLUtil.normalize("u(iDc hv", false);
      assertEquals("u (iDc hv", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("", (org.databene.jdbacl.model.Database) null);
      dBCatalog0.getTable("execy", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-954), "> jH7>Ik]zcD 9SAOp");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("u (iDc hv", (DBTable) null, dBDataType0, (Integer) null);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setSize(integer0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("u (iDc hv > JH7>IK]ZCD 9SAOP(3) NULL", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-2460), "\"Y4OyUyIUz%j");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("\"Y4OyUyIUz%j", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("\"Y4OyUyIUz%j \"Y4OYUYIUZ%J(1,1) NULL", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("u=U8bd[sM");
      defaultDBTable0.countProviders();
      System.setCurrentTimeMillis(0);
      StringBuilder stringBuilder0 = new StringBuilder(0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("u=U8bd[sM", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) stringBuilder0, (-545), (-1649));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -545, end -1649, s.length() 9
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "8Uoix\\uCck**8`J'";
      String string1 = SQLUtil.normalize(string0, false);
      assertEquals("8Uoix \\ uCck * * 8 ` J ''", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Character character0 = Character.valueOf('O');
      SQLUtil.renderValue(character0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      Character.compare('O', 'O');
      DBCheckConstraint dBCheckConstraint0 = null;
      try {
        dBCheckConstraint0 = new DBCheckConstraint("oS]\"?l9`/]:<Z~H", false, defaultDBTable0, "oS]\"?l9`/]:<Z~H");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error parsing SQL
         //
         verifyException("org.databene.jdbacl.sql.SQLParserUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.isDML("updateexec\"");
      MockFile mockFile0 = new MockFile("4Y-y59<^FJ26m-+^", "4Y-y59<^FJ26m-+^");
      mockFile0.setWritable(true, true);
      mockFile0.setReadOnly();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.flush();
      Object[] objectArray0 = new Object[8];
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter materialized ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-#TZ6_s)jIx1";
      stringArray0[1] = "alter materialized ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized ", false, stringArray0);
      defaultDBTable0.addUniqueConstraint(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XBCXT.S");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("XBCXT.S");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DBDataType dBDataType0 = DBDataType.getInstance((-142902301), "XBCXT.S");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XBCXT.S", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("org.apache.derby.impl.sql.compile.OrderByColumn");
      DBSequence dBSequence0 = new DBSequence("org.apache.derby.impl.sql.compile.OrderByColumn", "org.apache.derby.impl.sql.compile.OrderByColumn", "org.apache.derby.impl.sql.compile.OrderByColumn");
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(2489, ")?,");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("catalog null", (DBTable) null, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("FOREIGN KEY ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "FOREIGN KEY ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" NULu");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" NULu", defaultDBTable0, 28800, "create tableorg.databene.jdbacl.sqlutil");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "?qu,", true, " NULu");
      String string0 = SQLUtil.constraintName(dBNotNullConstraint0);
      assertEquals("CONSTRAINT ?qu, ", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("FOREI+WGN KEY ");
      DBDataType dBDataType0 = DBDataType.getInstance(28800, "FOREI+WGN KEY ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("u,?Sm|Kf", (DBTable) null, dBDataType0, integer0, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      dBDataType0.isAlpha();
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("g,9l7*^w@YCN\"_2&&G", false);
      assertEquals("g, 9  l7 * ^ w @ YCN \"_2&&G\"", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NCLOB");
      jdbcClob jdbcClob0 = new jdbcClob("NCLOB");
      jdbcClob0.getCharacterStream();
      Integer.max(13, 45);
      DBDataType dBDataType0 = DBDataType.getInstance(45, "NCLOB");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" \tC[;&Nq&", defaultDBTable0, dBDataType0, integer0, integer2);
      defaultDBColumn0.setTable((DBTable) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string0 = SQLUtil.normalize(" \tC[;&Nq&", false);
      assertEquals("C [ ; & Nq &", string0);
      
      System.setCurrentTimeMillis((-2703L));
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" \tC[;&Nq& NCLOB NULL", string1);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = SQLUtil.normalize("truncateb-x]/spg'n:~u*@", true);
      assertEquals("truncateb - x ] / spg 'n:~u*@'", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.OrderByColumn", defaultDBTable0, (-2503), "org.apache.derby.impl.sql.compile.OrderByColumn");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(")=", defaultDBTable0, (-2503), "org.apache.derby.impl.sql.compile.OrderByColumn");
      defaultDBColumn1.getForeignKeyConstraint();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      String string0 = SQLUtil.renderColumnNames(list0);
      assertEquals("org.apache.derby.impl.sql.compile.OrderByColumn, )=", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.7566199756619738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SQLUtil.normalize("THE *LAST* COLUMN ", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, "THE * LAST * COLUMN", "executedeletereferences");
      SQLUtil.constraintName(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndexes();
      String string0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.StringUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = SQLUtil.normalize("I/(iDc0 hv", true);
      assertEquals("I / (iDc0 hv", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", true);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into");
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("QY,;U'%/iZ8@H");
      defaultDBTable0.getIndexes();
      String[] stringArray0 = new String[1];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "QY,;U'%/iZ8@H", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = " NULL";
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      mockPrintWriter0.print(3152);
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec1, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.4433066914680872
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = SQLUtil.normalize("u(iDc hv", false);
      assertEquals("u (iDc hv", string0);
      
      DBCatalog dBCatalog0 = new DBCatalog("", (org.databene.jdbacl.model.Database) null);
      dBCatalog0.getTable("execy", false);
      DBDataType dBDataType0 = DBDataType.getInstance((-954), "> jH7>Ik]zcD 9SAOp");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("u (iDc hv", (DBTable) null, dBDataType0, (Integer) null);
      defaultDBColumn0.setDefaultValue("exec");
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("u (iDc hv > JH7>IK]ZCD 9SAOP DEFAULT exec NULL", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = SQLUtil.normalize("--G", false);
      assertEquals("-- G", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.32450838693107065
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-826.2999708733712);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("- 826.2999708733712", true);
      Random.setNextRandom(2301);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessiondrop index");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("alter materialized ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter materialized ");
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "alter materialized ";
      stringArray0[2] = "alter materialized ";
      stringArray0[3] = "callz7({kp;r)bf)!";
      stringArray0[4] = "alter materialized ";
      stringArray0[5] = null;
      stringArray0[6] = null;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.nval = 9092.0;
      SQLUtil.renderNumber(streamTokenizer0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      pipedReader0.markSupported();
      streamTokenizer0.nval = 1202.269777538103;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("1202.269777538103", string0);
      
      boolean boolean0 = SQLUtil.isQuery("0'F],_3c_z");
      assertFalse(boolean0);
      
      String string1 = SQLUtil.normalize("h2.maxMemoryRowsDistinct", false);
      assertEquals("h2.maxMemoryRowsDistinct", string1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.antlr.runtime.tree");
      String[] stringArray0 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint constraint", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.apache.derby.impl.sql.compile.OrderByColumn", defaultDBTable0, (-2503), "org.apache.derby.impl.sql.compile.OrderByColumn");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(")=", defaultDBTable0, (-2503), "org.apache.derby.impl.sql.compile.OrderByColumn");
      defaultDBColumn1.setNullable(false);
      defaultDBColumn1.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile(" on ");
      MockFile mockFile0 = new MockFile(file0, ")=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((long) (-2503));
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getName());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      SQLUtil.isQuery("\n/* index sred */");
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Random.setNextRandom(566);
      DBSchema dBSchema0 = new DBSchema("S2,a#xz`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\n\nRemembering join order as best: ", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("S2,a#xz`", defaultDBTable0, 289, "drop index,");
      defaultDBColumn0.setNullable(false);
      DBNotNullConstraint dBNotNullConstraint0 = defaultDBColumn0.getNotNullConstraint();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("constraint", 45);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("S2,a#xz` NOT NULL", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis((-3633L));
      SQLUtil.removeComments("\n/* direct lookup */");
      Random.setNextRandom((-1));
      System.setCurrentTimeMillis(174);
      System.setCurrentTimeMillis(0L);
      SQLUtil.removeComments(")&Q");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("LAST", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Random.setNextRandom(174);
      System.setCurrentTimeMillis(772L);
      System.setCurrentTimeMillis(174);
  }
}
