/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 06:59:58 GMT 2018
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setClientSocketTrafficClass("(0J$C&7iO5ic2]p");
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-525);
      int int1 = 269;
      advancedSettings0.setPerformancePreferencesConnectionTime(269);
      advancedSettings0.setClientSocketSendBufferSize((-525));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setQSObjectPoolMaker("\t<debug-non-blocking-mode>");
      advancedSettings0.setClientSocketSendBufferSize((-525));
      advancedSettings0.setQSObjectPoolMaker("\t<debug-non-blocking-mode>");
      advancedSettings0.setClientSocketTrafficClass("\t<max-threads-for-nio-write>");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketTrafficClass();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<max-threads-for-nio-write>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<max-threads-for-nio-write>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("frr=");
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setQSObjectPoolMaker("");
      assertEquals("frr=", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      
      advancedSettings0.setClientSocketTcpNoDelay(true);
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite((-2475));
      advancedSettings0.setPerformancePreferencesBandwidth((-2475));
      advancedSettings0.setQSObjectPoolMaker("%;K");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("Y8`G!:!~@l'q^(x.Q");
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-2475), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesBandwidth((-1264));
      advancedSettings0.setClientIdentifier("");
      assertEquals((-1264), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getByteBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime(65536);
      advancedSettings1.setByteBufferSize(0);
      advancedSettings1.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings1.setQSObjectPoolMaker("");
      advancedSettings1.getPerformancePreferencesBandwidth();
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings1.setClientSocketReceiveBufferSize(65536);
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings1.setByteBufferSize((-1506));
      assertEquals(65536, advancedSettings1.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1260));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      assertEquals((-1260), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("0@");
      advancedSettings0.setBacklog((-566));
      advancedSettings0.setBacklog((-4380));
      advancedSettings0.setPerformancePreferencesLatency((-3385));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setSocketLinger(3312);
      assertEquals((-3385), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(1196);
      advancedSettings0.setMaxThreadsForNioWrite((-1264));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getBacklog();
      advancedSettings0.setBacklog((-1264));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setByteBufferSize((-25));
      advancedSettings0.setPerformancePreferencesBandwidth((-1264));
      advancedSettings0.setClientSocketReceiveBufferSize((-168));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("");
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals((-168), advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("\t<use-direct-byte-buffer>");
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1641));
      advancedSettings0.getDebugNonBlockingMode();
      assertEquals((-1641), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setSocketLinger(3472);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setQSObjectPoolMaker("EREMJh");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.toXML((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("EREMJh");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // EREMJh
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(4289);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setBacklog(2881);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketReceiveBufferSize(1009);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.toXML((String) null);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize(0);
      assertEquals(2881, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(69);
      advancedSettings0.setClientSocketSendBufferSize((-1303));
      advancedSettings0.toXML("1F26fBUwCm");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML("5F");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      assertEquals(10, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(3498);
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      assertEquals((-1), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6390573296152584
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize(1196);
      advancedSettings0.setMaxThreadsForNioWrite((-1264));
      advancedSettings0.getCharset();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getBacklog();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setBacklog((-1264));
      advancedSettings0.setClientSocketSendBufferSize(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("?fv1");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ?fv1
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }
}
