/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 07:27:35 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(14);
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode((-16));
      simpleNode0.jjtGetParent();
      simpleNode1.jjtSetParent((Node) null);
      simpleNode0.setIdentifier("InclusiveOrExpression");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.write(14);
      stringWriter2.write((-16));
      StringWriter stringWriter3 = new StringWriter();
      stringWriter3.write(14);
      simpleNode1.dump("(`'`W9i/MjH$E8 ", stringWriter0);
      simpleNode1.dump("Type", stringWriter3);
      StringReader stringReader0 = new StringReader("PostfixExpression");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      simpleNode0.dump("Type", stringWriter3);
      StringWriter stringWriter4 = stringWriter1.append((CharSequence) "ShiftExpression");
      simpleNode0.dump("ShiftExpression", stringWriter4);
      simpleNode1.dump("(`'`W9i/MjH$E8 ", stringWriter3);
      simpleNode0.dump("xM|?T", stringWriter2);
      simpleNode1.dump("0n7-1)\",9`RC(D", stringWriter1);
      simpleNode0.dump("{[jS6~", stringWriter0);
      assertEquals("<ClassOrInterfaceBody>\n  <identifier>InclusiveOrExpression</identifier>\n</ClassOrInterfaceBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6428579130907905
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      SystemInUtil.addInputLine(".+Jj0u&\"P");
      simpleNode0.setIdentifier("?");
      simpleNode0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = 'x';
      charArray0[1] = 'c';
      charArray0[2] = '\'';
      stringWriter0.write(charArray0);
      simpleNode0.dump("\"finally\"", stringWriter0);
      assertEquals("xc'<VariableInitializer>\n  <identifier>?</identifier>\n</VariableInitializer>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.setIdentifier("f[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.setIdentifier("{");
      simpleNode0.toString("");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.write((-1088808359));
      stringWriter1.close();
      simpleNode0.dump("ShiftExpression", stringWriter0);
      simpleNode0.dump("<<", stringWriter1);
      simpleNode0.dump("{", stringWriter0);
      assertEquals("\u1A59<VariableInitializer>\n  <identifier>f[</identifier>\n  <identifier>*lshft</identifier>\n</VariableInitializer>\n<VariableInitializer>\n  <identifier>f[</identifier>\n  <identifier>*lshft</identifier>\n</VariableInitializer>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      SimpleNode simpleNode0 = new SimpleNode(3);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringReader stringReader0 = new StringReader("eo");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 3, 720);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 3);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, (-1));
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.identifiers = arrayList0;
      simpleNode0.setIdentifier("<identifier>Literal Valu</identfier>\n");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("<identifier>Literal Valu</identfier>\n", stringWriter1);
      simpleNode1.dump("<identifier>Literal Valu</identfier>\n", stringWriter0);
      simpleNode1.dump("\"finally\"", stringWriter0);
      assertFalse(stringWriter0.equals((Object)stringWriter1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.7031315809655685
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(14);
      JavaParser javaParser0 = new JavaParser((String) null);
      try { 
        javaParser0.ArrayDimsAndInits();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 0.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 100;
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter(100);
      stringWriter0.flush();
      stringWriter0.write(100);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.append((CharSequence) "");
      StringWriter stringWriter2 = new StringWriter(100);
      SimpleNode simpleNode0 = new SimpleNode(100);
      int int1 = 100;
      simpleNode0.jjtClose();
      JavaCharStream javaCharStream0 = null;
      try {
        javaCharStream0 = new JavaCharStream((InputStream) null, 100, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 14;
      SimpleNode simpleNode0 = new SimpleNode(14);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(14);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.073542846408523
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      StringWriter stringWriter0 = new StringWriter(100);
      stringWriter0.flush();
      stringWriter0.write(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.flush();
      simpleNode0.dump("", stringWriter1);
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
      
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode0.toString();
      String string0 = simpleNode0.toString();
      assertEquals("MemberValuePair", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5140966973399504
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(13);
      simpleNode0.setIdentifier("f[");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.write((-1088808359));
      simpleNode0.dump("ShiftExpression", stringWriter0);
      simpleNode0.dump("<<", stringWriter1);
      simpleNode0.dump("f[", stringWriter1);
      simpleNode0.dump("kU>nzqK$%q_OTcjZt", stringWriter1);
      assertEquals("<TypeBound>\n  <identifier>f[</identifier>\n  <identifier>*lshft</identifier>\n</TypeBound>\n<TypeBound>\n  <identifier>f[</identifier>\n  <identifier>*lshft</identifier>\n</TypeBound>\n<TypeBound>\n  <identifier>f[</identifier>\n  <identifier>*lshft</identifier>\n</TypeBound>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2605);
      SimpleNode simpleNode1 = new SimpleNode(0);
      StringReader stringReader0 = new StringReader("");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 4001);
      simpleNode2.jjtAddChild(simpleNode1, 4001);
      simpleNode2.jjtGetNumChildren();
      int int0 = simpleNode2.jjtGetNumChildren();
      assertEquals(4002, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      assertEquals("<PackageDeclaration>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2605);
      int int0 = 0;
      simpleNode0.jjtAddChild(simpleNode0, 0);
      StringWriter stringWriter0 = new StringWriter(4001);
      SimpleNode simpleNode1 = new SimpleNode(0);
      int int1 = (-1867);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1867));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1867
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2605);
      int int0 = 0;
      simpleNode0.jjtAddChild(simpleNode0, 0);
      StringWriter stringWriter0 = new StringWriter(4001);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 2280);
      StringWriter stringWriter1 = new StringWriter(2280);
      SimpleNode simpleNode2 = new SimpleNode(500);
      simpleNode2.parent = (Node) simpleNode0;
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((Enumeration<? extends InputStream>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      simpleNode0.setIdentifier("L5rz),[d");
      SystemInUtil.addInputLine("|B88O3L<x8:ufmLU");
      Node[] nodeArray0 = new Node[0];
      simpleNode0.children = nodeArray0;
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("x:H&t[eiMu r3S`qQ\"w", stringWriter0);
      StringWriter stringWriter1 = new StringWriter(36);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "L5rz),[d");
      simpleNode0.dump("L5rz),[d", stringWriter2);
      simpleNode0.dump("-NB$ujDfjP22{", stringWriter1);
      stringWriter1.close();
      simpleNode0.dump("{", stringWriter2);
      simpleNode0.dump("*le", stringWriter2);
      assertEquals("L5rz),[d<Name>\n  <identifier>L5rz),[d</identifier>\n</Name>\n<Name>\n  <identifier>L5rz),[d</identifier>\n</Name>\n<Name>\n  <identifier>L5rz),[d</identifier>\n</Name>\n<Name>\n  <identifier>L5rz),[d</identifier>\n</Name>\n", stringWriter2.toString());
      assertEquals("L5rz),[d<Name>\n  <identifier>L5rz),[d</identifier>\n</Name>\n<Name>\n  <identifier>L5rz),[d</identifier>\n</Name>\n<Name>\n  <identifier>L5rz),[d</identifier>\n</Name>\n<Name>\n  <identifier>L5rz),[d</identifier>\n</Name>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(66);
      String string0 = "<=";
      Node[] nodeArray0 = new Node[7];
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter(66);
      stringWriter0.flush();
      // Undeclared exception!
      try { 
        simpleNode0.dump("<=", stringWriter0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9943536917623688
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TiE:Bpn$C,");
      StringWriter stringWriter0 = new StringWriter(1);
      stringWriter0.flush();
      simpleNode0.dump("TiE:Bpn$C,", stringWriter0);
      simpleNode0.toString();
      assertEquals(2, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(14);
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ";");
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals(";<ClassOrInterfaceBody>\n</ClassOrInterfaceBody>\n", stringWriter1.toString());
      assertEquals(";<ClassOrInterfaceBody>\n</ClassOrInterfaceBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(">", stringWriter0);
      assertEquals("<PackageDeclaration>\n  <identifier>*gt</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("4z/Mzii<RFa,='GIOh", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*amp</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.setIdentifier(">>");
      SystemInUtil.addInputLine(",gDBXHJSpq<5&kbc%65");
      simpleNode0.setIdentifier("V<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("V<", stringWriter0);
      assertEquals("<PackageDeclaration>\n  <identifier>*rshft</identifier>\n  <identifier>V<</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(13);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("{");
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.setIdentifier("Ivy=XA:9`Loqs;,gid");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write(3357);
      simpleNode1.dump("{", stringWriter0);
      StringWriter stringWriter2 = new StringWriter(0);
      simpleNode0.dump("<<", stringWriter2);
      simpleNode1.dump("<<", stringWriter0);
      Node[] nodeArray0 = new Node[0];
      simpleNode1.children = nodeArray0;
      simpleNode1.dump("f[", stringWriter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ivy=XA:9`Loqs;,gid");
      simpleNode1.dump(":", stringWriter2);
      simpleNode0.dump("*lt", stringWriter0);
      simpleNode0.dump("*lt", stringWriter2);
      assertEquals("<TypeBound>\n  <identifier>Ivy=XA:9`Loqs;,gid</identifier>\n</TypeBound>\n<TypeBound>\n  <identifier>Ivy=XA:9`Loqs;,gid</identifier>\n</TypeBound>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("f[");
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("f[", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      simpleNode0.dump((String) null, stringWriter1);
      assertEquals("<EnumConstant>\n  <identifier>f[</identifier>\n  <identifier>*le</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>f[</identifier>\n  <identifier>*le</identifier>\n</EnumConstant>\nnull<EnumConstant>\n  <identifier>f[</identifier>\n  <identifier>*le</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("\"float\"", stringWriter0);
      assertEquals("<EnumConstant>\n  <identifier>*lt</identifier>\n</EnumConstant>\n<EnumConstant>\n  <identifier>*lt</identifier>\n</EnumConstant>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(36);
      SystemInUtil.addInputLine("L5rz),[d");
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("XCe''\"nX!.6", stringWriter0);
      assertEquals("<Name>\n  <identifier>*ge</identifier>\n</Name>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(48);
      stringWriter0.write(0);
      simpleNode0.dump("&", stringWriter0);
      assertEquals("0\u0000<RelationalExpression>\n  <identifier>*amp</identifier>\n</RelationalExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.setIdentifier("f[");
      simpleNode0.setIdentifier("&");
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier((String) null);
      stringWriter0.write(0);
      // Undeclared exception!
      try { 
        simpleNode0.dump("&", stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.setIdentifier("<<");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write(63);
      StringWriter stringWriter2 = new StringWriter(19);
      simpleNode0.dump("ShiftExpression", stringWriter2);
      simpleNode0.dump("(s+]&b-13-_;1V<", stringWriter2);
      assertEquals("<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter2.toString());
  }
}
