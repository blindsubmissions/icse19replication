/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 07:09:50 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.7902347553432827
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3.w&!)I4Q->?>";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "_WcoFI55M";
      OutputFormat outputFormat0 = new OutputFormat("m^Yx:22b5irD.KfoJ.", true, "-encoding");
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.parseOptions(stringArray0, 17);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('O');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (O)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.908908734898781
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setEncoding("fE!3FP/NX");
      outputFormat0.setLineSeparator("fE!3FP/NX");
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3.w&!)I4Q->?>";
      stringArray0[1] = "fE!3FP/NX";
      stringArray0[2] = "(1ag&%]";
      stringArray0[3] = "|8]Y{u`Zj+";
      stringArray0[4] = "fE!3FP/NX";
      stringArray0[6] = "fE!3FP/NX";
      stringArray0[7] = "fE!3FP/NX";
      outputFormat0.parseOptions(stringArray0, 2);
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertEquals("fE!3FP/NX", outputFormat0.getEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3020613918729727
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3.w&!)I4Q->?>";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "_WcoFI55M";
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.parseOptions(stringArray1, 0);
      String[] stringArray2 = new String[7];
      stringArray2[0] = "-expandEmpty3.w&!)I4Q->?>";
      stringArray2[1] = "3.w&!)I4Q->?>";
      stringArray2[2] = "J'~A[haZzj4SbiQ,X";
      stringArray2[3] = "-trimText";
      stringArray2[4] = "_WcoFI55M";
      stringArray2[5] = "_WcoFI55M";
      stringArray2[6] = "3.w&!)I4Q->?>";
      outputFormat0.parseOptions(stringArray2, 1);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isPadText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("  ", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("AOd_wj");
      outputFormat0.setNewlines(false);
      boolean boolean0 = outputFormat0.isNewlines();
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("AOd_wj", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3906826278129532
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("4}'ZC%y}");
      assertTrue(outputFormat0.isTrimText());
      
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4}'ZC%y}";
      stringArray0[1] = "-epaSdEpty";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-epaSdEpty";
      String[] stringArray2 = new String[9];
      stringArray2[0] = "-epaSdEpty";
      stringArray2[1] = "-epaSdEpty";
      stringArray2[2] = "-epaSdEpty";
      stringArray2[3] = "-epaSdEpty";
      stringArray2[4] = "-epaSdEpty";
      stringArray2[5] = "-epaSdEpty";
      stringArray2[6] = "-epaSdEpty";
      stringArray2[7] = "";
      stringArray2[8] = "-epaSdEpty";
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.parseOptions(stringArray2, 1);
      outputFormat0.parseOptions(stringArray2, 2100);
      outputFormat0.parseOptions(stringArray1, 2100);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("/E4@+M2J+-u5D[HFh", true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setPadText(true);
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isPadText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(")");
      boolean boolean0 = outputFormat0.isSuppressDeclaration();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(")", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3.w&!)I4Q->?>";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "@O@&J` ;q";
      OutputFormat outputFormat0 = new OutputFormat("", false, "@O@&J` ;q");
      assertEquals("", outputFormat0.getIndent());
      
      outputFormat0.setIndent((String) null);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("@O@&J` ;q", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      
      OutputFormat outputFormat1 = new OutputFormat("-expandEmpty3.w&!)I4Q->?>");
      outputFormat1.parseOptions(stringArray0, 55);
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("-expandEmpty3.w&!)I4Q->?>", outputFormat1.getIndent());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setLineSeparator("fE!3FP/NX");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3.w&!)I4Q->?>";
      OutputFormat outputFormat1 = new OutputFormat("58Bu~>JHE ", true, "2v_g,p-b*Of/ul");
      outputFormat1.setIndent("");
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      outputFormat0.setIndentSize((-1));
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3.w&!)I4Q->?>";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "@O@&J` ;q";
      OutputFormat outputFormat0 = new OutputFormat("@O@&J` ;q");
      OutputFormat outputFormat1 = new OutputFormat("");
      outputFormat1.parseOptions(stringArray0, 39);
      int int0 = (-1475);
      outputFormat1.setIndentSize(39);
      outputFormat0.parseOptions(stringArray1, 0);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String[] stringArray1 = new String[5];
      OutputFormat outputFormat0 = new OutputFormat((String) null, false, "-encoding");
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(false);
      outputFormat0.parseOptions(stringArray1, 39);
      outputFormat0.parseOptions(stringArray0, 638);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("-encoding", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-aR{S,,}1cL0IHP4");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setEncoding("-aR{S,,}1cL0IHP4");
      outputFormat0.setEncoding("<TUTY^:-R=");
      assertEquals("<TUTY^:-R=", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.2711893730418441
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4}'ZC%y}";
      stringArray0[1] = "-epaSdEpty";
      OutputFormat outputFormat0 = new OutputFormat("-epaSdEpty", true, "4}'ZC%y}");
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 0);
      OutputFormat outputFormat1 = new OutputFormat("4}'ZC%y}", true, "3.w&!)I4Q->");
      outputFormat1.parseOptions(stringArray0, 1185);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "3.w&!)I4Q->";
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "RU4y";
      stringArray0[4] = "RU4y";
      String string0 = outputFormat0.getIndent();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertNull(string0);
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("fE!3FP/NX", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fE!3FP/NX";
      stringArray0[1] = "fE!3FP/NX";
      stringArray0[2] = "";
      stringArray0[4] = "fE!3FP/NX";
      stringArray0[5] = "fE!3FP/NX";
      outputFormat0.setTrimText(true);
      stringArray0[6] = "fE!3FP/NX";
      outputFormat0.setNewlines(true);
      outputFormat0.setPadText(false);
      outputFormat0.setPadText(true);
      outputFormat0.getLineSeparator();
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "-encoding";
      stringArray0[2] = "|8]Y{u`Zj+";
      stringArray0[3] = "-encoding";
      stringArray0[4] = "-encoding";
      outputFormat0.setSuppressDeclaration(false);
      stringArray0[5] = "-omitEncoding";
      stringArray0[6] = "-omitEncoding";
      stringArray0[7] = "fE!3FP/NX";
      stringArray0[8] = "-omitEncoding";
      int int0 = 0;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      assertEquals("", outputFormat0.getIndent());
      
      outputFormat0.setIndent(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals("  ", outputFormat0.getIndent());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(0);
      boolean boolean0 = outputFormat0.isTrimText();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(boolean0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-suppressDeclaration", false);
      outputFormat0.setLineSeparator("-suppressDeclaration");
      outputFormat0.getEncoding();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UTF-8";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-suppressDeclaration", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.dom4j.io";
      stringArray0[1] = "";
      stringArray0[2] = "org.dom4j.io";
      stringArray0[3] = "";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "3.w&!)I4Q->?>";
      int int0 = 0;
      String[] stringArray1 = new String[5];
      stringArray1[0] = "_WcoFI55M";
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("l#4", true, "?{~O|%(V");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setLineSeparator("-suppressDeclaration");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "cX;bZSk/]2VEw?ko";
      stringArray0[1] = "frr=";
      stringArray0[2] = "3.w&!)I4Q->?>";
      stringArray0[3] = "frr=";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "cX;bZSk/]2VEw?ko";
      stringArray0[6] = "frr=";
      stringArray0[7] = "?{~O|%(V";
      outputFormat0.parseOptions(stringArray0, 1904);
      assertEquals("-suppressDeclaration", outputFormat0.getLineSeparator());
      
      OutputFormat outputFormat1 = new OutputFormat("-lineSeparator", false, "-suppressDeclaration");
      boolean boolean0 = outputFormat1.isPadText();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[0];
      outputFormat0.setNewlines(true);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setXHTML(true);
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isOmitEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fE!3FP/NX";
      stringArray0[1] = "-xhtml";
      stringArray0[2] = "|8]Y{u`Zj+";
      stringArray0[3] = "-encoding";
      stringArray0[4] = "-encoding";
      stringArray0[5] = "-omitEncoding";
      outputFormat0.parseOptions(stringArray0, 0);
      boolean boolean0 = outputFormat0.isPadText();
      assertFalse(boolean0);
      
      outputFormat0.parseOptions(stringArray0, 1929);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("-encoding", outputFormat0.getIndent());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("fE!3FP/NX", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fE!3FP/NX";
      stringArray0[1] = "fE!3FP/NX";
      stringArray0[2] = "";
      stringArray0[3] = "fE!3FP/NX";
      outputFormat0.setIndent("fE!3FP/NX");
      boolean boolean0 = true;
      outputFormat0.setNewlines(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setOmitEncoding(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('4');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (4)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptyZ*j_$5h@12", false);
      outputFormat0.setNewLineAfterDeclaration(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-expandEmptyZ*j_$5h@12";
      outputFormat0.setEncoding((String) null);
      stringArray0[1] = "-expandEmptyZ*j_$5h@12";
      stringArray0[2] = "-expandEmptyZ*j_$5h@12";
      outputFormat0.parseOptions(stringArray0, 1728);
      outputFormat0.parseOptions(stringArray0, 1728);
      outputFormat0.setLineSeparator("-expandEmptyZ*j_$5h@12");
      outputFormat0.parseOptions(stringArray0, 1728);
      outputFormat0.parseOptions(stringArray0, 1728);
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.setIndent(true);
      outputFormat0.parseOptions(stringArray0, 1185);
      int int0 = outputFormat0.parseOptions(stringArray0, 2);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding");
      outputFormat0.setXHTML(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fE!3FP/NX";
      stringArray0[1] = "-xhtml";
      stringArray0[2] = "|8]Y{u`Zj+";
      stringArray0[3] = "-encoding";
      stringArray0[4] = "-encoding";
      stringArray0[5] = "-omitEncoding";
      stringArray0[6] = "-omitEncoding";
      stringArray0[7] = "fE!3FP/NX";
      stringArray0[8] = "B\"=3Z6#8,Ne:)B";
      outputFormat0.parseOptions(stringArray0, 0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "-omitEncoding";
      stringArray1[1] = "(:GhnPgyYtH+k&.p";
      stringArray1[2] = "fE!3FP/NX";
      stringArray1[3] = "-xhtml";
      outputFormat0.parseOptions(stringArray1, 0);
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-xhtml";
      stringArray0[1] = "-encoding";
      stringArray0[2] = "3.w&!)I4Q->";
      stringArray0[3] = "B\"=3Z6#8,Ne:)B";
      stringArray0[4] = "-aR{S,,}1cL0IHP4";
      stringArray0[6] = "-xhtml";
      stringArray0[7] = "-omitEncoding";
      stringArray0[8] = "-encoding";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("3.w&!)I4Q->", outputFormat0.getEncoding());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-expandEmpty4}'ZC%y}";
      stringArray0[1] = "-epaSdEpty";
      OutputFormat outputFormat0 = new OutputFormat("-epaSdEpty", true, "-expandEmpty4}'ZC%y}");
      outputFormat0.parseOptions(stringArray0, 1);
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      OutputFormat outputFormat1 = new OutputFormat("-epaSdEpty");
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 2;
      String[] stringArray0 = new String[9];
      String[] stringArray1 = new String[8];
      stringArray1[0] = "|8]Y{u`Zj+";
      stringArray1[1] = "-suppressDeclaration";
      stringArray1[3] = "-suppressDeclaration";
      stringArray1[4] = "-suppressDeclaration";
      stringArray1[5] = "fE!3FP/NX";
      stringArray1[6] = "-xhtml-xhtml(1ag&%";
      stringArray1[7] = "fE!3FP/NX";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      boolean boolean0 = false;
      outputFormat0.setTrimText(false);
      int int0 = 0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "4}'ZC%y}";
      stringArray0[4] = "4}'ZC%y}";
      stringArray0[3] = "4}'ZC%y}";
      stringArray0[5] = "4}'ZC%y}";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setTrimText(false);
      outputFormat0.setLineSeparator("fE!3FP/NX");
      outputFormat0.setLineSeparator("fE!3FP/NX");
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 39);
      outputFormat0.isPadText();
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertEquals("fE!3FP/NX", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String string0 = "4}'ZC%y}";
      outputFormat0.setIndent("4}'ZC%y}");
      outputFormat0.setTrimText(false);
      int int0 = 0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-newlines";
      stringArray0[2] = "4}'ZC%y}";
      stringArray0[4] = "4}'ZC%y}";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "-indentSize";
      OutputFormat outputFormat0 = new OutputFormat("-indentSize", true, "-indentSize");
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-trimText";
      stringArray0[3] = "-indentSize";
      stringArray0[4] = "-indentSize";
      stringArray0[5] = "fE!3FP";
      stringArray0[6] = "-indentSize";
      stringArray0[7] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-indentSize\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indent");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-indent";
      stringArray0[1] = "-indent";
      stringArray0[2] = "-indent";
      stringArray0[3] = "-indent";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(4, int0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("-indent", outputFormat0.getIndent());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent("4}'ZC%y}");
      outputFormat0.setTrimText(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4}'ZC%y}";
      stringArray0[1] = "-epaSdEpty";
      outputFormat0.parseOptions(stringArray0, 0);
      int int0 = 1;
      outputFormat0.parseOptions(stringArray0, 1);
      OutputFormat outputFormat1 = new OutputFormat("-padText", false, "-epaSdEpty");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "-padText";
      stringArray1[1] = "-padText";
      stringArray1[2] = "4}'ZC%y}";
      stringArray1[3] = "4}'ZC%y}";
      String[] stringArray2 = new String[6];
      stringArray2[0] = "-padText";
      stringArray2[1] = "-padText";
      stringArray2[2] = "-padText";
      stringArray2[3] = "4}'ZC%y}";
      stringArray2[4] = "-epaSdEpty";
      stringArray2[5] = "-padText";
      outputFormat1.parseOptions(stringArray2, 2);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray1, (-1727645656));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1727645656
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }
}
