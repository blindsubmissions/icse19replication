/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 07:22:03 GMT 2018
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Document;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      String string0 = "B@*";
      boolean boolean0 = false;
      try { 
        sAXReader0.setFeature("B@*", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: B@*
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "//tmp/tmp/file:/0, 0Xo]!Z4";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("//tmp/tmp/file:/0, 0Xo]!Z4");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/tmp/file:/0, 0Xo]!Z4 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setDocumentFactory(documentFactory0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.resetHandlers();
      sAXReader0.isIncludeExternalDTDDeclarations();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(boolean0);
      
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertNotNull(dispatchHandler0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.70560245079815
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      String string0 = "[g5";
      StringReader stringReader0 = new StringReader("[g5");
      xMLFilterImpl1.getEntityResolver();
      stringReader0.skip(0L);
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      String string1 = "//tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[g5");
      File file0 = MockFile.createTempFile("[g5", "[g5");
      // Undeclared exception!
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8488997058418164
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      StringReader stringReader0 = new StringReader("http://xml.org/sax/properties/lexical-handler");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      File file0 = MockFile.createTempFile("&r#rl0&ABH@-TNU%", "org.dom4j.tree.FlyweightCDATA");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.845638493134256
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          URL uRL0 = MockURL.getFileExample();
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
          String string0 = null;
          SAXReader sAXReader0 = new SAXReader((String) null, false);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor289.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7986522062521288
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("30L&'Lbw0)IF=");
      StringReader stringReader1 = new StringReader("30L&'Lbw0)IF=");
      stringReader0.skip(0L);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      String string0 = "//tmp/,q0O6CMTvhXQ3jo=r0/tmp/i7tL4(0i7tL45(";
      String string1 = "e2>I45$u";
      File file0 = MockFile.createTempFile("30L&'Lbw0)IF=", "e2>I45$u");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      String string0 = "//tmp/30L&'Lbw0)IF=0/tmp/30L&'Lbw0)IF=0.tmp";
      sAXReader0.createDefaultEntityResolver("//tmp/30L&'Lbw0)IF=0/tmp/30L&'Lbw0)IF=0.tmp");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      URL uRL0 = MockURL.getFileExample();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getDocumentFactory();
      MockFile mockFile0 = new MockFile("//tmp/30L&'Lbw0)IF=0/tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(", "//tmp/30L&'Lbw0)IF=0/tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("30L&'Lbw0)IF=");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader1 = new StringReader("30L&'Lbw0)IF=");
      stringReader0.skip(0L);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read((Reader) stringReader0, "3pMu9*Y8- XFa'}z|<");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      String string0 = "3pMu9*Y8- XFa'}z|<";
      MockURL.getFileExample();
      try { 
        sAXReader0.read("3pMu9*Y8- XFa'}z|<");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "#fz0B";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("#fz0B", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class #fz0B not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.addHandler("KfMja (\"o", (ElementHandler) null);
      try { 
        MockURI.URI("%w?1^,'O)-/6J +_X");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Malformed escape pair at index 0: %w?1^,'O)-/6J +_X
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("//tmp/tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(0http:/xml.org/sax/features/string-interning", xMLFilterImpl1);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: //tmp/tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(0http:/xml.org/sax/features/string-interning
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      assertTrue(sAXReader0.isStringInternEnabled());
      
      sAXReader0.setStringInternEnabled(false);
      assertFalse(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "Jr>4*Log+] .>s8)-kF";
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.createDefaultEntityResolver("Jr>4*Log+] .>s8)-kF");
      MockFile mockFile0 = new MockFile("Jr>4*Log+] .>s8)-kF");
      QName qName0 = new QName("Jr>4*Log+] .>s8)-kF");
      qName0.equals("Jr>4*Log+] .>s8)-kF");
      String string1 = "org.jaxen.function.LocalNameFunction";
      MockFile mockFile1 = new MockFile("Jr>4*Log+] .>s8)-kF", "org.jaxen.function.LocalNameFunction");
      mockFile1.mkdirs();
      try { 
        MockFile.createTempFile("org.jaxen.function.LocalNameFunction", "org.jaxen.function.LocalNameFunction", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      HandlerBase handlerBase0 = new HandlerBase();
      xMLFilterImpl0.setDTDHandler(handlerBase0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setIgnoreComments(false);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("n^");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("n^", "n^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-2359));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.removeHandler("HXA3Y");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/6k/{OoBAU80,q0OM6CMTvhXQ3jo=r");
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getDispatchHandler();
      sAXReader0.getDispatchHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      StringReader stringReader0 = new StringReader("Error on line ");
      try { 
        sAXReader0.read((Reader) stringReader0, "GPt3");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/evosuite_readability_gen/projects/62_dom4j/GPt3 : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "org.dom4j.io.SAXReader");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.getEncoding();
      MockFile mockFile0 = new MockFile("/9G8(F,D^h/tAR!Q");
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, false);
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      MockFile mockFile0 = new MockFile("//tmp/?Kzhy.0%2:c0{z", "=lh%{,)L:Vh]I@_5./d");
      MockFile.createTempFile("=lh%{,)L:Vh]I@_5./d", "=lh%{,)L:Vh]I@_5./d", (File) mockFile0);
      sAXReader0.setMergeAdjacentText(true);
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile("//tmp/?Kzhy.0%2:c0{z", "#comment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"#comment\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("-O&2W1VwRS%b>tU# x", "Sbp6!G\"", "Sbp6!G\"", 40, 153);
      try { 
        sAXReader0.setXMLReaderClassName("-O&2W1VwRS%b>tU# x");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class -O&2W1VwRS%b>tU# x not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      boolean boolean0 = true;
      sAXReader0.setStripWhitespaceText(true);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      try { 
        defaultDocumentFactory0.createXPath("^5EXS&>IW;^MFi=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid XPath expression: ^5EXS&>IW;^MFi= Unexpected '^5EXS&>IW;^MFi='
         //
         verifyException("org.dom4j.xpath.DefaultXPath", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      try { 
        MockURL.URL(".8gz=ox]QAzQR", (String) null, (-2227), ".8gz=ox]QAzQR");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: .8gz=ox]qazqr
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.startCDATA();
      sAXReader0.setErrorHandler(defaultHandler2_0);
      File file0 = MockFile.createTempFile("//tmp/tmp/e2>I45$u0lookupNamespaceURI0org.jaxen.expr.DefaultStep", "TTH.m");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(true);
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("//");
      stringReader0.skip(0L);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      PipedInputStream pipedInputStream0 = new PipedInputStream(21);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 15);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.createDefaultEntityResolver((String) null);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "//";
      StringReader stringReader0 = new StringReader("//");
      stringReader0.skip(0L);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      MockURL.getFileExample();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      try { 
        sAXReader0.read((InputStream) dataInputStream0, "//");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        MockURL.URL((String) null, (String) null, "CDATA_SECTION_NODE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getEntityResolver();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1259));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getErrorHandler();
      xMLFilterImpl0.setErrorHandler((ErrorHandler) null);
      StringReader stringReader0 = new StringReader("//tmp/g0U0,q0OM6CMTvhXQ3jo=r");
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Validation not supported for XMLReader: ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("Validation not supported for XMLReader: ", (String) null);
      // Undeclared exception!
      try { 
        xMLFilterImpl0.parse(inputSource0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No parent for filter
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "org.dom4j.util.UserDataElement";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.util.UserDataElement");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "org.dom4j.util.UserDataElement");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver1.resolveEntity("file://", "//tmp/20v020v");
      SAXReader sAXReader0 = new SAXReader(false);
      MockFile mockFile0 = new MockFile("org.dom4j.util.UserDataElement");
      MockFile mockFile1 = new MockFile("eo");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "//tmp/)V=\\C1K{[\\lg]UkEwJz0)V=\\C1K{[\\lg]UkEwJz";
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@7ec84d0a Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringReader stringReader0 = new StringReader("<FeSA");
      DOMDocument dOMDocument0 = new DOMDocument();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("\" ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("=", "C>@Lr:'f'Kh");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("//tmp/WglRd0http:/xml.org/sax/properties/lexical-handler", "\" ");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      MockFile mockFile0 = new MockFile("//tmp/tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(0/tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(", "//tmp/tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(0/tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(");
      File file0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setReadable(true, true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      parserAdapter0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setXMLReader(parserAdapter0);
      // Undeclared exception!
      try { 
        mockFile0.renameTo((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8310204811135165
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      MockURL.getFileExample();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "//tmp/org.jaxen.saxpath.helpers.DefaultXPathHandler0.tmp";
      xMLFilterImpl0.endElement("//tmp/org.jaxen.saxpath.helpers.DefaultXPathHandler0.tmp", "<TUe", "<TUe");
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7516666169315167
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("30L&'Lbw0)IF=");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader1 = new StringReader("30L&'Lbw0)IF=");
      stringReader0.skip(0L);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "30L&'Lbw0)IF=");
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("N..");
      // Undeclared exception!
      sAXReader0.installXMLFilter(xMLFilterImpl0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      StringReader stringReader0 = new StringReader("//tmp/zH_lY3'G.jH\t0/tmp/;x~ZEttcSjBdc0/tmp/e2>I45$u0");
      try { 
        sAXReader0.read("h7/`y;^c7i4");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("ZiV=");
      stringReader0.skip(0L);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      String string0 = "//tmp/,q0OM6CMTvhXQ3jo=00/tmp/i7tL45(0i7tL45(";
      sAXReader0.setEncoding("!/2p`>kmg@=7a");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ZiV=");
      String string1 = "//tmp/e2>I45$u0prg.nom4j.io.SAXReader";
      File file0 = MockFile.createTempFile("ZiV=", "//tmp/e2>I45$u0prg.nom4j.io.SAXReader");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setEncoding("org.dom4j.tree.DefaultCDATA");
      StringReader stringReader0 = new StringReader("|Dz");
      stringReader0.ready();
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("http://xml.org/sax/features/namespace-prefixes");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("30L&'Lbw0)IF=");
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      String string0 = "e2>I45$u";
      xMLFilterImpl0.skippedEntity(" : ");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("//tmp/tmp/boolean() requires one argument0boolean() requires one argument0/tmp/tmp/dR9i0dR9i0.tmp");
      try { 
        sAXReader0.read((Reader) stringReader0, "30L&'Lbw0)IF=");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setEncoding("|Dz");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "|Dz");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"|DZ\". Nested exception: Invalid encoding name \"|DZ\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.setEncoding(" LNL");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(");
      StringReader stringReader0 = new StringReader("//tmp/tmp/boolean() requires one argument0boolean() requires one argument0/tmp/tmp/dR9i0dR9i0.tmp");
      try { 
        sAXReader0.read("//tmp/,q0OM6CMTvhXQ3jo=r0/tmp/i7tL45(0i7tL45(");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Loop has been executed more times than the allowed 10000 Nested exception: Loop has been executed more times than the allowed 10000
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("ase");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      URL uRL0 = MockURL.getFileExample();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      // Undeclared exception!
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setEncoding("false");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      MockURL.getFileExample();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) dataInputStream0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
