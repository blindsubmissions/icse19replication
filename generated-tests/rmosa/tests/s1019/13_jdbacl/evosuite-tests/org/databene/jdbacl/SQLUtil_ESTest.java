/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:08:04 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.io.vfmem.DataStore;
import org.apache.derby.impl.io.vfmem.VirtualFile;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9509891646214447
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SQLUtil.normalize("3U-/.X4e]cR%SWzP", false);
      SQLUtil.mutatesDataOrStructure("3U - /.X4e ] cR % SWzP");
      System.setCurrentTimeMillis((-1997L));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.substituteMarkers("", "%V", stringArray0[1]);
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.renderValue("renamew7``vm*&");
      StringWriter stringWriter0 = new StringWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'renamew7``vm*&'";
      stringArray0[1] = "renamew7``vm*&";
      stringArray0[2] = " NOT NULL";
      stringArray0[3] = "'renamew7``vm*&'";
      stringArray0[4] = "renamew7``vm*&";
      stringArray0[5] = "|?8t&g=#t[Ae?.:&PG";
      stringArray0[6] = "renamew7``vm*&";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "|?8t&g=#t[Ae?.:&PG", false, stringArray0);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.normalize("w7`vm*&", false);
      SQLUtil.removeComments("w7`vm*&");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "6<Ym'JavY&";
      stringArray0[1] = "w7 ` vm * &";
      stringArray0[2] = "w7`vm*&";
      stringArray0[3] = "AU{x9n(?V#o)m_0dj/=";
      stringArray0[4] = "w7 ` vm * &";
      stringArray0[5] = "delete";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "AU{x9n(?V#o)m_0dj/=", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("6<Ym'JavY&");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      defaultDBTable0.getCheckConstraints();
      String[] stringArray0 = new String[3];
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[6] = "";
      String string0 = SQLUtil.leftJoin("", stringArray0, "", stringArray0[5], stringArray0);
      assertEquals("left join  as null on . = null. and . = null. and .null = null.null and . = null. and . = null. and .null = null.null and . = null.", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5140966973399504
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String string0 = "%=5>l>vQ5PPZN90";
      int int0 = (-96);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%=5>l>vQ5PPZN90", defaultDBTable0, (-96), "%=5>l>vQ5PPZN90");
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      defaultDBTable0.addColumn(defaultDBColumn0);
      String[] stringArray0 = new String[0];
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      SQLUtil.normalize("%=5>l>vQ5PPZN90", false);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize("z;l&&P@$", true);
      assertEquals("z ; l & & P @ $", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = " WHE]RE ";
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append((CharSequence) " WHE]RE ");
      SQLUtil.addOptionalCondition(" WHE]RE ", stringBuilder0);
      assertEquals(" WHE]RE  or  WHE]RE ", stringBuilder0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("?mfbQhJ#pEBcLZN");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[2];
      stringArray0[0] = " WHERE ";
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append((CharSequence) " WHERE ");
      SQLUtil.addRequiredCondition(" WHERE ", stringBuilder0);
      assertEquals(" WHERE  and  WHERE ", stringBuilder0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = SQLUtil.normalize("3U-/.X4e]cR%SWzP", false);
      assertEquals("3U - /.X4e ] cR % SWzP", string0);
      
      Boolean boolean0 = Boolean.FALSE;
      DBDataType dBDataType0 = DBDataType.getInstance((-1526), "n` _^acnP16jc_i?<E");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Started Module   ", (DBTable) null, dBDataType0, (Integer) null);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("Started Module    N` _^ACNP16JC_I?<E NULL", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("g/", (String[]) null, "g/", "01S00", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "w7`m*&";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("w7`m*&");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "w7`m*&";
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("", stringBuilder0);
      int int0 = (-2);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2), (-2));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("", (String) null, (String[]) null, "create materialized view", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("(D8z|[)5G\"<x5KtC' a", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" WHERE ", (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(D8z|[)5G\"<x5KtC' a";
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append((CharSequence) "(D8z|[)5G\"<x5KtC' a");
      stringBuilder0.append(stringBuffer0);
      stringArray0[1] = "(D8z|[)5G\"<x5KtC' a";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " WHERE ", false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("(D8z|[)5G\"<x5KtC' a", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" WHERE ", (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(D8z|[)5G\"<x5KtC' a";
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append((CharSequence) "(D8z|[)5G\"<x5KtC' a");
      stringBuilder0.append(stringBuffer0);
      stringArray0[1] = "(D8z|[)5G\"<x5KtC' a";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, " WHERE ", false, stringArray0);
      dBUniqueConstraint0.setName("[;Qh`]^+U0");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "T@5Dw~%Ee!P{jre";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "T@5Dw~%Ee!P{jre", false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      File file0 = FileUtil.canonicalFile("!E!dRt*");
      FileUtil.canonicalFile(file0);
      StringBuffer stringBuffer0 = new StringBuffer();
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      String string1 = SQLUtil.renderColumnListWithTableName("null.T@5Dw~%Ee!P{jre", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      String[] stringArray0 = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "zZVyb XW.+c4J", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      String[] stringArray0 = new String[20];
      stringArray0[0] = "(D8z|[)5G\"<x5KtC' a";
      StringBuffer stringBuffer0 = new StringBuffer();
      SQLUtil.addRequiredCondition("(D8z|[)5G\"<x5KtC' a", stringBuilder0);
      stringBuilder0.append(stringBuffer0);
      stringArray0[1] = "(D8z|[)5G\"<x5KtC' a";
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3509902279888935
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SQLUtil.normalize("3U-/.X4e]cR%SWzP", true);
      Boolean boolean0 = Boolean.FALSE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("3U-/.X4e]cR%SWzP");
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("3U - /.X4e ] cR % SWzP");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuffer stringBuffer0 = new StringBuffer();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Hi", true, (String[]) null);
      Boolean boolean1 = Boolean.FALSE;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3U-/.X4e]cR%SWzP");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("org.apache.derby.impl.sql.compile.WindowNode");
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter("tK7^");
      mockPrintWriter2.printf("", objectArray0);
      mockPrintWriter1.append('Q');
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.removeComments("3U - /.X4e ] cR % SWzP");
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      File file0 = MockFile.createTempFile("odd length argument", "insert");
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter3.format((Locale) null, "", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.normalize("alter table", true);
      SQLUtil.normalize("D-/K`<}8Y", false);
      Object[] objectArray1 = SQLUtil.parseColumnTypeAndSize("alter table");
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      defaultDBTable0.getCheckConstraints();
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)", true, stringArray0);
      stringArray0[0] = "aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)";
      stringArray0[1] = "aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)", true, stringArray0);
      Boolean boolean1 = Boolean.FALSE;
      int int0 = 219;
      StringBuilder stringBuilder0 = new StringBuilder(219);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(219, '\\');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9509891646214447
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SQLUtil.normalize("3U-/.X4e]cR%SWzP", false);
      String string0 = SQLUtil.normalize("3U - /.X4e ] cR % SWzP", false);
      assertEquals("3U - /.X4e ] cR % SWzP", string0);
      
      String string1 = SQLUtil.normalize("3U-/.X4e]cR%SWzP", false);
      assertEquals("3U - /.X4e ] cR % SWzP", string1);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, stringArray0[1], false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      String string0 = "dV-9D";
      DBCatalog dBCatalog0 = new DBCatalog(stringArray0[0]);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      defaultDBTable0.getComponents();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("s 2R:V#b($}Mp");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "s 2R:V#b($}Mp";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.443028790314963
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = true;
      defaultDBTable0.getCheckConstraints();
      String[] stringArray0 = new String[3];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Pzf++poV`]fYYs", true, stringArray0);
      stringArray0[0] = "Pzf++poV`]fYYs";
      stringArray0[1] = "Pzf++poV`]fYYs";
      stringArray0[2] = "aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)";
      Boolean boolean1 = Boolean.FALSE;
      String string0 = ".";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(".");
      PrintWriter printWriter0 = mockPrintWriter0.printf("aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)", (Object[]) stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      long long0 = 8589934594L;
      System.setCurrentTimeMillis(8589934594L);
      SQLUtil.removeComments("aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)");
      SQLUtil.normalize("aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)", true);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("aBtertabIeEOue (bd~zjg<5t')a (d8l25g!x?ktc' a)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"bd~zjg<5t'\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Boolean boolean0 = Boolean.FALSE;
      String string0 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBTable dBTable0 = null;
      int int0 = (-5999);
      DBDataType.getInstance((-5999), "\"'[X5");
      String string0 = "W$7y6fRA=&0.dL[kfkD";
      Character character0 = Character.valueOf('a');
      SQLUtil.substituteMarkers("\"'[X5", "W$7y6fRA=&0.dL[kfkD", character0);
      String string1 = "Pnj;a}>-";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Pnj;a}>-", "Pnj;a}>-");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Pnj;a}>-
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("execue");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "FOREIGN KEY ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.typeAndName(defaultDBTable0);
      String string1 = "1UMO<?";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("FOREIGN KEY ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "select intocxif!.=i_ecsz?3~r";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select intocxif!.=i_ecsz?3~r");
      int int0 = 2878;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("select intocxif!.=i_ecsz?3~r", defaultDBTable0, 2878, "select intocxif!.=i_ecsz?3~r");
      defaultDBColumn0.setDefaultValue("select intocxif!.=i_ecsz?3~r");
      SQLUtil.renderColumn(defaultDBColumn0);
      DBColumn[] dBColumnArray0 = new DBColumn[12];
      // Undeclared exception!
      try { 
        DBDataType.getInstance("select intocxif!.=i_ecsz?3~r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = SQLUtil.normalize(" 8`WN/uX;p\" ", true);
      assertEquals("8 ` WN / uX ; p \" \"", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter taleunique ((d8z|[5g\"<5ktc')a, (d8z|[)5g\"<x5ktc' a)", true);
      assertEquals("alter taleunique ((d8z | [ 5g \"<5ktc')a, (d8z|[)5g\" < x5ktc ' a)'", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(">R4c`1%C4`jyzjt");
      DBDataType dBDataType0 = DBDataType.getInstance(2673, "'QFSOtpd99oN");
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      Integer integer0 = fBManagedConnectionFactory0.getTransactionIsolation();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("@#veNA2\"Xr\"/", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("@#veNA2\"Xr\"/ 'QFSOTPD99ON(2,2) NULL", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("aE2 XXyX");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("aE2 XXyX");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      mockPrintWriter0.print((Object) ")");
      DBDataType dBDataType0 = DBDataType.getInstance((-1386), "executeselect into");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")", defaultDBTable1, dBDataType0, integer1, integer0);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(") EXECUTESELECT INTO(0,1) NULL", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("), ), )", string1);
      
      boolean boolean0 = SQLUtil.isQuery("create table");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = SQLUtil.normalize("k,OJ%/oEvy_?IJAT}", false);
      assertEquals("k, OJ % / oEvy_ ? IJAT  }", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(" WHERE ", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" WHERE ", (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " WHERE ";
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuilder0.append((CharSequence) " WHERE ");
      stringBuilder0.append(stringBuffer0);
      Boolean boolean0 = Boolean.FALSE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " WHERE ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      Random.setNextRandom((-260));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("alter tableunique ((d8z|[)5g\"<5ktc')a, (d8z|[)5g\"<x5ktc' a)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"(d8z|[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("VLB|#XuJ,{SCe(olp;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: VLB|#XuJ,{SCe(olp;
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = " (not found)";
      SQLUtil.mutatesDataOrStructure("select intoerror writing control fie");
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.7188008609386548
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = SQLUtil.normalize("3U-/.X4e]cR%SWzP", false);
      assertEquals("3U - /.X4e ] cR % SWzP", string0);
      
      Boolean boolean0 = Boolean.TRUE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3U-/.X4e]cR%SWzP";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("3U - /.X4e ] cR % SWzP", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (3U-/.X4e]cR%SWzP) REFERENCES null(3U-/.X4e]cR%SWzP)", string1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      TableContainer tableContainer0 = new TableContainer("FOREIGN KEY ");
      String string0 = "%";
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("e/*Aryyq/");
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.7595473914748635
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2457), "PI()");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      defaultDBColumn0.isUnique();
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Prepare called with unknown transaction");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("(D8z|[)5G\"<x5KtC' a", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" WHERE ", (DBSchema) null);
      String[] stringArray0 = new String[2];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0);
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.073542846408523
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BfN_u7a9");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("BfN_u7a9", true, defaultDBTable0, "BfN_u7a9");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("exec");
      DBSchema dBSchema0 = new DBSchema("drop index", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("", dBSchema0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("org.postgresql.jdbc3g.AbstractJdbc3gStatement", true, defaultDBTable0, "exec");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK exec", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBTable dBTable0 = null;
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.mutatesDataOrStructure("alter indexupdate");
      DBDataType dBDataType0 = DBDataType.getInstance(875, "NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter indexupdate", (DBTable) null, dBDataType0, integer0);
      Integer integer1 = RawTransaction.ABORT;
      defaultDBColumn0.setSize(integer1);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("create materialized view");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "";
      DBDataType dBDataType0 = DBDataType.getInstance((-2457), "#Rp=+n($Lylw[yHj]O&");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("hTvDrSTUn/jc", defaultDBTable0, 2, "hTvDrSTUn/jc");
      defaultDBColumn1.isUnique();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("PI()");
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1011185077704226
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = new Integer(329);
      DBDataType dBDataType0 = DBDataType.getInstance((-489), "error writi");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("w7`vm*&", defaultDBTable0, dBDataType0, integer0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      Integer.sum((-489), (-489));
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[w7`vm*& : ERROR WRITI(2)]", vector0.toString());
      
      SQLUtil.typeAndName(defaultDBColumn0);
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "w7`vm*&", true, "w7`vm*&");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      SQLUtil.normalize("column w7`vm*&", true);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("w7`vm*& ERROR WRITI(2) NOT NULL", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4709001279172663
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChars(19, 19);
      streamTokenizer0.whitespaceChars(19, 19);
      streamTokenizer0.nval = (-1157.9973161);
      SQLUtil.renderNumber(streamTokenizer0);
      SQLUtil.normalize("- 1157.9973161", false);
      System.setCurrentTimeMillis(1542L);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("alter sessionexecute");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(234, "wc`v*&");
      Integer integer0 = new Integer(234);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer1 = new Integer(234);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("wc`v*&", defaultDBTable0, dBDataType0, integer1);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      String string0 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("wc`v*&, wc`v*&", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.4195831385311966
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("w7`m*&", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[13];
      stringArray0[0] = "w7`m*&";
      stringArray0[1] = "w7`m*&";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("w7`m*&", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.typeAndName(dBForeignKeyConstraint0);
      assertEquals("foreign key constraint w7`m*&", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("w7`m*&");
      Object object0 = new Object();
      Object object1 = new Object();
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "w7`m*&", (Object[]) stringArray0);
      printWriter0.println((-1.0F));
      printWriter0.append((CharSequence) "w7`m*&");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.removeComments("selectwhere");
      String string1 = SQLUtil.normalize("create materialized view/uj\"5xcgc", false);
      assertEquals("create materialized view / uj \"5xcgc\"", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChars(19, 19);
      streamTokenizer0.nval = 4056.0;
      SQLUtil.renderNumber(streamTokenizer0);
      Object object0 = new Object();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "4056");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 4056
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = SQLUtil.normalize("*/", false);
      assertEquals("*/", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" HER");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "w[y+~tp";
      stringArray0[1] = " HER";
      stringArray0[2] = "w[y+~tp";
      stringArray0[3] = " HER";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      String string0 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChars(19, 19);
      streamTokenizer0.whitespaceChars(19, 19);
      streamTokenizer0.nval = 824.677;
      SQLUtil.renderNumber(streamTokenizer0);
      char[] charArray0 = new char[6];
      charArray0[0] = '0';
      charArray0[0] = 'P';
      charArray0[0] = 'c';
      charArray0[3] = '4';
      charArray0[4] = 'H';
      charArray0[5] = 'b';
      try { 
        pipedReader0.read(charArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("getBinaryStream(long, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"long\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Random.setNextRandom(0);
      String string0 = SQLUtil.removeComments("\n/* index sorted */");
      assertEquals("\n", string0);
  }
}
