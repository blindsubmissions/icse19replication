/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:19:57 GMT 2018
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float((-3238.3F));
      Float.sum(59.01183F, 0.0F);
      Boolean boolean0 = Boolean.valueOf("vJ`ck\"o");
      String[] stringArray0 = new String[6];
      Boolean.logicalAnd(false, false);
      stringArray0[0] = ",\n";
      stringArray0[1] = "vJ`ck\"o";
      Boolean.getBoolean("vJ`ck\"o");
      stringArray0[2] = "vJ`ck\"o";
      stringArray0[3] = "vJ`ck\"o";
      stringArray0[4] = "vJ`ck\"o";
      Boolean.logicalOr(true, true);
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.has("00{og");
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString(",:]/\"[{;=#");
      assertEquals("", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(2526);
      hashMap0.replace(integer0, "\",\n\"", "\",\n\"");
      String string1 = jSONObject0.toString(545, 1230);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(9);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(9));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "6.dhcv\\2^|v(Vs";
      jSONObject0.opt("6.dhcv\u0002^|v(Vs");
      StringWriter stringWriter0 = new StringWriter();
      int int0 = 92;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "6.dhcv\u0002^|v(Vs", 92, 92);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 3101.6F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.put((String) null, 8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = JSONObject.quote("=!-");
      assertEquals("\"=!-\"", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject.quote("e(h'R;/n&72HYkju");
      JSONTokener jSONTokener0 = new JSONTokener("e(h'R;/n&72HYkju");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of e(h'R;/n&72HYkju
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject.quote("e(h'R;/n&72HYkju");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("W|u`$\"F}/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of W|u`$\"F}/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = JSONObject.quote("\"\"");
      assertEquals("\"\\\"\\\"\"", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = JSONObject.quote("h?_!V");
      assertEquals("\"h?_!V\"", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject.quote("e(h'R;/n&72HYkju");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.301273572363032
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject.quote("=\" p^/$6Yz29)9");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("\"=\" p^/$6Yz29)9\"", "=\" p^/$6Yz29)9");
      jSONObject0.toString(3125, 3125);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("wheel.jso.JSONObject");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-732), (-732));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = JSONObject.quote("=\" p^/$6Yz29)9");
      assertEquals("\"=\\\" p^/$6Yz29)9\"", string0);
      
      Short short0 = new Short((short)11);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "=\" p^/$6Yz29)9";
      stringArray0[1] = "\"=\" p^/$6Yz29)9\"";
      stringArray0[2] = "\"=\" p^/$6Yz29)9\"";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string1 = jSONObject0.toString(4791, 104);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = JSONObject.quote("e(h'R;/n&72HYkju");
      Short short0 = new Short((short)69);
      String string1 = JSONObject.valueToString(short0, (short)69, (short)69);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1063911301690834
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = JSONObject.quote("=H ^/$6U29)n");
      assertEquals("\"=H ^/$6U29)n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("\"=H ^/$6U29)n\"", true);
      assertTrue(boolean0);
      
      String string1 = jSONObject0.toString(8192, 91);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4741083800990982
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean(",\n");
      JSONObject.doubleToString(0.0);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("] is not a Boolean.", object0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("MnMG", (Object) "MnMG");
      jSONObject1.optLong("|q", 0L);
      try { 
        jSONObject1.getBoolean("MnMG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MnMG\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject.getNames((Object) null);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = jSONArray0.optJSONObject((byte)106);
      assertNull(jSONObject0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.42584844923858145
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject.quote("3fpKV@rWSO}k>* ^9");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3fpKV@rWSO}k>* ^9";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0767759226310025
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject.quote("e(h'R;/n&72HYkju");
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("=,6\"jtG.eI", (Collection) linkedList0);
      try { 
        jSONObject0.getBoolean("\"e(h'R;/n&72HYk\\ju\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"e(h'R;/n&72HYk\\\\ju\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("istoUpperCase");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"istoUpperCase\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6845649069716608
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "MnMG";
      JSONObject jSONObject1 = jSONObject0.put("MnMG", (Object) "MnMG");
      jSONObject0.optInt("MnMG", (-646));
      try { 
        jSONObject1.getBoolean("MnMG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MnMG\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.889803242047208
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(0, 2094L);
      String string0 = "su";
      JSONObject jSONObject1 = jSONObject0.append("su", jSONArray0);
      jSONObject0.optInt("$");
      jSONObject1.isNull("su");
      try { 
        jSONObject1.getDouble("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.testValidity(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Integer integer0 = new Integer((-50546691));
      hashMap0.put((Float) null, integer0);
      hashMap0.entrySet();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".", 65);
      jSONObject1.optInt(".", 65);
      Double double0 = new Double((-1.0));
      JSONObject.testValidity(double0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.5305096302300271
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = JSONObject.quote("e(h'R;/n&72HYkju");
      Long long0 = new Long((-1L));
      String string1 = JSONObject.valueToString(long0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float(2453.10663294809);
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-0.80100864F));
      assertEquals("-0.8010086417198181", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.19144408195771734
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = JSONObject.quote("e(h'R;/n&72HYkju");
      assertEquals("\"e(h'R;/n&72HYkju\"", string0);
      
      String string1 = JSONObject.valueToString("e(h'R;/n&72HYkju");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 2424L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("[]");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 3101.6F);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, jSONObject0.length());
      assertEquals(3, stringArray0.length);
      
      String string0 = JSONObject.doubleToString((-2050.33659257));
      assertEquals("-2050.33659257", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5971700403519438
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("MnMG", (Object) "MnMG");
      jSONObject1.put("MnMG", false);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getBoolean("MnMG");
      String string0 = JSONObject.valueToString(jSONObject0);
      String string1 = JSONObject.quote("wheel.json.JSONObject@0000000001");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(",\n", (Object) null);
      Float float0 = new Float(1.0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5051450238938866
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("MnMGL", (Object) "MnMGL");
      jSONObject1.put("MnMGL", 0.0);
      try { 
        jSONObject1.getBoolean("MnMGL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MnMGL\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      String string0 = JSONObject.valueToString(linkedList0, 125, 125);
      assertEquals("[]", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, 125, 2548);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt((String) null, (Object) null);
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 3101.6F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.accumulate("Missing value", jSONObject1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0102750119258221
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = JSONObject.quote("f+\n");
      assertEquals("\"f+\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
      
      String string1 = JSONObject.valueToString(jSONObject0, 1566, 1566);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      Float.max(0.0F, 3101.6F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7202025435261348
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "su";
      JSONObject jSONObject1 = jSONObject0.append("su", jSONArray0);
      jSONObject1.getJSONArray("su");
      jSONObject1.isNull("su");
      try { 
        jSONObject1.getDouble("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("v.W.y`~H9LS");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7202025435261348
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "su";
      JSONObject jSONObject1 = jSONObject0.append("su", jSONArray0);
      try { 
        jSONObject1.getJSONObject("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6978169099032328
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 3101.6F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
      
      String string0 = JSONObject.numberToString(float0);
      String string1 = JSONObject.valueToString(float0, (-109), 15);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.889803242047208
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "su";
      jSONObject0.optLong("su");
      JSONObject jSONObject1 = jSONObject0.append("su", jSONArray0);
      jSONObject1.isNull("su");
      try { 
        jSONObject1.getDouble("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7202025435261348
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "su";
      JSONObject jSONObject1 = jSONObject0.append("su", jSONArray0);
      jSONObject1.isNull("su");
      try { 
        jSONObject1.getLong("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.quote("=H ^/$6YUz29)n");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Byte.compare((byte)47, (byte)47);
      JSONObject.quote("");
      Byte.toUnsignedInt((byte)47);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.301273572363032
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = JSONObject.quote("e(h'R;/n&72HYkju");
      assertEquals("\"e(h'R;/n&72HYkju\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Object) "e(h'R;/n&72HYkju");
      JSONObject.quote("DQ@yk10}%c*!{zy;a");
      jSONObject0.toString(48, 48);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9536870968261045
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 547, 1994);
      String string0 = "ue(h'R;/n&72HY;k\\ju";
      try { 
        jSONObject0.get("ue(h'R;/n&72HY;kju");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ue(h'R;/n&72HY;kju\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = JSONObject.quote("e(h'R;/n&72HYkju");
      assertEquals("\"e(h'R;/n&72HYkju\"", string0);
      
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject1.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{o?Z");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {o?Z
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.9943536917623688
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "{*+HgP:6|49HQ~Jn";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{*+HgP:6|49HQ~Jn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 16 of {*+HgP:6|49HQ~Jn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-29);
      int int1 = 22;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, (-29), 22);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optInt((-65));
      try { 
        Integer.valueOf("{}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "MnMGL";
      JSONObject jSONObject1 = jSONObject0.put("MnMGL", (Object) "MnMGL");
      try { 
        jSONObject1.append("MnMGL", jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[MnMGL] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(55);
      JSONObject jSONObject1 = jSONObject0.append("Substring bounds error", integer0);
      jSONObject1.getJSONArray("Substring bounds error");
      jSONObject1.append("Bad value from toJSONString: ", integer0);
      String string0 = jSONObject1.optString("Substring bounds error", "num");
      assertNotNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", jSONObject0);
      jSONObject1.getJSONObject("");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject();
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject((Object) "gettoUpperCase");
      jSONObject1.names();
      Integer integer0 = new Integer(92);
      JSONObject jSONObject2 = jSONObject0.append("gettoUpperCase", integer0);
      jSONObject2.names();
      jSONObject0.optJSONArray("gettoUpperCase");
      JSONObject.numberToString(integer0);
      Boolean boolean0 = new Boolean(true);
      JSONObject.testValidity(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8819006313073108
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long long0 = new Long((-1L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i3@.UhF(TlbH|]?SS";
      stringArray0[1] = "\"l{g8@|<`A~s*ul$h";
      stringArray0[2] = "QmU{LG(E2hKNIE>tV_N";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      StringWriter stringWriter0 = new StringWriter(2247);
      jSONObject0.put("getdecode", false);
      jSONObject0.put("i3@.UhF(TlbH|]?SS", false);
      JSONObject.valueToString("i3@.UhF(TlbH|]?SS", 190, 190);
      stringWriter0.append((CharSequence) "\"java.lang.String@0000000002\"");
      StringWriter stringWriter1 = stringWriter0.append('D');
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONObject0.write(writer0);
      JSONObject.valueToString(writer0, (-1), 2247);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6283356526043842
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(46);
      String string0 = "su";
      JSONObject jSONObject1 = jSONObject0.append("su", jSONArray0);
      jSONObject1.isNull("su");
      Integer integer0 = new Integer((-884));
      jSONObject1.append("su", integer0);
      try { 
        jSONObject1.getDouble("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      linkedList0.offerFirst(jSONObject0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray1.length());
      assertNotNull(jSONArray1);
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)1);
      jSONObject0.putOpt("0", short0);
      jSONObject0.getLong("0");
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      // Undeclared exception!
      try { 
        linkedList0.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("sum", jSONArray0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7202025435261348
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "su";
      JSONObject jSONObject1 = jSONObject0.append("su", jSONArray0);
      jSONObject1.accumulate("su", jSONArray0);
      jSONObject1.isNull("su");
      try { 
        jSONObject1.getDouble("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.9683304358882807
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = "su";
      JSONObject jSONObject1 = jSONObject0.append("su", jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      jSONObject1.optDouble("8k\"]Uu:+Wz~|:~8#4");
      jSONObject1.isNull("su");
      try { 
        jSONObject1.getDouble("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.testValidity(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8874489817775073
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 3101.6F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.append("isformat", "isformat");
      String string0 = JSONObject.valueToString(jSONObject0, (-3535), (-3535));
      String string1 = JSONObject.numberToString(float0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Qn<G";
      jSONObject0.put("Qn<G", (Object) "Qn<G");
      try { 
        jSONObject0.getJSONArray("Qn<G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Qn<G\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.putOpt("", jSONObject0);
      Byte.compare((byte)47, (byte)47);
      JSONObject.quote("");
      JSONObject jSONObject2 = jSONObject1.optJSONObject("");
      assertNotSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "*";
      jSONObject0.putOpt("*", jSONObject0);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = JSONObject.quote("</IFXFL[\u0007U86s$n`t?");
      assertEquals("\"<\\/IFXFL[\\u0007U86s$n`t?\"", string0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(",\n", false);
      jSONObject1.accumulate(",\n", jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.8072180062889975
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("su", jSONArray0);
      jSONObject1.isNull("su");
      jSONObject1.put("su", 4135.211029659);
      jSONObject1.getDouble("su");
      try { 
        jSONObject1.getBoolean("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Byte byte0 = new Byte((byte)122);
      Byte.toUnsignedLong((byte)122);
      Byte.toUnsignedInt((byte)122);
      Byte.toUnsignedInt((byte)122);
      Byte.toUnsignedInt((byte)122);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-1979));
      jSONObject0.put("", (int) (short) (-1979));
      jSONObject0.optDouble("", (double) 122);
      JSONObject.testValidity(hashMap0);
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{+HgP:|4P2;HQ~Jn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 16 of {+HgP:|4P2;HQ~Jn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-22654515));
      assertEquals("-2.2654515E7", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "{3&b()u=\"9(/N;Cfw?";
      JSONTokener jSONTokener0 = new JSONTokener("{3&b()u=\"9(/N;Cfw?");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 18 of {3&b()u=\"9(/N;Cfw?
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.putOpt("", jSONObject0);
      Byte.compare((byte)42, (byte)42);
      JSONObject.quote("");
      Byte.toUnsignedInt((byte)42);
      JSONObject.valueToString(jSONObject2, (-1394), (-1394));
      JSONObject jSONObject3 = new JSONObject("{\n\"java.lang.String@0000000003\": {},\n\"java.lang.String@0000000004\": \"java.lang.Class@0000000005\"\n}");
      String string0 = "&<uWyN63)KiOjjs&n3";
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("&<uWyN63)KiOjjs&n3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of &<uWyN63)KiOjjs&n3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("] not found.", true);
      Boolean boolean0 = Boolean.FALSE;
      Object object1 = JSONObject.NULL;
      boolean boolean1 = jSONObject0.getBoolean("] not found.");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      assertEquals(1, jSONObject1.length());
      
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject2 = jSONObject0.put("false", (Object) "false");
      boolean boolean0 = jSONObject2.getBoolean("false");
      assertFalse(boolean0);
      
      String string0 = JSONObject.quote("true");
      assertEquals("\"true\"", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "{+H1R$Cu|49H=>Jn";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{+H1R$Cu|49H=>Jn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ',' or '}' at character 16 of {+H1R$Cu|49H=>Jn
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
