/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:21:27 GMT 2018
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9332136802368209
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("eousend");
      assertEquals("eousens", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8115764965607801
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string0);
      
      String string1 = lovinsStemmer0.stem("DWd?v.\"qlo2*%EQLvY");
      assertEquals("dwd?v.\"qlo2*%eqlv", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0375336924983645
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("Technicaa documentaton.");
      assertEquals("technica documentat.", string2);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9912866665194019
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ens");
      lovinsStemmer0.stem("appearlud");
      lovinsStemmer0.stemString("flher");
      String string0 = lovinsStemmer0.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      assertEquals("titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.", string0);
      
      String string1 = lovinsStemmer0.stemString("Any additional information that can help the reader. The first word should be capitalized.");
      assertEquals("any addit inform that can help th reader. th first word should be capital.", string1);
      
      String string2 = lovinsStemmer0.stemString("any addit inform that can help th reader. th first word should be capital.");
      assertEquals("any addit inform that can help th reader. th first word should be capit.", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.01013305680663
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lessness");
      assertEquals("les", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("\tUses lowercase strings.");
      assertEquals("\tus lowercas string.", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.148482430167661
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("sendtex");
      assertEquals("sendtic", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer1.stemString("he~send");
      assertEquals("he~sens", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0081998410348907
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("eful");
      assertEquals("efl", string1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0101565205503757
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer1.stem("lid");
      assertEquals("lis", string0);
      
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer1.stemString("Any additional information that can help the reader. The first word should be capitalized.");
      assertEquals("any addit inform that can help th reader. th first word should be capital.", string1);
      
      String string2 = lovinsStemmer1.stemString("any addit inform that can help th reader. th first word should be capital.");
      assertEquals("any addit inform that can help th reader. th first word should be capit.", string2);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("istr");
      assertEquals("ister", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0660704234065062
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("skmarond");
      lovinsStemmer0.stem("UNPUBLISHED");
      String string0 = lovinsStemmer0.stem("UNPUBLISHED");
      assertEquals("unpubl", string0);
      
      lovinsStemmer0.stem("kZ");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("0![DUl-flI");
      assertEquals("0![dl-fl", string1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0223938553290635
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.";
      stringArray0[1] = "8034";
      stringArray0[2] = "th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.";
      stringArray0[3] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      stringArray0[4] = "th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.";
      stringArray0[5] = "th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.";
      stringArray0[6] = "th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.";
      stringArray0[7] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      stringArray0[8] = "^r_L\">'";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("8034");
      assertEquals("8034", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9922345933576425
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("5MTt%fF| ><LW9V?W8");
      assertEquals("5mt%ff| ><lw9v?w8", string0);
      
      String string1 = lovinsStemmer1.stemString("Name(s) of edRtor(s), typed as indicated in the LaTeX bok. If there is also an author fild, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edrt(s), typ as indic in th latic bok. if ther is als an author fild, then th edit field giv th edit of th book or collect in which th refer appear.", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9565878383828137
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Technical documentation.");
      String string0 = lovinsStemmer0.stemString("w0wcid");
      assertEquals("w0wcis", string0);
      
      lovinsStemmer0.stem("0opex");
      String string1 = lovinsStemmer0.stemString("Technical documentation.");
      assertEquals("techn docum.", string1);
      
      String string2 = lovinsStemmer0.stemString("techn docum.");
      assertEquals("techn docum.", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9517664242584938
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("lux");
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      lovinsStemmer0.stem("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      String string1 = lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      assertEquals("th year of publ or, for an unpubl work, th year it wa writ. gener it should con of four numer, such as 1984, although th standard styl can handl any year who last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("5B(46#36k'odd.Je(");
      assertEquals("5b(46#36k'od.je(", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.994636723944814
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "endcid";
      stringArray0[1] = "th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.";
      stringArray0[2] = "The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.";
      stringArray0[3] = "The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stem("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      String string1 = lovinsStemmer0.stemString("ht8m41bMFO'tjYl`");
      assertEquals("ht8m41bmfo'tjyl`", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.007356952221001
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("rpt");
      assertEquals("rb", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("}; mcsdeNS");
      lovinsStemmer1.stemString("}; mcsden");
      String string1 = lovinsStemmer1.stemString("}; mcsdeNS");
      assertEquals("}; mcsden", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0623507255502964
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("ht8m41bmfo'tjylmit");
      assertEquals("ht8m41bmfo'tjylmis", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0205108487518872
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.stemString("pscrud");
      String string0 = lovinsStemmer0.stem("her");
      assertEquals("hes", string0);
      
      lovinsStemmer0.stemString(")?a-$%^");
      lovinsStemmer0.stemString("h2}rhTi4_i+A[#PsC/");
      lovinsStemmer0.stemString(")?a-$%^");
      String string1 = lovinsStemmer0.stemString("Technical documntation.");
      assertEquals("techn documnt.", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1698391448619003
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("uct");
      assertEquals("uc", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("ngu");
      String string2 = lovinsStemmer0.stemString("Su$@[!+Y$'Tb=0neSRS");
      assertEquals("su$@[!+y$'tb=0nesr", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.087274980648422
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("documix");
      lovinsStemmer0.stem("documlid");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("yt");
      String string1 = lovinsStemmer0.stemString("Technical documentation.");
      assertEquals("techn docum.", string1);
      
      String string2 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin(1968). devlopm of a stem algorithm. mechan transl nd omput lingu. 11:22-31.yz");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin(1968). devlopm of a stem algorithm. mechan transl nd omput lingu. 11:22-31.yz", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9565878383828137
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Technical documentation.");
      lovinsStemmer0.stem("0opex");
      String string0 = lovinsStemmer0.stemString("lovinsstemmerex");
      assertEquals("lovinsstemmerec", string0);
      
      String string1 = lovinsStemmer0.stemString("Technical documentation.");
      assertEquals("techn docum.", string1);
      
      String string2 = lovinsStemmer0.stemString("techn docum.");
      assertEquals("techn docum.", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0696601845294018
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("1984ert");
      assertEquals("1984ers", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string2 = lovinsStemmer0.stemString("Macine Learning");
      assertEquals("macin learn", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0696601845294018
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("acies");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.stemString("Macine Learning");
      assertEquals("macin learn", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0654214140121185
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("luxbex");
      assertEquals("luxbic", string0);
      
      lovinsStemmer0.stem("");
      String string1 = lovinsStemmer0.stem("acious");
      assertEquals("ac", string1);
      
      String string2 = lovinsStemmer0.stemString(".<7?v$r^hv");
      assertEquals(".<7?v$r^hv", string2);
      
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      lovinsStemmer0.stemString("SYEAR");
      String string4 = lovinsStemmer0.stemString("y)");
      assertEquals("y)", string4);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0660704234065062
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "OYmtP r8YY";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("erid");
      lovinsStemmer0.stem("UNPUBLISHED");
      String string0 = lovinsStemmer0.stem("UNPUBLISHED");
      assertEquals("unpubl", string0);
      
      lovinsStemmer0.stem("kZ");
      String string1 = lovinsStemmer0.stemString("0![DUl-flI");
      assertEquals("0![dl-fl", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0552374642825735
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("vad");
      lovinsStemmer0.stemString("L(}E|^G.cI]");
      lovinsStemmer0.stem("/cWPuGES");
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.stemString(".<7?v$r^hv");
      assertEquals(".<7?v$r^hv", string0);
      
      String string1 = lovinsStemmer0.stem("skmaruad");
      assertEquals("skmaruas", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer0.stemString("SkMAR");
      assertEquals("skmar", string3);
      
      String string4 = lovinsStemmer0.stem("}I%Ne");
      assertEquals("}i%n", string4);
      
      String string5 = lovinsStemmer0.stemString("y)");
      assertEquals("y)", string5);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0409385405428146
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("MRNUMBER");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer2.stemString("TpmivaGHaKPsUYL");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString("0opend");
      assertEquals("0opens", string1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0230346812124345
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("8034");
      String string1 = lovinsStemmer0.stemString("UdUs");
      assertEquals("udus", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.095431844541056
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("dex");
      assertEquals("dic", string0);
      
      String string1 = lovinsStemmer0.stemString("Machine Learning");
      assertEquals("mach learn", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9517664242584938
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("pand");
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      lovinsStemmer0.stem("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      String string1 = lovinsStemmer0.stemString("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.");
      assertEquals("th year of publ or, for an unpubl work, th year it wa writ. gener it should con of four numer, such as 1984, although th standard styl can handl any year who last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9565878383828137
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("rud");
      assertEquals("rus", string0);
      
      lovinsStemmer0.stemString("Technical documentation.");
      lovinsStemmer0.stem("0opex");
      String string1 = lovinsStemmer0.stemString("Technical documentation.");
      assertEquals("techn docum.", string1);
      
      String string2 = lovinsStemmer0.stemString("techn docum.");
      assertEquals("techn docum.", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2010634502110555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("lYt_?c]-]CgUS");
      assertEquals("lys_?c]-]cgus", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "lYt_?c]-]CgUS";
      stringArray0[1] = "lYt_?c]-]CgUS";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "nn";
      stringArray0[4] = "T:_~VA+,j;";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "T:_~VA+,j;";
      stringArray0[8] = "A chapter (or section or whatever) number.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("T:_~VA+,j;");
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stem("tex");
      String string2 = lovinsStemmer0.stemString("}jbHS");
      assertEquals("}jbh", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0264127076831107
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stemString("ental");
      assertEquals("ent", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0748398302856923
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("mitlux");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer1.stemString("Get position of flag -f: ");
      assertEquals("ges posit of flag -f: ", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("documntax");
      assertEquals("documntac", string0);
      
      String string1 = lovinsStemmer0.stem("documntac");
      assertEquals("documntac", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("INPROCEEDINGS");
      assertEquals("inproceed", string0);
      
      lovinsStemmer0.stem("~echnicul doc+mentaqion.");
      lovinsStemmer0.stemString("inproceed");
      String string1 = lovinsStemmer0.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      assertEquals("titl of a book, part of which is being cit. se th latic book for how to typ titl. for book entr, us th titl field instead.", string1);
      
      String string2 = lovinsStemmer0.stemString("vK~tO2'");
      assertEquals("vk~to2'", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("8034yz");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer0.stem("mcsdenet");
      assertEquals("mcsdenet", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("E'LHq");
      assertEquals("e'lhq", string0);
      
      lovinsStemmer0.stem("e'lhq");
      String string1 = lovinsStemmer0.stemString("volume");
      assertEquals("volum", string1);
      
      String string2 = lovinsStemmer0.stemString("volum");
      assertEquals("vol", string2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9878519059720441
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("vLl&WKGdLzP2");
      assertEquals("vl&wkgdlzp2", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0708781590691403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("hC");
      String string0 = lovinsStemmer0.stemString("Freund, Y. and Mason, L.");
      assertEquals("freund, y. and mason, l.", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("ation");
      assertEquals("ation", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0001106169801668
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(".<7?v$r^hv");
      assertEquals(".<7?v$r^hv", string0);
      
      String[] stringArray0 = new String[4];
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("otide");
      assertEquals("ot", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ement");
      assertEquals("ement", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stem("3CO<GG");
      assertEquals("3co<g", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("D{y!yHw]ZcuCT<6rr");
      String string0 = lovinsStemmer0.stemString("D{y!yHw]ZcuCT<6rr");
      assertEquals("d{y!yhw]zcuc<6r", string0);
      
      String string1 = lovinsStemmer0.stemString("-n9$q1");
      assertEquals("-n9$q1", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("encing");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("u`v(LK:eNAl?1%J$m");
      assertEquals("u`v(lk:enal?1%j$m", string0);
      
      String string1 = lovinsStemmer0.stemString("u`v(lk:enal?1%j$m");
      assertEquals("u`v(lk:enal?1%j$m", string1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1108123556695584
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("^geJs7$tBB?8o%;`!");
      assertEquals("^gejs7$tb?8o%;`!", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string3);
      
      String string4 = lovinsStemmer0.stemString("id");
      assertEquals("id", string4);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem(")?a-$%^");
      lovinsStemmer0.stemString(")?a-$%^");
      String string0 = lovinsStemmer0.stemString("olv");
      assertEquals("olut", string0);
      
      lovinsStemmer0.stemString(")?a-$%^");
      String string1 = lovinsStemmer0.stemString("Technical documntation.");
      assertEquals("techn documnt.", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(">+7'\"[eTS%@/LW_Q3");
      assertEquals(">+7'\"[es%@/lw_q3", string0);
      
      lovinsStemmer0.stem("UNPUBLISHED");
      String string1 = lovinsStemmer0.stem("UNPUBLISHED");
      assertEquals("unpubl", string1);
      
      lovinsStemmer0.stem("kZ");
      String string2 = lovinsStemmer0.stemString("0![DUl-flI");
      assertEquals("0![dl-fl", string2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      String string0 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string0);
      
      String string1 = lovinsStemmer0.stemString("ngu");
      assertEquals("ngu", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("hC");
      lovinsStemmer0.stem("W#Clgi)");
      String string0 = lovinsStemmer0.stemString("Freund, Y. and Masor, L.");
      assertEquals("freund, y. and mas, l.", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("metr");
      assertEquals("meter", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("Technicaa docGmentton.");
      assertEquals("technica docgmentton.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("We4{R");
      String string0 = lovinsStemmer0.stemString("{Gv|Jz7'o3>UrSy");
      assertEquals("{gv|jz7'o3>ur", string0);
      
      String string1 = lovinsStemmer0.stem("{Gv|Jz7'o3>UrSy");
      assertEquals("{gv|jz7'o3>ur", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("K.@\"6BpP");
      assertEquals("k.@\"6bp", string0);
      
      String string1 = lovinsStemmer0.stem("her");
      assertEquals("hes", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string1);
      
      String string2 = lovinsStemmer0.stemString("mrYF>|>JSzoul$xEw");
      assertEquals("mryf>|>jszoul$xew", string2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("jnpher");
      assertEquals("jnpher", string0);
      
      lovinsStemmer0.stemString("Technical documntation.");
      String string1 = lovinsStemmer0.stemString("Technical documntation.");
      assertEquals("techn documnt.", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("?474>5[\";GY'`t{IUl");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("iF");
      lovinsStemmer0.stemString("appearet");
      String string0 = lovinsStemmer0.stemString("ULo`c");
      assertEquals("l`c", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string0);
      
      lovinsStemmer0.stem("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      String string1 = lovinsStemmer0.stemString("umpt");
      assertEquals("um", string1);
      
      String string2 = lovinsStemmer0.stemString("um");
      assertEquals("um", string2);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034");
      String string0 = lovinsStemmer0.stemString("DYEEN_ 7`<");
      assertEquals("dyeen_ 7`<", string0);
      
      String string1 = lovinsStemmer0.stemString("8034");
      assertEquals("8034", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Technical ocumentaLion.");
      assertEquals("techn ocumentalion.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("\"I%\"ztc2NJ");
      String string1 = lovinsStemmer0.stemString("\"i%\"ztc2nj");
      assertEquals("\"i%\"ztc2nj", string1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("SYiAR");
      String string1 = lovinsStemmer0.getRevision();
      assertTrue(string1.equals((Object)string0));
  }
}
