/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 14:06:19 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.ByteArrayInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      String string0 = "WuiLLd+pc~";
      simpleNode0.jjtClose();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      // Undeclared exception!
      try { 
        sequenceInputStream0.read(byteArray0, (-2045), (int) (byte)0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5924028775138872
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("?");
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('k');
      StringWriter stringWriter2 = stringWriter1.append('k');
      simpleNode0.dump("wna* ", stringWriter0);
      SystemInUtil.addInputLine((String) null);
      StringWriter stringWriter3 = new StringWriter(114);
      SimpleNode simpleNode1 = new SimpleNode(114);
      simpleNode0.jjtAddChild(simpleNode1, 114);
      StringWriter stringWriter4 = new StringWriter();
      SimpleNode simpleNode2 = new SimpleNode(18);
      simpleNode2.dump("?", stringWriter2);
      JavaParser javaParser0 = new JavaParser("C&H}r,*/|+waBMC_");
      stringWriter0.append('e');
      SimpleNode simpleNode3 = new SimpleNode(javaParser0, (-1075307805));
      simpleNode3.dump("<DIGIT>", stringWriter0);
      SimpleNode simpleNode4 = new SimpleNode(27);
      simpleNode4.id = 114;
      simpleNode4.dump("pBwy@&Z", stringWriter3);
      simpleNode2.dump((String) null, stringWriter3);
      assertFalse(simpleNode2.equals((Object)simpleNode0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.40450994177361177
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("?");
      simpleNode0.setIdentifier("&");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('k');
      stringWriter1.append('k');
      simpleNode0.dump("wna* ", stringWriter0);
      SystemInUtil.addInputLine((String) null);
      StringWriter stringWriter2 = new StringWriter(114);
      SimpleNode simpleNode1 = new SimpleNode(114);
      simpleNode0.jjtAddChild(simpleNode1, 114);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "+}&gPO zx:%~");
      SimpleNode simpleNode2 = new SimpleNode(18);
      simpleNode2.dump("?", stringWriter3);
      StringWriter stringWriter4 = new StringWriter(4);
      StringWriter stringWriter5 = new StringWriter();
      StringWriter stringWriter6 = stringWriter0.append((CharSequence) "wna* ");
      StringWriter stringWriter7 = stringWriter5.append('k');
      stringWriter7.write(114);
      simpleNode0.dump("d/iWsO^a>!Ad\"ow) ", stringWriter6);
      StringWriter stringWriter8 = stringWriter6.append((CharSequence) "&");
      simpleNode1.dump("  <identifier>", stringWriter8);
      simpleNode1.dump(")!RE'P-D!k|1u?", stringWriter7);
      assertSame(stringWriter5, stringWriter7);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5140966973399504
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier(">=");
      EvoSuiteFile evoSuiteFile0 = null;
      EvoSuiteFile evoSuiteFile1 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "<=";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<=");
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(30);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6614769771805253
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.toString("x#.g$/b(,u[EEk.pTdb");
      simpleNode0.setIdentifier("?");
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('k');
      StringWriter stringWriter2 = stringWriter1.append('k');
      simpleNode0.dump((String) null, stringWriter0);
      StringWriter stringWriter3 = new StringWriter(18);
      stringWriter3.append((CharSequence) null);
      simpleNode0.dump("+}&gPO zx:%~", stringWriter3);
      simpleNode0.dump("<DIGIT>", stringWriter0);
      simpleNode0.dump((String) null, stringWriter2);
      assertEquals("kk<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter2.toString());
      assertEquals("kk<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*ge</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5305096302300272
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier("?");
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter(30);
      simpleNode0.toString();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('$');
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-45);
      byteArray0[1] = (byte) (-82);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      simpleNode0.dump("U0*zd8se ^", stringWriter0);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) ">=");
      simpleNode0.dump(">=", stringWriter3);
      assertEquals("$>=<ClassOrInterfaceType>\n  <identifier>?</identifier>\n  <identifier>*ge</identifier>\n</ClassOrInterfaceType>\n", stringWriter3.toString());
      assertEquals("$>=<ClassOrInterfaceType>\n  <identifier>?</identifier>\n  <identifier>*ge</identifier>\n</ClassOrInterfaceType>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1695);
      simpleNode0.jjtGetNumChildren();
      Node node0 = simpleNode0.parent;
      assertNull(node0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1695);
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1598), (-1598), 1695);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      simpleNode0.parser = javaParser0;
      simpleNode0.jjtAddChild(simpleNode0, 65);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtOpen();
      assertEquals(66, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.36764947740014225
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.setIdentifier("{");
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter(19);
      simpleNode0.dump("7H.itm2$", stringWriter0);
      simpleNode0.dump("7H.itm2$", stringWriter0);
      simpleNode0.dump(">=", stringWriter0);
      assertEquals("<VariableInitializer>\n  <identifier>*ge</identifier>\n</VariableInitializer>\n<VariableInitializer>\n  <identifier>*ge</identifier>\n</VariableInitializer>\n<VariableInitializer>\n  <identifier>*ge</identifier>\n</VariableInitializer>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(13);
      simpleNode0.jjtAddChild((Node) null, 17);
      String string0 = null;
      SimpleNode simpleNode1 = new SimpleNode(66);
      simpleNode0.jjtAddChild((Node) null, 66);
      Node node0 = simpleNode1.parent;
      int int0 = (-2811);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-2811));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2811
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-154417720));
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('v');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "zfIXP9^t{q\"OfS=y& Q");
      // Undeclared exception!
      try { 
        simpleNode0.dump("zfIXP9^t{q\"OfS=y& Q", stringWriter2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -154417720
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("?R");
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode1.toString("");
      simpleNode1.toString();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('0');
      Node[] nodeArray0 = new Node[0];
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.children = nodeArray0;
      simpleNode1.dump("`{bcca+v<{*r5", stringWriter1);
      simpleNode0.toString("?RCompilationUnit");
      simpleNode0.toString();
      simpleNode0.dump("?R", stringWriter1);
      assertSame(stringWriter0, stringWriter1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(19);
      simpleNode0.jjtAddChild((Node) null, 17);
      SimpleNode simpleNode1 = new SimpleNode(66);
      simpleNode0.jjtAddChild((Node) null, 17);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode1.dump("#x4~vO[I~+uynth4O]", stringWriter0);
      simpleNode1.dump("#x4~vO[I~+uynth4O]", stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append('&');
      simpleNode1.dump("", stringWriter1);
      simpleNode0.dump("", stringWriter0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      simpleNode1.dump((String) null, stringWriter2);
      assertEquals("&<VariableInitializer></VariableInitializer>\nnull", stringWriter1.toString());
      assertEquals("&<VariableInitializer></VariableInitializer>\nnull", stringWriter0.toString());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier(";");
      simpleNode0.setIdentifier(">=");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump(";", stringWriter1);
      simpleNode0.dump(">=", stringWriter1);
      simpleNode0.dump("Xu9vC3OXIwFR.^V!", stringWriter1);
      simpleNode0.dump(">=", stringWriter1);
      assertEquals("<ClassOrInterfaceType>\n  <identifier>*ge</identifier>\n</ClassOrInterfaceType>\n<ClassOrInterfaceType>\n  <identifier>*ge</identifier>\n</ClassOrInterfaceType>\n<ClassOrInterfaceType>\n  <identifier>*ge</identifier>\n</ClassOrInterfaceType>\n<ClassOrInterfaceType>\n  <identifier>*ge</identifier>\n</ClassOrInterfaceType>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier("<<");
      simpleNode0.setIdentifier("if");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump(">=", stringWriter1);
      stringWriter1.append((CharSequence) "<<");
      assertEquals("<ClassOrInterfaceType>\n  <identifier>*lshft</identifier>\n  <identifier>if</identifier>\n</ClassOrInterfaceType>\n<<", stringWriter1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.623848004006291
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(51);
      SimpleNode simpleNode1 = new SimpleNode(51);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"null\"");
      StringReader stringReader0 = new StringReader("|4f3");
      simpleNode0.setIdentifier("<");
      simpleNode0.setIdentifier("n?rR*/BPb!d");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      simpleNode1.identifiers = arrayList0;
      SimpleNode simpleNode2 = new SimpleNode(601);
      simpleNode0.toString();
      simpleNode1.toString();
      StringWriter stringWriter0 = new StringWriter(2582);
      simpleNode0.dump("<", stringWriter0);
      assertEquals("<MultiplicativeExpression>\n  <identifier>*lt</identifier>\n  <identifier>n?rR*/BPb!d</identifier>\n</MultiplicativeExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("?");
      simpleNode0.setIdentifier("&&");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('-');
      stringWriter0.append('t');
      simpleNode0.dump((String) null, stringWriter1);
      StringWriter stringWriter2 = new StringWriter(18);
      simpleNode0.dump("ReturnStatement", stringWriter0);
      simpleNode0.dump("C\"I%/\"5Xe[n`FP[Es]", stringWriter1);
      simpleNode0.dump("?", stringWriter2);
      assertEquals("<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(24);
      simpleNode0.setIdentifier(">=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "{");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("?");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_,yla)Q{}O[hJ");
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump(">=", stringWriter0);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("", stringWriter2);
      assertEquals("<FormalParameter>\n  <identifier>*ge</identifier>\n  <identifier>?</identifier>\n  <identifier>*le</identifier>\n</FormalParameter>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump(">=", stringWriter1);
      assertEquals("<ClassOrInterfaceType>\n</ClassOrInterfaceType>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      simpleNode0.setIdentifier("z");
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.toString();
      simpleNode0.toString();
      simpleNode0.setIdentifier(" ");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(63);
      simpleNode0.dump("f*P7V,lzj", stringWriter0);
      assertEquals("?<Literal>\n<identifier>Literal Value</identifier>\n</Literal>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.355712859746894
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("?");
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('k');
      StringWriter stringWriter2 = stringWriter1.append('k');
      simpleNode0.dump((String) null, stringWriter0);
      SystemInUtil.addInputLine("S$d");
      StringWriter stringWriter3 = new StringWriter(18);
      stringWriter3.append((CharSequence) null);
      stringWriter3.write(18);
      simpleNode0.dump("<DIGIT>", stringWriter0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.dump((String) null, stringWriter2);
      char[] charArray0 = new char[3];
      charArray0[0] = 'k';
      stringWriter3.append((CharSequence) "+}&gPO zx:%~");
      stringWriter0.append((CharSequence) null);
      stringWriter0.append('k');
      simpleNode0.dump("implements", stringWriter3);
      simpleNode0.dump("<DIGIT>", stringWriter0);
      assertEquals("kk<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*gt</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*gt</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*gt</identifier>\n</VariableDeclaratorId>\nnullk<VariableDeclaratorId>\n  <identifier>?</identifier>\n  <identifier>*gt</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter(30);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      simpleNode0.dump("36ytR*+ Mu|'o`.<", stringWriter0);
      assertEquals("<ClassOrInterfaceType>\n</ClassOrInterfaceType>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(30);
      simpleNode0.setIdentifier("?");
      simpleNode0.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = stringWriter0.append('z');
      stringWriter3.append('>');
      simpleNode0.dump(">=", stringWriter0);
      StringWriter stringWriter4 = new StringWriter(30);
      simpleNode0.dump("E/-", stringWriter0);
      assertEquals("z><ClassOrInterfaceType>\n  <identifier>?</identifier>\n  <identifier>*rshft</identifier>\n</ClassOrInterfaceType>\n<ClassOrInterfaceType>\n  <identifier>?</identifier>\n  <identifier>*rshft</identifier>\n</ClassOrInterfaceType>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      simpleNode0.setIdentifier("VariableInitializer");
      simpleNode0.setIdentifier(")");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(18);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = stringWriter2.append('m');
      simpleNode0.dump("<tHu8atnE>6D+", stringWriter3);
      StringWriter stringWriter4 = stringWriter2.append((CharSequence) ")");
      StringWriter stringWriter5 = new StringWriter('m');
      simpleNode0.dump("b82OtO|yO", stringWriter2);
      StringWriter stringWriter6 = new StringWriter(3);
      simpleNode0.dump("?", stringWriter1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringWriter5.write(charArray0);
      simpleNode0.dump((String) null, stringWriter2);
      JavaParser javaParser0 = new JavaParser("b82OtO|yO");
      simpleNode0.dump((String) null, stringWriter3);
      SimpleNode simpleNode1 = new SimpleNode((-4177984));
      simpleNode1.dump("b82OtO|yO", stringWriter5);
      simpleNode1.dump("b82OtO|yO", stringWriter4);
      simpleNode1.dump("VariableInitializer", stringWriter3);
      assertEquals("m<VariableDeclaratorId>\n  <identifier>VariableInitializer</identifier>\n</VariableDeclaratorId>\n)<VariableDeclaratorId>\n  <identifier>VariableInitializer</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>VariableInitializer</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>VariableInitializer</identifier>\n</VariableDeclaratorId>\n", stringWriter3.toString());
      assertEquals("m<VariableDeclaratorId>\n  <identifier>VariableInitializer</identifier>\n</VariableDeclaratorId>\n)<VariableDeclaratorId>\n  <identifier>VariableInitializer</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>VariableInitializer</identifier>\n</VariableDeclaratorId>\n<VariableDeclaratorId>\n  <identifier>VariableInitializer</identifier>\n</VariableDeclaratorId>\n", stringWriter2.toString());
  }
}
