/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:57:32 GMT 2018
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.filemode.FileMode;
import freemind.modes.schememode.SchemeMode;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.CheckboxMenuItem;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelEvent;
import java.awt.image.BufferedImage;
import java.sql.Time;
import java.sql.Timestamp;
import java.time.DateTimeException;
import java.time.Instant;
import java.time.LocalTime;
import java.time.ZoneOffset;
import java.time.temporal.ChronoField;
import java.time.temporal.TemporalUnit;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import javax.swing.AbstractButton;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.JApplet;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.LineBorder;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.JTableHeader;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xerces.parsers.StandardParserConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6323165440601937
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-9223372036854775806L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-1065L), 38, (-335), '_');
      System.setCurrentTimeMillis((-2285L));
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setEnabled(true);
      assertFalse(jDayChooser0.isDayBordersVisible());
      
      jDayChooser1.drawDays();
      assertEquals(31, jDayChooser1.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      int int1 = 110;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 1L, 110, 110, 'c');
      KeyEvent.getExtendedKeyCodeForChar(1368);
      jDayChooser0.keyTyped(keyEvent0);
      Locale locale0 = jDayChooser0.locale;
      Locale locale1 = Locale.KOREA;
      locale0.getDisplayScript(locale1);
      CheckboxMenuItem checkboxMenuItem0 = null;
      try {
        checkboxMenuItem0 = new CheckboxMenuItem();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.transferFocusBackward();
      jDayChooser0.getDayPanel();
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 733, 733, 940, 940, 0, 0, 0, 0, false, 8887, 1514, (-1775), 0);
      jDayChooser0.isWeekOfYearVisible();
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JTable jTable0 = new JTable();
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      jTableHeader0.getTable();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      float[] floatArray0 = new float[9];
      MapDialog mapDialog0 = new MapDialog();
      SchemeMode schemeMode0 = new SchemeMode();
      schemeMode0.getDefaultModeController();
      floatArray0[5] = 2269.0461F;
      jDayChooser0.setDecorationBackgroundVisible(false);
      FileMode fileMode0 = new FileMode();
      Object object0 = new Object();
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.657200626658648
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-9223372036854775806L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-1065L), 38, (-335), '_');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 3, 0, 3, 38, '`');
      jDayChooser0.keyPressed(keyEvent1);
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      LineBorder.createBlackLineBorder();
      jDayChooser0.getSundayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = Locale.US;
      assertEquals("en_US", locale0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7361157401726413
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getBorder();
      AWTEventMulticaster.remove((MouseMotionListener) null, (MouseMotionListener) null);
      jDayChooser0.removeMouseMotionListener((MouseMotionListener) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(9999);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 333;
      jDayChooser0.getMinSelectableDate();
      Color color0 = Color.white;
      jDayChooser0.setYearChooser((JYearChooser) null);
      int int1 = (-4339);
      // Undeclared exception!
      try { 
        MockLocalTime.of(333, (-4339));
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Invalid value for HourOfDay (valid values 0 - 23): 333
         //
         verifyException("java.time.temporal.ValueRange", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6114669163929767
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isOpaque();
      jDayChooser0.setMaxDayCharacters(67);
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setDay((-1795));
      jDayChooser0.setMaxDayCharacters(2);
      assertEquals(2, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      jDayChooser0.setMonth(28);
      System.setCurrentTimeMillis(0L);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.requestFocus();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(398);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isOpaque();
      Color color0 = Color.magenta;
      jDayChooser0.setSundayForeground(color0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-1088));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.593621512459067
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.setDay((-3822));
      jDayChooser0.setDay(10);
      System.setCurrentTimeMillis(10);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.705096368196155
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-9223372036854775806L));
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-1437625606);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1437625606), (-9223372036854775806L), 33, 33, 'V');
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int1 = (-3319);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 920, 1L, 384, (-3319), '_');
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.keyPressed(keyEvent1);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      keyEvent0.setSource(keyEvent1);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 238);
      jDayChooser0.focusGained(focusEvent0);
      Integer integer0 = StrokingTextPainter.ADJUST_ALL;
      Instant instant0 = MockInstant.ofEpochSecond((-1128L));
      MockInstant.plusNanos(instant0, 238);
      // Undeclared exception!
      try { 
        ZoneOffset.ofHoursMinutesSeconds(238, 238, 14);
        fail("Expecting exception: DateTimeException");
      
      } catch(DateTimeException e) {
         //
         // Zone offset hours not in valid range: value 238 is not in the range -18 to 18
         //
         verifyException("java.time.ZoneOffset", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.firePropertyChange("31", true, true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.decorationBackgroundVisible = true;
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      jDayChooser0.getGraphicsConfiguration();
      bufferedImage0.getCapabilities((GraphicsConfiguration) null);
      Result result0 = null;
      try {
        result0 = new Result(2326528, (int[]) null, 2326528);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.Result", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.init();
      jDayChooser0.getComponentOrientation();
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      jDayChooser0.getGraphicsConfiguration();
      KeyStroke.getKeyStroke((-494), (-494));
      jDayChooser0.getKeyListeners();
      JMonthChooser jMonthChooser1 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MockDate mockDate0 = new MockDate((-494), 8721, (-494), (-1373), 335);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getGraphics();
      jDayChooser0.firePropertyChange("31", true, true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.isLightweightComponent(jDayChooser0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.firePropertyChange("day", true, true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getHideActionText();
      jDayChooser0.getMaxDayCharacters();
      MenuElement[] menuElementArray0 = new MenuElement[2];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser_DecoratorButton0.getRolloverIcon();
      jDayChooser0.getComponentPopupMenu();
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      menuSelectionManager0.clearSelectedPath();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 0, 0, 28, 28, 'm', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setKeyCode((-781));
      jDayChooser0.keyReleased(menuKeyEvent0);
      // Undeclared exception!
      try { 
        java.sql.Date.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Date", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.662701752014223
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Instant instant0 = MockInstant.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      TemporalUnit temporalUnit0 = chronoField0.getBaseUnit();
      Instant instant1 = MockInstant.truncatedTo(instant0, temporalUnit0);
      Instant instant2 = MockInstant.plus(instant1, 2000L, temporalUnit0);
      Instant instant3 = MockInstant.plusNanos(instant2, 400L);
      Timestamp timestamp0 = Timestamp.from(instant3);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      MockDate mockDate0 = new MockDate((-1965L));
      jDayChooser0.setMinSelectableDate(mockDate0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(28);
      System.setCurrentTimeMillis(0L);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setDay(1959);
      jDayChooser0.setFocus();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setWeekdayForeground((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8152012807655082
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-9223372036854775790L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "20");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-1065L), 38, (-335), '_');
      jDayChooser0.keyPressed(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(238, (-335), (-2226), 29, (-2226));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 3, 0, 3, 38, '`');
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton((-335));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist -335
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(3917);
      boolean boolean0 = true;
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(1137);
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, (-2317), 962, 962, 29, '\"', 1137);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int0);
      
      jDayChooser0.setMonth(28);
      System.setCurrentTimeMillis(0L);
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      Timestamp timestamp0 = Timestamp.from(instant0);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      jDayChooser0.setBounds(rectangle0);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setDay(0);
      jDayChooser0.setMaxDayCharacters(0);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      String string0 = AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY;
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      assertEquals(255, systemColor0.getBlue());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      jDayChooser0.setForeground((Color) null);
      SystemColor systemColor0 = SystemColor.controlShadow;
      jDayChooser0.setMaxSelectableDate((Date) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 9223372036854775807L;
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      Boolean boolean0 = new Boolean("aA\u0000_B^E!63");
      JOptionPane jOptionPane0 = new JOptionPane();
      int int0 = (-666);
      // Undeclared exception!
      try { 
        JOptionPane.showInputDialog((Component) jDayChooser0, (Object) boolean0, (Object) "aA\u0000_B^E!63");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.setDay(49);
      jDayChooser0.setMaxDayCharacters((-1795));
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Instant instant0 = MockInstant.now();
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      TemporalUnit temporalUnit0 = chronoField0.getBaseUnit();
      Instant instant1 = MockInstant.truncatedTo(instant0, temporalUnit0);
      Instant instant2 = MockInstant.plus(instant1, 2000L, temporalUnit0);
      MockInstant.plusNanos(instant2, 400L);
      Timestamp timestamp0 = new Timestamp(2000L);
      jDayChooser0.setSelectableDateRange(timestamp0, timestamp0);
      MockDate mockDate0 = new MockDate((-1965L));
      jDayChooser0.updateUI();
      jDayChooser0.setSelectableDateRange(timestamp0, mockDate0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instant instant0 = MockInstant.now();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      Boolean boolean0 = new Boolean("day");
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 30, 30, 30, 30, 'A');
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      Timestamp timestamp0 = Timestamp.from(instant0);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange(timestamp0, (Date) null);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7437773225613302
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isOpaque();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 228, 228, 18, 37, 'd');
      KeyEvent.getKeyModifiersText(18);
      keyEvent0.setSource("Ctrl+Button1");
      jDayChooser0.setEnabled(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.yearChooser = jYearChooser0;
      jDayChooser0.setEnabled(true);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.drawDays();
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6150429840214175
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(4);
      Boolean boolean0 = new Boolean(false);
      JDayChooser jDayChooser1 = new JDayChooser((boolean) boolean0);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      jDayChooser1.setBounds(rectangle0);
      jDayChooser0.getInputVerifier();
      jDayChooser1.setDay(4);
      jDayChooser0.setMaxDayCharacters(67);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      try { 
        defaultStyledDocument0.getText(1451, 67);
        fail("Expecting exception: BadLocationException");
      
      } catch(BadLocationException e) {
         //
         // Invalid location
         //
         verifyException("javax.swing.text.GapContent", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isOpaque();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 37, 228, 36, 'J');
      assertEquals(14, jDayChooser0.getDay());
      
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Instant instant0 = MockInstant.now();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      Boolean boolean0 = new Boolean("day");
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      Timestamp.from(instant0);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.setSubject("model");
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.setDayBordersVisible(false);
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.677371952581733
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isOpaque();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 37, 228, 39, 'J');
      String string0 = AbstractButton.ICON_CHANGED_PROPERTY;
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setVisible(false);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(16, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isOpaque();
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 37, 193, 40, 'J');
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.keyPressed(keyEvent0);
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_SPACING;
      keyEvent0.setSource(integer0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.keyPressed(keyEvent0);
      System.setCurrentTimeMillis(37);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getInputContext();
      jDayChooser0.getBorder();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 34, 34, (-19), 34, 'p');
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-9223372036854775806L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      assertEquals(2, jDayChooser0.getDay());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      float[] floatArray0 = new float[1];
      jDayChooser0.setDay((-4274));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4274), 90L, 1127, 9999, '\\');
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(9223372036854775789L);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = new Rectangle();
      jDayChooser0.setBounds(rectangle0);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setDay(0);
      Locale locale0 = Locale.JAPAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.updateUI();
      SystemColor systemColor0 = SystemColor.controlShadow;
      int int0 = (-450);
      int int1 = 1740;
      int int2 = 48;
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        systemColor0.getColorComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(3917);
      System.setCurrentTimeMillis(3917);
      jDayChooser0.updateUI();
      jDayChooser0.day = 3917;
      jDayChooser0.updateUI();
      jDayChooser0.drawDays();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3917, 0L, 2916, 5, '\\');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertEquals(3917, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-9223372036854775806L));
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 35, (-9223372036854775806L), 35, 35, 'V');
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.keyPressed(keyEvent0);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 35;
      floatArray0[2] = (float) (-1261);
      floatArray0[3] = (float) 35;
      floatArray0[4] = (float) 35;
      Color.RGBtoHSB((-211), (-1261), 3593, floatArray0);
      int int0 = 842;
      JTabbedPane jTabbedPane0 = null;
      try {
        jTabbedPane0 = new JTabbedPane(842);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal tab placement: must be TOP, BOTTOM, LEFT, or RIGHT
         //
         verifyException("javax.swing.JTabbedPane", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis(9223372036854775807L);
      JDayChooser jDayChooser0 = new JDayChooser();
      Polygon polygon0 = new Polygon();
      Rectangle rectangle0 = polygon0.getBounds();
      jDayChooser0.setBounds(rectangle0);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setDay(0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth((-1514));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y^'{M");
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 10, 4294967295L, 32, 2290, 'd', (MenuElement[]) null, menuSelectionManager0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.FLOW_PARAGRAPH;
      menuKeyEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      menuKeyEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.firePropertyChange((String) null, true, false);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getKeyListeners();
      jDayChooser0.drawDays();
      jDayChooser0.setDay((-1));
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDayBordersVisible());
  }
}
