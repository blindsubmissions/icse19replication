/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:10:08 GMT 2018
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.tools.Csv;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        defaultDBTable0.queryRowsByCellValues(stringArray0, stringArray0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBRowIterator", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7ku0b@T3P";
      stringArray0[1] = "7ku0b@T3P";
      stringArray0[2] = "7ku0b@T3P";
      stringArray0[3] = "7ku0b@T3P";
      stringArray0[4] = "7ku0b@T3P";
      stringArray0[5] = "7ku0b@T3P";
      stringArray0[6] = "";
      stringArray0[7] = "7ku0b@T3P";
      stringArray0[8] = "7ku0b@T3P";
      SQLUtil.leftJoin("7ku0b@T3P", stringArray0, "", (String) null, stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("7ku0b@T3P");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column '7ku0b@T3P' not found in table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String string0 = SQLUtil.typeAndName(dBCatalog0);
      assertEquals("catalog null", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3153962874226617
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SQLUtil.normalize("-4VK/+<v7dl", false);
      SQLUtil.normalize("-4VK/+<v7dl", false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      int int0 = (-1501);
      DBDataType dBDataType0 = DBDataType.getInstance((-1501), "YDYa8^!e");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("`hXw0 V>Mo/NU", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "42Z20";
      SQLUtil.substituteMarkers("42Z20", "IL6&W^8eVdvg^P-6", (Object) null);
      String string1 = "u(m< #6zBT!ej)9:Z|";
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("u(m< #6zBT!ej)9:Z|", "IL6&W^8eVdvg^P-6", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("42Z20");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '42Z20'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Boolean boolean0 = new Boolean(true);
      Character character0 = Character.valueOf('9');
      Character.getName(6);
      Character.isBmpCodePoint(3214);
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'9'", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[13];
      stringArray0[0] = "drop indexdrop materialized view";
      SQLUtil.innerJoin("drop indexdrop materialized view", stringArray0, "q", ".p2", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("q as .p2 on drop indexdrop materialized view.drop indexdrop materialized view = .p2.drop indexdrop materialized view and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null and drop indexdrop materialized view.null = .p2.null");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("/#ZKq9~iQT>;IPl");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "/#ZKq9~iQT>;IPl";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "SELECT * FROM /#ZKq9~iQT>;IPl WHERE /#ZKq9~iQT>;IPl = '/#ZKq9~iQT>;IPl'";
      stringArray1[1] = "CONCUR_UPDATABLE => CONCUR_READ_ONLY";
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3245083869310707
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = SQLUtil.normalize("9d5M5m/#vd9\"t,N", true);
      assertEquals("9d5M5m / # vd9 \"t,N\"", string0);
      
      Random.setNextRandom(2147483645);
      boolean boolean0 = SQLUtil.isQuery("org.apache.derby.impl.sql.compile.RenameNode");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SQLUtil.normalize("|/tD#grDXa", true);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("l4)&3{`+)cV!tXd'eV");
      assertNull(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(63, " as ");
      Integer.toUnsignedString(1780);
      Integer.compare(375, 375);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", defaultDBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      TableContainer tableContainer0 = new TableContainer(" as ");
      System.setCurrentTimeMillis(2348);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)38;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.isDML("create materialized viewhl3`");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`b6j!x:;k5?'g");
      assertEquals("`b6j!x:;k5?'g", defaultDBTable0.getName());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("", stringBuilder1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = SQLUtil.normalize("?{ZA1g)<:`()sWo)i[%", false);
      assertEquals("? { ZA1g) < : ` () sWo) i [ %", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = SQLUtil.normalize("h\"|E[-&XP\"(NY'fx4", false);
      assertEquals("h \"|E[-&XP\" (NY 'fx4'", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, ")DU%=~", false, (String[]) null);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.ABORT;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec1);
      int int0 = Integer.max(2491, 2491);
      assertEquals(2491, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ALTER TABLE ");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9973184827831406
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      String string0 = SQLUtil.normalize("> Q-e", false);
      assertEquals("> Q - e", string0);
      
      SQLUtil.removeComments("*Eo{Qv{$O7*c");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "> Q - e", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("*Eo{Qv{$O7*c", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "*Eo{Qv{$O7*c", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT *Eo{Qv{$O7*c UNIQUE ()", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      String[] stringArray0 = new String[7];
      String string0 = SQLUtil.renderColumnListWithTableName("YZEl", stringArray0);
      assertEquals("YZEl.null, YZEl.null, YZEl.null, YZEl.null, YZEl.null, YZEl.null, YZEl.null", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = SQLUtil.normalize("org.hsqldb.Result$ResultMetaData", true);
      assertEquals("org.hsqldb.Result $ ResultMetaData", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = SQLUtil.normalize("1*!6", true);
      assertEquals("1 * ! 6", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.ownerDotComponent(dBCatalog0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      TableContainer tableContainer0 = new TableContainer("{YR4s}RW0R,bq|3j");
      tableContainer0.getTable("null");
      SQLUtil.parseColumnTypeAndSize("b$+_Sh%_mk`]uhM.fDV");
      String string0 = SQLUtil.removeComments("b$+_Sh%_mk`]uhM.fDV");
      SQLUtil.normalize("b$+_Sh%_mk`]uhM.fDV", false);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType dBDataType0 = DBDataType.getInstance(2787, "9%y6j)");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{YR4s}RW0R,bq|3j", (DBTable) null, dBDataType0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "-");
      SQLUtil.addRequiredCondition("-", stringBuilder0);
      assertEquals("- and -", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("FWpv%6c.OY%ND#&q", stringBuilder0);
      assertEquals("FWpv%6c.OY%ND#&q", stringBuilder0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.ownerDotComponent(dBCatalog0);
      TableContainer tableContainer0 = new TableContainer("inner");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("null");
      SQLUtil.removeComments("null");
      DBDataType dBDataType0 = DBDataType.getInstance(2787, "alter index");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{YR4s}RW0R,bq|3j", defaultDBTable0, dBDataType0);
      DBColumn[] dBColumnArray0 = new DBColumn[16];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = SQLUtil.normalize("^vg*6q,:cJX^!?b4}ta", false);
      assertEquals("^ vg * 6q, : cJX ^ ! ? b4 } ta", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[2] = stringArray0[0];
      stringArray0[4] = "FOREIGN KEY ";
      stringArray0[5] = "";
      stringArray0[2] = "?PF'2[o8";
      stringArray0[8] = "";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , ?PF'2[o8, , FOREIGN KEY , , , , )", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      String string1 = SQLUtil.join("", "", stringArray0, "(, , ?PF'2[o8, , FOREIGN KEY , , , , )", "- ", stringArray0);
      assertEquals("(, , ?PF'2[o8, , FOREIGN KEY , , , , ) as -  on .null = - .null and .null = - .null and .?PF'2[o8 = - .?PF'2[o8 and .null = - .null and .FOREIGN KEY  = - .FOREIGN KEY  and . = - . and .null = - .null and .null = - .null and . = - .", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      SQLUtil.ownerDotComponent(dBSchema0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String string0 = "C?6Gq7";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, (String[]) null);
      // Undeclared exception!
      try { 
        dBPrimaryKeyConstraint0.addColumnName("left");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.reflect.Array", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.5735160760972796
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = SQLUtil.normalize("|/tD#grDXa", true);
      assertEquals("| / tD # grDXa", string0);
      
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("|/tD#grDXa", (DBTable) null, (-1674), "| / tD # grDXa");
      defaultDBColumn0.setNotNullConstraint((DBNotNullConstraint) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("|/tD#grDXa | / TD # GRDXA NULL", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("${)G", dBCatalog0);
      dBCatalog0.isIdentical(dBSchema0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "${)G";
      stringArray0[1] = "TABLE[";
      stringArray0[2] = "${)G";
      stringArray0[3] = "1acf  j51";
      SQLUtil.mutatesDataOrStructure("${)G");
      SQLUtil.parseColumnTypeAndSize("drop tablewhen connections that are not explicitly closed are garbage collected, log the stacktrace from the opening of the connection to trace the leak source.");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("AHq'-", defaultDBTable0, 255, "AHq'-");
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFileWriter mockFileWriter0 = new MockFileWriter("4");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, false);
      BasicDatabase basicDatabase0 = new BasicDatabase();
      basicDatabase0.getLocale();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xk$f=b{a=clp_f");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.types.SQLBit");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")ix+";
      stringArray0[1] = ")ix+";
      stringArray0[2] = "xk$f=b{a=clp_f";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rk5q5wt,;F[<zq", true, stringArray0);
      dBPrimaryKeyConstraint0.setName(")ix+");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("'", 47);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop table");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT  ", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("truncate");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-542), "truncate");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("iY|Am';u1i`y/X,$:", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("truncateTRUNCATE(1)", stringBuilder0.toString());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "O$JY,");
      SQLUtil.addOptionalCondition("O$JY,", stringBuilder1);
      assertEquals("O$JY, or O$JY,", stringBuilder1.toString());
      assertEquals("O$JY, or O$JY,", stringBuilder0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "xk$f=b{a=clp_f");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.apache.derby.iapi.types.SQLBit");
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")ix+";
      stringArray0[1] = ")ix+";
      stringArray0[2] = "xk$f=b{a=clp_f";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "rk5q5wt,;F[<zq", true, stringArray0);
      dBPrimaryKeyConstraint0.setName(")ix+");
      dBPrimaryKeyConstraint0.setName("Selectivity from statistics found. It is ");
      defaultDBTable0.getColumnNames();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("select into");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "alter materialized view", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = SQLUtil.normalize("> Q-e", true);
      assertEquals("> Q - e", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("truncate.ysk#srqu~[fp5");
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema(", ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", ");
      TableContainer tableContainer0 = new TableContainer(", ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "alter materialized view";
      stringArray0[1] = null;
      stringArray0[2] = ", ";
      stringArray0[3] = "|yI9f\"";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals(", ", defaultDBTable0.getName());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("tL]y`iB$z-3`e_", true, "tL]y`iB$z-3`e_", "A4");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("|/td#g");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", defaultDBTable0, 340, "!*");
      StringBuilder stringBuilder0 = new StringBuilder("n@;ahiqt5 fvKhLUG");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      assertEquals("n@;ahiqt5 fvKhLUG!*", stringBuilder0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SQLUtil.removeComments("qts!o");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("qts!o", false, "T4\"n1xm(P", "selectselect");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CHECK selectselect", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SQLUtil.mutatesStructure("callg}'kuuq}[8)p`,(");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(" and ", 13);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 3508.0;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("3508", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = SQLUtil.normalize("d9+Kx>G*/Z!a#<[)", true);
      assertEquals("d9 + Kx > G */ Z !  a # < [)", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.589026915173973
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.apache.derby.impl.sql.execute.CardinalityCounter");
      mockPrintWriter0.println(41);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.derby.impl.sql.execute.CardinalityCounter";
      stringArray0[1] = "org.apache.derby.impl.sql.execute.CardinalityCounter";
      stringArray0[2] = "org.apache.derby.impl.sql.execute.CardinalityCounter";
      stringArray0[3] = "org.apache.derby.impl.sql.execute.CardinalityCounter";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Unknown constraint type: ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.setDoc("left");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT \"Unknown constraint type: \" FOREIGN KEY (org.apache.derby.impl.sql.execute.CardinalityCounter, org.apache.derby.impl.sql.execute.CardinalityCounter, org.apache.derby.impl.sql.execute.CardinalityCounter, org.apache.derby.impl.sql.execute.CardinalityCounter) REFERENCES null(org.apache.derby.impl.sql.execute.CardinalityCounter, org.apache.derby.impl.sql.execute.CardinalityCounter, org.apache.derby.impl.sql.execute.CardinalityCounter, org.apache.derby.impl.sql.execute.CardinalityCounter)", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("?{ZA1g)<:`()sWo)i[%");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("f>(sk(K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: f>(sk(K
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|/tD#grDXa");
      NameSpec nameSpec0 = NameSpec.NEVER;
      Locale locale0 = Locale.UK;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter("|/tD#grDXa");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "|/tD#grDXa");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "|/tD#grDXa";
      stringArray0[1] = "|/tD#grDXa";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("|/tD#grDXa", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = SQLUtil.normalize("--", false);
      assertEquals("--", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8937882323911377
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " as ");
      DBDataType dBDataType0 = DBDataType.getInstance(63, " as ");
      Integer.toUnsignedString(1780);
      Integer.compare(375, 375);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals(" as  :  AS (2,2)", string0);
      
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("48+b1 %!>m\"$5G}|J;");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.createFolder(evoSuiteFile1);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " as  :  AS (2,2)";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " as  :  AS (2,2)", false, stringArray0);
      mockPrintWriter0.print((Object) dBPrimaryKeyConstraint0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(375);
      String string1 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint  as  :  AS (2,2)", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7214023220140038
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.mutatesDataOrStructure("select");
      TableContainer tableContainer0 = new TableContainer((String) null);
      System.setCurrentTimeMillis(2283L);
      String string0 = "W";
      // Undeclared exception!
      try { 
        dBCatalog0.getTable((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null'
         //
         verifyException("org.databene.jdbacl.model.DBCatalog", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "SELECT * FROM ";
      SQLUtil.isQuery("SELECT * FROM ");
      DBProcedure dBProcedure0 = null;
      try {
        dBProcedure0 = new DBProcedure("SELECT * FROM ", (DBPackage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBProcedure", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("alter session");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      assertEquals(2, (int)integer0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(10, "SYSCHECKS");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("SYSCHECKS", dBCatalog0);
      DBCatalog dBCatalog1 = new DBCatalog();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("wh,:_J8", (DBTable) null, dBDataType0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("wh,:_J8", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn1.setDefaultValue("wh,:_J8");
      SQLUtil.renderColumn(defaultDBColumn1);
      Random.setNextRandom(10);
      Csv csv0 = Csv.getInstance();
      assertNull(csv0.getRowSeparatorWrite());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " as ");
      DBDataType dBDataType0 = DBDataType.getInstance(63, " as ");
      Integer.toUnsignedString(1780);
      Integer.compare(375, 375);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("48+b1 %!>m\"$5G}|J;");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/evosuite_readability_gen/projects/13_jdbacl");
      FileSystemHandling.createFolder(evoSuiteFile1);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(375);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(63, " as ");
      Integer.toUnsignedString(1780);
      Integer.compare(375, 375);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" as ", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals(" as  :  AS (2,2)", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("48+b1 %!>m\"$5G}|J;");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "*/", true, " as ");
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals(" as  NOT NULL", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("Nfj8.rAjN4pqJZb", defaultDBTable0, (-1096443765), "setURL(String,URL)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(63, "UNIQUE ");
      Integer.toUnsignedString(63);
      Integer.compare(65, 63);
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("DLhC,9^g+U+&", defaultDBTable0, dBDataType0, integer0, integer1);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("2PRKi5pbf", defaultDBTable0, dBDataType0, integer1);
      defaultDBColumn1.toString();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DLhC,9^g+U+&");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "o%OD5E";
      stringArray0[1] = "o%OD5E";
      stringArray0[3] = ":UH@W(C1qM";
      stringArray0[1] = "o%OD5E";
      stringArray0[5] = "42X51";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "42X51", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(":UH@W(C1qM", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("o%OD5E", dBTable0, (-1167), "42X51");
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, stringArray0[4], false, "o%OD5E");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("o%OD5E 42X51 NOT NULL", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-50725487), ")ix+");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")ix+", defaultDBTable0, dBDataType0, integer0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      genericDescriptorList0.add((Object) defaultDBColumn0);
      genericDescriptorList0.add((Object) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
      DBCatalog dBCatalog1 = new DBCatalog();
      assertTrue(dBCatalog1.equals((Object)dBCatalog0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      boolean boolean0 = SQLUtil.isQuery("select into");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = 3503.618697069;
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("3503.618697069", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.nval = (-2.5897324915954774);
      SQLUtil.renderNumber(streamTokenizer0);
      ErrorMessages errorMessages0 = new ErrorMessages();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null, "- 2.5897324915954774");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // - 2.5897324915954774
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.4849066497880012
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SQLUtil.isQuery("KEY");
      SQLUtil.removeComments("KEY");
      String string0 = SQLUtil.normalize("into", false);
      assertEquals("into", string0);
      
      SQLUtil.removeComments("KEY");
      Random.setNextRandom((-1618280579));
      Random.setNextRandom(6);
      System.setCurrentTimeMillis(6);
      SQLUtil.normalize("KEY", false);
      SQLUtil.isQuery("KEY");
      String string1 = SQLUtil.normalize("KEY", true);
      assertEquals("KEY", string1);
      
      SQLUtil.removeComments("into");
      VersionNumber versionNumber0 = VersionNumber.valueOf("KEY");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("into", "<V=ak}O}X!VH/p+", versionNumber0);
      SQLUtil.typeAndName(defaultDatabase0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<V=ak}O}X!VH/p+";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "KEY", false, stringArray0);
      dBPrimaryKeyConstraint0.setName((String) null);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null);
      String string2 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("", string2);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("R>w*fZ$L|>wq7rjm`*");
      assertNull(boolean0);
      
      SQLUtil.removeComments("into");
      String string3 = SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      assertEquals("unique constraint constraint", string3);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = 2147483645;
      String string0 = "-/*";
      // Undeclared exception!
      SQLUtil.isDDL("-/*");
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = SQLUtil.normalize("alter sessionf|", false);
      assertEquals("alter sessionf |", string0);
      
      String string1 = SQLUtil.normalize("/*", false);
      assertEquals("/*", string1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.COMMIT;
      DBDataType dBDataType0 = DBDataType.getInstance(4, "CLOB");
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      DBSchema dBSchema0 = new DBSchema("CLOB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB", dBSchema0);
      Integer integer4 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer4, integer1);
      defaultDBColumn0.toString();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("X0Y32.S", "CLOB : CLOB");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // CLOB : CLOB
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }
}
