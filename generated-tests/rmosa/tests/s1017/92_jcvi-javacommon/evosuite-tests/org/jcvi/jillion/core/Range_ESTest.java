/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:24:21 GMT 2018
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 9223372032559805151L, 9223372032559805151L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -129 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6484383345463107
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8234169983973922
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(4294967295L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1972245773362196
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2489L, (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 2489, -9223372036854775808 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      long long0 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      range_Builder0.contractEnd(32767L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2164L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      long long0 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      range_Builder0.shift(32767L);
      long long1 = (-6182L);
      range_Builder0.expandEnd((-6182L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.791294569695012
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long((-938L));
      Range range0 = Range.of(range_CoordinateSystem0, (-938L), (-938L));
      range0.equals(long0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(361L);
      long long0 = 1895L;
      range_Builder0.expandEnd(1895L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3475L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3260L), 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.contractBegin(2685L);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.648438334546311
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.842880615317132
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 873L, 4294967314L);
      range0.equals((Object) null);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of(994L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      List<Range> list0 = range0.split(211L);
      assertTrue(list0.contains(range0));
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854774422L, 9223372036854774422L);
      // Undeclared exception!
      try { 
        range0.split(1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of(3367L, 3367L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.split(1L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Object object0 = new Object();
      range0.endsBefore(range0);
      long long1 = range0.getBegin();
      assertEquals(3367L, long1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7129621730528903
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8647385121905686
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L));
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      long long0 = range0.getBegin();
      assertSame(range0, range2);
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.966943486189354
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of((-128L));
      range0.iterator();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals((-128L), long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.867922460395076
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.intersects(range1);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
      
      List<Range> list0 = range1.complement(range0);
      assertSame(range1, range0);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      boolean boolean0 = range0.startsBefore(range0);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(1385L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1637821517300675
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(9223372036854774422L, 9223372036854774422L);
      Range range1 = Range.of(9223372036854774422L, 9223372036854774422L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range1.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.40928803402151
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(1386L, 9223372036854772428L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1386L, 9223372036854772428L);
      Object object1 = new Object();
      range1.equals(range0);
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.428148251763282
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("=ilLPl%^qF6s'&L4mY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.=ilLPl%^qF6s'&L4mY
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-2632L));
      long long0 = range0.getBegin();
      assertEquals((-32768L), long0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      range0.getBegin();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      range0.isEmpty();
      Object object0 = new Object();
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.233239348371331
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775787L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 9223372036854775786 ]/0B", string0);
      
      Range.Comparators.values();
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7669009328685794
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 435L;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854774518L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Long long0 = new Long(435L);
      range0.isEmpty();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-128L);
      long long1 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 0L);
      String string0 = "*GU";
      range_Builder0.expandBegin((-128L));
      // Undeclared exception!
      try { 
        Range.parseRange("*GU", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse *GU into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(2407L);
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1L);
      long long1 = 2685L;
      range_Builder0.expandEnd((-1L));
      long long2 = 0L;
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long((-938L));
      Range range0 = Range.of(range_CoordinateSystem0, (-938L), (-938L));
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
      
      Object object0 = new Object();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -938 .. -938 ]/SB", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.942734887715744
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.of(1386L, 1386L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1386L, 1386L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 1385 .. 1385 ]/0B", string0);
      
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.833213344056216
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.endsBefore(range0);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertFalse(boolean1 == boolean0);
      assertSame(range0, range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8492350266891995
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-1L));
      boolean boolean0 = range0.endsBefore(range1);
      Range.CoordinateSystem.values();
      boolean boolean1 = range0.equals(range_CoordinateSystem0);
      assertTrue(boolean1 == boolean0);
      assertSame(range0, range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertTrue(range1.isEmpty());
      
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8492350266891995
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of((-864L));
      range0.intersects(range1);
      range0.getBegin();
      String string0 = "=ilLPl%^qF6s'&L4mY";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(9223372036854774422L, 9223372036854774422L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854774422L, 9223372036854774422L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertFalse(list0.contains(range1));
      assertFalse(range1.equals((Object)range0));
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of(4294967314L);
      range0.getLength();
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange("[ 436 .. 435 ]/RB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8444872614601695
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("|4iIjKlbsl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse |4iIjKlbsl into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      long long0 = range0.getBegin();
      assertEquals(4294967295L, long0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(3367L);
      long long0 = range0.getLength();
      assertEquals(3367L, long0);
      
      Range range1 = Range.of(1L);
      range0.isSubRangeOf(range1);
      range1.getEnd();
      Range.Comparators.values();
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      long long1 = range1.getEnd();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range1.isEmpty());
      
      long long0 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.902823587955807
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      range0.toString();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("SB", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.8097834780040483
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      long long1 = range0.getBegin();
      assertEquals((-128L), long1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.923791198194195
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-4294977962L));
      Long long0 = new Long((-9223372036854775808L));
      Long long1 = new Long((-4294977962L));
      Long.toUnsignedString((-4294977962L));
      Long.getLong("", long1);
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("18446744069414573654");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.18446744069414573654
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.037385810820161
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      List<Range> list0 = range0.split(3866L);
      Object object0 = new Object();
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range0));
      
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("=ilLPl%^qF6s'&L4mY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.=ilLPl%^qF6s'&L4mY
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(1386L, 1386L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1386L, 1386L);
      Object object0 = new Object();
      range0.intersects(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0671455984789087
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 2147483647L);
      range0.getBegin();
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of((-128L), 2147483647L);
      range0.isSubRangeOf(range1);
      range0.equals(range_CoordinateSystem0);
      range1.equals(range0);
      range1.equals("[ -128 .. 2147483647 ]/SB");
      Range.CoordinateSystem.values();
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ -128 .. 2147483647 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ -128 .. 2147483647 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, (-250L), 9223372032559805151L);
      long long0 = range0.getBegin();
      assertEquals((-250L), long0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.9617334800189785
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.ofLength(3367L);
      range0.getLength();
      Range range1 = Range.of(1L, 3367L);
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertFalse(range_CoordinateSystemArray1.equals((Object)range_CoordinateSystemArray0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(435L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(4294967302L);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(7L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8244886549779107
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      String string0 = range0.toString();
      assertEquals("[ 2147483647 .. 2147483646 ]/0B", string0);
      
      range0.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483647L, long0);
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0206230017164564
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-32784L), (-32784L));
      Range range1 = Range.of((-32784L), (-1365L));
      Range.CoordinateSystem.values();
      range1.equals(range0);
      range1.getBegin();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(490L);
      Range range1 = Range.ofLength(490L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range range2 = range1.asRange();
      boolean boolean0 = range1.endsBefore(range2);
      assertFalse(boolean0);
      
      String string0 = range1.toString();
      assertSame(range1, range0);
      assertEquals("[ 0 .. 489 ]/0B", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Object object0 = new Object();
      range0.toString();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1 .. 0 ]/RB", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(1386L, 9223372036854772428L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      range0.equals(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.ofLength(3367L);
      range0.getLength();
      String string0 = range0.toString();
      assertEquals("[ 0 .. 3366 ]/0B", string0);
      
      Range range1 = Range.ofLength(9L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      long long0 = new Long(3367L);
      Range.Comparators.values();
      long long1 = new Long(9L);
      Object object0 = new Object();
      boolean boolean1 = range1.equals(object0);
      assertTrue(boolean1 == boolean0);
      
      Object object1 = new Object();
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      long long2 = range1.getEnd();
      assertEquals(6L, long2);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2958368660043296
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.isSubRangeOf(range0);
      range1.complement(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.parseRange("|kN=4-6vm*gJbD");
      range0.toString();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 4 .. 6 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 4 .. 6 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.9315463296622846
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range range0 = Range.of(1386L, 9223372036854772428L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(9223372036854772429L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1386L, 9223372036854772428L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.968952666853713
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(9223372036854774422L, 9223372036854774422L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854774422L, 9223372036854774422L);
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(9223372036854774422L, long0);
      
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long((-938L));
      Range range0 = Range.of(range_CoordinateSystem0, (-938L), (-938L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Long long0 = new Long((-938L));
      Range range0 = Range.of((-938L));
      Object object0 = new Object();
      range0.equals(range0);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.995732273553991
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(2062L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(2062L, long0);
      
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.7949796238706957
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      boolean boolean1 = range0.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483673L, 2147483673L);
      String string0 = range0.toString();
      assertEquals("[ 2147483673 .. 2147483672 ]/0B", string0);
      
      Object object0 = new Object();
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-85L));
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      long long0 = range0.getEnd();
      assertEquals((-9223372036854775808L), long0);
      
      Long.getLong(";-F? O'qz]");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 873L, 873L);
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(2147483646L);
      range0.equals((Object) null);
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854774423L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.058090416881859
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 436L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem.values();
      Range range1 = Range.of((-128L), 436L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.9689526668537134
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of(4294967322L, 9223372036854772445L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.spliterator();
      Long long0 = new Long(9223372036854772445L);
      range0.toString();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 4294967322 .. 9223372036854772446 ]/SB", string0);
      
      Range range1 = Range.of(range_CoordinateSystem0, 4294967322L, 9223372036854772445L);
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      long long1 = range0.getEnd();
      assertEquals(9223372036854772445L, long1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(1393L, 1412L);
      Range range1 = Range.of(1412L, 2086L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.961733480018979
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854774422L);
      Range range1 = Range.of(28L, 9223372036854774422L);
      range1.equals(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("o1Cku");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.o1Cku
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.1634240504234032
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(28L, 9223372036854774422L);
      range1.equals(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.772588722239781
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Object object0 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 435L, 435L);
      range0.equals(range_CoordinateSystem0);
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.013412304782512
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.iterator();
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      range1.iterator();
      Object object0 = new Object();
      boolean boolean0 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertFalse(boolean0);
      
      long long0 = range1.getBegin();
      assertEquals(4294967294L, long0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(2147483631L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483632 .. 2147483632 ]/RB", string0);
      
      range0.getEnd();
      range0.spliterator();
      range0.toString();
      range0.getEnd();
      Range.Comparators.values();
      range0.getLength();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      long long0 = range0.getEnd();
      assertEquals(2147483631L, long0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of((-32784L));
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-32784L));
      Range range1 = Range.of((-32784L));
      boolean boolean0 = range0.equals(range1);
      assertSame(range1, range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.toString();
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        range0.getEnd((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of(9223372036854774422L, 9223372036854774422L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854774422L, 9223372036854774422L);
      range1.equals(range0);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.890371757896165
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(2147483631L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertTrue(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854772445L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(4294967295L, 9223372036854772445L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("}`xN^g-!+b_L@^E");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.}`xN^g-!+b_L@^E
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.of(1386L, 9223372036854772453L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      long long0 = new Long(1386L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1386L, 9223372036854772453L);
      Object object1 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertNotSame(range1, range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.9689526668537134
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854772445L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.toString();
      Range range1 = Range.of(4294967295L, 9223372036854772445L);
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 4294967295 .. 9223372036854772445 ]/0B", string0);
      
      Range range2 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854772445L);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      assertSame(range0, range1);
      
      long long0 = range2.getBegin();
      assertFalse(range2.equals((Object)range0));
      assertEquals(4294967294L, long0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.0445224377234217
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 873L, 4294967314L);
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.332204510175204
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(2147483631L, 2147483631L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2147483631 .. 2147483632 ]/SB", string0);
      
      range0.getEnd();
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 2147483631 .. 2147483632 ]/SB", range_CoordinateSystem1);
      range1.toString();
      range0.isSubRangeOf(range0);
      range0.getEnd();
      Range.Comparators.values();
      range0.getLength();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      long long0 = range1.getEnd();
      assertNotSame(range1, range0);
      assertEquals(2147483631L, long0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4657359027997248
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(4294967322L, 4294967322L);
      range0.toString();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("h`4,3V-9r1", range_CoordinateSystem0);
      range0.complement(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.of(4294967303L, 9223372036854772445L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.toString();
      Range range1 = Range.of(4294967303L, 9223372036854772445L);
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 4294967303 .. 9223372036854772445 ]/0B", string0);
      
      Range range2 = Range.of(range_CoordinateSystem0, 4294967303L, 9223372036854772445L);
      range0.equals(range2);
      assertSame(range0, range1);
      
      long long0 = range2.getBegin();
      assertFalse(range2.equals((Object)range1));
      assertEquals(4294967302L, long0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.of(9223372036854774422L, 9223372036854774422L);
      Range range1 = Range.of(9223372036854774422L, 9223372036854774422L);
      range0.equals(range0);
      Range range2 = Range.of(9223372036854775380L, 9223372036854775380L);
      range2.getBegin();
      range1.equals(range2);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.8852759226135607
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(871L, 4294967260L);
      Range range1 = Range.of(range_CoordinateSystem0, 871L, 4294967260L);
      Range range2 = Range.of(range_CoordinateSystem0, 783L, 4294967260L);
      range1.equals(range0);
      Range.CoordinateSystem.values();
      Integer integer0 = new Integer(2130964543);
      range2.equals(integer0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Wa@[B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Wa@[B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.9227182066088235
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 873L, 4294967260L);
      Range range1 = Range.of(873L, 4294967260L);
      range1.equals(range0);
      Object object0 = new Object();
      range1.equals(object0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.9617334800189785
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getLength();
      range0.toString();
      range0.getLength();
      Range range1 = Range.of(214L, 2147483647L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 2147483646 ]/0B", string0);
      
      range1.equals(range0);
      assertFalse(range1.isEmpty());
      
      boolean boolean0 = range0.equals("[ 0 .. 2147483646 ]/0B");
      assertFalse(boolean0);
      
      Range.Comparators.values();
      range0.getEnd();
      long long0 = range0.getEnd();
      assertEquals(2147483646L, long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.637586159726386
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(9223372036854774422L, 9223372036854774422L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.toString();
      Range.of(0L);
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 9223372036854774423L);
      Range range2 = Range.ofLength(9223372036854774422L);
      range1.equals(range2);
      range1.iterator();
      Long long0 = new Long(0L);
      assertEquals(0L, (long)long0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.1354942159291497
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 9223372036854772445L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString();
      Range range1 = Range.of(4294967295L, 9223372036854772445L);
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 4294967295 .. 9223372036854772445 ]/0B", string0);
      
      Range range2 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372036854772445L);
      boolean boolean0 = range0.equals(range2);
      assertTrue(boolean0);
      
      long long0 = range0.getBegin();
      assertEquals(4294967295L, long0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.0910424533583143
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.842861043291371
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Long long0 = new Long(0L);
      Range range1 = Range.of(1L, (long) long0);
      Long long1 = Long.getLong((String) null, 0L);
      range1.equals(long1);
      range1.equals(range0);
      range1.equals(long0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.2580965380214835
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-128L), 2147483652L);
      range0.getBegin();
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of((-128L), 2147483652L);
      range0.isSubRangeOf(range1);
      range0.equals(range_CoordinateSystem0);
      range1.equals(range0);
      range1.equals("[ -128 .. 2147483652 ]/SB");
      Range.CoordinateSystem.values();
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ -128 .. 2147483652 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ -128 .. 2147483652 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.178053830347946
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(3192L, 9223372036854775026L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(3192L, 9223372034707292177L);
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.of(range_CoordinateSystem0, 1714L, 9223372036854775026L);
      range2.equals(range0);
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("j%p2_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.j%p2_
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.9728457116721207
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(")ZhvA}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.)ZhvA}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.401197381662154
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      Range range1 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.push(range0);
      range1.complementFrom(linkedList0);
      range1.intersects(range0);
      range1.toString();
      range0.intersects(range1);
      range1.getEnd();
      range1.intersection(range0);
      String string0 = "ms%G}7r7F>|tO6zG";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("ms%G}7r7F>|tO6zG");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.ms%G}7r7F>|tO6zG
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=2.9444389791664403
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Object object0 = new Object();
      range0.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 2147483648 .. 2147483647 ]/RB", string0);
      
      Range.Comparators.values();
      Range.Comparators.values();
      boolean boolean0 = range0.equals(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }
}
