/*
 * This file was automatically generated by EvoSuite
 * Thu Aug 23 13:15:56 GMT 2018
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JJTJavaParserState;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.48439011623800354
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.setIdentifier("=:");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(47);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "8j!UF~Vh;[*Rivtd");
      simpleNode0.dump("8j!UF~Vh;[*Rivtd", stringWriter0);
      simpleNode0.setIdentifier("4");
      StringWriter stringWriter2 = new StringWriter();
      StringReader stringReader0 = new StringReader("%a");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("8j!UF~Vh;[*Rivtd");
      stringReader0.close();
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "4");
      simpleNode0.dump("8j!UF~Vh;[*Rivtd", stringWriter3);
      StringWriter stringWriter4 = new StringWriter();
      simpleNode0.dump("=:", stringWriter1);
      JavaParser javaParser0 = new JavaParser(stringReader1);
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 47);
      simpleNode1.dump("&", stringWriter1);
      simpleNode0.dump("=:", stringWriter3);
      assertEquals("/8j!UF~Vh;[*Rivtd<InstanceOfExpression>\n  <identifier>=:</identifier>\n</InstanceOfExpression>\n4<InstanceOfExpression>\n  <identifier>=:</identifier>\n  <identifier>4</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>=:</identifier>\n  <identifier>4</identifier>\n</InstanceOfExpression>\n<InstanceOfExpression>\n  <identifier>=:</identifier>\n  <identifier>4</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6248603116943127
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3);
      simpleNode0.setIdentifier("case");
      simpleNode0.jjtClose();
      simpleNode0.setIdentifier("'b");
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("\"float\"");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      StringWriter stringWriter1 = new StringWriter(3);
      simpleNode0.jjtGetParent();
      simpleNode0.parent = null;
      stringWriter0.write((-1));
      stringWriter1.append((CharSequence) "'b");
      simpleNode0.dump("*lshft", stringWriter0);
      StringWriter stringWriter2 = new StringWriter(3);
      StringWriter stringWriter3 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(3);
      simpleNode1.dump("NullLiteral", stringWriter1);
      assertEquals("'b", stringWriter1.toString());
      
      simpleNode1.dump("'b", stringWriter2);
      assertEquals("", stringWriter2.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.33422114621338295
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3);
      simpleNode0.setIdentifier("C>");
      StringWriter stringWriter0 = new StringWriter(1823);
      StringWriter stringWriter1 = new StringWriter(1823);
      CharBuffer.wrap((CharSequence) "PGO:K1-%Jvj9?)ZX0");
      StringWriter stringWriter2 = new StringWriter(5);
      stringWriter1.flush();
      SimpleNode simpleNode1 = new SimpleNode(1823);
      simpleNode1.parent = (Node) simpleNode0;
      simpleNode1.dump("C>", stringWriter0);
      stringWriter0.append('\u001A');
      simpleNode0.dump("PGO:K1-%Jvj9?)ZX0", stringWriter0);
      simpleNode0.dump("2;m{3*&|W&))I<bN^", stringWriter1);
      assertEquals("<Modifiers>\n  <identifier>C></identifier>\n</Modifiers>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6816102690529531
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("");
      simpleNode0.toString();
      simpleNode0.setIdentifier("");
      simpleNode0.setIdentifier("--");
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("{");
      simpleNode0.dump(",4M!hV2y^8 ", stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) null, 0, 0);
      simpleNode0.dump("{", stringWriter1);
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>--</identifier>\n</CompilationUnit>\n<CompilationUnit>\n  <identifier>--</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5500569563964232
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-1696));
      simpleNode0.dump("%a", stringWriter0);
      stringWriter0.append((CharSequence) "%a");
      simpleNode0.setIdentifier("c-DT&4pK,/K%=JoO");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "c-DT&4pK,/K%=JoO");
      simpleNode0.dump("? ]@-+bgW}~", stringWriter0);
      stringWriter1.append((CharSequence) "%a");
      char[] charArray0 = new char[9];
      charArray0[0] = '2';
      charArray0[1] = '3';
      simpleNode0.jjtOpen();
      simpleNode0.dump(" !w;14^.J(Ga", stringWriter2);
      simpleNode0.dump("? ]@-+bgW}~", stringWriter2);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1667);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(1094);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6428579130907905
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      simpleNode0.setIdentifier("I!Wcd^2");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write(9);
      StringWriter stringWriter2 = stringWriter0.append('(');
      simpleNode0.dump("L ", stringWriter1);
      simpleNode0.setIdentifier(" b*QF*7.");
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.toString();
      StringWriter stringWriter4 = stringWriter1.append((CharSequence) "EnumBody : I!Wcd^2 :  b*QF*7.");
      simpleNode0.dump("I!Wcd^2", stringWriter2);
      simpleNode0.dump("\"}\"", stringWriter0);
      simpleNode0.dump("\"}\"", stringWriter2);
      simpleNode0.dump("EnumBody : I!Wcd^2 :  b*QF*7.", stringWriter1);
      simpleNode0.dump(" b*QF*7.", stringWriter4);
      assertEquals("\t<EnumBody>\n  <identifier>I!Wcd^2</identifier>\n</EnumBody>\nEnumBody : I!Wcd^2 :  b*QF*7.<EnumBody>\n  <identifier>I!Wcd^2</identifier>\n  <identifier> b*QF*7.</identifier>\n</EnumBody>\n<EnumBody>\n  <identifier>I!Wcd^2</identifier>\n  <identifier> b*QF*7.</identifier>\n</EnumBody>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.56930867810557
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.jjtAddChild((Node) null, 1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((-1696));
      simpleNode0.jjtAddChild((Node) null, 0);
      simpleNode0.dump("UF#r3!`^04\"", stringWriter0);
      simpleNode0.setIdentifier("I!Wcd^2");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter0.append((CharSequence) "c-DT&4pK,/K%=JoO");
      simpleNode0.dump("I!Wcd^2", stringWriter2);
      simpleNode0.dump("UF#r3!`^04\"", stringWriter0);
      simpleNode0.dump("catch", stringWriter2);
      assertEquals(2, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5138165375168556
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      simpleNode0.jjtAddChild((Node) null, 0);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringWriter0.write(142);
      simpleNode0.dump("%a", stringWriter0);
      simpleNode0.setIdentifier("--");
      StringWriter stringWriter1 = new StringWriter(27);
      simpleNode0.dump((String) null, stringWriter0);
      simpleNode0.dump("%a", stringWriter1);
      StringWriter stringWriter2 = new StringWriter(37);
      simpleNode0.dump("{", stringWriter1);
      SimpleNode simpleNode1 = new SimpleNode(37);
      simpleNode1.dump("*-", stringWriter0);
      simpleNode1.jjtSetParent(simpleNode0);
      assertEquals(1, simpleNode0.jjtGetNumChildren());
      
      simpleNode1.dump("         java JavaParser < inputfile", stringWriter0);
      simpleNode1.dump("][N`ya(vgCZj", stringWriter0);
      assertEquals("\u008E<NameList></NameList>\n<NameList>\n  <identifier>--</identifier>\n</NameList>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-2691));
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-2691));
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.7371823152157604
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.toString("\"super\"");
      simpleNode0.toString();
      simpleNode0.setIdentifier("=:");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "CompilationUnit");
      simpleNode0.setIdentifier("{");
      StringWriter stringWriter1 = new StringWriter();
      StringReader stringReader0 = new StringReader("*ge");
      stringReader0.close();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "CompilationUnit");
      simpleNode0.dump("\"super\"CompilationUnit", stringWriter2);
      StringWriter stringWriter3 = new StringWriter();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1308);
      JavaParser javaParser1 = new JavaParser(bufferedInputStream0);
      SimpleNode simpleNode1 = new SimpleNode(javaParser1, 0);
      simpleNode1.dump("\"super\"", stringWriter3);
      stringWriter3.append('9');
      simpleNode1.dump("\"super\"", stringWriter1);
      assertEquals("CompilationUnit<CompilationUnit>\n  <identifier>=:</identifier>\n</CompilationUnit>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('n');
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ">");
      stringWriter2.write((-1103827680));
      stringWriter2.write(1053);
      String string0 = "%a";
      // Undeclared exception!
      try { 
        simpleNode0.dump("HQ}K", stringWriter1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      simpleNode0.setIdentifier("&");
      CharBuffer.wrap((CharSequence) ">");
      StringWriter stringWriter0 = new StringWriter(47);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append('7');
      simpleNode0.dump("NameList", stringWriter1);
      assertEquals("<InstanceOfExpression>\n  <identifier>*amp</identifier>\n</InstanceOfExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3805062184775959
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.setIdentifier(">");
      CharBuffer.wrap((CharSequence) ">");
      StringWriter stringWriter0 = new StringWriter(41);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append('7');
      simpleNode0.dump("NameList", stringWriter1);
      assertEquals("7<NameList>\n  <identifier>*gt</identifier>\n</NameList>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.setIdentifier("$nd*lX4e8<");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(47);
      SystemInUtil.addInputLine("%a");
      simpleNode0.setIdentifier(">>");
      simpleNode0.setIdentifier("%a");
      StringWriter stringWriter1 = new StringWriter();
      StringReader stringReader0 = new StringReader("$nd*lX4e8<");
      stringWriter0.flush();
      simpleNode0.dump("$nd*lX4e8<", stringWriter1);
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump("QjW+93,M,", stringWriter2);
      simpleNode0.dump(">>", stringWriter0);
      assertEquals("/<InstanceOfExpression>\n  <identifier>$nd*lX4e8<</identifier>\n  <identifier>*rshft</identifier>\n  <identifier>%a</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.parent = (Node) simpleNode0;
      simpleNode0.jjtAddChild(simpleNode0, 111);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = (-1696);
      String string0 = "UF#r3!`\\^04\"";
      int int1 = 0;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode0, (-1696));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1696
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.setIdentifier("<=");
      StringWriter stringWriter0 = new StringWriter();
      StringReader stringReader0 = new StringReader("{");
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("{", stringWriter1);
      simpleNode0.dump(",4M!hV2y^8 ", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>*le</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      simpleNode0.setIdentifier(">");
      CharBuffer.wrap((CharSequence) ">");
      StringWriter stringWriter0 = new StringWriter(41);
      StringWriter stringWriter1 = new StringWriter();
      SimpleNode simpleNode1 = new SimpleNode(41);
      simpleNode1.dump("<<", stringWriter0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode1.identifiers = arrayList0;
      StringWriter stringWriter2 = new StringWriter(41);
      simpleNode1.dump("<<", stringWriter0);
      arrayList0.add("<<");
      simpleNode1.dump("?Q)TN m.uDcJ", stringWriter1);
      assertEquals("<ConditionalOrExpression>\n  <identifier>*lshft</identifier>\n</ConditionalOrExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(37);
      SimpleNode simpleNode1 = new SimpleNode(3496);
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.setIdentifier(";");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("%a", stringWriter0);
      simpleNode0.dump(";", stringWriter0);
      // Undeclared exception!
      try { 
        simpleNode0.dump("EnumConstant", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      String string0 = "}";
      simpleNode0.setIdentifier("}");
      String string1 = "PGO:K1-%Jvj9?)ZX0";
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.append((CharSequence) "PGO:K1-%Jvj9?)ZX0");
      String string2 = "_`H1l`FF";
      simpleNode0.setIdentifier("_`H1l`FF");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append((CharSequence) "_`H1l`FF");
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "}");
      // Undeclared exception!
      try { 
        simpleNode0.dump("_`H1l`FF", stringWriter2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(47);
      simpleNode0.dump("$nd*lX4e8<", stringWriter0);
      simpleNode0.setIdentifier(">=");
      simpleNode0.dump("--", stringWriter0);
      stringWriter0.close();
      simpleNode0.dump("Dqq)w8d", stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      assertEquals("", stringWriter1.toString());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.setIdentifier("$nd*lX4e8<");
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.setIdentifier("<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("$nd*lX4e8<", stringWriter0);
      assertEquals("<InstanceOfExpression>\n  <identifier>$nd*lX4e8<</identifier>\n  <identifier>*lt</identifier>\n</InstanceOfExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-94);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(47);
      simpleNode0.jjtAddChild((Node) null, 47);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleNode0.setIdentifier("&&");
      simpleNode0.dump("*-", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode((-2050));
      simpleNode1.dump(" ", stringWriter0);
      simpleNode0.dump("&&", stringWriter0);
      assertEquals(48, simpleNode0.jjtGetNumChildren());
  }
}
